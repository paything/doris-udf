{"version":3,"sources":["../src/component/label/base-label.ts"],"names":[],"mappings":";;;AAAA,2DAAuD;AAGvD,4CAAsD;AAGtD,kDAAqD;AAIrD,6CAA2C;AAG3C,MAAsB,kBAA4B,SAAQ,8BAAgB;IAQxE,YAAY,IAAO,EAAE,OAAyB;QAC5C,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAPvB,SAAI,GAAG,wBAAiB,CAAC,KAAK,CAAC;QAC/B,SAAI,GAAW,wBAAiB,CAAC,KAAK,CAAC;QAEvC,eAAU,GAAW,MAAM,CAAC;QAC5B,iBAAY,GAAW,qBAAY,CAAC,KAAK,CAAC;QAIxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACnE,CAAC;IAES,kBAAkB,CAAC,SAAqB;QAChD,MAAM,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC;QAClC,MAAM,MAAM,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC;QACvE,IAAI,WAAW,KAAK,IAAI,EAAE;YACxB,OAAO,MAAM,CAAC;SACf;QAED,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,CAAC;QAC5D,IAAI,KAAK,KAAK,KAAK,IAAK,KAA+B,CAAC,MAAM,KAAK,KAAK,EAAE;YACxE,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;SACrB;QACD,IAAI,MAAM,KAAK,KAAK,IAAK,MAAiC,CAAC,MAAM,KAAK,KAAK,EAAE;YAC3E,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;SACtB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAGD,YAAY,CAAC,IAAO,EAAE,QAAW;QAC/B,MAAM,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,IAAA,gBAAO,EAAC,QAAQ,EAAE,IAAI,CAAC,EAAE;YAC5B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;SACtB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,QAAQ,CAAC,GAAuB;IAEhC,CAAC;IACD,aAAa,CAAC,OAAkB;IAEhC,CAAC;IACS,8BAA8B;QACtC,OAAO,EAAE,CAAC;IACZ,CAAC;;AAjDH,gDAkDC;AAjDQ,uBAAI,GAAG,wBAAiB,CAAC,KAAK,CAAC","file":"base-label.js","sourcesContent":["import { BaseComponent } from '../base/base-component';\nimport type { IComponentOption } from '../interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { ComponentTypeEnum } from '../interface/type';\nimport type { IRegion } from '../../region/interface';\nimport type { IModelRenderOption } from '../../model/interface';\nimport { LayoutZIndex } from '../../constant/layout';\nimport type { ILabelSpec } from './interface';\nimport type { IHoverSpec, ISelectSpec } from '../../interaction/interface';\nimport type { LooseFunction } from '@visactor/vutils';\nimport { isEqual } from '@visactor/vutils';\nimport type { IGraphic, IGroup } from '@visactor/vrender-core';\n\nexport abstract class BaseLabelComponent<T = any> extends BaseComponent<T> {\n  static type = ComponentTypeEnum.label;\n  type = ComponentTypeEnum.label;\n  name: string = ComponentTypeEnum.label;\n\n  layoutType: 'none' = 'none';\n  layoutZIndex: number = LayoutZIndex.Label;\n\n  constructor(spec: T, options: IComponentOption) {\n    super(spec, options);\n    this._regions = options.getRegionsInIndex(options.regionIndexes);\n  }\n\n  protected _interactiveConfig(labelSpec: ILabelSpec) {\n    const { interactive } = labelSpec;\n    const result = { hover: false, select: false, state: labelSpec.state };\n    if (interactive !== true) {\n      return result;\n    }\n\n    const { hover, select } = this._option.getChart().getSpec();\n    if (hover !== false || (hover as unknown as IHoverSpec).enable !== false) {\n      result.hover = true;\n    }\n    if (select !== false || (select as unknown as ISelectSpec).enable !== false) {\n      result.select = true;\n    }\n    return result;\n  }\n\n  /** Update API **/\n  _compareSpec(spec: T, prevSpec: T) {\n    const result = super._compareSpec(spec, prevSpec);\n    result.reRender = true;\n    if (!isEqual(prevSpec, spec)) {\n      result.reMake = true;\n    }\n\n    return result;\n  }\n\n  onRender(ctx: IModelRenderOption): void {\n    // do nothing\n  }\n  changeRegions(regions: IRegion[]): void {\n    // do nothing\n  }\n  protected _getNeedClearVRenderComponents(): IGraphic[] {\n    return [];\n  }\n}\n"]}