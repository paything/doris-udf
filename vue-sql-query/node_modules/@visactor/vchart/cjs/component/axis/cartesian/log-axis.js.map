{"version":3,"sources":["../src/component/axis/cartesian/log-axis.ts"],"names":[],"mappings":";;;AAAA,+CAAoD;AACpD,+CAAyD;AACzD,kEAA6D;AAC7D,6CAA4C;AAC5C,6CAAyC;AAEzC,mDAAgD;AAChD,4CAA4C;AAC5C,2DAA6E;AAC7E,qEAA+D;AAC/D,qDAA0E;AAM1E,MAAa,gBAA0E,SAAQ,iCAAsB;IAArH;;QAEE,SAAI,GAAG,wBAAiB,CAAC,gBAAgB,CAAC;QAIhC,UAAK,GAAY,KAAK,CAAC;QAEvB,WAAM,GAAa,IAAI,iBAAQ,EAAE,CAAC;IAsB9C,CAAC;IAhBW,UAAU;;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAA,IAAI,CAAC,KAAK,CAAC,IAAI,mCAAI,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAES,sBAAsB;QAC9B,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC;QAClC,IAAA,2CAAgC,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,oCAAe,CAAC,CAAC;QAE9E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oBAAoB;IAEpB,CAAC;;AA7BH,4CA8BC;AA7BQ,qBAAI,GAAG,wBAAiB,CAAC,gBAAgB,CAAC;AAG1C,wBAAO,GAAG,MAAM,CAAC;AA4B1B,IAAA,cAAK,EAAC,gBAAgB,EAAE,mCAAe,CAAC,CAAC;AAElC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,IAAA,gCAAgB,GAAE,CAAC;IACnB,IAAA,gCAAgB,GAAE,CAAC;IACnB,IAAA,wBAAY,GAAE,CAAC;IACf,iBAAO,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACrE,CAAC,CAAC;AALW,QAAA,wBAAwB,4BAKnC","file":"log-axis.js","sourcesContent":["import { CartesianLinearAxis } from './linear-axis';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport { LogScale } from '@visactor/vscale';\nimport { mixin } from '@visactor/vutils';\nimport type { ICartesianLogAxisSpec } from './interface';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\nimport { registerLineAxis, registerLineGrid } from '@visactor/vgrammar-core';\nimport { continuousTicks } from '@visactor/vrender-components';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\n\nexport interface CartesianLogAxis<T extends ICartesianLogAxisSpec = ICartesianLogAxisSpec>\n  extends Pick<LinearAxisMixin, 'valueToPosition'>,\n    CartesianLinearAxis<T> {}\n\nexport class CartesianLogAxis<T extends ICartesianLogAxisSpec = ICartesianLogAxisSpec> extends CartesianLinearAxis<T> {\n  static type = ComponentTypeEnum.cartesianLogAxis;\n  type = ComponentTypeEnum.cartesianLogAxis;\n\n  static specKey = 'axes';\n\n  protected _zero: boolean = false;\n\n  protected _scale: LogScale = new LogScale();\n  protected declare _scales: LogScale[];\n\n  /**\n   * @override\n   */\n  protected initScales() {\n    super.initScales();\n    this._scale.base(this._spec.base ?? 10);\n    this._scale.clamp(true, null, false);\n  }\n\n  protected registerTicksTransform() {\n    const name = `${this.type}-ticks`;\n    registerDataSetInstanceTransform(this._option.dataSet, name, continuousTicks);\n\n    return name;\n  }\n\n  transformScaleDomain() {\n    // do nothing\n  }\n}\n\nmixin(CartesianLogAxis, LinearAxisMixin);\n\nexport const registerCartesianLogAxis = () => {\n  registerLineAxis();\n  registerLineGrid();\n  registerAxis();\n  Factory.registerComponent(CartesianLogAxis.type, CartesianLogAxis);\n};\n"]}