{"version":3,"sources":["../src/component/axis/polar/linear-axis.ts"],"names":[],"mappings":";;;AAAA,6CAA+C;AAC/C,+CAAyD;AACzD,iCAAmC;AAEnC,kEAA6D;AAC7D,6CAAyC;AACzC,mDAAgD;AAChD,4CAA4C;AAE5C,2DAAqH;AACrH,qEAA+D;AAC/D,qDAA0E;AAc1E,MAAa,eAAuE,SAAQ,gBAAY;IAAxG;;QAEE,SAAI,GAAG,wBAAiB,CAAC,eAAe,CAAC;QAI/B,UAAK,GAAY,IAAI,CAAC;QACtB,UAAK,GAAY,IAAI,CAAC;QACtB,YAAO,GAA8B,EAAE,CAAC;QAExC,WAAM,GAAG,IAAI,oBAAW,EAAE,CAAC;IA6BvC,CAAC;IA1BC,eAAe;QACb,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC9B,CAAC;IAES,UAAU;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAES,aAAa,CAAC,IAAmD;QACzE,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAES,UAAU;QAClB,MAAM,MAAM,GAAqB,KAAK,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,OAAO,MAAa,CAAC;IACvB,CAAC;IAES,sBAAsB;QAC9B,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC;QAClC,IAAA,2CAAgC,EAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,oCAAe,CAAC,CAAC;QAE9E,OAAO,IAAI,CAAC;IACd,CAAC;;AAtCH,0CAuCC;AAtCQ,oBAAI,GAAG,wBAAiB,CAAC,eAAe,CAAC;AAGzC,uBAAO,GAAG,MAAM,CAAC;AAqC1B,IAAA,cAAK,EAAC,eAAe,EAAE,mCAAe,CAAC,CAAC;AAEjC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,IAAA,gCAAgB,GAAE,CAAC;IACnB,IAAA,gCAAgB,GAAE,CAAC;IACnB,IAAA,kCAAkB,GAAE,CAAC;IACrB,IAAA,kCAAkB,GAAE,CAAC;IACrB,IAAA,wBAAY,GAAE,CAAC;IACf,iBAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;AACnE,CAAC,CAAC;AAPW,QAAA,uBAAuB,2BAOlC","file":"linear-axis.js","sourcesContent":["import { LinearScale } from '@visactor/vscale';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { PolarAxis } from './axis';\nimport type { IPolarLinearAxisSpec } from './interface/spec';\nimport { LinearAxisMixin } from '../mixin/linear-axis-mixin';\nimport { mixin } from '@visactor/vutils';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\nimport type { IPolarAxisHelper } from './interface';\nimport { registerLineAxis, registerLineGrid, registerCircleAxis, registerCircleGrid } from '@visactor/vgrammar-core';\nimport { continuousTicks } from '@visactor/vrender-components';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\n\nexport interface PolarLinearAxis<T extends IPolarLinearAxisSpec = IPolarLinearAxisSpec>\n  extends Pick<\n      LinearAxisMixin,\n      | 'setExtraAttrFromSpec'\n      | 'transformScaleDomain'\n      | 'valueToPosition'\n      | 'computeLinearDomain'\n      | 'setScaleNice'\n      | 'setExtendDomain'\n    >,\n    PolarAxis<T> {}\n\nexport class PolarLinearAxis<T extends IPolarLinearAxisSpec = IPolarLinearAxisSpec> extends PolarAxis<T> {\n  static type = ComponentTypeEnum.polarLinearAxis;\n  type = ComponentTypeEnum.polarLinearAxis;\n\n  static specKey = 'axes';\n\n  protected _zero: boolean = true;\n  protected _nice: boolean = true;\n  protected _extend: { [key: string]: number } = {};\n\n  protected _scale = new LinearScale();\n  protected declare _groupScales: LinearScale[];\n\n  setAttrFromSpec(): void {\n    super.setAttrFromSpec();\n    this.setExtraAttrFromSpec();\n  }\n\n  protected initScales() {\n    super.initScales();\n    this.setScaleNice();\n  }\n\n  protected computeDomain(data: { min: number; max: number; values: any[] }[]): number[] {\n    return this.computeLinearDomain(data);\n  }\n\n  protected axisHelper() {\n    const helper: IPolarAxisHelper = super.axisHelper();\n    helper.setExtendDomain = this.setExtendDomain.bind(this);\n    return helper as any;\n  }\n\n  protected registerTicksTransform() {\n    const name = `${this.type}-ticks`;\n    registerDataSetInstanceTransform(this._option.dataSet, name, continuousTicks);\n\n    return name;\n  }\n}\n\nmixin(PolarLinearAxis, LinearAxisMixin);\n\nexport const registerPolarLinearAxis = () => {\n  registerLineAxis();\n  registerLineGrid();\n  registerCircleAxis();\n  registerCircleGrid();\n  registerAxis();\n  Factory.registerComponent(PolarLinearAxis.type, PolarLinearAxis);\n};\n"]}