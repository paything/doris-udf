{"version":3,"sources":["../src/component/crosshair/utils/common.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import type { Tag } from '@visactor/vrender-components';\nimport type { IBoundsLike } from '@visactor/vutils';\nimport type { Datum } from '../../../typings';\nimport type { ICrosshairTheme } from '../interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { array, isValid } from '@visactor/vutils';\nimport { isXAxis, isYAxis } from '../../axis/cartesian/util/common';\nimport { isDiscrete } from '@visactor/vscale';\nimport type { ICartesianAxisCommonSpec, IPolarAxisCommonSpec } from '../../axis';\nimport { getComponentThemeFromOption } from '../../util';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport type { ITheme } from '../../../theme';\nimport { isDiscreteAxis } from '../../axis/util';\nimport { mergeSpec } from '@visactor/vutils-extension';\n\nexport function limitTagInBounds(shape: Tag, bounds: IBoundsLike) {\n  const { x1: regionMinX, y1: regionMinY, x2: regionMaxX, y2: regionMaxY } = bounds;\n  const { x1, y1, x2, y2 } = shape.AABBBounds;\n  const { dx: originDx = 0, dy: originDy = 0 } = shape.attribute;\n\n  let dx = 0;\n  let dy = 0;\n  if (x1 < regionMinX) {\n    // 超出左侧\n    dx = regionMinX - x1;\n  }\n  if (y1 < regionMinY) {\n    // 超出顶部\n    dy = regionMinY - y1;\n  }\n\n  if (x2 > regionMaxX) {\n    // 超出右侧\n    dx = regionMaxX - x2;\n  }\n\n  if (y2 > regionMaxY) {\n    // 整体超出顶部\n    dy = regionMaxY - y2;\n  }\n  if (dx) {\n    shape.setAttribute('dx', dx + originDx);\n  }\n  if (dy) {\n    shape.setAttribute('dy', dy + originDy);\n  }\n}\n\n/**\n * 查找系列中的数据\n * @todo 待重构优化，和 `getDimensionData` 中的逻辑存在重合\n * @param data 系列数据\n * @param value 数据值\n * @param startField 开始值对应的字段\n * @param endField   结束值对应的字段\n * @returns 系列数据\n */\nexport function getDatumByValue(data: Datum[], value: number, startField: string, endField?: string): Datum | null {\n  for (let i = 0, len = data.length; i < len; i++) {\n    const record = data[i];\n\n    if (record) {\n      const startValue = record[startField];\n      const endValue = record[endField || startField];\n\n      if (startValue <= value && endValue >= value) {\n        return record;\n      }\n    }\n  }\n\n  return null;\n}\n\nexport const getCartesianCrosshairTheme = (chartTheme: ITheme, chartSpec: any): ICrosshairTheme => {\n  const axes: ICartesianAxisCommonSpec[] = array(chartSpec.axes ?? []);\n  const { bandField, linearField, xField, yField } =\n    getComponentThemeFromOption(ComponentTypeEnum.crosshair, chartTheme) ?? {};\n\n  const xAxis = axes.find(axis => isXAxis(axis.orient));\n  let newXField;\n  if (isValid(xAxis)) {\n    newXField = mergeSpec({}, isDiscreteAxis(xAxis.type) ? bandField : linearField, xField);\n  } else {\n    newXField = xField;\n  }\n\n  const yAxis = axes.find(axis => isYAxis(axis.orient));\n  let newYField;\n  if (isValid(yAxis)) {\n    newYField = mergeSpec({}, isDiscrete(yAxis.type) ? bandField : linearField, yField);\n  } else {\n    newYField = yField;\n  }\n\n  return {\n    xField: newXField,\n    yField: newYField\n  };\n};\n\nexport const getPolarCrosshairTheme = (chartTheme: ITheme, chartSpec: any): ICrosshairTheme => {\n  const axes: IPolarAxisCommonSpec[] = array(chartSpec.axes ?? []);\n  const { bandField, linearField, categoryField, valueField } =\n    getComponentThemeFromOption(ComponentTypeEnum.crosshair, chartTheme) ?? {};\n\n  const angleAxis = axes.find(axis => axis.orient === 'angle');\n  let newAngleField;\n  if (isValid(angleAxis)) {\n    newAngleField = mergeSpec({}, isDiscreteAxis(angleAxis.type) ? bandField : linearField, categoryField);\n  } else {\n    newAngleField = categoryField;\n  }\n\n  const radiusAxis = axes.find(axis => axis.orient === 'radius');\n  let newRadiusField;\n  if (isValid(radiusAxis)) {\n    newRadiusField = mergeSpec({}, isDiscrete(radiusAxis.type) ? bandField : linearField, valueField);\n  } else {\n    newRadiusField = valueField;\n  }\n\n  return {\n    categoryField: newAngleField,\n    valueField: newRadiusField\n  };\n};\n"]}