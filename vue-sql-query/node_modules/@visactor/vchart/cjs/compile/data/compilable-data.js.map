{"version":3,"sources":["../src/compile/data/compilable-data.ts"],"names":[],"mappings":";;;AAEA,kDAA8C;AAE9C,0CAAwC;AAIxC,kEAA2D;AAE3D,MAAa,cAAe,SAAQ,0BAAW;IAO7C,WAAW;QACT,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACD,WAAW,CAAC,CAAY;QACtB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACjB,CAAC;IACD,aAAa;;QACX,OAAO,MAAA,IAAI,CAAC,KAAK,0CAAE,UAAU,CAAC;IAChC,CAAC;IAED,YAAY,MAA6B,EAAE,QAAmB;QAC5D,KAAK,CAAC,MAAM,CAAC,CAAC;QAjBP,gBAAW,GAAG,6BAAW,CAAC,IAAI,CAAC;QAK9B,UAAK,GAAoB,IAAI,CAAC;QAatC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IACxB,CAAC;IAED,OAAO;QACL,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAGD,UAAU,CAAC,QAAkB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAClC,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACrB,IAAI,CAAC,QAAQ,EAAE;gBAEb,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,cAAc,EAAE,CAAC;aAC5C;SACF;QACD,OAAO;IACT,CAAC;IAES,eAAe;QACvB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAClC,IAAI,IAAA,YAAK,EAAC,IAAI,CAAC,EAAE;YACf,OAAO;SACR;QACD,IAAI,IAAA,YAAK,EAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACzB;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC5B;IACH,CAAC;IAGS,YAAY,CAAC,IAAW;;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YAClB,OAAO;SACR;QAED,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,qDAAG,IAAI,CAAC,0CAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3C,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;IAED,iBAAiB;;QACf,OAAO,GAAG,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,IAAI,EAAE,CAAC;IACvC,CAAC;IAES,cAAc,CAAC,EAAU;;QACjC,OAAO,MAAA,MAAA,IAAI,CAAC,WAAW,EAAE,CAAC,eAAe,EAAE,0CAAE,WAAW,mDAAG,EAAE,CAAC,CAAC;IACjE,CAAC;CACF;AAxED,wCAwEC","file":"compilable-data.js","sourcesContent":["import type { DataView } from '@visactor/vdataset';\nimport type { IData as IVGrammarData } from '@visactor/vgrammar-core';\nimport { GrammarItem } from '../grammar-item';\nimport type { Maybe } from '../../typings';\nimport { isNil } from '../../util/type';\nimport type { ICompilableData } from './interface';\nimport type { GrammarItemInitOption } from '../interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { GrammarType } from '../interface/compilable-item';\n\nexport class CompilableData extends GrammarItem implements ICompilableData {\n  readonly grammarType = GrammarType.data;\n  protected declare _product: Maybe<IVGrammarData>;\n  declare getProduct: () => Maybe<IVGrammarData>;\n\n  /** 原始DataView */\n  protected _data: Maybe<DataView> = null;\n  getDataView() {\n    return this._data;\n  }\n  setDataView(d?: DataView) {\n    this._data = d;\n  }\n  getLatestData() {\n    return this._data?.latestData;\n  }\n\n  constructor(option: GrammarItemInitOption, dataView?: DataView) {\n    super(option);\n    this._data = dataView;\n  }\n\n  release() {\n    super.release();\n    this._data = null;\n  }\n\n  /** 更新数据并默认重新渲染 */\n  updateData(noRender?: boolean) {\n    const product = this.getProduct();\n    const data = this.getLatestData();\n    if (product && data) {\n      product.values(data);\n      if (!noRender) {\n        // 将实际的 dataflow 推迟到下一次异步操作，以避免同步的数据更新内容被忽略\n        return this.getCompiler().renderNextTick();\n      }\n    }\n    return;\n  }\n\n  protected _compileProduct() {\n    const data = this.getLatestData();\n    if (isNil(data)) {\n      return;\n    }\n    if (isNil(this.getProduct())) {\n      this._initProduct(data);\n    } else {\n      this._product.values(data);\n    }\n  }\n\n  /** 创建语法元素对象 */\n  protected _initProduct(data: any[]) {\n    const view = this.getVGrammarView();\n    if (!view || !data) {\n      return;\n    }\n\n    const id = this.getProductId();\n    this._product = view?.data?.(data)?.id(id);\n    this._compiledProductId = id;\n  }\n\n  generateProductId(): string {\n    return `${this.getDataView()?.name}`;\n  }\n\n  protected _lookupGrammar(id: string) {\n    return this.getCompiler().getVGrammarView()?.getDataById?.(id);\n  }\n}\n"]}