{"version":3,"sources":["../src/compile/signal/signal-manager.ts"],"names":[],"mappings":";;;AACA,2DAAuD;AACvD,wDAAoD;AAEpD,MAAa,aAAc,SAAQ,gCAAc;IAAjD;;QAEY,eAAU,GAA0C,EAAE,CAAC;IAgCnE,CAAC;IA/BC,YAAY;QACV,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,SAAS,CAAC,IAAY;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAGD,YAAY,CAAC,IAAY,EAAE,KAAU,EAAE,UAAoC;QACzE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAC1B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,oCAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;YACpF,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC;SACjC;aAAM;YACL,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;SACvD;IACH,CAAC;IAED,OAAO;QACL,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9C,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,KAAK,CAAC,OAAO,EAAE,CAAC;QAEhB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9C,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;CACF;AAlCD,sCAkCC","file":"signal-manager.js","sourcesContent":["import type { SignalFunctionType } from '@visactor/vgrammar-core';\nimport { CompilableSignal } from './compilable-signal';\nimport { CompilableBase } from '../compilable-base';\n\nexport class SignalManager extends CompilableBase {\n  /** signal map */\n  protected _signalMap: Record<string, CompilableSignal<any>> = {};\n  getSignalMap() {\n    return this._signalMap;\n  }\n  getSignal(name: string) {\n    return this._signalMap[name];\n  }\n\n  /** 增加或更新 signal */\n  updateSignal(name: string, value: any, updateFunc?: SignalFunctionType<any>) {\n    if (!this._signalMap[name]) {\n      this._signalMap[name] = new CompilableSignal(this._option, name, value, updateFunc);\n      this._signalMap[name].compile();\n    } else {\n      this._signalMap[name].updateSignal(value, updateFunc);\n    }\n  }\n\n  compile() {\n    Object.values(this._signalMap).forEach(signal => {\n      signal.compile();\n    });\n  }\n\n  release() {\n    super.release();\n\n    Object.values(this._signalMap).forEach(signal => {\n      signal.release();\n    });\n    this._signalMap = {};\n  }\n}\n"]}