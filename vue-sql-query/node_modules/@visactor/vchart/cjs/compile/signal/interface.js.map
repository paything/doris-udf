{"version":3,"sources":["../src/compile/signal/interface.ts"],"names":[],"mappings":"","file":"interface.js","sourcesContent":["import type { SignalFunctionType } from '@visactor/vgrammar-core';\nimport type { Maybe } from '../../typings';\nimport type { IGrammarItem, ICompilableInitOption } from '../interface';\n\nexport interface IStateManagerOption extends ICompilableInitOption {\n  stateKeyToSignalName?: (key: string) => string;\n}\n\nexport type StateValueMap = Record<string, unknown>;\n\nexport interface ICompilableSignal<T> extends IGrammarItem {\n  updateSignal: (value?: T, updateFunc?: SignalFunctionType<T>) => void;\n  getValue: () => Maybe<T>;\n  getUpdateFunc: () => Maybe<SignalFunctionType<T>>;\n}\n"]}