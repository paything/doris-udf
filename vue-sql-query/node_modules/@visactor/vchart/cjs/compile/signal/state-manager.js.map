{"version":3,"sources":["../src/compile/signal/state-manager.ts"],"names":[],"mappings":";;;AAAA,6CAAyC;AAEzC,qDAAiD;AAGjD,MAAa,YAAa,SAAQ,8BAAa;IAE7C,WAAW;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAGS,mBAAmB;QAC3B,OAAO,EAAE,CAAC;IACZ,CAAC;IAKD,YAAY,MAA2B;QACrC,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,MAAM,CAAC,oBAAoB,EAAE;YAC/B,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC;SACzD;aAAM;YACL,IAAI,CAAC,oBAAoB,GAAG,GAAG,EAAE,CAAC,cAAc,CAAC;SAClD;QACD,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAGD,YAAY,CAAC,KAAqB;QAChC,IAAI,CAAC,SAAS,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACvD,CAAC;IAED,OAAO,CAAC,QAAwB;QAC9B,MAAM,KAAK,GAAG,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,IAAI,CAAC,SAAS,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;YAC5C,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAGD,WAAW,CAAC,QAAgC,EAAE,QAAkB;QAC9D,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QACD,IAAA,cAAK,EAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEhC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEvB,IAAI,QAAQ,EAAE;YACZ,OAAO;SACR;QACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,cAAc,EAAE,CAAC;IAC7C,CAAC;CACF;AApDD,oCAoDC","file":"state-manager.js","sourcesContent":["import { merge } from '@visactor/vutils';\nimport type { IStateManagerOption, StateValueMap } from './interface';\nimport { SignalManager } from './signal-manager';\n\n/** 状态管理器，由 SignalManager 继承而来，管理所有和状态相关的 signal */\nexport class StateManager extends SignalManager {\n  protected _stateMap: StateValueMap;\n  getStateMap() {\n    return this._stateMap;\n  }\n\n  /** 默认 state map */\n  protected _getDefaultStateMap(): StateValueMap {\n    return {};\n  }\n\n  /** state key 转为 signal name */\n  protected stateKeyToSignalName: (key: string) => string;\n\n  constructor(option: IStateManagerOption) {\n    super(option);\n    if (option.stateKeyToSignalName) {\n      this.stateKeyToSignalName = option.stateKeyToSignalName;\n    } else {\n      this.stateKeyToSignalName = () => 'state_signal';\n    }\n    this.initStateMap();\n  }\n\n  /** 初始化 state map */\n  initStateMap(state?: StateValueMap) {\n    this._stateMap = state ?? this._getDefaultStateMap();\n  }\n\n  compile(stateMap?: StateValueMap) {\n    const state = stateMap ?? this._stateMap;\n    Object.keys(state).forEach(key => {\n      const name = this.stateKeyToSignalName(key);\n      const value = state[key];\n      this.updateSignal(name, value);\n    });\n  }\n\n  /** 更新 state 并默认触发重渲染 */\n  updateState(newState: Partial<StateValueMap>, noRender?: boolean) {\n    if (!newState) {\n      return;\n    }\n    merge(this._stateMap, newState);\n\n    this.compile(newState);\n\n    if (noRender) {\n      return;\n    }\n    return this.getCompiler().renderNextTick();\n  }\n}\n"]}