{"version":3,"sources":["../src/series/sunburst/animation/exit.ts"],"names":[],"mappings":";;;AAGA,mCAA6D;AAC7D,6CAA0D;AAE1D,MAAM,sBAAsB,GAAG,CAAC,QAAoB,EAAoB,EAAE;IACxE,MAAM,aAAa,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpG,MAAM,WAAW,GAAG,IAAA,mBAAU,EAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChG,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AACtC,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,CAAC,MAAgC,EAAwB,EAAE;IACrF,OAAO;QACL,OAAO,EAAE;YACP,UAAU,EAAE;gBACV,IAAI,EAAE,CAAC,EAAS,EAAE,OAAiB,EAAE,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC;gBACxF,EAAE,EAAE,CAAC,EAAS,EAAE,OAAiB,EAAE,EAAE;oBACnC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBAExD,MAAM,aAAa,GAAG,IAAA,4BAAoB,EAAC,OAAO,CAAC,CAAC;oBAEpD,MAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAEpD,MAAM,KAAK,GAAG,IAAA,oBAAY,EAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;oBACpF,OAAO,KAAK,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;gBACtD,CAAC;aACF;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,CAAC,EAAS,EAAE,OAAiB,EAAE,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,EAAE,KAAK,CAAC;gBACtF,EAAE,EAAE,CAAC,EAAS,EAAE,OAAiB,EAAE,EAAE;oBACnC,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;oBAExD,MAAM,aAAa,GAAG,IAAA,4BAAoB,EAAC,OAAO,CAAC,CAAC;oBAEpD,MAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,CAAC;oBAEpD,MAAM,KAAK,GAAG,IAAA,oBAAY,EAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;oBAClF,OAAO,KAAK,GAAG,CAAC,QAAQ,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;gBACtD,CAAC;aACF;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,CAAC,EAAS,EAAE,OAAiB,EAAE,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,aAAa,EAAE,KAAK,CAAC;gBACzF,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,WAAW;aAC7C;YACD,WAAW,EAAE;gBACX,IAAI,EAAE,CAAC,EAAS,EAAE,OAAiB,EAAE,EAAE,CAAC,OAAO,CAAC,mBAAmB,CAAC,aAAa,EAAE,KAAK,CAAC;gBACzF,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,WAAW;aAC7C;SACF;KACF,CAAC;AACJ,CAAC,CAAC;AAvCW,QAAA,YAAY,gBAuCvB","file":"exit.js","sourcesContent":["import type { IAnimationTypeConfig, IElement } from '@visactor/vgrammar-core';\nimport type { ISunburstAnimationParams } from './interface';\nimport type { Datum } from '../../../typings';\nimport { computeRatio, getInnerMostElements } from './utils';\nimport { maxInArray, minInArray } from '@visactor/vutils';\n\nconst computeInnerAngleRange = (elements: IElement[]): [number, number] => {\n  const minStartAngle = minInArray(elements.map(m => m.getGraphicAttribute('startAngle', false) * 1));\n  const maxEndAngle = maxInArray(elements.map(m => m.getGraphicAttribute('endAngle', false) * 1));\n  return [minStartAngle, maxEndAngle];\n};\n\nexport const sunburstExit = (params: ISunburstAnimationParams): IAnimationTypeConfig => {\n  return {\n    channel: {\n      startAngle: {\n        from: (_d: Datum, element: IElement) => element.getGraphicAttribute('startAngle', false),\n        to: (_d: Datum, element: IElement) => {\n          const { startAngle, endAngle } = params.animationInfo();\n          // 得到最内层的elements.\n          const innerElements = getInnerMostElements(element);\n          // 计算range\n          const range = computeInnerAngleRange(innerElements);\n          // 计算比例\n          const ratio = computeRatio(element.getGraphicAttribute('startAngle', false), range);\n          return ratio * (endAngle - startAngle) + startAngle;\n        }\n      },\n      endAngle: {\n        from: (_d: Datum, element: IElement) => element.getGraphicAttribute('endAngle', false),\n        to: (_d: Datum, element: IElement) => {\n          const { startAngle, endAngle } = params.animationInfo();\n          // 得到最内层的elements.\n          const innerElements = getInnerMostElements(element);\n          // 计算range\n          const range = computeInnerAngleRange(innerElements);\n          // 计算比例\n          const ratio = computeRatio(element.getGraphicAttribute('endAngle', false), range);\n          return ratio * (endAngle - startAngle) + startAngle;\n        }\n      },\n      outerRadius: {\n        from: (_d: Datum, element: IElement) => element.getGraphicAttribute('outerRadius', false),\n        to: () => params.animationInfo().innerRadius\n      },\n      innerRadius: {\n        from: (_d: Datum, element: IElement) => element.getGraphicAttribute('innerRadius', false),\n        to: () => params.animationInfo().innerRadius\n      }\n    }\n  };\n};\n"]}