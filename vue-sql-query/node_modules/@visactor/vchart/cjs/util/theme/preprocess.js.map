{"version":3,"sources":["../src/util/theme/preprocess.ts"],"names":[],"mappings":";;;AAAA,6CAAiD;AAEjD,wDAA2E;AAI3E,6CAA2D;AAG3D,MAAM,WAAW,GAAG,CAAC,oBAAoB,EAAE,aAAa,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAE7E,SAAgB,eAAe,CAC7B,GAAQ,EACR,WAA+B,EAC/B,QAAmB,EACnB,UAAwB;IAExB,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,GAAG,CAAC;KACZ;IACD,IAAI,CAAC,WAAW,EAAE;QAChB,WAAW,GAAI,GAAc,CAAC,WAAW,CAAC;KAC3C;IACD,IAAI,CAAC,QAAQ,EAAE;QACb,QAAQ,GAAI,GAAc,CAAC,KAAK,CAAC;KAClC;IACD,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC7B,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC7B,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACrB;aAAM,IAAI,IAAA,sBAAa,EAAC,KAAK,CAAC,EAAE;YAC/B,IAAI,IAAA,iBAAU,EAAC,KAAK,CAAC,EAAE;gBAErB,MAAM,CAAC,GAAG,CAAC,GAAG,IAAA,qBAAc,EAAC,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;aAC9D;iBAAM,IAAI,IAAA,kBAAU,EAAC,KAAK,CAAC,EAAE;gBAE5B,MAAM,CAAC,GAAG,CAAC,GAAG,IAAA,kBAAU,EAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aAC3C;iBAAM;gBACL,MAAM,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;aACzE;SACF;aAAM;YACL,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;SACrB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AApCD,0CAoCC","file":"preprocess.js","sourcesContent":["import { isPlainObject } from '@visactor/vutils';\nimport type { IThemeColorScheme } from '../../theme/color-scheme/interface';\nimport { getActualColor, isColorKey } from '../../theme/color-scheme/util';\nimport type { ISeriesSpec } from '../../typings';\nimport type { TokenMap } from '../../theme/token';\n// eslint-disable-next-line no-duplicate-imports\nimport { isTokenKey, queryToken } from '../../theme/token';\nimport type { ITheme } from '../../theme';\n\nconst IGNORE_KEYS = ['animationThreshold', 'colorScheme', 'name', 'padding'];\n\nexport function preprocessTheme(\n  obj: any,\n  colorScheme?: IThemeColorScheme,\n  tokenMap?: TokenMap,\n  seriesSpec?: ISeriesSpec\n): any {\n  if (!obj) {\n    return obj;\n  }\n  if (!colorScheme) {\n    colorScheme = (obj as ITheme).colorScheme;\n  }\n  if (!tokenMap) {\n    tokenMap = (obj as ITheme).token;\n  }\n  const newObj = {};\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (IGNORE_KEYS.includes(key)) {\n      newObj[key] = value;\n    } else if (isPlainObject(value)) {\n      if (isColorKey(value)) {\n        // 查询、替换语义化颜色\n        newObj[key] = getActualColor(value, colorScheme, seriesSpec);\n      } else if (isTokenKey(value)) {\n        // 查询、替换语义化 token\n        newObj[key] = queryToken(tokenMap, value);\n      } else {\n        newObj[key] = preprocessTheme(value, colorScheme, tokenMap, seriesSpec);\n      }\n    } else {\n      newObj[key] = value;\n    }\n  });\n\n  return newObj;\n}\n"]}