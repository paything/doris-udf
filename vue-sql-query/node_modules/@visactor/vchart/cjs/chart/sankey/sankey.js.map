{"version":3,"sources":["../src/chart/sankey/sankey.ts"],"names":[],"mappings":";;;AAAA,mDAA+C;AAE/C,sDAA6D;AAE7D,uDAAkE;AAClE,gDAA6C;AAC7C,6DAAkE;AAKlE,6CAA2C;AAC3C,qEAA6D;AAE7D,MAAa,WAA2D,SAAQ,sBAAY;IAA5F;;QAIW,2BAAsB,GAAG,+CAA0B,CAAC;QACpD,SAAI,YAAgC;QACpC,eAAU,GAAW,qBAAc,CAAC,MAAM,CAAC;IAiDtD,CAAC;IA/CW,gBAAgB,CACxB,QAAgB,EAChB,YAAqB,EACrB,KAA+B,EAC/B,MAAkD,EAClD,MAAuB;QAGvB,MAAM,WAAW,GAAG,IAAA,gBAAO,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACtD,MAAM,UAAU,GAAG,CAAC,MAAe,EAAE,IAAW,EAAE,EAAE;YAClD,OAAO,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;QACxF,CAAC,CAAC;QAEF,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE;YACtC,MAAM,EAAE,UAAU;YAClB,MAAM;YACN,QAAQ,EAAE,CAAC,CAAC,EAAE;;gBACZ,IAAI,CAAC,GAAG,MAAA,CAAC,CAAC,QAAQ,EAAE,0CAAE,KAAK,CAAC;gBAE5B,IAAI,IAAA,gBAAO,EAAC,CAAC,CAAC,EAAE;oBAEd,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBACV;gBACD,OAAO,CAAC,CAAC;YACX,CAAC;YACD,QAAQ,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;;gBAChC,MAAM,EAAE,GAAG,MAAA,IAAI,CAAC,UAAU,EAAE,0CAAE,EAAE,EAAE,CAAC;gBACnC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE;oBACtD,MAAA,MAAC,CAAS,EAAC,sBAAsB,mDAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;iBACxD;YACH,CAAC;YACD,cAAc,EAAE,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAC9B,IAAI,CAAC,WAAW,EAAE;oBAChB,CAAC,CAAC,WAAW,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;oBAChD,OAAO;iBACR;qBAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;oBAC1B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;wBACnB,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;oBAC9C,CAAC,CAAC,CAAC;oBAEH,IAAI,YAAY,EAAE;wBAChB,CAAC,CAAC,WAAW,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;qBAC7C;iBACF;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;;AAtDH,kCAuDC;AAtDiB,gBAAI,YAAgC;AACpC,sBAAU,GAAW,qBAAc,CAAC,MAAM,CAAC;AAC3C,kCAAsB,GAAG,+CAA0B,CAAC;AAsD/D,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,IAAA,kCAAa,GAAE,CAAC;IAChB,IAAA,6BAAoB,GAAE,CAAC;IAEvB,iBAAO,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AACvD,CAAC,CAAC;AALW,QAAA,mBAAmB,uBAK9B","file":"sankey.js","sourcesContent":["import { BaseChart } from '../base/base-chart';\nimport { ChartTypeEnum } from '../interface/type';\nimport { SeriesTypeEnum } from '../../series/interface/type';\nimport type { ISankeyChartSpec } from './interface';\nimport { registerSankeySeries } from '../../series/sankey/sankey';\nimport { Factory } from '../../core/factory';\nimport { SankeyChartSpecTransformer } from './sankey-transformer';\nimport type { Datum, MaybeArray } from '../../typings/common';\nimport type { ISeries } from '../../series/interface';\nimport type { IMark } from '../../mark/interface/common';\nimport type { IRegionQuerier } from '../../typings/params';\nimport { isArray } from '@visactor/vutils';\nimport { loadScrollbar } from '@visactor/vrender-components';\n\nexport class SankeyChart<T extends ISankeyChartSpec = ISankeyChartSpec> extends BaseChart<T> {\n  static readonly type: string = ChartTypeEnum.sankey;\n  static readonly seriesType: string = SeriesTypeEnum.sankey;\n  static readonly transformerConstructor = SankeyChartSpecTransformer;\n  readonly transformerConstructor = SankeyChartSpecTransformer;\n  readonly type: string = ChartTypeEnum.sankey;\n  readonly seriesType: string = SeriesTypeEnum.sankey;\n\n  protected _setStateInDatum(\n    stateKey: string,\n    checkReverse: boolean,\n    datum: MaybeArray<Datum> | null,\n    filter?: (series: ISeries, mark: IMark) => boolean,\n    region?: IRegionQuerier\n  ) {\n    // 桑基图暂时只支持单选\n    const activeDatum = isArray(datum) ? datum[0] : datum;\n    const markFilter = (series: ISeries, mark: IMark) => {\n      return mark.type !== 'text' && mark.getProduct() && (!filter || filter(series, mark));\n    };\n\n    this.filterGraphicsByDatum(activeDatum, {\n      filter: markFilter,\n      region,\n      getDatum: e => {\n        let d = e.getDatum()?.datum;\n\n        if (isArray(d)) {\n          // data of link\n          d = d[0];\n        }\n        return d;\n      },\n      callback: (element, mark, s, r) => {\n        const id = mark.getProduct()?.id();\n        if (id && (id.includes('node') || id.includes('link'))) {\n          (s as any)._handleEmphasisElement?.({ item: element });\n        }\n      },\n      regionCallback: (elements, r) => {\n        if (!activeDatum) {\n          r.interaction.clearEventElement(stateKey, true);\n          return;\n        } else if (elements.length) {\n          elements.forEach(e => {\n            r.interaction.startInteraction(stateKey, e);\n          });\n\n          if (checkReverse) {\n            r.interaction.reverseEventElement(stateKey);\n          }\n        }\n      }\n    });\n  }\n}\n\nexport const registerSankeyChart = () => {\n  loadScrollbar();\n  registerSankeySeries();\n\n  Factory.registerChart(SankeyChart.type, SankeyChart);\n};\n"]}