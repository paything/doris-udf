"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.BaseLineMark = void 0;

const vscale_1 = require("@visactor/vscale"), vutils_1 = require("@visactor/vutils"), base_mark_1 = require("./base-mark");

class BaseLineMark extends base_mark_1.BaseMark {
    setStyle(style, state = "normal", level = 0, stateStyle = this.stateStyle) {
        if ((0, vutils_1.isNil)(style)) return;
        void 0 === stateStyle[state] && (stateStyle[state] = {});
        const ignoreAttributes = this._getIgnoreAttributes(), segmentAttributes = [ "strokeWidth", "lineWidth", "lineDash", "strokeDash", "lineJoin", "stroke", "strokeOpacity", "opacity", "fill", "fillOpacity", "texture", "texturePadding", "textureSize", "textureColor" ], isUserLevel = this.isUserLevel(level);
        let enableSegments = !1;
        Object.keys(style).forEach((attr => {
            const attrStyle = style[attr];
            if ((0, vutils_1.isNil)(attrStyle) || ignoreAttributes.includes(attr)) return;
            isUserLevel && segmentAttributes.includes(attr) && ((0, vscale_1.isValidScaleType)(null == attrStyle ? void 0 : attrStyle.type) || (null == attrStyle ? void 0 : attrStyle.scale) || (0, 
            vutils_1.isFunction)(attrStyle)) && (enableSegments = !0);
            const styleConverter = this._filterAttribute(attr, attrStyle, state, level, isUserLevel, stateStyle);
            this.setAttribute(attr, styleConverter, state, level, stateStyle);
        })), enableSegments && this.setMarkConfig({
            enableSegments: !0
        });
    }
}

exports.BaseLineMark = BaseLineMark;
//# sourceMappingURL=base-line.js.map
