{"version":3,"sources":["../src/animation/animate-manager.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,iCAAiC,CAAC;AAE/D,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC1C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAGtC,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AAEjD,MAAM,OAAO,cAAe,SAAQ,YAAY;IAAhD;;QAGW,OAAE,GAAW,QAAQ,EAAE,CAAC;QAEvB,yBAAoB,GAAG,CAAC,GAAW,EAAE,EAAE;YAC/C,OAAO,GAAG,MAAM,YAAY,IAAI,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;QAC/C,CAAC,CAAC;IAyDJ,CAAC;IAvDC,2BAA2B;QACzB,OAAO,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;IACrD,CAAC;IAED,kBAAkB,CAAC,KAAyB,EAAE,QAAkB;QAE9D,IAAI,KAAK,KAAK,kBAAkB,CAAC,MAAM,EAAE;YACvC,IAAI,CAAC,WAAW,CACd;gBACE,cAAc,EAAE;oBACd,QAAQ,EAAE,CAAC,KAAU,EAAE,OAAiB,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS;iBAC/D;aACF,EACD,QAAQ,CACT,CAAC;SACH;aAEI,IAAI,KAAK,KAAK,kBAAkB,CAAC,MAAM,EAAE;YAC5C,IAAI,CAAC,WAAW,CACd;gBACE,cAAc,EAAE;oBACd,QAAQ,EAAE,CAAC,KAAU,EAAE,OAAiB,EAAE,EAAE;wBAC1C,OAAO,OAAO,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC;oBAC5F,CAAC;iBACF;aACF,EACD,QAAQ,CACT,CAAC;SACH;aAEI;YACH,IAAI,CAAC,WAAW,CACd;gBACE,cAAc,EAAE;oBACd,QAAQ,EAAE,CAAC,KAAU,EAAE,OAAiB,EAAE,EAAE,CAAC,KAAK;iBACnD;aACF,EACD,QAAQ,CACT,CAAC;SACH;IACH,CAAC;IAES,mBAAmB;QAC3B,OAAO;YACL,cAAc,EAAE;gBACd,QAAQ,EAAE,CAAC,KAAU,EAAE,OAAiB,EAAE,EAAE;oBAC1C,OAAO,OAAO,CAAC,SAAS,KAAK,MAAM;wBACjC,CAAC,CAAC,kBAAkB,CAAC,IAAI;wBACzB,CAAC,CAAC,OAAO,CAAC,SAAS,KAAK,QAAQ;4BAChC,CAAC,CAAC,kBAAkB,CAAC,MAAM;4BAC3B,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC;gBAChC,CAAC;aACF;SACF,CAAC;IACJ,CAAC;CACF","file":"animate-manager.js","sourcesContent":["import type { IElement } from '@visactor/vgrammar-core';\nimport { StateManager } from '../compile/signal/state-manager';\nimport type { StateValueMap } from '../compile/signal/interface';\nimport { PREFIX } from '../constant/base';\nimport { createID } from '../util/id';\nimport type { IAnimate, IAnimateState } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { AnimationStateEnum } from './interface';\n\nexport class AnimateManager extends StateManager implements IAnimate {\n  protected declare _stateMap: IAnimateState & StateValueMap;\n\n  readonly id: number = createID();\n\n  protected stateKeyToSignalName = (key: string) => {\n    return `${PREFIX}_animate_${this.id}_${key}`;\n  };\n\n  getAnimationStateSignalName() {\n    return this.stateKeyToSignalName('animationState');\n  }\n\n  updateAnimateState(state: AnimationStateEnum, noRender?: boolean) {\n    // when animation state is 'update', do animations by element diffState(enter & update & exit)\n    if (state === AnimationStateEnum.update) {\n      this.updateState(\n        {\n          animationState: {\n            callback: (datum: any, element: IElement) => element.diffState\n          }\n        },\n        noRender\n      );\n    }\n    // when animation state is 'appear', all valid elements would do appear animation except from exit elements\n    else if (state === AnimationStateEnum.appear) {\n      this.updateState(\n        {\n          animationState: {\n            callback: (datum: any, element: IElement) => {\n              return element.diffState === 'exit' ? AnimationStateEnum.none : AnimationStateEnum.appear;\n            }\n          }\n        },\n        noRender\n      );\n    }\n    // when animation state is other types, all elements would do animation by state\n    else {\n      this.updateState(\n        {\n          animationState: {\n            callback: (datum: any, element: IElement) => state\n          }\n        },\n        noRender\n      );\n    }\n  }\n\n  protected _getDefaultStateMap(): IAnimateState & StateValueMap {\n    return {\n      animationState: {\n        callback: (datum: any, element: IElement) => {\n          return element.diffState === 'exit'\n            ? AnimationStateEnum.exit\n            : element.diffState === 'update'\n            ? AnimationStateEnum.update\n            : AnimationStateEnum.appear;\n        }\n      }\n    };\n  }\n}\n"]}