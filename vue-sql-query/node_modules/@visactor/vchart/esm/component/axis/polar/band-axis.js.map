{"version":3,"sources":["../src/component/axis/polar/band-axis.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACnC,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACzC,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAGzD,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AACrH,OAAO,EAAE,gCAAgC,EAAE,MAAM,wBAAwB,CAAC;AAC1E,OAAO,EAAE,2BAA2B,EAAE,MAAM,8BAA8B,CAAC;AAS3E,MAAM,OAAO,aAAiE,SAAQ,SAAY;IAAlG;;QAEE,SAAI,GAAG,iBAAiB,CAAC,aAAa,CAAC;QAI7B,WAAM,GAAc,IAAI,SAAS,EAAE,CAAC;IAsChD,CAAC;IAlCW,aAAa,CAAC,IAAmD;QACzE,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAES,gBAAgB;QACxB,MAAM,SAAS,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;QAC3C,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE7B,OAAO,SAAS,CAAC;IACnB,CAAC;IAGS,UAAU;QAClB,MAAM,MAAM,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;QAClC,MAAM,YAAY,GAAG,CAAC,KAAa,EAAE,EAAE;YACrC,OAAQ,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAe,CAAC,SAAS,EAAE,CAAC;QAC3D,CAAC,CAAC;QAEF,uCAAY,MAAM,KAAE,YAAY,IAAG;IACrC,CAAC;IAES,UAAU;QAClB,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAChF,CAAC;IAES,sBAAsB;QAC9B,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC;QAClC,gCAAgC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,2BAA2B,CAAC,CAAC;QAC1F,OAAO,IAAI,CAAC;IACd,CAAC;IACD,oBAAoB;IAEpB,CAAC;;AA1CM,kBAAI,GAAG,iBAAiB,CAAC,aAAa,CAAC;AAGvC,qBAAO,GAAG,MAAM,CAAC;AAyC1B,KAAK,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;AAEpC,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,gBAAgB,EAAE,CAAC;IACnB,gBAAgB,EAAE,CAAC;IACnB,kBAAkB,EAAE,CAAC;IACrB,kBAAkB,EAAE,CAAC;IACrB,YAAY,EAAE,CAAC;IACf,OAAO,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC/D,CAAC,CAAC","file":"band-axis.js","sourcesContent":["import { BandScale } from '@visactor/vscale';\nimport { ComponentTypeEnum } from '../../interface/type';\nimport { PolarAxis } from './axis';\nimport { mixin } from '@visactor/vutils';\nimport { BandAxisMixin } from '../mixin/band-axis-mixin';\nimport type { StringOrNumber } from '../../../typings';\nimport type { IPolarBandAxisSpec } from './interface';\nimport { Factory } from '../../../core/factory';\nimport { registerAxis } from '../base-axis';\nimport { registerLineAxis, registerLineGrid, registerCircleAxis, registerCircleGrid } from '@visactor/vgrammar-core';\nimport { registerDataSetInstanceTransform } from '../../../data/register';\nimport { polarAngleAxisDiscreteTicks } from '@visactor/vrender-components';\n\nexport interface PolarBandAxis<T extends IPolarBandAxisSpec = IPolarBandAxisSpec>\n  extends Pick<\n      BandAxisMixin,\n      'valueToPosition' | 'updateGroupScaleRange' | 'getPosition' | 'calcScales' | 'computeBandDomain'\n    >,\n    PolarAxis<T> {}\n\nexport class PolarBandAxis<T extends IPolarBandAxisSpec = IPolarBandAxisSpec> extends PolarAxis<T> {\n  static type = ComponentTypeEnum.polarBandAxis;\n  type = ComponentTypeEnum.polarBandAxis;\n\n  static specKey = 'axes';\n\n  protected _scale: BandScale = new BandScale();\n\n  protected declare _scales: BandScale[];\n\n  protected computeDomain(data: { min: number; max: number; values: any[] }[]): StringOrNumber[] {\n    return this.computeBandDomain(data);\n  }\n\n  protected updateScaleRange() {\n    const isChanged = super.updateScaleRange();\n    this.updateGroupScaleRange();\n\n    return isChanged;\n  }\n\n  // axisHelper\n  protected axisHelper() {\n    const helper = super.axisHelper();\n    const getBandwidth = (depth: number) => {\n      return (helper.getScale(depth) as BandScale).bandwidth();\n    };\n\n    return { ...helper, getBandwidth };\n  }\n\n  protected initScales() {\n    super.initScales();\n    this.calcScales(this._defaultBandInnerPadding, this._defaultBandOuterPadding);\n  }\n\n  protected registerTicksTransform() {\n    const name = `${this.type}-ticks`;\n    registerDataSetInstanceTransform(this._option.dataSet, name, polarAngleAxisDiscreteTicks);\n    return name;\n  }\n  transformScaleDomain() {\n    // do nothing\n  }\n}\nmixin(PolarBandAxis, BandAxisMixin);\n\nexport const registerPolarBandAxis = () => {\n  registerLineAxis();\n  registerLineGrid();\n  registerCircleAxis();\n  registerCircleGrid();\n  registerAxis();\n  Factory.registerComponent(PolarBandAxis.type, PolarBandAxis);\n};\n"]}