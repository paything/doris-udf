{"version":3,"sources":["../src/compile/grammar-item.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAInD,MAAM,OAAgB,WAAY,SAAQ,cAAc;IAAxD;;QAMW,OAAE,GAAW,QAAQ,EAAE,CAAC;QAmBvB,uBAAkB,GAAW,IAAI,CAAC;QASlC,YAAO,GAAmB,EAAE,CAAC;IAqDzC,CAAC;IA7EC,UAAU;QACR,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SACzC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IASD,YAAY;;QACV,OAAO,MAAA,IAAI,CAAC,kBAAkB,mCAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC7D,CAAC;IAID,SAAS;QACP,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,SAAS,CAAC,GAAG,MAAsB;QACjC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAGD,OAAO,CAAC,MAAiC;QACvC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC;IAMS,aAAa,CAAC,MAAiC;;QACvD,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC1B,MAAA,IAAI,CAAC,WAAW,EAAE,0CAAE,cAAc,CAAC,IAAI,CAAC,CAAC;SAC1C;IACH,CAAC;IAGD,YAAY;QACV,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;iBAC5B,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;iBAC9B,MAAM,CAAC,OAAO,CAAC,CAAC;YAEnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC7B,OAAO,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC;SAClD;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO;QACL,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAMD,aAAa,CAAC,oBAA8B;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QACpC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACjC,CAAC;CACF","file":"grammar-item.js","sourcesContent":["import type { IGrammarBase } from '@visactor/vgrammar-core';\nimport type { Maybe } from '../typings';\nimport { isValid } from '@visactor/vutils';\nimport { createID } from '../util/id';\nimport { CompilableBase } from './compilable-base';\nimport type { GrammarItemCompileOption, GrammarType, IGrammarItem, GrammarItemInitOption } from './interface';\n\n/** 可以直接编译为一个 VGrammar 语法元素的类的统一基类 */\nexport abstract class GrammarItem extends CompilableBase implements IGrammarItem {\n  grammarType: GrammarType;\n\n  protected declare _option: GrammarItemInitOption;\n\n  /** id */\n  readonly id: number = createID();\n\n  protected _product: Maybe<IGrammarBase>;\n  /** 获取编译产物 */\n  getProduct() {\n    if (isValid(this._product)) {\n      return this._product;\n    }\n    const view = this.getVGrammarView();\n    const id = this.getProductId();\n    if (isValid(id) && isValid(view)) {\n      this._product = this._lookupGrammar(id); // 更新product\n    }\n    return this._product;\n  }\n\n  protected abstract _lookupGrammar(id: string): IGrammarBase;\n\n  /** 已经编译完成的产物的 name */\n  protected _compiledProductId: string = null;\n  /** 生成产物 name */\n  abstract generateProductId(): string;\n  /** 获取产物 name */\n  getProductId() {\n    return this._compiledProductId ?? this.generateProductId();\n  }\n\n  /** 该语法元素依赖于哪些语法元素 */\n  protected _depend: IGrammarItem[] = [];\n  getDepend() {\n    return this._depend;\n  }\n  setDepend(...depend: IGrammarItem[]) {\n    this._depend = depend;\n  }\n\n  /** 编译入口（尽量不重写这个方法） */\n  compile(option?: GrammarItemCompileOption): void {\n    this._compileProduct(option);\n    this._afterCompile(option);\n  }\n\n  /** 编译主过程 */\n  protected abstract _compileProduct(option?: GrammarItemCompileOption): void;\n\n  /** 编译后的逻辑 */\n  protected _afterCompile(option?: GrammarItemCompileOption) {\n    if (isValid(this._product)) {\n      this.getCompiler()?.addGrammarItem(this);\n    }\n  }\n\n  /** 更新语法元素的依赖，返回是否全部成功更新 */\n  updateDepend(): boolean {\n    if (isValid(this._product)) {\n      const depend = this.getDepend()\n        .map(item => item.getProduct())\n        .filter(isValid);\n      // 更新依赖\n      this._product.depend(depend);\n      return depend.length === this.getDepend().length;\n    }\n    return false;\n  }\n\n  release() {\n    this.removeProduct();\n    super.release();\n    this._depend = [];\n  }\n\n  /**\n   * 删除编译产物\n   * @param reserveVGrammarModel 是否保留 view 中的语法元素\n   */\n  removeProduct(reserveVGrammarModel?: boolean) {\n    const compiler = this.getCompiler();\n    compiler.removeGrammarItem(this, reserveVGrammarModel);\n    this._product = null;\n    this._compiledProductId = null;\n  }\n}\n"]}