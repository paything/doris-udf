{"version":3,"sources":["../src/compile/mark/mark-state-manager.ts"],"names":[],"mappings":"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","file":"mark-state-manager.js","sourcesContent":["import type { IElement, IMark as IVGrammarMark } from '@visactor/vgrammar-core';\nimport { isContinuous } from '@visactor/vscale';\nimport { isArray, isObject, isValid, isBoolean } from '@visactor/vutils';\nimport { PREFIX } from '../../constant/base';\nimport type { MarkTypeEnum } from '../../mark/interface';\nimport { isMultiDatumMark } from '../../mark/utils/common';\nimport type { Datum, StringOrNumber } from '../../typings';\nimport type { IStateManagerOption } from '../signal/interface';\nimport { StateManager } from '../signal/state-manager';\nimport type { CompilableMark } from './compilable-mark';\nimport type { IMarkStateManager, IStateInfo, StateValue } from './interface';\nimport { stateInDefaultEnum } from './util';\n\n/** mark state 管理器 */\nexport class MarkStateManager extends StateManager implements IMarkStateManager {\n  /** 相关 mark */\n  protected _mark: CompilableMark;\n\n  // state info：state 种类信息\n  private _stateInfoList: IStateInfo[] = [];\n  getStateInfoList() {\n    return this._stateInfoList;\n  }\n\n  constructor(option: IStateManagerOption, mark: CompilableMark) {\n    super(option);\n    this._mark = mark;\n  }\n\n  protected _getDefaultStateMap(): Record<string, unknown> {\n    return {\n      markUpdateRank: 1\n    };\n  }\n\n  // /** 触发状态更新 */\n  // update() {\n  //   if (this._mark.hasState('stateUpdateRank')) {\n  //     const rank = this._mark.getState('stateUpdateRank');\n  //     this._mark.updateState({ stateUpdateRank: <number>rank + 1 });\n  //   }\n  // }\n\n  /** 通过 state value 获取 state 信息 */\n  getStateInfo(stateValue: StateValue) {\n    return this._stateInfoList.find(s => s.stateValue === stateValue);\n  }\n\n  /** 添加 state info */\n  addStateInfo(stateInfo: IStateInfo) {\n    if (this.getStateInfo(stateInfo.stateValue)) {\n      return;\n    }\n    stateInfo.level = stateInfo.level || 0;\n\n    let needPush = true;\n    // 根据 level 大小进行插入，level 最大的插在最后面\n    for (let i = 0; i < this._stateInfoList.length; i++) {\n      const level = this._stateInfoList[i].level;\n      if (level && level > stateInfo.level) {\n        this._stateInfoList.splice(i, 0, stateInfo);\n        needPush = false;\n        break;\n      }\n    }\n\n    if (needPush) {\n      this._stateInfoList.push(stateInfo);\n    }\n  }\n\n  /** 设置新状态时，将旧的筛选清除，避免同时存在2种筛选，第二种筛选会不触发 */\n  private _clearStateBeforeSet(state: IStateInfo) {\n    state.datums = null;\n    state.items = null;\n    state.fields = null;\n    state.filter = null;\n  }\n\n  /** 更新 state info */\n  changeStateInfo(stateInfo: Partial<IStateInfo>) {\n    const s = this.getStateInfo(stateInfo.stateValue);\n    if (!s) {\n      this.addStateInfo(stateInfo as IStateInfo);\n    } else {\n      if (stateInfo.datums !== undefined) {\n        this._clearStateBeforeSet(s);\n        s.datums = stateInfo.datums;\n        s.datumKeys = stateInfo.datumKeys;\n      }\n      if (stateInfo.items !== undefined) {\n        this._clearStateBeforeSet(s);\n        s.items = stateInfo.items;\n      }\n      if (stateInfo.fields !== undefined) {\n        this._clearStateBeforeSet(s);\n        // null\n        if (stateInfo.fields === null) {\n          s.fields = stateInfo.fields;\n        } else {\n          s.fields = s.fields || {};\n          for (const key in stateInfo.fields) {\n            const new_f = stateInfo.fields[key];\n            s.fields[key] = s.fields[key] || ({} as any);\n            const old_f = s.fields[key];\n            isValid(new_f.domain) && (old_f.domain = new_f.domain);\n            isValid(new_f.type) && (old_f.type = new_f.type);\n          }\n        }\n      }\n      if (stateInfo.filter) {\n        this._clearStateBeforeSet(s);\n        s.filter = stateInfo.filter;\n      }\n    }\n  }\n\n  /** 清除 state info */\n  clearStateInfo(stateValues: StateValue[]) {\n    stateValues.forEach(stateValue => {\n      const state = this.getStateInfo(stateValue);\n      if (state) {\n        this.changeStateInfo({\n          stateValue,\n          datumKeys: null,\n          datums: null,\n          fields: null,\n          items: null,\n          filter: null,\n          cache: {}\n        });\n      }\n    });\n  }\n\n  checkOneState(\n    renderNode: IElement,\n    datum: Datum | Datum[],\n    state: IStateInfo,\n    isMultiMark?: boolean\n  ): 'in' | 'out' | 'skip' {\n    isMultiMark = isBoolean(isMultiDatumMark)\n      ? isMultiMark\n      : !renderNode.mark || isMultiDatumMark(renderNode.mark.markType as MarkTypeEnum);\n    let inState = false;\n    let stateChecked = false;\n    // 如果有 state.datum 那么判断是否与datum的所有值相等\n    if (isValid(state.datums) && state.datums.length > 0) {\n      inState = this.checkDatumState(state, datum, isMultiMark);\n      stateChecked = true;\n    }\n    // 依靠 scenegraph item 引用判断是否在状态中\n    else if (state.items) {\n      // TODO:确认这个逻辑里为什么有mark比较\n      // if (state.marks && !state.marks.includes(renderNode.mark)) {\n      //   continue;\n      // }\n      inState = this.checkItemsState(state, renderNode) ?? false;\n      stateChecked = true;\n    }\n    // 每个状态依靠 fields 来判定数据是否在当前状态中\n    else if (state.fields) {\n      inState = this.checkFieldsState(state, datum, renderNode, isMultiMark);\n      stateChecked = true;\n    } else if (!inState && state.filter) {\n      const options = {\n        mark: this._mark,\n        renderNode,\n        type: renderNode.mark.markType\n      };\n      inState = state.filter(datum, options);\n      stateChecked = true;\n    }\n\n    // 如果 state 所有字段都为空，此时不应当进入反状态\n    if (!stateChecked) {\n      return 'skip';\n    }\n    return inState ? 'in' : 'out';\n  }\n\n  // TODO:renderNode\n  checkState(renderNode: IElement, datum: Datum | Datum[]): StateValue[] {\n    // 由于存在多个 stateManager，需要额外返回 state 的优先级\n    // 交互状态不要删除，并且交互状态优先级统一为10\n    const result: [StateValue, number][] = renderNode\n      .getStates()\n      .filter(s => stateInDefaultEnum(s))\n      .map(s => {\n        return [s, 10];\n      });\n    const isMultiMark = !renderNode.mark || isMultiDatumMark(renderNode.mark.markType as MarkTypeEnum);\n    // 优先级从高到低依次检索状态。\n    for (let i = 0; i < this._stateInfoList.length; i++) {\n      const state = this._stateInfoList[i];\n      const inOut = this.checkOneState(renderNode, datum, state, isMultiMark);\n      if (inOut === 'skip') {\n        continue;\n      }\n      if (inOut === 'in') {\n        result.push([state.stateValue, <number>state.level]);\n      }\n    }\n    // 这里直接返回字符串数组即可\n    return result.map(res => res[0]);\n  }\n\n  checkDatumState(state: IStateInfo, datum: Datum | Datum[], isMultiMark: boolean): boolean {\n    let inState = false;\n    const datum_v = isMultiMark ? datum[0] : datum;\n    if (isArray(state.datums)) {\n      const keys = state.datumKeys || Object.keys(state.datums[0]).filter(k => !k.startsWith(PREFIX));\n      inState = state.datums.some(d => {\n        // 如果 多数据图元情况下 datums 设置为 单一数据，状态判定失败\n        // 这里要考虑 state.datum 本身是一条数据，不含item的情况能与单数据图元统一\n        return isMultiMark && isArray(d?.items)\n          ? keys.every(k => d?.items?.[0]?.[k] === datum_v?.[k])\n          : keys.every(k => d?.[k] === datum_v?.[k]);\n      });\n    } else if (isObject(state.datums)) {\n      const keys = state.datumKeys || Object.keys(state.datums).filter(k => !k.startsWith(PREFIX));\n      inState = keys.every(k => {\n        return isMultiMark ? (state.datums as any).items?.[0][k] === datum_v[k] : state.datums?.[k] === datum_v[k];\n      });\n    } else {\n      inState = datum === state.datums;\n    }\n    return inState;\n  }\n\n  checkItemsState(state: IStateInfo, item: any): boolean | undefined {\n    return state.items?.includes(item);\n  }\n\n  checkFieldsState(state: IStateInfo, datum: Datum | Datum[], item: any, isMultiMark: boolean): boolean {\n    let inState = true;\n    // each fields\n    for (const key in state.fields) {\n      const field = state.fields[key];\n      const type = field.type;\n      const domain = field.domain;\n      const datum_v = isMultiMark ? datum[0]?.[key] : datum[key];\n      if (isContinuous(type) && domain.length > 1) {\n        // 连续\n        if (this.checkLinearFieldState(domain, key, datum, item, isMultiMark)) {\n          inState = false;\n          break;\n        } else {\n          inState = true;\n        }\n      } else if (domain.some((d: any) => d === datum_v)) {\n        // 离散\n        inState = true;\n      } else {\n        inState = false;\n        break;\n      }\n    }\n    return inState;\n  }\n\n  checkLinearFieldState(domain: StringOrNumber[], key: string, datum: any, item: any, isMultiMark: boolean) {\n    const datum_v = isMultiMark ? datum[0]?.[key] : datum[key];\n    return datum_v < domain[0] || datum_v > domain[domain.length - 1];\n  }\n\n  updateLayoutState(noRender?: boolean): void {\n    (this._stateMap.markUpdateRank as number)++;\n    return this.updateState({ markUpdateRank: this._stateMap.markUpdateRank }, noRender);\n  }\n\n  compileState(product: IVGrammarMark, stateSort?: (stateA: string, stateB: string) => number) {\n    (product as any).state(\n      {\n        callback: (datum: any, element: any) => {\n          return this.checkState(element, datum);\n        }\n      },\n      stateSort\n    );\n  }\n}\n"]}