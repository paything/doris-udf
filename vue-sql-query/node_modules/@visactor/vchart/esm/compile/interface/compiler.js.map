{"version":3,"sources":["../src/compile/interface/compiler.ts"],"names":[],"mappings":"","file":"compiler.js","sourcesContent":["import type { Hooks } from '@visactor/vgrammar-core';\nimport type { IColor, IStageParams, IStage, ILayer } from '@visactor/vrender-core';\nimport type { RenderMode } from '../../typings/spec/common';\nimport type { IBoundsLike } from '@visactor/vutils';\nimport type { StringOrNumber } from '../../typings';\n\nexport interface IRenderContainer {\n  dom?: HTMLElement | 'none';\n  canvas?: HTMLCanvasElement | string;\n}\n\n/**\n * @since 1.8.0\n */\nexport type IOptimizeType = {\n  // 视口不在可视区，跳过渲染，默认为true\n  skipRenderWithOutRange?: boolean;\n  // 跳过图元在区间外的判断\n  // 不存在dirtyBounds的时候，根据该配置判断是否关闭图元的超出边界判定\n  // 如果有dirtyBounds那么该配置不生效\n  disableCheckGraphicWidthOutRange?: boolean;\n};\n\nexport interface GestureConfig {\n  press?: {\n    /**\n     * @default 251\n     * Minimal press time in ms.\n     * @see http://hammerjs.github.io/recognizer-press/\n     */\n    time?: number;\n    /**\n     * @default 10\n     * Maximal movement that is allowed while pressing.\n     * @see http://hammerjs.github.io/recognizer-press/\n     */\n    threshold?: number;\n  };\n  swipe?: {\n    /**\n     * Minimal distance required before recognizing.\n     * @default 10\n     * @see https://hammerjs.github.io/recognizer-swipe/\n     */\n    threshold?: number;\n    /**\n     * Minimal velocity required before recognizing, unit is in px per ms.\n     * @default 0.3\n     * @see http://hammerjs.github.io/recognizer-swipe/\n     */\n    velocity?: number;\n  };\n  tap?: {\n    /**\n     * max time between the multi-tap taps\n     * @default 300\n     */\n    interval?: number;\n  };\n}\n\nexport interface IRenderOption {\n  /**\n   * 配置渲染环境，默认为 'desktop-browser'，当需要在非浏览器环境渲染 VChart 时，需要配置该属性。\n   * - 'desktop-browser': 默认模式，适用于 PC 及 H5\n   * - 'mobile-browser': H5 模式\n   * - 'node': Node 渲染\n   * - 'worker': worker 模式\n   * - 'miniApp': 小程序模式\n   * - 'lynx': lynx 渲染\n   * @default 'desktop-browser'\n   */\n  mode?: RenderMode;\n\n  gestureConfig?: GestureConfig;\n  /**\n   * 渲染环境参数配置\n   */\n  modeParams?:\n    | {\n        tooltipCanvasId?: StringOrNumber;\n        [key: string]: any;\n      }\n    | unknown;\n\n  /**\n   * 是否自动刷线dpr\n   * @since 1.12.14\n   */\n  autoRefreshDpr?: boolean;\n  /**\n   * 设置屏幕分辨率\n   */\n  dpr?: number;\n  /**\n   * 图表交互全局开关，默认为 `true`，开启。\n   * @default true\n   */\n  interactive?: boolean;\n  /**\n   * 指定绘制的区域\n   */\n  viewBox?: IBoundsLike;\n  /**\n   * 用于告诉底层的渲染引擎 VRender，图表的 Canvas 是否是受控制的canvas，如果不是的话，不会进行resize等操作。\n   * @default true\n   */\n  canvasControled?: boolean;\n  /**\n   * 外部传入的 VRender stage\n   */\n  stage?: IStage;\n  /**\n   * 外部传入的 VRender layer\n   */\n  layer?: ILayer;\n\n  /**\n   * 绘制之前的钩子函数\n   */\n  beforeRender?: IStageParams['beforeRender'];\n  /**\n   * 绘制之后的钩子函数\n   */\n  afterRender?: IStageParams['afterRender'];\n  /**\n   * 绘图区域背景色设置\n   */\n  background?: IColor;\n  /**\n   * 日志类型，用于开发调试\n   */\n  logLevel?: number;\n  /**\n   * 错误消息回调函数\n   */\n  onError?: (...args: any[]) => void;\n  /**\n   * 是否关闭dirtyBounds\n   * @default false\n   */\n  disableDirtyBounds?: boolean;\n  /**\n   * 是否开启view3d的变换模式\n   */\n  enableView3dTransform?: boolean;\n  /**\n   * vrender 的插件列表\n   */\n  pluginList?: string[];\n  /**\n   * @since 1.8.0\n   */\n  optimize?: IOptimizeType;\n  /**\n   * @since 1.8.3\n   */\n  enableHtmlAttribute?: boolean;\n  /**\n   * @since 1.8.9\n   * 是否支持touch事件\n   */\n  supportsTouchEvents?: boolean;\n  /**\n   * @since 1.8.9\n   * 是否支持pointer事件\n   */\n  supportsPointerEvents?: boolean;\n  /**\n   * @since 1.11.0\n   * 用于vrender渲染react元素，`react-dom`包导出元素\n   */\n  ReactDOM?: any;\n  /**\n   * @since 1.13.2\n   * @default 200\n   * 单位 ms\n   * 多次点击之间的最大时间，默认为 200 ms，用于判断点击次数\n   */\n  clickInterval?: number;\n  /**\n   * @since 1.13.2\n   * @default false\n   * VRender 参数 是否自动阻止事件\n   */\n  autoPreventDefault?: boolean;\n  /**\n   * @deprecated\n   * 请使用 hooks 代替\n   */\n  performanceHook?: Hooks;\n}\n"]}