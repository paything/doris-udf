{"version":3,"sources":["../src/mark/link-path.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAK5C,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAIhE,MAAM,OAAO,YAAa,SAAQ,QAA2B;IAA7D;;QAEW,SAAI,GAAG,YAAY,CAAC,IAAI,CAAC;IA8BpC,CAAC;IA5BW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,CAAC,EACJ,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,GAAG,EACP,EAAE,EAAE,GAAG,EACP,SAAS,EAAE,CAAC,EACZ,KAAK,EAAE,IAAI,GACZ,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,YAAY,CAAC,KAA2B;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAGpC,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,SAAS,GAAG,UAAU,CAAC;QAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,IAAI;aACjB,KAAK,CAAC,SAAS,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,QAAQ,CAAC;aACxC,EAAE,CAAC,EAAE,CAAC;aACN,cAAc,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QAC5C,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;;AA9Be,iBAAI,cAAyB;AAiC/C,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,qBAAqB,EAAE,CAAC;IACxB,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,YAAmB,CAAC,CAAC;AAC/D,CAAC,CAAC","file":"link-path.js","sourcesContent":["import { Factory } from './../core/factory';\nimport { BaseMark } from './base/base-mark';\nimport type { ILinkPathMarkSpec } from '../typings/visual';\nimport type { ILinkPathMark, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { registerLinkPathGlyph } from '@visactor/vgrammar-core';\n// eslint-disable-next-line no-duplicate-imports\nimport type { IGroupMark } from '@visactor/vgrammar-core';\n\nexport class LinkPathMark extends BaseMark<ILinkPathMarkSpec> implements ILinkPathMark {\n  static readonly type = MarkTypeEnum.linkPath;\n  readonly type = LinkPathMark.type;\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<ILinkPathMarkSpec> = {\n      ...super._getDefaultStyle(),\n      x: 0,\n      y: 0,\n      x0: 0,\n      y0: 0,\n      x1: 100,\n      y1: 100,\n      thickness: 1,\n      round: true\n    };\n    return defaultStyle;\n  }\n\n  protected _initProduct(group?: string | IGroupMark) {\n    const view = this.getVGrammarView();\n\n    // 声明语法元素\n    const id = this.getProductId();\n    const glyphType = 'linkPath';\n    const direction = this.getStyle('direction');\n    this._product = view\n      .glyph(glyphType, group ?? view.rootMark)\n      .id(id)\n      .configureGlyph({ direction: direction });\n    this._compiledProductId = id;\n  }\n}\n\nexport const registerLinkPathMark = () => {\n  registerLinkPathGlyph();\n  Factory.registerMark(LinkPathMark.type, LinkPathMark as any);\n};\n"]}