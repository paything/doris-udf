{"version":3,"sources":["../src/mark/ripple.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAK5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAI9D,MAAM,OAAO,UAAW,SAAQ,QAAyB;IAAzD;;QAEW,SAAI,GAAG,UAAU,CAAC,IAAI,CAAC;IAqBlC,CAAC;IAnBW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,CAAC,EACJ,MAAM,EAAE,CAAC,GACV,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,YAAY,CAAC,KAA2B;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAGpC,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,SAAS,GAAG,aAAa,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;;AArBe,eAAI,YAAuB;AAwB7C,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAClD,mBAAmB,EAAE,CAAC;AACxB,CAAC,CAAC","file":"ripple.js","sourcesContent":["import { Factory } from './../core/factory';\nimport { BaseMark } from './base/base-mark';\nimport type { IRippleMarkSpec } from '../typings/visual';\nimport type { IMarkStyle, IRippleMark } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { registerRippleGlyph } from '@visactor/vgrammar-core';\n// eslint-disable-next-line no-duplicate-imports\nimport type { IGroupMark } from '@visactor/vgrammar-core';\n\nexport class RippleMark extends BaseMark<IRippleMarkSpec> implements IRippleMark {\n  static readonly type = MarkTypeEnum.ripple;\n  readonly type = RippleMark.type;\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<IRippleMarkSpec> = {\n      ...super._getDefaultStyle(),\n      x: 0,\n      y: 0,\n      ripple: 0\n    };\n    return defaultStyle;\n  }\n\n  protected _initProduct(group?: string | IGroupMark) {\n    const view = this.getVGrammarView();\n\n    // 声明语法元素\n    const id = this.getProductId();\n    const glyphType = 'ripplePoint';\n    this._product = view.glyph(glyphType, group ?? view.rootMark).id(id);\n    this._compiledProductId = id;\n  }\n}\n\nexport const registerRippleMark = () => {\n  Factory.registerMark(RippleMark.type, RippleMark);\n  registerRippleGlyph();\n};\n"]}