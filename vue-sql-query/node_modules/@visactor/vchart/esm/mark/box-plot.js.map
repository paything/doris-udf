{"version":3,"sources":["../src/mark/box-plot.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAE5C,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAG5C,OAAO,EAAE,uBAAuB,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAKxF,MAAM,mBAAmB,GAAG,SAAS,CAAC;AACtC,MAAM,uBAAuB,GAAG,YAAY,CAAC;AAE7C,MAAM,OAAO,WAAY,SAAQ,QAA0B;IAA3D;;QAEW,SAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IA2BnC,CAAC;IAzBW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,SAAS,EAAE,CAAC,EACZ,QAAQ,EAAE,EAAE,EACZ,UAAU,EAAE,EAAE,EACd,UAAU,EAAE,MAAM,GACnB,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAES,YAAY,CAAC,KAA2B;QAChD,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAGpC,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,SAAS,GAAG,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,mBAAmB,CAAC;QACvF,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,IAAI;aACjB,KAAK,CAAC,SAAS,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,QAAQ,CAAC;aACxC,EAAE,CAAC,EAAE,CAAC;aACN,cAAc,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;;AA3Be,gBAAI,aAAwB;AA8B9C,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACpD,oBAAoB,EAAE,CAAC;IACvB,uBAAuB,EAAE,CAAC;AAC5B,CAAC,CAAC","file":"box-plot.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { IBoxPlotMarkSpec } from '../typings/visual';\nimport { BaseMark } from './base/base-mark';\nimport type { IGroupMark } from '@visactor/vgrammar-core';\n// eslint-disable-next-line no-duplicate-imports\nimport { registerBarBoxplotGlyph, registerBoxplotGlyph } from '@visactor/vgrammar-core';\nimport type { IBoxPlotMark, IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\n\nconst BOX_PLOT_GLYPH_TYPE = 'boxplot';\nconst BAR_BOX_PLOT_GLYPH_TYPE = 'barBoxplot';\n\nexport class BoxPlotMark extends BaseMark<IBoxPlotMarkSpec> implements IBoxPlotMark {\n  static readonly type = MarkTypeEnum.boxPlot;\n  readonly type = BoxPlotMark.type;\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<IBoxPlotMarkSpec> = {\n      ...super._getDefaultStyle(),\n      lineWidth: 2,\n      boxWidth: 30,\n      shaftWidth: 20,\n      shaftShape: 'line'\n    };\n    return defaultStyle;\n  }\n  /** 创建语法元素对象 */\n  protected _initProduct(group?: string | IGroupMark) {\n    const shaftShape = this.getStyle('shaftShape');\n    const view = this.getVGrammarView();\n\n    // 声明语法元素\n    const id = this.getProductId();\n    const glyphType = shaftShape === 'bar' ? BAR_BOX_PLOT_GLYPH_TYPE : BOX_PLOT_GLYPH_TYPE;\n    const direction = this.getStyle('direction');\n    this._product = view\n      .glyph(glyphType, group ?? view.rootMark)\n      .id(id)\n      .configureGlyph({ direction });\n    this._compiledProductId = id;\n  }\n}\n\nexport const registerBoxPlotMark = () => {\n  Factory.registerMark(BoxPlotMark.type, BoxPlotMark);\n  registerBoxplotGlyph();\n  registerBarBoxplotGlyph();\n};\n"]}