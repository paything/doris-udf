{"version":3,"sources":["../src/mark/base/base-line.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AAGpD,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AAGvC,MAAM,OAAgB,YAA8D,SAAQ,QAAW;IAWrG,QAAQ,CACN,KAAkE,EAClE,QAAwB,QAAQ,EAChC,QAAgB,CAAC,EACjB,UAAU,GAAG,IAAI,CAAC,UAAU;QAE5B,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;YAChB,OAAO;SACR;QAED,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;YACnC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SACxB;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACrD,MAAM,iBAAiB,GAAG;YACxB,aAAa;YACb,WAAW;YACX,UAAU;YACV,YAAY;YACZ,UAAU;YACV,QAAQ;YACR,eAAe;YACf,SAAS;YACT,MAAM;YACN,aAAa;YACb,SAAS;YACT,gBAAgB;YAChB,aAAa;YACb,cAAc;SACf,CAAC;QACF,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAChC,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACvD,OAAO;aACR;YACD,IACE,WAAW;gBACX,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAChC,CAAC,gBAAgB,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,CAAC,KAAI,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAA,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,EAChF;gBACA,cAAc,GAAG,IAAI,CAAC;aACvB;YAED,MAAM,cAAc,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAW,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;YAE5G,IAAI,CAAC,YAAY,CAAC,IAAW,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QACH,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,aAAa,CAAC;gBACjB,cAAc,EAAE,IAAI;aACrB,CAAC,CAAC;SACJ;IACH,CAAC;CACF","file":"base-line.js","sourcesContent":["import { isValidScaleType } from '@visactor/vscale';\nimport type { StateValueType } from '../../compile/mark';\nimport type { ConvertToMarkStyleSpec, ILineLikeMarkSpec } from '../../typings/visual';\nimport { isFunction, isNil } from '@visactor/vutils';\nimport { BaseMark } from './base-mark';\nimport type { IMarkStyle } from '../interface';\n\nexport abstract class BaseLineMark<T extends ILineLikeMarkSpec = ILineLikeMarkSpec> extends BaseMark<T> {\n  protected abstract _getIgnoreAttributes(): string[];\n\n  /**\n   * @override\n   * 之所以覆写是因为 vgrammar 侧默认都会处理 lineSegments，非常耗性能，所以需要 VChart 给一个标志位用于是否执行。\n   * 由外部series调用，设置markStyle的接口。\n   * @param style\n   * @param level\n   * @param state\n   */\n  setStyle<T>(\n    style: Partial<ConvertToMarkStyleSpec<T>> | Partial<IMarkStyle<T>>,\n    state: StateValueType = 'normal',\n    level: number = 0,\n    stateStyle = this.stateStyle\n  ): void {\n    if (isNil(style)) {\n      return;\n    }\n\n    if (stateStyle[state] === undefined) {\n      stateStyle[state] = {};\n    }\n\n    const ignoreAttributes = this._getIgnoreAttributes();\n    const segmentAttributes = [\n      'strokeWidth',\n      'lineWidth',\n      'lineDash',\n      'strokeDash',\n      'lineJoin',\n      'stroke',\n      'strokeOpacity',\n      'opacity',\n      'fill',\n      'fillOpacity',\n      'texture',\n      'texturePadding',\n      'textureSize',\n      'textureColor'\n    ];\n    const isUserLevel = this.isUserLevel(level);\n    let enableSegments = false;\n    Object.keys(style).forEach(attr => {\n      const attrStyle = style[attr];\n      if (isNil(attrStyle) || ignoreAttributes.includes(attr)) {\n        return;\n      }\n      if (\n        isUserLevel &&\n        segmentAttributes.includes(attr) &&\n        (isValidScaleType(attrStyle?.type) || attrStyle?.scale || isFunction(attrStyle))\n      ) {\n        enableSegments = true;\n      }\n\n      const styleConverter = this._filterAttribute(attr as any, attrStyle, state, level, isUserLevel, stateStyle);\n\n      this.setAttribute(attr as any, styleConverter, state, level, stateStyle);\n    });\n    if (enableSegments) {\n      this.setMarkConfig({\n        enableSegments: true\n      });\n    }\n  }\n}\n"]}