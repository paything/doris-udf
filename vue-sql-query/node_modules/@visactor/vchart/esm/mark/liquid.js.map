{"version":3,"sources":["../src/mark/liquid.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AAK5D,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAKlC,MAAM,eAAe,GAAG,MAAM,CAAC;AAC/B,MAAM,OAAO,UAAW,SAAQ,QAAyB;IAAzD;;QAEW,SAAI,GAAG,UAAU,CAAC,IAAI,CAAC;IAmBlC,CAAC;IAjBW,gBAAgB;QACxB,MAAM,YAAY,mCACb,KAAK,CAAC,gBAAgB,EAAE,KAC3B,IAAI,EAAE,CAAC,GACR,CAAC;QACF,OAAO,YAAY,CAAC;IACtB,CAAC;IAGS,YAAY,CAAC,KAA2B;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAGpC,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3E,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;;AAnBe,eAAI,YAAuB;AAsB7C,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAClD,iBAAiB,EAAE,CAAC;AACtB,CAAC,CAAC","file":"liquid.js","sourcesContent":["import { Factory } from './../core/factory';\nimport { registerWaveGlyph } from '@visactor/vgrammar-core';\nimport type { ILiquidMarkSpec } from '../typings';\nimport type { IMarkStyle } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\nimport { BaseMark } from './base';\nimport type { ILiquidMark } from '../series/liquid/liquid';\n// eslint-disable-next-line no-duplicate-imports\nimport type { IGroupMark } from '@visactor/vgrammar-core';\n\nconst WAVE_GLYPH_TYPE = 'wave';\nexport class LiquidMark extends BaseMark<ILiquidMarkSpec> implements ILiquidMark {\n  static readonly type = MarkTypeEnum.liquid;\n  readonly type = LiquidMark.type;\n\n  protected _getDefaultStyle() {\n    const defaultStyle: IMarkStyle<ILiquidMarkSpec> = {\n      ...super._getDefaultStyle(),\n      wave: 0\n    };\n    return defaultStyle;\n  }\n\n  /** 创建语法元素对象 */\n  protected _initProduct(group?: string | IGroupMark) {\n    const view = this.getVGrammarView();\n\n    // 声明语法元素\n    const id = this.getProductId();\n    this._product = view.glyph(WAVE_GLYPH_TYPE, group ?? view.rootMark).id(id);\n    this._compiledProductId = id;\n  }\n}\n\nexport const registerLiquidMark = () => {\n  Factory.registerMark(LiquidMark.type, LiquidMark);\n  registerWaveGlyph();\n};\n"]}