{"version":3,"sources":["../src/mark/component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAG5C,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAE1D,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAK5C,MAAM,OAAO,aAAc,SAAQ,QAAqB;IAOtD,YAAY,IAAY,EAAE,MAAmB;QAC3C,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QANtB,SAAI,GAAW,WAAW,CAAC;QAQzB,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,aAAa,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;IAC3B,CAAC;IAES,YAAY,CAAC,KAA2B;QAChD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAGpC,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,IAAI;aACjB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;aACjH,EAAE,CAAC,EAAE,CAAC,CAAC;QACV,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;;AAtBe,kBAAI,eAA0B;AAyBhD,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;AAC1D,CAAC,CAAC","file":"component.js","sourcesContent":["import { Factory } from './../core/factory';\nimport type { IGroupMark } from '@visactor/vgrammar-core';\n// eslint-disable-next-line no-duplicate-imports\nimport { GrammarMarkType } from '@visactor/vgrammar-core';\nimport type { ICommonSpec } from '../typings';\nimport { BaseMark } from './base/base-mark';\nimport type { IComponentMark, IMarkOption } from './interface';\n// eslint-disable-next-line no-duplicate-imports\nimport { MarkTypeEnum } from './interface/type';\n\nexport class ComponentMark extends BaseMark<ICommonSpec> implements IComponentMark {\n  static readonly type = MarkTypeEnum.component;\n  type: string = 'component';\n\n  private _componentType: string;\n  private _mode: '2d' | '3d';\n\n  constructor(name: string, option: IMarkOption) {\n    super(name, option);\n    // 这里需要将 type 指定为具体的组件名称，即调用 vgrammar 的 registerComponent API 注册的组件名称\n    this._componentType = option.componentType;\n    this._mode = option.mode;\n  }\n  /** 创建语法元素对象 */\n  protected _initProduct(group?: string | IGroupMark) {\n    const view = this.getVGrammarView();\n\n    // 声明语法元素\n    const id = this.getProductId();\n    this._product = view\n      .mark(GrammarMarkType.component, group ?? view.rootMark, { componentType: this._componentType, mode: this._mode })\n      .id(id);\n    this._compiledProductId = id;\n  }\n}\n\nexport const registerComponentMark = () => {\n  Factory.registerMark(ComponentMark.type, ComponentMark);\n};\n"]}