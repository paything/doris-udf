(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.VTable = global.VTable || {}, global.VTable.editors = {})));
})(this, (function (exports) { 'use strict';

    class InputEditor {
        editorType = 'Input';
        editorConfig;
        container;
        successCallback;
        element;
        constructor(editorConfig) {
            this.editorConfig = editorConfig;
        }
        createElement() {
            const input = document.createElement('input');
            input.setAttribute('type', 'text');
            if (this.editorConfig?.readonly) {
                input.setAttribute('readonly', `${this.editorConfig.readonly}`);
            }
            input.style.position = 'absolute';
            input.style.padding = '4px';
            input.style.width = '100%';
            input.style.boxSizing = 'border-box';
            input.style.backgroundColor = '#FFFFFF';
            input.style.borderRadius = '0px';
            input.style.border = '2px solid #d9d9d9';
            input.addEventListener('focus', () => {
                input.style.borderColor = '#4A90E2';
                input.style.outline = 'none';
            });
            input.addEventListener('blur', () => {
                input.style.borderColor = '#d9d9d9';
            });
            this.element = input;
            this.container.appendChild(input);
            input.addEventListener('keydown', (e) => {
                if (e.key === 'a' && (e.ctrlKey || e.metaKey)) {
                    e.stopPropagation();
                }
            });
            input.addEventListener('wheel', e => {
                e.preventDefault();
            });
        }
        setValue(value) {
            this.element.value = typeof value !== 'undefined' ? value : '';
        }
        getValue() {
            return this.element.value;
        }
        onStart({ value, referencePosition, container, endEdit }) {
            this.container = container;
            this.successCallback = endEdit;
            if (!this.element) {
                this.createElement();
                if (value !== undefined && value !== null) {
                    this.setValue(value);
                }
                if (referencePosition?.rect) {
                    this.adjustPosition(referencePosition.rect);
                }
            }
            this.element.focus();
        }
        adjustPosition(rect) {
            const borderWidth = 2;
            const top = rect.top - borderWidth / 2;
            const left = rect.left - borderWidth / 2;
            const width = rect.width + borderWidth;
            const height = rect.height + borderWidth;
            this.element.style.top = top + 'px';
            this.element.style.left = left + 'px';
            this.element.style.width = width + 'px';
            this.element.style.height = height + 'px';
        }
        endEditing() {
        }
        onEnd() {
            if (this.container?.contains(this.element)) {
                this.container.removeChild(this.element);
            }
            this.element = undefined;
        }
        isEditorElement(target) {
            return target === this.element;
        }
        validateValue(newValue, oldValue, position, table) {
            return true;
        }
    }

    class DateInputEditor extends InputEditor {
        editorType = 'DateInput';
        constructor(editorConfig) {
            super(editorConfig);
            this.editorConfig = editorConfig;
        }
        createElement() {
            const input = document.createElement('input');
            input.setAttribute('type', 'date');
            input.style.padding = '4px';
            input.style.width = '100%';
            input.style.boxSizing = 'border-box';
            input.style.position = 'absolute';
            input.style.backgroundColor = '#FFFFFF';
            input.style.borderRadius = '0px';
            input.style.border = '2px solid #d9d9d9';
            input.addEventListener('focus', () => {
                input.style.borderColor = '#4A90E2';
                input.style.outline = 'none';
            });
            input.addEventListener('blur', () => {
                input.style.borderColor = '#d9d9d9';
            });
            this.element = input;
            this.container.appendChild(input);
            input.addEventListener('keydown', (e) => {
                if (e.key === 'a' && (e.ctrlKey || e.metaKey)) {
                    e.stopPropagation();
                }
            });
            input.addEventListener('wheel', e => {
                e.preventDefault();
            });
        }
    }

    class ListEditor {
        editorType = 'Input';
        input;
        editorConfig;
        container;
        element;
        successCallback;
        constructor(editorConfig) {
            this.editorConfig = editorConfig;
        }
        createElement(value) {
            const select = document.createElement('select');
            select.setAttribute('type', 'text');
            select.style.position = 'absolute';
            select.style.padding = '4px';
            select.style.width = '100%';
            select.style.boxSizing = 'border-box';
            select.style.backgroundColor = '#FFFFFF';
            select.style.borderRadius = '0px';
            select.style.border = '2px solid #d9d9d9';
            select.addEventListener('focus', () => {
                select.style.borderColor = '#4A90E2';
                select.style.outline = 'none';
            });
            select.addEventListener('blur', () => {
                select.style.borderColor = '#d9d9d9';
            });
            this.element = select;
            const { values } = this.editorConfig;
            let opsStr = '';
            values.forEach(item => {
                opsStr +=
                    item === value
                        ? `<option value="${item}" selected>${item}</option>`
                        : `<option value="${item}" >${item}</option>`;
            });
            select.innerHTML = opsStr;
            this.container.appendChild(select);
        }
        _bindSelectChangeEvent() {
            this.element.addEventListener('change', () => {
            });
        }
        setValue(value) {
        }
        getValue() {
            return this.element.value;
        }
        onStart({ container, value, referencePosition, endEdit }) {
            this.container = container;
            this.successCallback = endEdit;
            this.createElement(value);
            if (value !== undefined && value !== null) {
                this.setValue(value);
            }
            if (referencePosition?.rect) {
                this.adjustPosition(referencePosition.rect);
            }
            this.element.focus();
        }
        adjustPosition(rect) {
            const borderWidth = 2;
            const top = rect.top - borderWidth / 2;
            const left = rect.left - borderWidth / 2;
            const width = rect.width + borderWidth;
            const height = rect.height + borderWidth;
            this.element.style.top = top + 'px';
            this.element.style.left = left + 'px';
            this.element.style.width = width + 'px';
            this.element.style.height = height + 'px';
        }
        endEditing() {
        }
        onEnd() {
            this.container.removeChild(this.element);
        }
        isEditorElement(target) {
            return target === this.element;
        }
    }

    class TextAreaEditor {
        editorType = 'TextArea';
        editorConfig;
        container;
        successCallback;
        element;
        constructor(editorConfig) {
            this.editorConfig = editorConfig || {};
        }
        createElement() {
            const input = document.createElement('textArea');
            if (this.editorConfig?.readonly) {
                input.setAttribute('readonly', `${this.editorConfig.readonly}`);
            }
            input.style.resize = 'none';
            input.style.position = 'absolute';
            input.style.padding = '4px';
            input.style.width = '100%';
            input.style.height = '100%';
            input.style.boxSizing = 'border-box';
            input.style.backgroundColor = '#FFFFFF';
            input.style.borderRadius = '0px';
            input.style.border = '2px solid #d9d9d9';
            input.addEventListener('focus', () => {
                input.style.borderColor = '#4A90E2';
                input.style.outline = 'none';
            });
            input.addEventListener('blur', () => {
                input.style.borderColor = '#d9d9d9';
                input.style.outline = 'none';
            });
            this.element = input;
            this.container.appendChild(input);
            input.addEventListener('keydown', (e) => {
                const _isSelectAll = e.key === 'a' && (e.ctrlKey || e.metaKey);
                const _isTextAreaNewLine = e.key === 'Enter' && e.shiftKey;
                if (_isSelectAll || _isTextAreaNewLine) {
                    e.stopPropagation();
                }
            });
        }
        setValue(value) {
            this.element.value = typeof value !== 'undefined' ? value : '';
        }
        getValue() {
            return this.element.value;
        }
        onStart({ value, referencePosition, container, endEdit }) {
            this.container = container;
            this.successCallback = endEdit;
            if (!this.element) {
                this.createElement();
                if (value !== undefined && value !== null) {
                    this.setValue(value);
                }
                if (referencePosition?.rect) {
                    this.adjustPosition(referencePosition.rect);
                }
            }
            this.element.focus();
        }
        adjustPosition(rect) {
            const borderWidth = 2;
            const top = rect.top - borderWidth / 2;
            const left = rect.left - borderWidth / 2;
            const width = rect.width + borderWidth;
            const height = rect.height + borderWidth;
            this.element.style.top = top + 'px';
            this.element.style.left = left + 'px';
            this.element.style.width = width + 'px';
            this.element.style.height = height + 'px';
        }
        endEditing() {
        }
        onEnd() {
            this.container.removeChild(this.element);
            this.element = undefined;
        }
        isEditorElement(target) {
            return target === this.element;
        }
    }

    exports.Placement = void 0;
    (function (Placement) {
        Placement["top"] = "top";
        Placement["bottom"] = "bottom";
        Placement["left"] = "left";
        Placement["right"] = "right";
    })(exports.Placement || (exports.Placement = {}));
    exports.ValidateEnum = void 0;
    (function (ValidateEnum) {
        ValidateEnum["validateExit"] = "validate-exit";
        ValidateEnum["invalidateExit"] = "invalidate-exit";
        ValidateEnum["validateNotExit"] = "validate-not-exit";
        ValidateEnum["invalidateNotExit"] = "invalidate-not-exit";
    })(exports.ValidateEnum || (exports.ValidateEnum = {}));

    exports.DateInputEditor = DateInputEditor;
    exports.InputEditor = InputEditor;
    exports.ListEditor = ListEditor;
    exports.TextAreaEditor = TextAreaEditor;

}));
