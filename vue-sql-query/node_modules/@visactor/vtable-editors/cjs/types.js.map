{"version":3,"sources":["../src/types.ts"],"names":[],"mappings":";;;AAqGA,IAAY,SAKX;AALD,WAAY,SAAS;IACnB,wBAAW,CAAA;IACX,8BAAiB,CAAA;IACjB,0BAAa,CAAA;IACb,4BAAe,CAAA;AACjB,CAAC,EALW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAKpB;AAOD,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,8CAA8B,CAAA;IAC9B,kDAAkC,CAAA;IAClC,qDAAqC,CAAA;IACrC,yDAAyC,CAAA;AAC3C,CAAC,EALW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAKvB","file":"types.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface IEditor<V = any, T = any> {\n  /**\n   * Called when cell enters edit mode.\n   *\n   * Warning will be thrown if you don't provide this function\n   * after removal of `beginEditing`.\n   */\n  onStart: (context: EditContext<V, T>) => void;\n  /**\n   * called when cell exits edit mode.\n   *\n   * Warning will be thrown if you don't provide this function\n   * after removal of `exit`.\n   */\n  onEnd: () => void;\n  /**\n   * Called when user click somewhere while editor is in edit mode.\n   *\n   * If returns falsy, VTable will exit edit mode.\n   *\n   * If returns truthy or not defined, nothing will happen.\n   * Which means, in this scenario, you need to call `endEdit` manually\n   * to end edit mode.\n   */\n  isEditorElement?: (target: HTMLElement) => boolean;\n  /**\n   * Before set new value to table, use it to validate value.\n   * If the interface returns true, the value takes effect; otherwise, it does not take effect.\n   * @param newValue new value to be set. If not provided, the current input element value will be used.\n   * @param oldValue old value of the cell.\n   */\n  // validateValue?: (newValue?: V, oldValue?: V) => boolean | Promise<boolean>;\n  validateValue?: (\n    newValue?: any,\n    oldValue?: any,\n    position?: CellAddress,\n    table?: any\n  ) => boolean | ValidateEnum | Promise<boolean | ValidateEnum>;\n  /**\n   * Called when editor mode is exited by any means.\n   * Expected to return the current value of the cell.\n   */\n  getValue: () => V;\n  /**\n   * Called when cell enter edit mode.\n   * @deprecated use `onStart` instead.\n   */\n  beginEditing?: (container: HTMLElement, referencePosition: ReferencePosition, value: V) => void;\n  /**\n   * @see onEnd\n   * @deprecated use `onEnd` instead.\n   */\n  exit?: () => void;\n  /**\n   * @see isEditorElement\n   * @deprecated use `isEditorElement` instead.\n   */\n  targetIsOnEditor?: (target: HTMLElement) => boolean;\n  /**\n   * Called when cell enters edit mode with a callback function\n   * that can be used to end edit mode.\n   * @see EditContext#endEdit\n   * @deprecated callback is provided as `endEdit` in `EditContext`, use `onStart` instead.\n   */\n  bindSuccessCallback?: (callback: () => void) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface EditContext<V = any, T = any> {\n  /** Container element of the VTable instance. */\n  container: HTMLElement;\n  /** Position info of the cell that is being edited. */\n  referencePosition: ReferencePosition;\n  /** Cell value before editing. */\n  value: V;\n  /**\n   * Callback function that can be used to end edit mode.\n   *\n   * In most cases you don't need to call this function,\n   * since Enter key click is handled by VTable automatically,\n   * and mouse click can be handled by `isEditorElement`.\n   *\n   * However, if your editor has its own complete button,\n   * or you have external elements like Tooltip,\n   * you may want to use this callback to help you\n   * end edit mode.\n   */\n  endEdit: () => void;\n  table: T;\n  col: number;\n  row: number;\n}\n\nexport interface RectProps {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n}\n\nexport enum Placement {\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right'\n}\n\nexport interface ReferencePosition {\n  rect: RectProps;\n  placement?: Placement;\n}\n\nexport enum ValidateEnum {\n  validateExit = 'validate-exit',\n  invalidateExit = 'invalidate-exit',\n  validateNotExit = 'validate-not-exit',\n  invalidateNotExit = 'invalidate-not-exit'\n}\n\nexport type CellAddress = {\n  col: number;\n  row: number;\n};\n"]}