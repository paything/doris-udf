export interface IEditor<V = any, T = any> {
    onStart: (context: EditContext<V, T>) => void;
    onEnd: () => void;
    isEditorElement?: (target: HTMLElement) => boolean;
    validateValue?: (newValue?: any, oldValue?: any, position?: CellAddress, table?: any) => boolean | ValidateEnum | Promise<boolean | ValidateEnum>;
    getValue: () => V;
    beginEditing?: (container: HTMLElement, referencePosition: ReferencePosition, value: V) => void;
    exit?: () => void;
    targetIsOnEditor?: (target: HTMLElement) => boolean;
    bindSuccessCallback?: (callback: () => void) => void;
}
export interface EditContext<V = any, T = any> {
    container: HTMLElement;
    referencePosition: ReferencePosition;
    value: V;
    endEdit: () => void;
    table: T;
    col: number;
    row: number;
}
export interface RectProps {
    left: number;
    top: number;
    width: number;
    height: number;
}
export declare enum Placement {
    top = "top",
    bottom = "bottom",
    left = "left",
    right = "right"
}
export interface ReferencePosition {
    rect: RectProps;
    placement?: Placement;
}
export declare enum ValidateEnum {
    validateExit = "validate-exit",
    invalidateExit = "invalidate-exit",
    validateNotExit = "validate-not-exit",
    invalidateNotExit = "invalidate-not-exit"
}
export type CellAddress = {
    col: number;
    row: number;
};
