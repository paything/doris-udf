"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.ListEditor = void 0;

class ListEditor {
    constructor(editorConfig) {
        this.editorType = "Input", this.editorConfig = editorConfig;
    }
    createElement(value) {
        const select = document.createElement("select");
        select.setAttribute("type", "text"), select.style.position = "absolute", select.style.padding = "4px", 
        select.style.width = "100%", select.style.boxSizing = "border-box", select.style.backgroundColor = "#FFFFFF", 
        select.style.borderRadius = "0px", select.style.border = "2px solid #d9d9d9", select.addEventListener("focus", (() => {
            select.style.borderColor = "#4A90E2", select.style.outline = "none";
        })), select.addEventListener("blur", (() => {
            select.style.borderColor = "#d9d9d9";
        })), this.element = select;
        const {values: values} = this.editorConfig;
        let opsStr = "";
        values.forEach((item => {
            opsStr += item === value ? `<option value="${item}" selected>${item}</option>` : `<option value="${item}" >${item}</option>`;
        })), select.innerHTML = opsStr, this.container.appendChild(select);
    }
    _bindSelectChangeEvent() {
        this.element.addEventListener("change", (() => {}));
    }
    setValue(value) {}
    getValue() {
        return this.element.value;
    }
    onStart({container: container, value: value, referencePosition: referencePosition, endEdit: endEdit}) {
        this.container = container, this.successCallback = endEdit, this.createElement(value), 
        null != value && this.setValue(value), (null == referencePosition ? void 0 : referencePosition.rect) && this.adjustPosition(referencePosition.rect), 
        this.element.focus();
    }
    adjustPosition(rect) {
        const top = rect.top - 1, left = rect.left - 1, width = rect.width + 2, height = rect.height + 2;
        this.element.style.top = top + "px", this.element.style.left = left + "px", this.element.style.width = width + "px", 
        this.element.style.height = height + "px";
    }
    endEditing() {}
    onEnd() {
        this.container.removeChild(this.element);
    }
    isEditorElement(target) {
        return target === this.element;
    }
}

exports.ListEditor = ListEditor;
//# sourceMappingURL=list-editor.js.map