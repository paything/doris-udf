"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.InputEditor = void 0;

class InputEditor {
    constructor(editorConfig) {
        this.editorType = "Input", this.editorConfig = editorConfig;
    }
    createElement() {
        var _a;
        const input = document.createElement("input");
        input.setAttribute("type", "text"), (null === (_a = this.editorConfig) || void 0 === _a ? void 0 : _a.readonly) && input.setAttribute("readonly", `${this.editorConfig.readonly}`), 
        input.style.position = "absolute", input.style.padding = "4px", input.style.width = "100%", 
        input.style.boxSizing = "border-box", input.style.backgroundColor = "#FFFFFF", input.style.borderRadius = "0px", 
        input.style.border = "2px solid #d9d9d9", input.addEventListener("focus", (() => {
            input.style.borderColor = "#4A90E2", input.style.outline = "none";
        })), input.addEventListener("blur", (() => {
            input.style.borderColor = "#d9d9d9";
        })), this.element = input, this.container.appendChild(input), input.addEventListener("keydown", (e => {
            "a" === e.key && (e.ctrlKey || e.metaKey) && e.stopPropagation();
        })), input.addEventListener("wheel", (e => {
            e.preventDefault();
        }));
    }
    setValue(value) {
        this.element.value = void 0 !== value ? value : "";
    }
    getValue() {
        return this.element.value;
    }
    onStart({value: value, referencePosition: referencePosition, container: container, endEdit: endEdit}) {
        this.container = container, this.successCallback = endEdit, this.element || (this.createElement(), 
        null != value && this.setValue(value), (null == referencePosition ? void 0 : referencePosition.rect) && this.adjustPosition(referencePosition.rect)), 
        this.element.focus();
    }
    adjustPosition(rect) {
        const top = rect.top - 1, left = rect.left - 1, width = rect.width + 2, height = rect.height + 2;
        this.element.style.top = top + "px", this.element.style.left = left + "px", this.element.style.width = width + "px", 
        this.element.style.height = height + "px";
    }
    endEditing() {}
    onEnd() {
        var _a;
        (null === (_a = this.container) || void 0 === _a ? void 0 : _a.contains(this.element)) && this.container.removeChild(this.element), 
        this.element = void 0;
    }
    isEditorElement(target) {
        return target === this.element;
    }
    validateValue(newValue, oldValue, position, table) {
        return !0;
    }
}

exports.InputEditor = InputEditor;
//# sourceMappingURL=input-editor.js.map