var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}, __metadata = this && this.__metadata || function(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}, __param = this && this.__param || function(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
};

import { SYMBOL_NUMBER_TYPE, DefaultCanvasSymbolRender, BaseRender, CustomPath2D, inject, injectable } from "@visactor/vrender-core";

import rough from "roughjs";

import { defaultRouthThemeSpec } from "./config";

let RoughCanvasSymbolRender = class extends BaseRender {
    constructor(canvasRenderer) {
        super(), this.canvasRenderer = canvasRenderer, this.type = "symbol", this.numberType = SYMBOL_NUMBER_TYPE, 
        this.style = "rough";
    }
    draw(symbol, renderService, drawContext, params) {
        const {context: context} = drawContext;
        if (!context) return;
        const canvas = context.canvas.nativeCanvas, rc = rough.canvas(canvas);
        context.highPerformanceSave();
        const symbolAttribute = symbol.getGraphicTheme(), data = this.transform(symbol, symbolAttribute, context), {x: x, y: y, z: z, lastModelMatrix: lastModelMatrix} = data, parsedPath = symbol.getParsedPath();
        if (!parsedPath) return;
        const {fill: fill = symbolAttribute.fill, stroke: stroke = symbolAttribute.stroke, fillColor: fillColor = symbolAttribute.fill, strokeColor: strokeColor = symbolAttribute.stroke, size: size = symbolAttribute.size, lineWidth: lineWidth = symbolAttribute.lineWidth, maxRandomnessOffset: maxRandomnessOffset = defaultRouthThemeSpec.maxRandomnessOffset, roughness: roughness = defaultRouthThemeSpec.roughness, bowing: bowing = defaultRouthThemeSpec.bowing, curveFitting: curveFitting = defaultRouthThemeSpec.curveFitting, curveTightness: curveTightness = defaultRouthThemeSpec.curveTightness, curveStepCount: curveStepCount = defaultRouthThemeSpec.curveStepCount, fillStyle: fillStyle = defaultRouthThemeSpec.fillStyle, fillWeight: fillWeight = defaultRouthThemeSpec.fillWeight, hachureAngle: hachureAngle = defaultRouthThemeSpec.hachureAngle, hachureGap: hachureGap = defaultRouthThemeSpec.hachureGap, simplification: simplification = defaultRouthThemeSpec.simplification, dashOffset: dashOffset = defaultRouthThemeSpec.dashOffset, dashGap: dashGap = defaultRouthThemeSpec.dashGap, zigzagOffset: zigzagOffset = defaultRouthThemeSpec.zigzagOffset, seed: seed = defaultRouthThemeSpec.seed, fillLineDash: fillLineDash = defaultRouthThemeSpec.fillLineDash, fillLineDashOffset: fillLineDashOffset = defaultRouthThemeSpec.fillLineDashOffset, disableMultiStroke: disableMultiStroke = defaultRouthThemeSpec.disableMultiStroke, disableMultiStrokeFill: disableMultiStrokeFill = defaultRouthThemeSpec.disableMultiStrokeFill, preserveVertices: preserveVertices = defaultRouthThemeSpec.preserveVertices, fixedDecimalPlaceDigits: fixedDecimalPlaceDigits = defaultRouthThemeSpec.fixedDecimalPlaceDigits} = symbol.attribute;
        let svgPath = "";
        if (parsedPath.drawToSvgPath) svgPath = parsedPath.drawToSvgPath(size, x, y); else {
            const customPath = new CustomPath2D;
            parsedPath.draw(customPath, size, x, y) && customPath.closePath(), svgPath = customPath.toString();
        }
        rc.path(svgPath, {
            fill: fill ? fillColor : void 0,
            stroke: stroke ? strokeColor : void 0,
            strokeWidth: lineWidth,
            maxRandomnessOffset: maxRandomnessOffset,
            roughness: roughness,
            bowing: bowing,
            curveFitting: curveFitting,
            curveTightness: curveTightness,
            curveStepCount: curveStepCount,
            fillStyle: fillStyle,
            fillWeight: fillWeight,
            hachureAngle: hachureAngle,
            hachureGap: hachureGap,
            simplification: simplification,
            dashOffset: dashOffset,
            dashGap: dashGap,
            zigzagOffset: zigzagOffset,
            seed: seed,
            fillLineDash: fillLineDash,
            fillLineDashOffset: fillLineDashOffset,
            disableMultiStroke: disableMultiStroke,
            disableMultiStrokeFill: disableMultiStrokeFill,
            preserveVertices: preserveVertices,
            fixedDecimalPlaceDigits: fixedDecimalPlaceDigits
        }), context.highPerformanceRestore();
    }
    drawShape(graphic, ctx, x, y, drawContext, params, fillCb, strokeCb) {
        if (this.canvasRenderer.drawShape) return this.canvasRenderer.drawShape(graphic, ctx, x, y, drawContext, params, fillCb, strokeCb);
    }
};

RoughCanvasSymbolRender = __decorate([ injectable(), __param(0, inject(DefaultCanvasSymbolRender)), __metadata("design:paramtypes", [ Object ]) ], RoughCanvasSymbolRender);

export { RoughCanvasSymbolRender };
//# sourceMappingURL=rough-symbol.js.map
