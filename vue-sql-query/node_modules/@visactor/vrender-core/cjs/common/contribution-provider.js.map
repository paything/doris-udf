{"version":3,"sources":["../src/common/contribution-provider.ts"],"names":[],"mappings":";;;AAGa,QAAA,oBAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAEnE,MAAM,yBAAyB;IAK7B,YAAY,iBAAkD,EAAE,SAA+B;QAC7F,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;YACjB,IAAI,CAAC,SAAS;gBACZ,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACtE;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;CACF;AAED,SAAgB,wBAAwB,CAAC,IAAqB,EAAE,EAAO;IACrE,IAAI,CAAC,4BAAoB,CAAC;SACvB,cAAc,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAI,yBAAyB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;SAC/E,gBAAgB,EAAE;SAClB,eAAe,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AALD,4DAKC;AAED,SAAgB,wCAAwC,CAAC,IAAqB,EAAE,EAAO;IACrF,IAAI,CAAC,4BAAoB,CAAC;SACvB,cAAc,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,IAAI,yBAAyB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;SAC/E,eAAe,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAJD,4FAIC","file":"contribution-provider.js","sourcesContent":["import type { interfaces } from '../common/inversify-lite';\nimport type { IContributionProvider } from '../interface';\n\nexport const ContributionProvider = Symbol('ContributionProvider');\n\nclass ContributionProviderCache<T> implements IContributionProvider<T> {\n  protected caches?: T[];\n  protected serviceIdentifier: interfaces.ServiceIdentifier<T>;\n  protected container: interfaces.Container;\n\n  constructor(serviceIdentifier: interfaces.ServiceIdentifier<T>, container: interfaces.Container) {\n    this.serviceIdentifier = serviceIdentifier;\n    this.container = container;\n  }\n\n  getContributions(): T[] {\n    if (!this.caches) {\n      this.caches = [];\n      this.container &&\n        this.container.isBound(this.serviceIdentifier) &&\n        this.caches.push(...this.container.getAll(this.serviceIdentifier));\n    }\n    return this.caches;\n  }\n}\n\nexport function bindContributionProvider(bind: interfaces.Bind, id: any): void {\n  bind(ContributionProvider)\n    .toDynamicValue(({ container }) => new ContributionProviderCache(id, container))\n    .inSingletonScope()\n    .whenTargetNamed(id);\n}\n\nexport function bindContributionProviderNoSingletonScope(bind: interfaces.Bind, id: any): void {\n  bind(ContributionProvider)\n    .toDynamicValue(({ container }) => new ContributionProviderCache(id, container))\n    .whenTargetNamed(id);\n}\n"]}