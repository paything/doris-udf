{"version":3,"sources":["../src/image.ts"],"names":[],"mappings":"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","file":"image.js","sourcesContent":["import { vglobal } from '@visactor/vrender-core';\nimport type { GeometricMaskShape, TextShapeMask } from './types/wordcloud';\nimport { getMaxRadiusAndCenter, getShapeFunction } from './shapes';\nimport type { IPointLike } from '@visactor/vutils';\nimport { isValid, polarToCartesian } from '@visactor/vutils';\n\nexport const generateIsEmptyPixel = (backgroundColor?: string) => {\n  if (!backgroundColor || backgroundColor === '#fff') {\n    return (imageData: ImageData, y: number, x: number) => {\n      const width = imageData.width;\n      return (\n        imageData.data[y * width * 4 + x * 4 + 3] === 0 ||\n        (imageData.data[y * width * 4 + x * 4 + 0] === 255 &&\n          imageData.data[y * width * 4 + x * 4 + 1] === 255 &&\n          imageData.data[y * width * 4 + x * 4 + 2] === 255)\n      );\n    };\n  }\n\n  /* Determine bgPixel by creating\n      another canvas and fill the specified background color. */\n  // eslint-disable-next-line no-undef\n  const bctx = vglobal.createCanvas({ width: 1, height: 1 }).getContext('2d', { willReadFrequently: true });\n\n  bctx.fillStyle = backgroundColor;\n  bctx.fillRect(0, 0, 1, 1);\n  const bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n  return (imageData: ImageData, y: number, x: number) => {\n    const width = imageData.width;\n\n    return [0, 1, 2, 3].every(i => {\n      return imageData.data[(y * width + x) * 4 + i] === bgPixel[i];\n    });\n  };\n};\n\nexport const generateMaskCanvas = (\n  shape: TextShapeMask | GeometricMaskShape,\n  width: number,\n  height: number,\n  cacheCanvas?: HTMLCanvasElement\n) => {\n  const { backgroundColor = '#fff' } = shape;\n\n  const maskCanvas =\n    cacheCanvas ||\n    vglobal.createCanvas({\n      width,\n      height,\n      dpr: 1\n    });\n  const tempContext = maskCanvas.getContext('2d', { willReadFrequently: true });\n  if (cacheCanvas) {\n    const prevWidth = cacheCanvas.width;\n    const prevHeight = cacheCanvas.height;\n    tempContext.clearRect(0, 0, prevWidth, prevHeight);\n    cacheCanvas.style.width = `${width}px`;\n    cacheCanvas.style.height = `${height}px`;\n    cacheCanvas.width = width;\n    cacheCanvas.height = height;\n  }\n  tempContext.fillStyle = backgroundColor;\n  tempContext.fillRect(0, 0, maskCanvas.width, maskCanvas.height);\n\n  if ((shape as TextShapeMask).type === 'text') {\n    drawTextMask(shape as TextShapeMask, maskCanvas.width, maskCanvas.height, tempContext);\n  } else if ((shape as GeometricMaskShape).type === 'geometric') {\n    drawGeometricMask(shape as GeometricMaskShape, maskCanvas.width, maskCanvas.height, tempContext);\n  }\n\n  return maskCanvas;\n};\n\nconst drawTextMask = (shape: TextShapeMask, width: number, height: number, ctx: CanvasRenderingContext2D) => {\n  const {\n    fontFamily = 'sans-serif',\n    fontWeight = 'normal',\n    fontStyle = 'normal',\n    fontVariant = 'normal',\n    fill,\n    text,\n    hollow\n  } = shape;\n\n  let baseFontSize = 12;\n\n  ctx.font = `${fontStyle} ${fontVariant} ${fontWeight} ${baseFontSize}px ${fontFamily}`;\n\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillStyle = fill ?? 'black';\n  const textMetrics = ctx.measureText(text);\n  /** 斜体计算字体宽度存在不准的情况，暂时通过方法来解决 */\n  const scale = fontStyle !== 'normal' ? 1.1 : 1;\n  const actualWidth =\n    isValid(textMetrics.actualBoundingBoxRight) && isValid(textMetrics.actualBoundingBoxLeft)\n      ? Math.ceil(scale * (Math.abs(textMetrics.actualBoundingBoxRight) + Math.abs(textMetrics.actualBoundingBoxLeft)))\n      : 0;\n  const textWidth = Math.max(Math.ceil(textMetrics.width), actualWidth, baseFontSize);\n\n  if (hollow) {\n    ctx.globalCompositeOperation = 'xor';\n  }\n  if (textWidth > width) {\n    const scale = Math.min(width / textWidth, height / baseFontSize);\n    ctx.fillText(text, width / 2, height / 2);\n    ctx.scale(scale, scale);\n  } else {\n    baseFontSize = Math.floor((baseFontSize * width) / textWidth);\n    baseFontSize = Math.min(baseFontSize, height);\n\n    ctx.font = `${fontStyle} ${fontVariant} ${fontWeight} ${baseFontSize}px ${fontFamily}`;\n    ctx.fillText(text, Math.floor(width / 2), Math.floor(height / 2));\n  }\n};\n\nexport const generatePoints = (center: IPointLike, radius: number, startAngle: number = 0, count: number) => {\n  const angle = (2 * Math.PI) / count;\n  return new Array(count).fill(0).map((entry, index) => {\n    return polarToCartesian(center, radius, startAngle + index * angle);\n  });\n};\n\nexport const generateCardioidPoints = (center: IPointLike, radius: number, startAngle: number = 0, count: number) => {\n  const angle = (2 * Math.PI) / count;\n  const func = getShapeFunction('cardioid');\n\n  return new Array(count).fill(0).map((entry, index) => {\n    const theta = startAngle + index * angle;\n    const r = radius * func(theta);\n    const res = polarToCartesian(center, r, theta);\n    return res;\n  });\n};\n\nexport const drawRegularPolygon = (ctx: CanvasRenderingContext2D, points: IPointLike[]) => {\n  ctx.beginPath();\n  points.forEach((p: IPointLike, index: number) => {\n    if (index === 0) {\n      ctx.moveTo(p.x, p.y);\n    } else {\n      ctx.lineTo(p.x, p.y);\n    }\n  });\n\n  ctx.closePath();\n  ctx.fill();\n};\n\nexport const drawCardioid = (ctx: CanvasRenderingContext2D, points: IPointLike[]) => {\n  ctx.beginPath();\n  let prev: IPointLike;\n  points.forEach((p: IPointLike, index: number) => {\n    if (index === 0) {\n      ctx.moveTo(p.x, p.y);\n    } else {\n      ctx.bezierCurveTo(p.x, p.y, prev.x, prev.y, p.x, p.y);\n    }\n    prev = p;\n  });\n\n  ctx.closePath();\n  ctx.fill();\n};\n\nconst drawGeometricMask = (shape: GeometricMaskShape, width: number, height: number, ctx: CanvasRenderingContext2D) => {\n  const { fill, hollow } = shape;\n  const { center, maxRadius } = getMaxRadiusAndCenter(shape.shape, [width, height]);\n\n  ctx.fillStyle = fill ?? 'black';\n\n  if (hollow) {\n    ctx.globalCompositeOperation = 'xor';\n  }\n  const cx = center[0];\n  const cy = center[1];\n\n  if (shape.shape === 'cardioid') {\n    drawCardioid(ctx, generateCardioidPoints({ x: cx, y: cy }, maxRadius, 0, 100));\n  } else if (shape.shape === 'circle') {\n    ctx.beginPath();\n    ctx.arc(cx, cy, maxRadius, 0, 2 * Math.PI, true);\n    ctx.fill();\n  } else if (shape.shape === 'diamond') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 2, 4));\n  } else if (shape.shape === 'square') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 4, 4));\n  } else if (shape.shape === 'pentagon') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, Math.PI / 2, 5));\n  } else if (shape.shape === 'triangle' || shape.shape === 'triangleUpright') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 2, 3));\n  } else if (shape.shape === 'triangleForward') {\n    drawRegularPolygon(ctx, generatePoints({ x: cx, y: cy }, maxRadius, 0, 3));\n  } else if (shape.shape === 'star') {\n    const outterPoints = generatePoints({ x: cx, y: cy }, maxRadius, -Math.PI / 2, 5);\n    const innerPoints = generatePoints(\n      { x: cx, y: cy },\n      maxRadius / (2 * Math.cos(Math.PI / 5)),\n      -Math.PI / 2 + Math.PI / 5,\n      5\n    );\n    const points = [];\n    for (let i = 0; i < 5; i++) {\n      points.push(outterPoints[i]);\n      points.push(innerPoints[i]);\n    }\n    drawRegularPolygon(ctx, points);\n  } else {\n    ctx.fillRect(0, 0, width, height);\n  }\n};\n"]}