{"version":3,"sources":["../src/format.ts"],"names":[],"mappings":";;;AAEO,MAAM,YAAY,GAAG,CAC1B,KAA2B,EAC3B,SAAc,EAAE,EAChB,OAGC,EACD,EAAE;IACF,MAAM,WAAW,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,CAAC,CAAC;IAE3C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClD,MAAM,CAAC,IAAI,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE,IAAqB,CAAC,CAAC;YACjF,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,WAAW,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,QAAQ,EAAE;oBAClD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;oBACrB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;iBACpB;qBAAM;oBACL,IAAA,oBAAY,EAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;iBAC9C;aACF;SACF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAzBW,QAAA,YAAY,gBAyBvB;AAEK,MAAM,gBAAgB,GAAG,CAC9B,KAAwB,EACxB,SAAc,EAAE,EAChB,OAGC,EACI,EAAE;IACP,MAAM,WAAW,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,KAAI,CAAC,CAAC;IAE3C,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE;YACtD,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;;oBAC5B,MAAM,IAAI,GAAG;wBACX,MAAM,EAAE,IAAI;wBACZ,MAAM,EAAE,KAAK;wBACb,EAAE,EAAE,IAAI,CAAC,CAAC;wBACV,EAAE,EAAE,IAAI,CAAC,CAAC;wBACV,EAAE,EAAE,KAAK,CAAC,CAAC;wBACX,EAAE,EAAE,KAAK,CAAC,CAAC;wBACX,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE;qBAChC,CAAC;oBAEF,MAAM,CAAC,IAAI,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,QAAQ,EAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAE,IAAqB,CAAC,CAAC;oBAEjF,IAAI,MAAA,KAAK,CAAC,QAAQ,0CAAE,MAAM,EAAE;wBAC1B,IAAA,wBAAgB,EAAC,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;qBAC5C;gBACH,CAAC,CAAC,CAAC;aACJ;SACF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAnCW,QAAA,gBAAgB,oBAmC3B","file":"format.js","sourcesContent":["import type { TreeLinkElement, TreemapNodeElement, TreeNodeElement } from './interface';\n\nexport const flattenNodes = <T = TreemapNodeElement>(\n  nodes: TreemapNodeElement[],\n  output: T[] = [],\n  options?: {\n    maxDepth?: number;\n    callback?: (node: TreemapNodeElement) => T;\n  }\n) => {\n  const hasMaxDepth = options?.maxDepth >= 0;\n\n  nodes.forEach(node => {\n    if (!hasMaxDepth || node.depth <= options.maxDepth) {\n      output.push(options?.callback ? options.callback(node) : (node as unknown as T));\n      if (node.children) {\n        if (hasMaxDepth && node.depth === options.maxDepth) {\n          node.children = null;\n          node.isLeaf = true;\n        } else {\n          flattenNodes(node.children, output, options);\n        }\n      }\n    }\n  });\n\n  return output;\n};\n\nexport const flattenTreeLinks = <T = TreeLinkElement>(\n  nodes: TreeNodeElement[],\n  output: T[] = [],\n  options?: {\n    maxDepth?: number;\n    callback?: (link: TreeLinkElement) => T;\n  }\n): T[] => {\n  const hasMaxDepth = options?.maxDepth >= 0;\n\n  nodes.forEach(node => {\n    if (!hasMaxDepth || node.depth <= options.maxDepth - 1) {\n      if (node.children) {\n        node.children.forEach(child => {\n          const link = {\n            source: node,\n            target: child,\n            x0: node.x,\n            y0: node.y,\n            x1: child.x,\n            y1: child.y,\n            key: `${node.key}~${child.key}`\n          };\n\n          output.push(options?.callback ? options.callback(link) : (link as unknown as T));\n\n          if (child.children?.length) {\n            flattenTreeLinks([child], output, options);\n          }\n        });\n      }\n    }\n  });\n\n  return output;\n};\n"]}