{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["import { isNil, toValidNumber } from '@visactor/vutils';\nimport type { HierarchicalDatum, HierarchicalNodeElement } from './interface';\n\nexport const calculateNodeValue = <Datum extends HierarchicalDatum, NodeElement extends HierarchicalNodeElement<Datum>>(\n  subTree: Datum[],\n  output: NodeElement[],\n  depth: number = 0,\n  flattenIndex: number = -1,\n  parent?: NodeElement,\n  getNodeKey?: (datum: Datum) => string,\n  valueField: string = 'value'\n): { sum: number; maxDepth: number; flattenIndex: number } => {\n  let sum = 0;\n  let prevFlattenIndex = flattenIndex ?? -1;\n  let maxDepth = depth;\n\n  subTree.forEach((datum, index) => {\n    const node = {\n      flattenIndex: ++prevFlattenIndex,\n      key: getNodeKey ? getNodeKey(datum) : `${parent?.key ?? ''}-${index}`,\n      maxDepth: -1,\n      depth,\n      index,\n      value: datum[valueField],\n      isLeaf: true,\n      datum: parent ? parent.datum.concat(datum) : [datum],\n      parentKey: parent?.key\n    } as NodeElement;\n\n    if (datum.children?.length) {\n      node.children = [];\n      node.isLeaf = false;\n      const res = calculateNodeValue(\n        datum.children as Datum[],\n        node.children,\n        depth + 1,\n        prevFlattenIndex,\n        node,\n        getNodeKey,\n        valueField\n      );\n      node.value = isNil(datum[valueField]) ? res.sum : Math.max(res.sum, toValidNumber(datum[valueField]));\n\n      prevFlattenIndex = res.flattenIndex;\n      maxDepth = Math.max(res.maxDepth, maxDepth);\n    } else {\n      node.isLeaf = true;\n      node.value = toValidNumber(datum[valueField]);\n    }\n\n    sum += Math.abs(node.value);\n    output.push(node);\n  });\n\n  return { sum, maxDepth, flattenIndex: prevFlattenIndex };\n};\n\nexport const eachBefore = <NodeElement extends HierarchicalDatum, ContextType = any>(\n  subTree: NodeElement[],\n  callback: (node: NodeElement, index?: number, parent?: NodeElement, ctx?: ContextType) => ContextType,\n  parent?: NodeElement,\n  ctx?: ContextType\n) => {\n  let ctxRes = ctx;\n\n  subTree.forEach((node, index) => {\n    ctxRes = callback(node, index, parent, ctxRes);\n    if (node.children?.length) {\n      ctxRes = eachBefore(node.children as NodeElement[], callback, node, ctxRes);\n    }\n  });\n\n  return ctx;\n};\n\nexport const eachAfter = <NodeElement extends HierarchicalDatum, ContextType = any>(\n  subTree: NodeElement[],\n  callback: (node: NodeElement, index?: number, parent?: NodeElement, ctx?: ContextType) => ContextType,\n  parent?: NodeElement,\n  ctx?: ContextType\n) => {\n  let ctxRes = ctx;\n\n  subTree.forEach((node, index) => {\n    if (node.children?.length) {\n      ctxRes = eachAfter(node.children as NodeElement[], callback, node, ctxRes);\n    }\n    ctxRes = callback(node, index, parent, ctxRes);\n  });\n\n  return ctxRes;\n};\n"]}