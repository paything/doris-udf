{"version":3,"sources":["../src/cartesian.ts"],"names":[],"mappings":"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","file":"cartesian.js","sourcesContent":["import type { IPointLike } from '@visactor/vutils';\nimport { isArray } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { isValidNumber, isNil } from '@visactor/vutils';\nimport { Coordinate } from './base';\nimport type { ICartesianCoordinate, IDimensionType } from './interface';\n\nexport class CartesianCoordinate extends Coordinate implements ICartesianCoordinate {\n  readonly type = 'cartesian';\n\n  convert(point: IPointLike | [number, number]): IPointLike {\n    if (isValidNumber((point as IPointLike).x1) || isValidNumber((point as IPointLike).y1)) {\n      const convertedPoint = this.convertPoint(point as IPointLike);\n      const convertedPoint1 = this.convertPoint({\n        x: (point as IPointLike).x1 ?? (point as IPointLike).x,\n        y: (point as IPointLike).y1 ?? (point as IPointLike).y\n      });\n      convertedPoint.x1 = convertedPoint1.x;\n      convertedPoint.y1 = convertedPoint1.y;\n      return convertedPoint;\n    }\n    return this.convertPoint(point);\n  }\n\n  invert(point: IPointLike): IPointLike {\n    if (isValidNumber(point.x1) || isValidNumber(point.y1)) {\n      const invertedPoint = this.invertPoint(point);\n      const invertedPoint1 = this.invertPoint({ x: point.x1 ?? point.x, y: point.y1 ?? point.y });\n      invertedPoint.x1 = invertedPoint1.x;\n      invertedPoint.y1 = invertedPoint1.y;\n      return invertedPoint;\n    }\n    return this.invertPoint(point);\n  }\n\n  getRangeByDimension(dim: IDimensionType, isSubshaft?: boolean, reversed?: boolean): [number, number] {\n    const start = this.start();\n    const end = this.end();\n    const isMain = this.isMainDimension(dim);\n\n    const res: [number, number] = isMain ? [start.x, end.x] : [end.y, start.y];\n\n    return reversed ? [res[1], res[0]] : res;\n  }\n\n  getVisualPositionByDimension(dim: IDimensionType, isSubshaft?: boolean, reversed?: boolean) {\n    const isMain = this.isMainDimension(dim);\n\n    return isMain ? (isSubshaft ? 'top' : 'bottom') : isSubshaft ? 'right' : 'left';\n  }\n\n  getAxisPointsByDimension(\n    dim: IDimensionType,\n    isSubshaft?: boolean,\n    reversed?: boolean,\n    baseValue?: number\n  ): [IPointLike, IPointLike] {\n    const start = this.start();\n    const end = this.end();\n    const isMain = this.isMainDimension(dim);\n\n    if (isMain) {\n      const res: [IPointLike, IPointLike] = !isNil(baseValue)\n        ? [\n            { x: start.x, y: baseValue },\n            { x: end.x, y: baseValue }\n          ]\n        : isSubshaft\n        ? [\n            { x: start.x, y: start.y },\n            { x: end.x, y: start.y }\n          ]\n        : [\n            { x: start.x, y: end.y },\n            { x: end.x, y: end.y }\n          ];\n\n      return reversed ? [res[1], res[0]] : res;\n    }\n\n    const res: [IPointLike, IPointLike] = !isNil(baseValue)\n      ? [\n          { x: baseValue, y: end.y },\n          { x: baseValue, y: start.y }\n        ]\n      : isSubshaft\n      ? [\n          { x: end.x, y: end.y },\n          { x: end.x, y: start.y }\n        ]\n      : [\n          { x: start.x, y: end.y },\n          { x: start.x, y: start.y }\n        ];\n\n    return reversed ? [res[1], res[0]] : res;\n  }\n\n  private convertPoint(point: IPointLike | [number, number]) {\n    const originPoint = isArray(point) ? ({ x: point[0], y: point[1] } as IPointLike) : (point as IPointLike);\n\n    const transformedPoint = Object.assign({}, originPoint);\n    this.convertMatrix.transformPoint(originPoint, transformedPoint);\n    return transformedPoint;\n  }\n\n  private invertPoint(point: IPointLike): IPointLike {\n    const untransformedPoint = Object.assign({}, point);\n    this.invertMatrix.transformPoint(point, untransformedPoint);\n    return untransformedPoint;\n  }\n}\n"]}