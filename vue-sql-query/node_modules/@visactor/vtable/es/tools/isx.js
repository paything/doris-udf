export const judgeType = value => {
    switch (Object.prototype.toString.call(value)) {
      case "[object Object]":
        return "object";

      case "[object Function]":
        return "function";

      case "[object Array]":
        return "array";

      case "[object String]":
        return "string";

      case "[object Number]":
        return "number";

      case "[object RegExp]":
        return "regExp";

      case "[object Boolean]":
        return "boolean";

      case "[object Symbol]":
        return "symbol";

      case "[object Date]":
        return "date";

      case "[object Undefined]":
        return "undefined";

      case "[object Null]":
        return "null";

      case "[object Error]":
        return "error";

      case "[object HTMLDocument]":
        return "document";

      case "[object global]":
        return "global";

      default:
        return null;
    }
};

export const isIt = (v, type) => judgeType(v) === type;

export const isObject = v => isIt(v, "object");

export const isFunction = v => isIt(v, "function");

export const isArray = v => isIt(v, "array");

export const isString = v => isIt(v, "string");

export const isNumber = v => isIt(v, "number");

export const isRegExp = v => isIt(v, "regExp");

export const isBoolean = v => isIt(v, "boolean");

export const isSymbol = v => isIt(v, "symbol");

export const isDate = v => isIt(v, "date");

export const isUndefined = v => isIt(v, "undefined");

export const isNull = v => isIt(v, "null");

export const isError = v => isIt(v, "error");

export const isDocument = v => isIt(v, "document");

export const isGlobal = v => isIt(v, "global");
//# sourceMappingURL=isx.js.map
