{"version":3,"sources":["../src/tools/diff-cell.ts"],"names":[],"mappings":"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","file":"diff-cell.js","sourcesContent":["import type { PivotHeaderLayoutMap } from '../layout/pivot-header-layout';\nimport type { Scenegraph } from '../scenegraph/scenegraph';\nimport type { CellAddress } from '../ts-types';\n\nexport function diffCellAddress(\n  col: number,\n  row: number,\n  oldCellIds: number[],\n  newCellIds: number[],\n  oldRowHeaderCellPositons: CellAddress[],\n  layout: PivotHeaderLayoutMap\n) {\n  const columnHeaderStart = layout.columnHeaderLevelCount;\n  // const oldCellIds = oldCellIdsArr.map(oldCellId => oldCellId[0]);\n  // const newCellIds = newCellIdsArr.map(oldCellId => oldCellId[0]);\n  const addCellPositionsRowDirection = [];\n  const removeCellPositionsRowDirection = [];\n  // const updateCellIds: Set<LayoutObjectId> = new Set();\n  // diff two array elements\n  for (let i = 0; i < oldCellIds.length; i++) {\n    if (!newCellIds.includes(oldCellIds[i])) {\n      // updateCellIds.add(layout.getParentCellId(oldRowHeaderCellPositons[i].col, oldRowHeaderCellPositons[i].row));\n      removeCellPositionsRowDirection.push(oldRowHeaderCellPositons[i]);\n    }\n  }\n  for (let i = 0; i < newCellIds.length; i++) {\n    if (!oldCellIds.includes(newCellIds[i])) {\n      const newCellAddr = { col, row: columnHeaderStart + i }; // layout.getHeaderCellAdressById(newCellIds[i]);\n      // updateCellIds.add(layout.getParentCellId(newCellAddr.col, newCellAddr.row));\n      addCellPositionsRowDirection.push(newCellAddr);\n    }\n  }\n  let parentId = layout.getParentCellId(col, row);\n  let parentCellAddress = layout.getRowHeaderCellAddressByCellId(parentId);\n  const updateCellPositionsRowDirection = [];\n  parentCellAddress && updateCellPositionsRowDirection.push(parentCellAddress);\n  while (parentId) {\n    parentId = layout.getParentCellId(parentCellAddress.col, parentCellAddress.row);\n    if (parentId) {\n      parentCellAddress = layout.getRowHeaderCellAddressByCellId(parentId);\n      updateCellPositionsRowDirection.push(parentCellAddress);\n    }\n  }\n  return {\n    addCellPositionsRowDirection,\n    removeCellPositionsRowDirection,\n    updateCellPositionsRowDirection\n  };\n}\n\nexport function diffCellAddressForGridTree(\n  col: number,\n  row: number,\n  oldCellIds: number[],\n  newCellIds: number[],\n  oldRowHeaderCellPositons: CellAddress[],\n\n  layout: PivotHeaderLayoutMap\n) {\n  const columnHeaderStart = layout.columnHeaderLevelCount;\n  // const oldCellIds = oldCellIdsArr.map(oldCellId => oldCellId[0]);\n  // const newCellIds = newCellIdsArr.map(oldCellId => oldCellId[0]);\n  const addCellPositionsRowDirection = [];\n  const removeCellPositionsRowDirection = [];\n  // const updateCellIds: Set<LayoutObjectId> = new Set();\n  // diff two array elements\n  for (let i = 0; i < oldCellIds.length; i++) {\n    if (!newCellIds.includes(oldCellIds[i])) {\n      // updateCellIds.add(layout.getParentCellId(oldRowHeaderCellPositons[i].col, oldRowHeaderCellPositons[i].row));\n      removeCellPositionsRowDirection.push(oldRowHeaderCellPositons[i]);\n    }\n  }\n  for (let i = 0; i < newCellIds.length; i++) {\n    if (!oldCellIds.includes(newCellIds[i])) {\n      const newCellAddr = { col, row: columnHeaderStart + i }; // layout.getHeaderCellAdressById(newCellIds[i]);\n      // updateCellIds.add(layout.getParentCellId(newCellAddr.col, newCellAddr.row));\n      addCellPositionsRowDirection.push(newCellAddr);\n    }\n  }\n  let parentId = layout.getParentCellId(col, row);\n  let parentCellAddress = layout.getRowHeaderCellAddressByCellId(parentId);\n  const updateCellPositionsRowDirection = [];\n  parentCellAddress && updateCellPositionsRowDirection.push(parentCellAddress);\n  while (parentId) {\n    parentId = layout.getParentCellId(parentCellAddress.col, parentCellAddress.row);\n    if (parentId) {\n      parentCellAddress = layout.getRowHeaderCellAddressByCellId(parentId);\n      updateCellPositionsRowDirection.push(parentCellAddress);\n    }\n  }\n\n  const addCellPositionsColumnDirection = [];\n  // const updateCellPositionsColumnDirection = [];\n  const removeCellPositionsColumnDirection = [];\n  if (\n    layout.rowHierarchyType === 'grid-tree' &&\n    layout.cornerSetting.titleOnDimension === 'column' &&\n    layout.rowHeaderLevelCount !== layout._cornerHeaderCellIds[0].length // 表头层级数发生了变化 需要整体做更新_cornerHeaderCellIds是旧值 rowHeaderLevelCount是新值\n  ) {\n    if (layout.rowHeaderLevelCount > layout._cornerHeaderCellIds[0].length) {\n      for (let i = layout._cornerHeaderCellIds[0].length; i < layout.rowHeaderLevelCount; i++) {\n        addCellPositionsColumnDirection.push({ col: i, row });\n      }\n    } else {\n      for (let i = layout.rowHeaderLevelCount; i < layout._cornerHeaderCellIds[0].length; i++) {\n        // if (layout.hideIndicatorName === false && layout.indicatorsAsCol === false) {\n        //   removeCellPositionsColumnDirection.push({ col: i, row });\n        //   updateCellPositionsColumnDirection.push({ col: i - 1, row });\n        // } else {\n        removeCellPositionsColumnDirection.push({ col: i, row });\n        // }\n      }\n    }\n  }\n\n  return {\n    addCellPositionsRowDirection,\n    removeCellPositionsRowDirection,\n    updateCellPositionsRowDirection,\n    addCellPositionsColumnDirection,\n    removeCellPositionsColumnDirection\n    // updateCellPositionsColumnDirection\n  };\n}\n\nexport function diffCellAddressForGridTreeOnColumn(\n  col: number,\n  row: number,\n  oldCellIds: number[],\n  newCellIds: number[],\n  oldRowHeaderCellPositons: CellAddress[],\n\n  layout: PivotHeaderLayoutMap\n) {\n  const rowHeaderStart = layout.rowHeaderLevelCount;\n  // const oldCellIds = oldCellIdsArr.map(oldCellId => oldCellId[0]);\n  // const newCellIds = newCellIdsArr.map(oldCellId => oldCellId[0]);\n  const addCellPositionsColumnDirection = [];\n  const removeCellPositionsColumnDirection = [];\n  // const updateCellIds: Set<LayoutObjectId> = new Set();\n  // diff two array elements\n  for (let i = 0; i < oldCellIds.length; i++) {\n    if (!newCellIds.includes(oldCellIds[i])) {\n      // updateCellIds.add(layout.getParentCellId(oldRowHeaderCellPositons[i].col, oldRowHeaderCellPositons[i].row));\n      removeCellPositionsColumnDirection.push(oldRowHeaderCellPositons[i]);\n    }\n  }\n  for (let i = 0; i < newCellIds.length; i++) {\n    if (!oldCellIds.includes(newCellIds[i])) {\n      const newCellAddr = { col: rowHeaderStart + i, row }; // layout.getHeaderCellAdressById(newCellIds[i]);\n      // updateCellIds.add(layout.getParentCellId(newCellAddr.col, newCellAddr.row));\n      addCellPositionsColumnDirection.push(newCellAddr);\n    }\n  }\n  let parentId = layout.getParentCellId(col, row);\n  let parentCellAddress = layout.getRowHeaderCellAddressByCellId(parentId);\n  const updateCellPositionsColumnDirection = [];\n  parentCellAddress && updateCellPositionsColumnDirection.push(parentCellAddress);\n  while (parentCellAddress && parentId) {\n    parentId = layout.getParentCellId(parentCellAddress.col, parentCellAddress.row);\n    if (parentId) {\n      parentCellAddress = layout.getRowHeaderCellAddressByCellId(parentId);\n      updateCellPositionsColumnDirection.push(parentCellAddress);\n    }\n  }\n\n  const addCellPositionsRowDirection = [];\n  // const updateCellPositionsRowDirection = [];\n  const removeCellPositionsRowDirection = [];\n  if (\n    layout.columnHierarchyType === 'grid-tree' &&\n    layout.cornerSetting.titleOnDimension === 'row' &&\n    layout.columnHeaderLevelCount !== layout._cornerHeaderCellIds.length // 表头层级数发生了变化 需要整体做更新_cornerHeaderCellIds是旧值 rowHeaderLevelCount是新值\n  ) {\n    if (layout.columnHeaderLevelCount > layout._cornerHeaderCellIds.length) {\n      for (let i = layout._cornerHeaderCellIds.length; i < layout.columnHeaderLevelCount; i++) {\n        addCellPositionsRowDirection.push({ col, row: i });\n      }\n    } else {\n      for (let i = layout.columnHeaderLevelCount; i < layout._cornerHeaderCellIds.length; i++) {\n        // if (layout.hideIndicatorName && layout.indicatorsAsCol) {\n        //   removeCellPositionsRowDirection.push({ col, row: i });\n        //   updateCellPositionsRowDirection.push({ col, row: i - 1 });\n        // } else {\n        removeCellPositionsRowDirection.push({ col, row: i });\n        // }\n      }\n    }\n  }\n  return {\n    addCellPositionsColumnDirection,\n    removeCellPositionsColumnDirection,\n    updateCellPositionsColumnDirection,\n    addCellPositionsRowDirection,\n    // updateCellPositionsRowDirection,\n    removeCellPositionsRowDirection\n  };\n}\n\n// find diff between two arrays\nfunction diffCellIndices(oldIndexedData: (number | number[])[], currentIndexedData: (number | number[])[]) {\n  const add = [];\n  const remove = [];\n  // find removed indices\n  for (let i = 0; i < oldIndexedData.length; i++) {\n    let removed = true;\n    for (let j = 0; j < currentIndexedData.length; j++) {\n      if (checkIndex(oldIndexedData[i], currentIndexedData[j])) {\n        removed = false;\n        break;\n      }\n    }\n    if (removed) {\n      remove.push(i);\n    }\n  }\n\n  // find added indices\n  for (let i = 0; i < currentIndexedData.length; i++) {\n    let added = true;\n    for (let j = 0; j < oldIndexedData.length; j++) {\n      if (checkIndex(oldIndexedData[j], currentIndexedData[i])) {\n        added = false;\n        break;\n      }\n    }\n    if (added) {\n      add.push(i);\n    }\n  }\n  return { add, remove };\n}\n\nfunction checkIndex(oldIndex: number | number[], newIndex: number | number[]): boolean {\n  if (typeof oldIndex !== typeof newIndex) {\n    return false;\n  }\n  if (typeof oldIndex === 'number' && typeof newIndex === 'number' && oldIndex !== newIndex) {\n    return false;\n  }\n  if ((oldIndex as number[]).length !== (newIndex as number[]).length) {\n    return false;\n  }\n  for (let i = 0; i < (oldIndex as number[]).length; i++) {\n    if (oldIndex[i] !== newIndex[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function calculateArrayDiff(\n  originalArray: (number | number[])[],\n  targetArray: (number | number[])[],\n  startIndex: number\n) {\n  const add = [];\n  const remove = [];\n\n  const originalMap = new Map();\n  for (let i = 0; i < originalArray.length; i++) {\n    const element = originalArray[i];\n    const key = JSON.stringify(element);\n    if (originalMap.has(key)) {\n      originalMap.get(key).push(i);\n    } else {\n      originalMap.set(key, [i]);\n    }\n  }\n\n  for (let i = 0; i < targetArray.length; i++) {\n    const element = targetArray[i];\n    const key = JSON.stringify(element);\n    if (!originalMap.has(key)) {\n      add.push(i + startIndex);\n    } else {\n      const indices = originalMap.get(key);\n      indices.shift(); // Remove the first index\n      if (indices.length === 0) {\n        originalMap.delete(key);\n      }\n    }\n  }\n\n  for (let i = 0; i < originalArray.length; i++) {\n    const element = originalArray[i];\n    if (!targetArray.some(item => isEqual(item, element))) {\n      remove.push(i + startIndex);\n    }\n  }\n\n  return { add, remove };\n}\n\nfunction isEqual(arr1: any, arr2: any) {\n  if (arr1 === arr2) {\n    return true;\n  }\n\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function callUpdateRowOnScenegraph(\n  result: {\n    addCellPositionsRowDirection?: CellAddress[];\n    removeCellPositionsRowDirection?: CellAddress[];\n    updateCellPositionsRowDirection?: CellAddress[];\n    addCellPositionsColumnDirection?: CellAddress[];\n    removeCellPositionsColumnDirection?: CellAddress[];\n    updateCellPositionsColumnDirection?: CellAddress[];\n  },\n  recalculateColWidths: boolean,\n  newFrozenRowCount: number,\n  oldFrozenRowCount: number,\n  scenegraph: Scenegraph\n) {\n  if (\n    result.addCellPositionsRowDirection?.length ||\n    result.removeCellPositionsRowDirection?.length ||\n    result.updateCellPositionsRowDirection?.length\n  ) {\n    scenegraph.updateRow(\n      result.removeCellPositionsRowDirection,\n      result.addCellPositionsRowDirection.map(item => {\n        item.row += newFrozenRowCount - oldFrozenRowCount;\n        return item;\n      }),\n      result.updateCellPositionsRowDirection,\n      recalculateColWidths\n    );\n  }\n}\n\nexport function callUpdateColOnScenegraph(\n  result: {\n    addCellPositionsRowDirection?: CellAddress[];\n    removeCellPositionsRowDirection?: CellAddress[];\n    updateCellPositionsRowDirection?: CellAddress[];\n    addCellPositionsColumnDirection?: CellAddress[];\n    removeCellPositionsColumnDirection?: CellAddress[];\n    updateCellPositionsColumnDirection?: CellAddress[];\n  },\n  newFrozenColCount: number,\n  oldFrozenColCount: number,\n  scenegraph: Scenegraph\n) {\n  if (\n    result.addCellPositionsColumnDirection?.length ||\n    result.removeCellPositionsColumnDirection?.length ||\n    result.updateCellPositionsColumnDirection?.length\n  ) {\n    scenegraph.updateCol(\n      result.removeCellPositionsColumnDirection,\n      result.addCellPositionsColumnDirection.map(item => {\n        item.col += newFrozenColCount - oldFrozenColCount;\n        return item;\n      }),\n      result.updateCellPositionsColumnDirection\n    );\n  }\n}\n"]}