{"version":3,"sources":["../src/scenegraph/refresh-node/update-chart.ts"],"names":[],"mappings":"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","file":"update-chart.js","sourcesContent":["import { isEqual } from '@visactor/vutils';\nimport type { PivotChart } from '../../PivotChart';\nimport type { ICartesianAxis } from '../../components/axis/axis';\nimport { Factory } from '../../core/factory';\nimport type { BaseTableAPI } from '../../ts-types/base-table';\nimport type { Chart } from '../graphic/chart';\nimport type { Group } from '../graphic/group';\nimport type { Scenegraph } from '../scenegraph';\nimport type { PivotHeaderLayoutMap } from '../../layout/pivot-header-layout';\nimport { getQuadProps } from '../utils/padding';\nimport { getProp } from '../utils/get-prop';\n\n/** 供调整列宽后更新chart使用 */\nexport function updateChartSizeForResizeColWidth(scenegraph: Scenegraph, col: number) {\n  const { table } = scenegraph;\n  const layout = table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  const columnResizeType = col === -1 ? 'all' : table.internalProps.columnResizeType;\n  if (columnResizeType === 'column') {\n    const columnGroup = scenegraph.getColGroup(col);\n    const columnHeaderGroup = scenegraph.getColGroup(col, true);\n    const columnBottomGroup = scenegraph.getColGroupInBottom(col, true);\n    columnGroup?.forEachChildren((cellNode: Group) => {\n      const width = table.getColWidth(cellNode.col);\n      const height = table.getRowHeight(cellNode.row);\n      updateChartGraphicSize(cellNode, width, height);\n    });\n    columnHeaderGroup?.forEachChildren((cellNode: Group) => {\n      const width = table.getColWidth(cellNode.col);\n      const height = table.getRowHeight(cellNode.row);\n      updateChartGraphicSize(cellNode, width, height);\n    });\n    columnBottomGroup?.forEachChildren((cellNode: Group) => {\n      const width = table.getColWidth(cellNode.col);\n      const height = table.getRowHeight(cellNode.row);\n      updateChartGraphicSize(cellNode, width, height);\n    });\n    if (table.widthMode === 'adaptive' && col < table.colCount - 1) {\n      const columnGroup = scenegraph.getColGroup(col + 1);\n      const columnHeaderGroup = scenegraph.getColGroup(col + 1, true);\n      const columnBottomGroup = scenegraph.getColGroupInBottom(col + 1, true);\n      columnGroup?.forEachChildren((cellNode: Group) => {\n        const width = table.getColWidth(cellNode.col);\n        const height = table.getRowHeight(cellNode.row);\n        updateChartGraphicSize(cellNode, width, height);\n      });\n      columnHeaderGroup?.forEachChildren((cellNode: Group) => {\n        const width = table.getColWidth(cellNode.col);\n        const height = table.getRowHeight(cellNode.row);\n        updateChartGraphicSize(cellNode, width, height);\n      });\n      columnBottomGroup?.forEachChildren((cellNode: Group) => {\n        const width = table.getColWidth(cellNode.col);\n        const height = table.getRowHeight(cellNode.row);\n        updateChartGraphicSize(cellNode, width, height);\n      });\n    }\n  } else {\n    let startCol = table.rowHeaderLevelCount;\n    let endCol = table.colCount - 1;\n    let resizeIndicatorKey;\n    let resizeDimensionKey;\n    let resizeDimensionValue;\n    if (columnResizeType === 'indicator') {\n      if (layout.indicatorsAsCol) {\n        resizeIndicatorKey = layout.getIndicatorKey(col, table.columnHeaderLevelCount);\n      } else {\n        const headerPaths = layout.getCellHeaderPaths(col, table.columnHeaderLevelCount - 1);\n        const headerPath = headerPaths.colHeaderPaths[headerPaths.colHeaderPaths.length - 1];\n        resizeDimensionKey = headerPath.dimensionKey;\n        resizeDimensionValue = headerPath.value;\n      }\n    } else if (columnResizeType === 'indicatorGroup') {\n      const layout = table.internalProps.layoutMap as PivotHeaderLayoutMap;\n      //通过getCellHeaderPaths接口获取列表头最后一层指标维度的path\n      const headerPaths = layout.getCellHeaderPaths(table.stateManager.columnResize.col, table.columnHeaderLevelCount);\n      const node = layout.getHeadNodeByRowOrColDimensions(\n        headerPaths.colHeaderPaths.slice(0, headerPaths.colHeaderPaths.length - 1)\n      ) as any;\n      // 计算宽度受影响列的起止\n      startCol = node.startInTotal + table.frozenColCount;\n      endCol = node.startInTotal + table.frozenColCount + node.size - 1;\n    }\n\n    for (let c = startCol; c <= endCol; c++) {\n      const columnGroup = scenegraph.getColGroup(c);\n      const columnHeaderGroup = scenegraph.getColGroup(c, true);\n      const columnBottomGroup = scenegraph.getColGroupInBottom(c, true);\n      if (columnGroup) {\n        if (columnResizeType === 'indicator') {\n          const indicatorKey = layout.getIndicatorKey(c, table.columnHeaderLevelCount);\n          if (layout.indicatorsAsCol && indicatorKey !== resizeIndicatorKey) {\n            continue;\n          } else if (!layout.indicatorsAsCol) {\n            const headerPaths = layout.getCellHeaderPaths(c, table.columnHeaderLevelCount - 1);\n            const headerPath = headerPaths?.colHeaderPaths[headerPaths.colHeaderPaths.length - 1];\n            if (\n              !headerPath ||\n              resizeDimensionKey !== headerPath.dimensionKey ||\n              resizeDimensionValue !== headerPath.value\n            ) {\n              continue;\n            }\n          }\n        }\n        columnGroup.forEachChildren((cellNode: Group) => {\n          const width = table.getColWidth(cellNode.col);\n          const height = table.getRowHeight(cellNode.row);\n          updateChartGraphicSize(cellNode, width, height);\n        });\n        columnHeaderGroup?.forEachChildren((cellNode: Group) => {\n          const width = table.getColWidth(cellNode.col);\n          const height = table.getRowHeight(cellNode.row);\n          updateChartGraphicSize(cellNode, width, height);\n        });\n        columnBottomGroup?.forEachChildren((cellNode: Group) => {\n          const width = table.getColWidth(cellNode.col);\n          const height = table.getRowHeight(cellNode.row);\n          updateChartGraphicSize(cellNode, width, height);\n        });\n      }\n    }\n  }\n\n  // // 将调整列宽的后面的面也都一起需要调整viewbox。  TODO：columnResizeType支持后需要根据变化的列去调整，范围可能变多或者变少\n  // for (let c = col; c <= scenegraph.proxy.colEnd; c++) {\n  //   const columnGroup = scenegraph.getColGroup(c);\n  //   // const chartInstance = (columnGroup.attribute as any)?.chartInstance;\n  //   // if (chartInstance) {\n  //   columnGroup?.getChildren()?.forEach((cellNode: Group) => {\n  //     const width = scenegraph.table.getColWidth(cellNode.col);\n  //     const height = scenegraph.table.getRowHeight(cellNode.row);\n\n  //     cellNode.children.forEach((node: Chart) => {\n  //       if ((node as any).type === 'chart') {\n  //         node.cacheCanvas = null;\n  //         node.setAttribute('width', Math.ceil(width - node.attribute.cellPadding[3] - node.attribute.cellPadding[1]));\n  //         node.setAttribute(\n  //           'height',\n  //           Math.ceil(height - node.attribute.cellPadding[0] - node.attribute.cellPadding[2])\n  //         );\n  //       }\n  //     });\n  //   });\n  //   // }\n  // }\n  // // 右侧冻结的单元格也需要调整\n  // if (!scenegraph.table.isPivotChart() && scenegraph.table.rightFrozenColCount >= 1) {\n  //   for (\n  //     let c = scenegraph.table.colCount - scenegraph.table.rightFrozenColCount;\n  //     c <= scenegraph.table.colCount - 1;\n  //     c++\n  //   ) {\n  //     const columnGroup = scenegraph.getColGroup(c);\n  //     columnGroup?.getChildren()?.forEach((cellNode: Group) => {\n  //       const width = scenegraph.table.getColWidth(cellNode.col);\n  //       const height = scenegraph.table.getRowHeight(cellNode.row);\n\n  //       cellNode.children.forEach((node: Chart) => {\n  //         if ((node as any).type === 'chart') {\n  //           node.cacheCanvas = null;\n  //           node.setAttribute(\n  //             'width',\n  //             Math.ceil(width - node.attribute.cellPadding[3] - node.attribute.cellPadding[1])\n  //           );\n  //           node.setAttribute(\n  //             'height',\n  //             Math.ceil(height - node.attribute.cellPadding[0] - node.attribute.cellPadding[2])\n  //           );\n  //         }\n  //       });\n  //     });\n  //   }\n  // }\n}\n/** 供调整列宽后更新chart使用 */\nexport function updateChartSizeForResizeRowHeight(scenegraph: Scenegraph, row: number) {\n  const { table } = scenegraph;\n  const layout = table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  const state = table.stateManager;\n  const rowResizeType = row === -1 ? 'all' : table.internalProps.rowResizeType;\n\n  let startRow = table.columnHeaderLevelCount;\n  let endRow = table.rowCount - 1;\n  let resizeIndicatorKey: string;\n  let resizeDimensionKey: string;\n  let resizeDimensionValue: string;\n  if (rowResizeType === 'indicator') {\n    if (!layout.indicatorsAsCol) {\n      resizeIndicatorKey = layout.getIndicatorKey(table.rowHeaderLevelCount, row);\n    } else {\n      const headerPaths = layout.getCellHeaderPaths(table.rowHeaderLevelCount - 1, row);\n      const headerPath = headerPaths.rowHeaderPaths?.[headerPaths.rowHeaderPaths.length - 1];\n      resizeDimensionKey = headerPath?.dimensionKey;\n      resizeDimensionValue = headerPath?.value;\n    }\n  } else if (rowResizeType === 'indicatorGroup') {\n    const layout = table.internalProps.layoutMap as PivotHeaderLayoutMap;\n    //通过getCellHeaderPaths接口获取列表头最后一层指标维度的path\n    const headerPaths = layout.getCellHeaderPaths(table.rowHeaderLevelCount, row);\n    const node = layout.getHeadNodeByRowOrColDimensions(\n      headerPaths.rowHeaderPaths.slice(0, headerPaths.rowHeaderPaths.length - 1)\n    ) as any;\n    // 计算宽度受影响列的起止\n    startRow = node.startInTotal + table.frozenRowCount;\n    endRow = node.startInTotal + table.frozenRowCount + node.size - 1;\n  }\n\n  const colsRange = [{ startCol: scenegraph.proxy.colStart, endCol: scenegraph.proxy.colEnd }];\n  if (table.frozenColCount) {\n    colsRange.push({ startCol: 0, endCol: table.frozenColCount - 1 });\n  }\n  if (table.rightFrozenColCount) {\n    colsRange.push({ startCol: table.colCount - table.rightFrozenColCount, endCol: table.colCount - 1 });\n  }\n  colsRange.forEach(({ startCol, endCol }) => {\n    for (let col = startCol; col <= endCol; col++) {\n      if (rowResizeType === 'row') {\n        const cellNode = scenegraph.highPerformanceGetCell(col, row);\n        if (cellNode.role !== 'cell') {\n          continue;\n        }\n        const width = table.getColWidth(cellNode.col);\n        const height = table.getRowHeight(cellNode.row);\n        updateChartGraphicSize(cellNode, width, height);\n\n        if (table.heightMode === 'adaptive' && row < table.rowCount - 1) {\n          const cellNode = scenegraph.highPerformanceGetCell(col, row + 1);\n          const width = table.getColWidth(cellNode.col);\n          const height = table.getRowHeight(cellNode.row);\n          updateChartGraphicSize(cellNode, width, height);\n        }\n      } else {\n        for (let r = startRow; r <= endRow; r++) {\n          if (rowResizeType === 'indicator') {\n            const indicatorKey = layout.getIndicatorKey(state.table.rowHeaderLevelCount, r);\n            if (!layout.indicatorsAsCol && indicatorKey !== resizeIndicatorKey) {\n              continue;\n            } else if (layout.indicatorsAsCol) {\n              const headerPaths = layout.getCellHeaderPaths(state.table.rowHeaderLevelCount - 1, r);\n              const headerPath = headerPaths?.rowHeaderPaths[headerPaths.rowHeaderPaths.length - 1];\n              if (\n                !headerPath ||\n                resizeDimensionKey !== headerPath.dimensionKey ||\n                resizeDimensionValue !== headerPath.value\n              ) {\n                continue;\n              }\n            }\n          }\n          const cellNode = scenegraph.highPerformanceGetCell(col, r);\n          if (cellNode.role !== 'cell') {\n            continue;\n          }\n          const width = table.getColWidth(cellNode.col);\n          const height = table.getRowHeight(cellNode.row);\n          updateChartGraphicSize(cellNode, width, height);\n        }\n      }\n    }\n  });\n\n  // const updateCellNode = (c: number, r: number) => {\n  //   const cellNode = scenegraph.getCell(c, r);\n  //   const width = scenegraph.table.getColWidth(cellNode.col);\n  //   const height = scenegraph.table.getRowHeight(cellNode.row);\n  //   cellNode.children.forEach((node: Chart) => {\n  //     if ((node as any).type === 'chart') {\n  //       node.cacheCanvas = null;\n  //       console.log('bf', c, r, node.attribute.width, node.attribute.height);\n\n  //       node.setAttribute('width', Math.ceil(width - node.attribute.cellPadding[3] - node.attribute.cellPadding[1]));\n  //       node.setAttribute('height', Math.ceil(height - node.attribute.cellPadding[0] - node.attribute.cellPadding[2]));\n  //       console.log('af', c, r, node.attribute.width, node.attribute.height);\n  //     }\n  //   });\n  // };\n  // // 将调整列宽的后面的面也都一起需要调整viewbox。  TODO：columnResizeType支持后需要根据变化的列去调整，范围可能变多或者变少\n  // for (let c = scenegraph.proxy.colStart; c <= scenegraph.proxy.colEnd; c++) {\n  //   for (let r = row; r <= scenegraph.proxy.rowEnd; r++) {\n  //     updateCellNode(c, r);\n  //   }\n  // }\n\n  // // 右侧冻结的单元格也需要调整\n  // if (scenegraph.table.rightFrozenColCount >= 1) {\n  //   for (\n  //     let c = scenegraph.table.colCount - scenegraph.table.rightFrozenColCount;\n  //     c <= scenegraph.table.colCount - 1;\n  //     c++\n  //   ) {\n  //     for (let r = row; r <= scenegraph.proxy.rowEnd; r++) {\n  //       updateCellNode(c, r);\n  //     }\n  //   }\n  // }\n  // // 左侧冻结的单元格\n  // if (scenegraph.table.frozenColCount >= 1) {\n  //   for (let c = 0; c <= scenegraph.table.frozenColCount - 1; c++) {\n  //     for (let r = row; r <= scenegraph.proxy.rowEnd; r++) {\n  //       updateCellNode(c, r);\n  //     }\n  //   }\n  // }\n}\n/** 清理所有chart节点的 图表缓存图片 */\nexport function clearChartCacheImage(scenegraph: Scenegraph) {\n  // 将调整列宽的后面的面也都一起需要调整viewbox。  TODO：columnResizeType支持后需要根据变化的列去调整，范围可能变多或者变少\n  for (let c = scenegraph.proxy.colStart; c <= scenegraph.proxy.colEnd; c++) {\n    const columnGroup = scenegraph.getColGroup(c);\n    columnGroup?.getChildren()?.forEach((cellNode: Group) => {\n      cellNode.children.forEach((node: Chart) => {\n        if ((node as any).type === 'chart') {\n          node.cacheCanvas = null;\n          node.addUpdateBoundTag();\n        }\n      });\n    });\n  }\n}\n\nexport function clearCellChartCacheImage(col: number, row: number, scenegraph: Scenegraph) {\n  // 将调整列宽的后面的面也都一起需要调整viewbox。  TODO：columnResizeType支持后需要根据变化的列去调整，范围可能变多或者变少\n  const cellGroup = scenegraph.getCell(col, row);\n  cellGroup.children.forEach((node: Chart) => {\n    if ((node as any).type === 'chart') {\n      node.cacheCanvas = null;\n      node.addUpdateBoundTag();\n    }\n  });\n}\n\n/** 更新所有的图表chart节点上缓存attribute中的data数据 */\nexport function updateChartData(scenegraph: Scenegraph) {\n  const table = scenegraph.table;\n  // 将调整列宽的后面的面也都一起需要调整viewbox。  TODO：columnResizeType支持后需要根据变化的列去调整，范围可能变多或者变少\n  for (let c = scenegraph.proxy.colStart; c <= scenegraph.proxy.colEnd; c++) {\n    const columnGroup = scenegraph.getColGroup(c);\n    columnGroup?.getChildren()?.forEach((cellNode: Group) => {\n      const col = cellNode.col;\n      const row = cellNode.row;\n      cellNode.children.forEach((node: Chart) => {\n        if ((node as any).type === 'chart') {\n          node.updateData(table.getCellValue(col, row));\n          const chartSpec = node.attribute.spec;\n          const chartType = chartSpec.type;\n          if (chartType !== 'gauge' && chartType !== 'rose' && chartType !== 'radar') {\n            const newAxes = table.internalProps.layoutMap.getChartAxes(col, row);\n            node.setAttribute('axes', newAxes);\n            chartSpec.axes = newAxes;\n          }\n          node.setAttribute('spec', chartSpec);\n          // node.addUpdateBoundTag();\n        }\n      });\n    });\n  }\n\n  // update left axes\n  updateTableAxes(scenegraph.rowHeaderGroup, scenegraph.table);\n  // update top axes\n  updateTableAxes(scenegraph.colHeaderGroup, scenegraph.table);\n  // update right axes\n  updateTableAxes(scenegraph.rightFrozenGroup, scenegraph.table);\n  // update bottom axes\n  updateTableAxes(scenegraph.bottomFrozenGroup, scenegraph.table);\n}\n/** 组织图表数据状态_selectedDataItemsInChart 更新选中的图表图元状态 */\nexport function updateChartState(scenegraph: Scenegraph, datum: any) {\n  const table = scenegraph.table;\n  if (table.isPivotChart()) {\n    const preSelectItemsCount = (table as PivotChart)._selectedDataItemsInChart.length;\n    if ((datum === null || datum?.length === 0 || Object.keys(datum).length === 0) && preSelectItemsCount === 0) {\n      //避免无效的更新\n      return;\n    }\n    // (table as PivotChart)._selectedDataItemsInChart = [];\n    const newSelectedDataItemsInChart = [];\n    if (Array.isArray(datum)) {\n      datum.forEach((dataItem: any) => {\n        if (dataItem && dataItem.key !== 0 && Object.keys(dataItem).length > 0) {\n          //本以为没有点击到图元上 datum为空 发现是{key:0}或者{}\n          const selectedState = {} as any;\n          for (const itemKey in dataItem) {\n            if (!itemKey.startsWith('VGRAMMAR_') && !itemKey.startsWith('__VCHART')) {\n              selectedState[itemKey] = dataItem[itemKey];\n            }\n          }\n          newSelectedDataItemsInChart.push(selectedState);\n        }\n      });\n    } else if (datum && datum.key !== 0 && Object.keys(datum).length > 0) {\n      //本以为没有点击到图元上 datum为空 发现是{key:0}或者{}\n      const selectedState = {} as any;\n      for (const itemKey in datum) {\n        if (!itemKey.startsWith('VGRAMMAR_') && !itemKey.startsWith('__VCHART')) {\n          selectedState[itemKey] = datum[itemKey];\n        }\n      }\n      newSelectedDataItemsInChart.push(selectedState);\n    }\n    //避免无效的更新\n    if (!isEqual((table as PivotChart)._selectedDataItemsInChart, newSelectedDataItemsInChart)) {\n      (table as PivotChart)._selectedDataItemsInChart = newSelectedDataItemsInChart;\n      (table.internalProps.layoutMap as PivotHeaderLayoutMap).updateDataStateToChartInstance();\n      // 清楚chart缓存图片\n      clearChartCacheImage(scenegraph);\n      table.scenegraph.updateNextFrame();\n    }\n  }\n}\n\n/**\n * @description: update table axis component\n * @param {Group} containerGroup\n * @param {BaseTableAPI} table\n * @return {*}\n */\nfunction updateTableAxes(containerGroup: Group, table: BaseTableAPI) {\n  containerGroup.forEachChildren((column: Group) => {\n    if (column.role === 'column') {\n      column.forEachChildren((cell: Group) => {\n        if (cell.role === 'cell') {\n          let isAxisComponent = false;\n          cell.forEachChildren((mark: Group) => {\n            if (mark.name === 'axis') {\n              isAxisComponent = true;\n              return true;\n            }\n            return false;\n          });\n          if (isAxisComponent) {\n            const axisConfig = table.internalProps.layoutMap.getAxisConfigInPivotChart(cell.col, cell.row);\n            const cellStyle = table._getCellStyle(cell.col, cell.row);\n            const padding = getQuadProps(getProp('padding', cellStyle, cell.col, cell.row, table));\n            const CartesianAxis: ICartesianAxis = Factory.getComponent('axis');\n            const axis = new CartesianAxis(\n              axisConfig,\n              cell.attribute.width,\n              cell.attribute.height,\n              axisConfig.__vtablePadding ?? padding,\n              table\n            );\n            cell.clear();\n            cell.appendChild(axis.component);\n            axis.overlap();\n          }\n        }\n      });\n    }\n  });\n}\n\nfunction updateChartGraphicSize(cellNode: Group, width: number, height: number) {\n  cellNode.forEachChildren((graphic: Chart) => {\n    if ((graphic as any).type === 'chart') {\n      graphic.cacheCanvas = null;\n      graphic.setAttributes({\n        width: Math.ceil(width - graphic.attribute.cellPadding[3] - graphic.attribute.cellPadding[1]),\n        height: Math.ceil(height - graphic.attribute.cellPadding[0] - graphic.attribute.cellPadding[2])\n      });\n    }\n  });\n}\n"]}