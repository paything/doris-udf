import { ContainerModule, DefaultRenderService, RenderService } from "./../../vrender";

export default new ContainerModule(((bind, unbind, isBound, rebind) => {
    bind(RenderServiceForVTable).toSelf(), rebind(RenderService).toService(RenderServiceForVTable);
}));

export class RenderServiceForVTable extends DefaultRenderService {
    constructor() {
        super(...arguments), this.lastPrepareTime = 0;
    }
    prepare(updateBounds) {
        this.renderTreeRoots.forEach((g => {
            var _a;
            const table = g.stage.table;
            table && table.stateManager.fastScrolling ? null === (_a = g.stage.dirtyBounds) || void 0 === _a || _a.empty() : this._prepare(g, updateBounds);
        }));
    }
}
//# sourceMappingURL=render-service.js.map
