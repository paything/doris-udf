{"version":3,"sources":["../src/scenegraph/utils/text-measure.ts"],"names":[],"mappings":"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","file":"text-measure.js","sourcesContent":["import type { ITextGraphicAttribute, TextOptionsType } from './../../vrender';\nimport {\n  DefaultTextStyle,\n  getTextBounds,\n  DefaultTextMeasureContribution,\n  TextMeasureContribution,\n  ContainerModule,\n  container,\n  Text\n} from './../../vrender';\nimport { MeasureModeEnum } from './../../vrender';\n// eslint-disable-next-line max-len\n// import {\n//   DefaultTextMeasureContribution,\n//   TextMeasureContribution\n// } from '@visactor/vrender/es/core/contributions/textMeasure/textMeasure-contribution';\nimport type { ITextMeasureOption, ITextSize } from '@visactor/vutils';\nimport { isValid, TextMeasure } from '@visactor/vutils';\n\nlet customAlphabetCharSet = '';\nlet textMeasureMode: 'quick' | 'canvas' = 'quick';\n\ntype ITextGraphicAttributeFroMeasure = Omit<ITextGraphicAttribute, 'lineHeight'> & {\n  lineHeight?: number;\n};\n\nconst textMeasureModule = new ContainerModule((bind, unbind, isBound, rebind) => {\n  if (isBound(TextMeasureContribution)) {\n    rebind(TextMeasureContribution).to(FastTextMeasureContribution).inSingletonScope();\n  } else {\n    bind(TextMeasureContribution).to(FastTextMeasureContribution).inSingletonScope();\n  }\n});\n\nconst restoreTextMeasureModule = new ContainerModule((bind, unbind, isBound, rebind) => {\n  if (isBound(TextMeasureContribution)) {\n    rebind(TextMeasureContribution).to(DefaultTextMeasureContribution).inSingletonScope();\n  } else {\n    bind(TextMeasureContribution).to(DefaultTextMeasureContribution).inSingletonScope();\n  }\n});\n\nexport default textMeasureModule;\n\nexport const initTextMeasure = (\n  textSpec?: ITextGraphicAttributeFroMeasure,\n  option?: Partial<ITextMeasureOption>,\n  useNaiveCanvas?: boolean\n): TextMeasure<ITextGraphicAttributeFroMeasure> => {\n  return new TextMeasure<ITextGraphicAttributeFroMeasure>(\n    {\n      defaultFontParams: {\n        fontFamily: DefaultTextStyle.fontFamily,\n        fontSize: DefaultTextStyle.fontSize\n      },\n      getTextBounds: useNaiveCanvas ? undefined : getTextBounds,\n      specialCharSet: `{}()//&-/: .,@%'\"~…=——${\n        TextMeasure.ALPHABET_CHAR_SET\n      }${TextMeasure.ALPHABET_CHAR_SET.toUpperCase()}0123456789${customAlphabetCharSet}`,\n      ...(option ?? {})\n    },\n    textSpec\n  );\n};\n\nconst fastTextMeasureCache: Map<string, TextMeasure<ITextGraphicAttributeFroMeasure>> = new Map();\n\nfunction getFastTextMeasure(\n  fontSize: number,\n  fontWeight: string | number,\n  fontFamily: string,\n  fontStyle: string = 'normal'\n) {\n  const key = `${fontSize}-${fontWeight}-${fontFamily}-${fontStyle}`;\n  const cache = fastTextMeasureCache.get(key);\n  if (cache) {\n    return cache;\n  }\n  const fastTextMeasure = initTextMeasure({\n    // 16px sans-serif\n    fontSize,\n    fontFamily,\n    fontWeight,\n    fontStyle\n  });\n  fastTextMeasureCache.set(key, fastTextMeasure);\n  return fastTextMeasure;\n}\n\nexport class FastTextMeasureContribution extends DefaultTextMeasureContribution {\n  _fastMeasure(text: string, options: TextOptionsType) {\n    const { fontSize, fontFamily = 'Arial,sans-serif', fontWeight = 'normal', fontStyle = 'normal' } = options;\n    const fastTextMeasure = getFastTextMeasure(fontSize, fontWeight, fontFamily, fontStyle);\n    const textMeasure = fastTextMeasure.measure(text, textMeasureMode);\n\n    if (!isValid(textMeasure.fontBoundingBoxAscent) && !isValid(textMeasure.fontBoundingBoxDescent)) {\n      const { ascent, descent } = this.measureTextBoundADscentEstimate(options);\n      textMeasure.fontBoundingBoxAscent = ascent;\n      textMeasure.fontBoundingBoxDescent = descent;\n    }\n    return textMeasure;\n  }\n  /**\n   * 获取text宽度，measureText.width\n   * @param text\n   * @param options\n   */\n  measureTextWidth(text: string, options: TextOptionsType): number {\n    // if (!this.context) {\n    //   return this.estimate(text, options).width;\n    // }\n    // this.context.setTextStyleWithoutAlignBaseline(options);\n    // const textMeasure = this.context.measureText(text);\n    // return textMeasure.width;\n\n    return this._fastMeasure(text, options).width;\n  }\n\n  /**\n   * 获取text测量对象\n   * @param text\n   * @param options\n   */\n  measureText(text: string, options: TextOptionsType): TextMetrics | { width: number } {\n    // if (!this.context) {\n    //   return this.estimate(text, options);\n    // }\n    // this.context.setTextStyleWithoutAlignBaseline(options);\n    // return this.context.measureText(text);\n\n    return this._fastMeasure(text, options);\n  }\n\n  protected _measureTextWithoutAlignBaseline(\n    text: string,\n    options: TextOptionsType,\n    compatible?: boolean\n  ): { width: number } | TextMetrics {\n    return this._fastMeasure(text, options);\n  }\n\n  protected _measureTextWithAlignBaseline(text: string, options: TextOptionsType, compatible?: boolean) {\n    return this._fastMeasure(text, options);\n  }\n}\n\nexport class TextMeasureTool {\n  /**\n   * 获取text宽度，measureText.width\n   * @param text\n   * @param options\n   */\n  measureText(text: string, options: ITextGraphicAttribute): ITextSize {\n    const { fontSize, fontFamily = 'Arial,sans-serif', fontWeight = 'normal', fontStyle = 'normal' } = options;\n    const fastTextMeasure = getFastTextMeasure(fontSize, fontWeight, fontFamily, fontStyle);\n    const textMeasure = fastTextMeasure.measure(text, textMeasureMode);\n    return textMeasure;\n  }\n\n  /**\n   * 获取text宽度，measureText.width\n   * @param text\n   * @param options\n   */\n  measureTextWidth(text: string, options: ITextGraphicAttribute): number {\n    const { fontSize, fontFamily = 'Arial,sans-serif', fontWeight = 'normal', fontStyle = 'normal' } = options;\n    const fastTextMeasure = getFastTextMeasure(fontSize, fontWeight, fontFamily, fontStyle);\n    const textMeasure = fastTextMeasure.measure(text, textMeasureMode);\n    return textMeasure.width;\n  }\n\n  /**\n   * 将文本裁剪到width宽\n   * @param text\n   * @param options\n   * @param width\n   */\n  clipText(\n    text: string,\n    options: ITextGraphicAttribute,\n    width: number\n  ): {\n    str: string;\n    width: number;\n  } {\n    if (text.length === 0) {\n      return { str: '', width: 0 };\n    }\n    let length = this.measureTextWidth(text, options);\n    if (length <= width) {\n      return { str: text, width: length };\n    }\n    length = this.measureTextWidth(text[0], options);\n    if (length > width) {\n      return { str: '', width: 0 };\n    }\n    return this._clipText(text, options, width, 0, text.length - 1);\n  }\n\n  // 二分法找到最佳宽\n  private _clipText(\n    text: string,\n    options: ITextGraphicAttribute,\n    width: number,\n    leftIdx: number,\n    rightIdx: number\n  ): { str: string; width: number } {\n    const middleIdx = Math.floor((leftIdx + rightIdx) / 2);\n    const subText = text.substring(0, middleIdx + 1);\n    const strWidth = this.measureTextWidth(subText, options);\n    let length: number;\n    if (strWidth > width) {\n      // 如果字符串的宽度大于限制宽度\n      if (subText.length <= 1) {\n        return { str: '', width: 0 };\n      } // 如果子字符串长度小于1，而且大于给定宽的话，返回空字符串\n      // 先判断是不是左侧的那个字符\n      const str = text.substring(0, middleIdx);\n      // 如果到左侧的字符小于或等于width，那么说明就是左侧的字符\n      length = this.measureTextWidth(str, options);\n      if (length <= width) {\n        return { str, width: length };\n      }\n      // 返回leftIdx到middleIdx\n      return this._clipText(text, options, width, leftIdx, middleIdx);\n    } else if (strWidth < width) {\n      // 如果字符串的宽度小于限制宽度\n      if (middleIdx >= text.length - 1) {\n        return { str: text, width: this.measureTextWidth(text, options) };\n      } // 如果已经到结尾了，返回text\n      // 先判断是不是右侧的那个字符\n      const str = text.substring(0, middleIdx + 2);\n      // 如果到右侧的字符大于或等于width，那么说明就是这个字符串\n      length = this.measureTextWidth(str, options);\n      if (length >= width) {\n        return { str: subText, width: strWidth };\n      }\n      // 返回middleIdx到rightIdx\n      return this._clipText(text, options, width, middleIdx, rightIdx);\n    }\n    // 如果相同，那么就找到text\n    return { str: subText, width: strWidth };\n  }\n\n  clipTextWithSuffix(\n    text: string,\n    options: ITextGraphicAttribute,\n    width: number,\n    suffix: string\n  ): {\n    str: string;\n    width: number;\n  } {\n    if (suffix === '') {\n      return this.clipText(text, options, width);\n    }\n    if (text.length === 0) {\n      return { str: '', width: 0 };\n    }\n    const length = this.measureTextWidth(text, options);\n    if (length <= width) {\n      return { str: text, width: length };\n    }\n    const suffixWidth = this.measureTextWidth(suffix, options);\n    if (suffixWidth > width) {\n      return { str: '', width: 0 };\n    }\n    width -= suffixWidth;\n    const data = this._clipText(text, options, width, 0, text.length - 1);\n    data.str += suffix;\n    data.width += suffixWidth;\n    return data;\n  }\n}\n\nexport const textMeasure = new TextMeasureTool();\n\n// add user custom alphabet char set into fast measurement\nexport function setCustomAlphabetCharSet(str: string) {\n  customAlphabetCharSet = str;\n  fastTextMeasureCache.clear();\n  // container.load(textMeasureModule);\n}\n\n// change fast textMeasure into canvas textMeasure\nexport function restoreMeasureText() {\n  textMeasureMode = 'canvas';\n  container.load(restoreTextMeasureModule);\n}\n\nconst utilTextMark = new Text({\n  ignoreBuf: true\n  // autoWrapText: true\n});\n\nexport function measureTextBounds(attribute: ITextGraphicAttribute) {\n  utilTextMark.initAttributes({\n    ...attribute,\n    ignoreBuf: true\n  });\n  return utilTextMark.AABBBounds;\n}\n"]}