{"version":3,"sources":["../src/scenegraph/group-creater/progress/update-position/dynamic-set-y.ts"],"names":[],"mappings":"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","file":"dynamic-set-y.js","sourcesContent":["import type { RowInfo } from '../../../../ts-types';\nimport type { IRect } from '../../../../vrender';\nimport type { Group } from '../../../graphic/group';\nimport { computeRowsHeight } from '../../../layout/compute-row-height';\nimport type { SceneProxy } from '../proxy';\nimport { updateAutoRow } from './update-auto-row';\nimport { getLastChild } from './util';\n\nexport async function dynamicSetY(y: number, screenTop: RowInfo | null, isEnd: boolean, proxy: SceneProxy) {\n  if (!screenTop) {\n    return;\n  }\n  const screenTopRow = screenTop.row;\n  const screenTopY = screenTop.top;\n\n  let deltaRow;\n  if (isEnd) {\n    deltaRow = proxy.bodyBottomRow - proxy.rowEnd;\n  } else {\n    deltaRow = screenTopRow - proxy.referenceRow;\n  }\n  move(deltaRow, screenTopRow, screenTopY, y, proxy);\n  if (isEnd) {\n    const cellGroup = proxy.table.scenegraph.highPerformanceGetCell(proxy.colStart, proxy.rowEnd, true);\n    if (cellGroup.role === 'cell') {\n      const deltaY =\n        cellGroup.attribute.y +\n        cellGroup.attribute.height -\n        (proxy.table.tableNoFrameHeight - proxy.table.getFrozenRowsHeight() - proxy.table.getBottomFrozenRowsHeight()) -\n        y;\n      proxy.deltaY = -deltaY;\n      proxy.updateBody(y - proxy.deltaY);\n    }\n  }\n  // proxy.table.scenegraph.updateNextFrame();\n}\n\nfunction move(deltaRow: number, screenTopRow: number, screenTopY: number, y: number, proxy: SceneProxy) {\n  if (deltaRow > 0) {\n    // 向下滚动，顶部cell group移到底部\n    moveCell(deltaRow, 'up', screenTopRow, screenTopY, y, proxy);\n    proxy.updateDeltaY(y, screenTopY, screenTopRow);\n    proxy.updateBody(y - proxy.deltaY);\n  } else if (deltaRow < 0) {\n    // 向上滚动，底部cell group移到顶部\n    moveCell(-deltaRow, 'down', screenTopRow, screenTopY, y, proxy);\n    proxy.updateDeltaY(y, screenTopY, screenTopRow);\n    proxy.updateBody(y - proxy.deltaY);\n  } else {\n    // 不改变row，更新body group范围\n    proxy.updateDeltaY(y, screenTopY, screenTopRow);\n    proxy.updateBody(y - proxy.deltaY);\n  }\n}\n\nasync function moveCell(\n  count: number,\n  direction: 'up' | 'down',\n  screenTopRow: number,\n  screenTopY: number,\n  y: number,\n  proxy: SceneProxy\n) {\n  // 限制count范围\n  if (direction === 'up' && proxy.rowEnd + count > proxy.bodyBottomRow) {\n    count = proxy.bodyBottomRow - proxy.rowEnd;\n  } else if (direction === 'down' && proxy.rowStart - count < proxy.bodyTopRow) {\n    count = proxy.rowStart - proxy.bodyTopRow;\n  }\n  if (count === 0) {\n    return;\n  }\n  if (count < 0) {\n    direction = direction === 'up' ? 'down' : 'up';\n    count = -count;\n  }\n\n  // 两种更新模式\n  // 1. count < rowEnd - rowStart：从顶/底部移动count数量的单元格到底/顶部\n  // 2. count >= rowEnd - rowStart：整体移动到目标位置\n  if (count < proxy.rowEnd - proxy.rowStart) {\n    // 计算更新区域\n    const startRow = direction === 'up' ? proxy.rowStart : proxy.rowEnd - count + 1;\n    const endRow = direction === 'up' ? proxy.rowStart + count - 1 : proxy.rowEnd;\n    const distStartRow = direction === 'up' ? proxy.rowEnd + 1 : proxy.rowStart - count;\n    const distEndRow = direction === 'up' ? proxy.rowEnd + count : proxy.rowStart - 1;\n\n    // 更新同步范围\n    let syncTopRow;\n    let syncBottomRow;\n    if (proxy.table.isAutoRowHeight(startRow)) {\n      syncTopRow = distStartRow;\n      syncBottomRow = distEndRow;\n    } else {\n      const topRow = Math.max(proxy.bodyTopRow, screenTopRow - proxy.screenRowCount * 1);\n      const bottomRow = Math.min(\n        proxy.bodyBottomRow,\n        screenTopRow + proxy.screenRowCount * 2,\n        proxy.table.rowCount - 1\n      );\n      // get coincide of distStartRow&distEndRow and topRow&BottomRow\n      // syncTopRow = Math.max(distStartRow, topRow);\n      // syncBottomRow = Math.min(distEndRow, bottomRow);\n      syncTopRow = topRow;\n      syncBottomRow = bottomRow;\n    }\n\n    computeRowsHeight(proxy.table, syncTopRow, syncBottomRow, false);\n\n    updatePartRowPosition(startRow, endRow, direction, proxy);\n\n    proxy.rowStart = direction === 'up' ? proxy.rowStart + count : proxy.rowStart - count;\n    proxy.rowEnd = direction === 'up' ? proxy.rowEnd + count : proxy.rowEnd - count;\n\n    // 本次行更新是否同步完成，列数超过limit时为false\n    const sync = updateRowContent(syncTopRow, syncBottomRow, proxy, true);\n\n    if (proxy.table.isAutoRowHeight(startRow)) {\n      // body group\n      updateAutoRow(\n        proxy.bodyLeftCol, // colStart\n        proxy.bodyRightCol, // colEnd\n        syncTopRow, // rowStart\n        syncBottomRow, // rowEnd\n        proxy.table,\n        distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up', // 跳转到底部时，从下向上对齐\n        true\n      );\n\n      // row header group\n      updateAutoRow(\n        0, // colStart\n        proxy.table.frozenColCount - 1, // colEnd\n        syncTopRow, // rowStart\n        syncBottomRow, // rowEnd\n        proxy.table,\n        distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up', // 跳转到底部时，从下向上对齐\n        true\n      );\n\n      // right frozen group\n      updateAutoRow(\n        proxy.table.colCount - proxy.table.rightFrozenColCount, // colStart\n        proxy.table.colCount - 1, // colEnd\n        syncTopRow, // rowStart\n        syncBottomRow, // rowEnd\n        proxy.table,\n        distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up', // 跳转到底部时，从下向上对齐\n        true\n      );\n\n      // const oldCellOffset = screenTopY - y - proxy.table.getFrozenRowsHeight();\n      // console.log('cellOffset', screenTopY, screenTopRow);\n      // const newScreenTop = (proxy.table as any).getTargetRowAt(\n      //   y + proxy.table.scenegraph.colHeaderGroup.attribute.height\n      // );\n      // console.log('newScreenTop', newScreenTop);\n      // const cellOffset = newScreenTop.top - screenTopY;\n\n      // const cellGroup = proxy.table.scenegraph.highPerformanceGetCell(proxy.colStart, screenTopRow, true);\n      // const deltaY =\n      //   newScreenTop.top -\n      //   cellOffset -\n      //   (cellGroup.attribute.y + proxy.table.getFrozenRowsHeight() + proxy.table.scenegraph.proxy.deltaY);\n      // proxy.table.scenegraph.proxy.deltaY += deltaY;\n    }\n\n    proxy.currentRow = direction === 'up' ? proxy.currentRow + count : proxy.currentRow - count;\n    proxy.totalRow = Math.max(\n      0,\n      Math.min(\n        proxy.bodyBottomRow,\n        direction === 'up' ? proxy.totalRow + count : proxy.totalRow - count,\n        proxy.table.rowCount - 1\n      )\n    );\n    proxy.referenceRow = proxy.rowStart + Math.floor((proxy.rowEnd - proxy.rowStart) / 2);\n    // proxy.referenceRow = screenTopRow;\n    // proxy.rowUpdatePos = Math.min(proxy.rowUpdatePos, distStartRow);\n    if (proxy.table.isAutoRowHeight(startRow) && sync) {\n      proxy.rowUpdatePos = Math.min(proxy.rowUpdatePos, proxy.rowEnd + 1);\n    } else {\n      proxy.rowUpdatePos = Math.min(proxy.rowUpdatePos, distStartRow);\n    }\n    proxy.rowUpdateDirection = direction;\n\n    proxy.table.scenegraph.updateNextFrame();\n    await proxy.progress();\n  } else {\n    const distStartRow = direction === 'up' ? proxy.rowStart + count : proxy.rowStart - count;\n    const distEndRow = Math.min(\n      proxy.table.rowCount - 1,\n      direction === 'up' ? proxy.rowEnd + count : proxy.rowEnd - count\n    );\n    const distStartRowY = proxy.table.getRowsHeight(proxy.bodyTopRow, distStartRow - 1);\n\n    let syncTopRow;\n    let syncBottomRow;\n    if (proxy.table.isAutoRowHeight(distStartRow)) {\n      syncTopRow = distStartRow;\n      syncBottomRow = distEndRow;\n    } else {\n      syncTopRow = Math.max(proxy.bodyTopRow, screenTopRow - proxy.screenRowCount * 1);\n      syncBottomRow = Math.min(proxy.bodyBottomRow, screenTopRow + proxy.screenRowCount * 2, proxy.table.rowCount - 1);\n    }\n\n    computeRowsHeight(proxy.table, syncTopRow, syncBottomRow, false);\n\n    // 更新同步范围\n    updateAllRowPosition(distStartRowY, count, direction, proxy);\n\n    proxy.rowStart = distStartRow;\n    proxy.rowEnd = distEndRow;\n\n    const sync = updateRowContent(syncTopRow, syncBottomRow, proxy, true);\n\n    if (proxy.table.isAutoRowHeight(distStartRow)) {\n      // body group\n      updateAutoRow(\n        proxy.bodyLeftCol, // colStart\n        proxy.bodyRightCol, // colEnd\n        syncTopRow, // rowStart\n        syncBottomRow, // rowEnd\n        proxy.table,\n        distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up' // 跳转到底部时，从下向上对齐\n      );\n\n      // row header group\n      updateAutoRow(\n        0, // colStart\n        proxy.table.frozenColCount - 1, // colEnd\n        syncTopRow, // rowStart\n        syncBottomRow, // rowEnd\n        proxy.table,\n        distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up' // 跳转到底部时，从下向上对齐\n      );\n\n      // right frozen group\n      updateAutoRow(\n        proxy.table.colCount - proxy.table.rightFrozenColCount, // colStart\n        proxy.table.colCount - 1, // colEnd\n        syncTopRow, // rowStart\n        syncBottomRow, // rowEnd\n        proxy.table,\n        distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up' // 跳转到底部时，从下向上对齐\n      );\n    }\n\n    // // update body position when click scroll bar\n    // if (syncTopRow === proxy.bodyTopRow) {\n    //   const cellGroup = proxy.table.scenegraph.highPerformanceGetCell(proxy.colStart, syncTopRow, true);\n    //   const deltaY = cellGroup.attribute.y - y;\n    //   proxy.table.scenegraph.proxy.deltaY = deltaY;\n    // } else if (syncBottomRow === proxy.bodyBottomRow) {\n    //   const cellGroup = proxy.table.scenegraph.highPerformanceGetCell(proxy.colStart, syncBottomRow, true);\n    //   const deltaY =\n    //     cellGroup.attribute.y +\n    //     cellGroup.attribute.height -\n    //     (proxy.table.tableNoFrameHeight - proxy.table.getFrozenRowsHeight()) -\n    //     y;\n    //   proxy.table.scenegraph.proxy.deltaY = -deltaY;\n    // } else {\n    //   const cellGroup = proxy.table.scenegraph.highPerformanceGetCell(proxy.colStart, screenTopRow, true);\n    //   const deltaY =\n    //     screenTopY - (cellGroup.attribute.y + proxy.table.getFrozenRowsHeight() + proxy.table.scenegraph.proxy.deltaY);\n    //   proxy.table.scenegraph.proxy.deltaY = deltaY;\n    // }\n\n    proxy.currentRow = direction === 'up' ? proxy.currentRow + count : proxy.currentRow - count;\n    proxy.totalRow = Math.max(\n      0,\n      Math.min(\n        proxy.bodyBottomRow,\n        direction === 'up' ? proxy.totalRow + count : proxy.totalRow - count,\n        proxy.table.rowCount - 1\n      )\n    );\n    proxy.referenceRow = proxy.rowStart + Math.floor((proxy.rowEnd - proxy.rowStart) / 2);\n    // proxy.referenceRow = screenTopRow;\n    if (proxy.table.isAutoRowHeight(distStartRow) && sync) {\n      proxy.rowUpdatePos = proxy.rowEnd + 1;\n    } else {\n      proxy.rowUpdatePos = proxy.rowStart;\n    }\n    proxy.rowUpdateDirection = distEndRow > proxy.bodyBottomRow - (proxy.rowEnd - proxy.rowStart + 1) ? 'down' : 'up';\n\n    proxy.table.scenegraph.updateNextFrame();\n    await proxy.progress();\n  }\n}\n\nfunction updatePartRowPosition(startRow: number, endRow: number, direction: 'up' | 'down', proxy: SceneProxy) {\n  // row header group\n  for (let col = 0; col < proxy.table.frozenColCount; col++) {\n    const colGroup = proxy.table.scenegraph.getColGroup(col);\n    if (!colGroup) {\n      continue;\n    }\n    for (let row = startRow; row <= endRow; row++) {\n      updateCellGroupPosition(colGroup, direction, proxy);\n    }\n  }\n  // right frozen group\n  for (let col = proxy.table.colCount - proxy.table.rightFrozenColCount; col < proxy.table.colCount; col++) {\n    const colGroup = proxy.table.scenegraph.getColGroup(col);\n    if (!colGroup) {\n      continue;\n    }\n    for (let row = startRow; row <= endRow; row++) {\n      updateCellGroupPosition(colGroup, direction, proxy);\n    }\n  }\n  // body group\n  for (let col = proxy.bodyLeftCol; col <= proxy.bodyRightCol; col++) {\n    const colGroup = proxy.table.scenegraph.getColGroup(col);\n    if (colGroup) {\n      for (let row = startRow; row <= endRow; row++) {\n        updateCellGroupPosition(colGroup, direction, proxy);\n      }\n    }\n  }\n}\n\nfunction updateCellGroupPosition(colGroup: Group, direction: 'up' | 'down', proxy: SceneProxy) {\n  if (colGroup.childrenCount >= 1) {\n    if (direction === 'up') {\n      const cellGroup = colGroup.firstChild as Group;\n      proxy.updateCellGroupPosition(\n        cellGroup,\n        (colGroup.lastChild as Group).row + 1,\n        (colGroup.lastChild as Group).attribute.y + proxy.table.getRowHeight((colGroup.lastChild as Group).row) // (colGroup.lastChild as Group).attribute.height\n      );\n      colGroup.appendChild(cellGroup);\n    } else {\n      const cellGroup = colGroup.lastChild as Group;\n      proxy.updateCellGroupPosition(\n        cellGroup,\n        (colGroup.firstChild as Group).row - 1,\n        (colGroup.firstChild as Group).attribute.y - proxy.table.getRowHeight((cellGroup as Group).row) // cellGroup.attribute.height\n      );\n      colGroup.insertBefore(cellGroup, colGroup.firstChild);\n    }\n  }\n}\n\nfunction updateAllRowPosition(distStartRowY: number, count: number, direction: 'up' | 'down', proxy: SceneProxy) {\n  // row header group\n  for (let col = 0; col < proxy.table.frozenColCount; col++) {\n    const colGroup = proxy.table.scenegraph.getColGroup(col);\n    colGroup?.forEachChildren((cellGroup: Group, index) => {\n      // 这里使用colGroup变量而不是for proxy.rowStart to proxy.rowEndproxy.rowEnd是因为在更新内可能出现row号码重复的情况\n      proxy.updateCellGroupPosition(\n        cellGroup,\n        direction === 'up' ? cellGroup.row + count : cellGroup.row - count,\n        index === 0 // row === proxy.rowStart\n          ? distStartRowY\n          : (cellGroup._prev as Group).attribute.y + proxy.table.getRowHeight((cellGroup._prev as Group).row)\n      );\n    });\n  }\n  // right frozen group\n  for (let col = proxy.table.colCount - proxy.table.rightFrozenColCount; col < proxy.table.colCount; col++) {\n    const colGroup = proxy.table.scenegraph.getColGroup(col);\n    colGroup?.forEachChildren((cellGroup: Group, index) => {\n      // 这里使用colGroup变量而不是for proxy.rowStart to proxy.rowEndproxy.rowEnd是因为在更新内可能出现row号码重复的情况\n      proxy.updateCellGroupPosition(\n        cellGroup,\n        direction === 'up' ? cellGroup.row + count : cellGroup.row - count,\n        index === 0 // row === proxy.rowStart\n          ? distStartRowY\n          : (cellGroup._prev as Group).attribute.y + proxy.table.getRowHeight((cellGroup._prev as Group).row)\n      );\n    });\n  }\n  // body group\n  for (let col = proxy.bodyLeftCol; col <= proxy.bodyRightCol; col++) {\n    const colGroup = proxy.table.scenegraph.getColGroup(col);\n    colGroup?.forEachChildren((cellGroup: Group, index) => {\n      // 这里使用colGroup变量而不是for proxy.rowStart to proxy.rowEndproxy.rowEnd是因为在更新内可能出现row号码重复的情况\n      proxy.updateCellGroupPosition(\n        cellGroup,\n        direction === 'up' ? cellGroup.row + count : cellGroup.row - count,\n        index === 0 // row === proxy.rowStart\n          ? distStartRowY\n          : (cellGroup._prev as Group).attribute.y + proxy.table.getRowHeight((cellGroup._prev as Group).row)\n      );\n    });\n  }\n}\n\nexport function updateRowContent(syncTopRow: number, syncBottomRow: number, proxy: SceneProxy, async = false) {\n  // row header group\n  for (let col = 0; col < proxy.table.frozenColCount; col++) {\n    for (let row = syncTopRow; row <= syncBottomRow; row++) {\n      // const cellGroup = proxy.table.scenegraph.getCell(col, row);\n      const cellGroup = proxy.highPerformanceGetCell(col, row, true);\n      proxy.updateCellGroupContent(cellGroup);\n    }\n  }\n  // right frozen group\n  for (let col = proxy.table.colCount - proxy.table.rightFrozenColCount; col < proxy.table.colCount; col++) {\n    for (let row = syncTopRow; row <= syncBottomRow; row++) {\n      // const cellGroup = proxy.table.scenegraph.getCell(col, row);\n      const cellGroup = proxy.highPerformanceGetCell(col, row);\n      proxy.updateCellGroupContent(cellGroup);\n    }\n  }\n  // body group\n  let leftCol = proxy.bodyLeftCol;\n  let rightCol = proxy.bodyRightCol;\n  let sync = true;\n  if (async) {\n    const screenLeftCol = proxy.screenLeftCol;\n    leftCol = Math.max(proxy.bodyLeftCol, screenLeftCol - proxy.screenColCount * 1);\n    rightCol = Math.min(proxy.bodyRightCol, screenLeftCol + proxy.screenColCount * 2);\n    if (leftCol !== proxy.bodyLeftCol || rightCol !== proxy.bodyRightCol) {\n      sync = false;\n    }\n  }\n  for (let col = leftCol; col <= rightCol; col++) {\n    for (let row = syncTopRow; row <= syncBottomRow; row++) {\n      // const cellGroup = proxy.table.scenegraph.getCell(col, row);\n      const cellGroup = proxy.highPerformanceGetCell(col, row);\n      proxy.updateCellGroupContent(cellGroup);\n    }\n  }\n\n  // update container height\n  updateColumnContainerHeight(proxy.table.scenegraph.rowHeaderGroup);\n  updateColumnContainerHeight(proxy.table.scenegraph.rightFrozenGroup);\n  updateColumnContainerHeight(proxy.table.scenegraph.bodyGroup);\n\n  proxy.table.scenegraph.updateNextFrame();\n\n  return sync;\n}\n\nfunction updateColumnContainerHeight(containerGroup: Group) {\n  // update column container width\n  const lastColGroup = getLastChild(containerGroup);\n  if (!lastColGroup) {\n    return;\n  }\n  const lastCellGroup = getLastChild(lastColGroup);\n  if (!lastCellGroup) {\n    return;\n  }\n  containerGroup.setAttribute('height', lastCellGroup.attribute.y + lastCellGroup.attribute.height);\n  if (containerGroup.border) {\n    const border = containerGroup.border as IRect;\n    border.setAttribute(\n      'height',\n      lastCellGroup.attribute.y +\n        lastCellGroup.attribute.height -\n        ((border.attribute as any).borderTop ?? 0) / 2 -\n        ((border.attribute as any).borderBottom ?? 0) / 2\n    );\n  }\n}\n"]}