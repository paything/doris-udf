{"version":3,"sources":["../src/scenegraph/group-creater/progress/default-width-height.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,gCAAgC,CAAC;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,iCAAiC,CAAC;AASnE,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAC7B,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAG7B,MAAM,UAAU,eAAe,CAAC,KAAmB;IACjD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAErC,MAAM,MAAM,GAAG,EAAE,CAAC;IAElB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,CAAC,CAAC;IAEtE,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,QAAQ,EAAE;QACjD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,QAAQ,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;SAEpD;KACF;IACD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;IAGvF,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,KAAmB;IAClD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAGrC,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,CAAC,CAAC;IACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,iBAAiB,CAAC,CAAC,CAAC;IAEtE,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,QAAQ,EAAE;QACjD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,QAAQ,EAAE;YAEjD,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;SACtD;KACF;IAED,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;IAE1F,OAAO,UAAU,CAAC;AACpB,CAAC","file":"default-width-height.js","sourcesContent":["import type { BaseTableAPI } from '../../../ts-types/base-table';\nimport { computeColWidth } from '../../layout/compute-col-width';\nimport { computeRowHeight } from '../../layout/compute-row-height';\n\n// defaultRowHeight & defaultColWidth 在自动宽高模式中，\n// 会被用在滚动条跳转时，作为未测量的高（宽）用于计算预估滚动位置；\n// 如果default和实际相差过大，可能导致预估位置与实际位置相差过大，\n// 在相应行（列）计算出实际位置后，显示效果与预期相差较大（向上偏移或向下偏移）。\n// 这里使用采样方式，测量计算出一个预估的defaultRowHeight & defaultColWidth，\n// 优化实际位置与预期位置的差距\n\nconst colSamplingNumber = 10;\nconst rowSamplingNumber = 10;\n// The default row height and column width for proxy\n// use sampling calculation to get closer to the actual situation\nexport function getDefaultWidth(table: BaseTableAPI) {\n  const { rowCount, colCount } = table;\n\n  const widths = [];\n  // const heights = [];\n  const deltaCol = Math.max(1, Math.ceil(rowCount / colSamplingNumber));\n  const deltaRow = Math.max(1, Math.ceil(colCount / rowSamplingNumber));\n\n  for (let col = 0; col < colCount; col += deltaCol) {\n    for (let row = 0; row < rowCount; row += deltaRow) {\n      widths.push(computeColWidth(col, row, row, table));\n      // heights.push(computeRowHeight(row, col, col, table));\n    }\n  }\n  const meanWidth = Math.ceil((widths.reduce((a, b) => a + b, 0) / widths.length) * 1.2); // 1.2为buffer值，让计算结果稍大\n  // const meanHeight = heights.reduce((a, b) => a + b, 0) / heights.length;\n\n  return meanWidth;\n}\n\nexport function getDefaultHeight(table: BaseTableAPI) {\n  const { rowCount, colCount } = table;\n\n  // const widths = [];\n  const heights = [];\n  const deltaCol = Math.max(1, Math.ceil(rowCount / colSamplingNumber));\n  const deltaRow = Math.max(1, Math.ceil(colCount / rowSamplingNumber));\n\n  for (let col = 0; col < colCount; col += deltaCol) {\n    for (let row = 0; row < rowCount; row += deltaRow) {\n      // widths.push(computeColWidth(col, row, row, table));\n      heights.push(computeRowHeight(row, col, col, table));\n    }\n  }\n  // const meanWidth = widths.reduce((a, b) => a + b, 0) / widths.length;\n  const meanHeight = Math.ceil((heights.reduce((a, b) => a + b, 0) / heights.length) * 1.2); // 1.2为buffer值，让计算结果稍大\n\n  return meanHeight;\n}\n"]}