import type { IGraphicAttribute, IContext2d, IDrawContext, IGraphicRender, IGraphicRenderDrawParams, IMarkAttribute, IRenderService, IThemeAttribute } from './../../../vrender';
import { BaseRender } from './../../../vrender';
import type { Chart } from '../chart';
export declare const ChartRender: unique symbol;
export declare const ChartRenderContribution: unique symbol;
export declare class DefaultCanvasChartRender extends BaseRender<Chart> implements IGraphicRender {
    type: 'chart';
    numberType: number;
    drawShape(chart: Chart, context: IContext2d, x: number, y: number, drawContext: IDrawContext, params?: IGraphicRenderDrawParams, fillCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, strokeCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean): void;
    draw(chart: Chart, renderService: IRenderService, drawContext: IDrawContext, params?: IGraphicRenderDrawParams): void;
}
