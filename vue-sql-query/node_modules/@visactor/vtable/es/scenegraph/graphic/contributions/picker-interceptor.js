var __decorate = this && this.__decorate || function(decorators, target, key, desc) {
    var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

import { injectable } from "./../../../vrender";

let VChartPickServiceInterceptorContribution = class {
    constructor() {
        this.order = 1;
    }
    afterPickItem(result, pickerService, point, pickParams, params) {
        if (null === result.graphic && result.group && result.group.stage && "vstory" === result.group.stage.id) {
            const charts = result.group.stage.getElementsByType("chart"), nextPoint = {
                x: point.x,
                y: point.y
            };
            params && params.parentMatrix && params.parentMatrix.transformPoint(point, nextPoint);
            for (let i = charts.length - 1; i >= 0; i--) {
                const chart = charts[i], pointInChart = {
                    x: nextPoint.x,
                    y: nextPoint.y
                };
                if (chart.globalTransMatrix.transformPoint(pointInChart, pointInChart), !chart.activeChartInstance) continue;
                if (chart.activeChartInstance.getStage().viewBox.contains(pointInChart.x, pointInChart.y)) return result.graphic = chart, 
                result.group = null, result;
            }
        }
        return result;
    }
};

VChartPickServiceInterceptorContribution = __decorate([ injectable() ], VChartPickServiceInterceptorContribution);

export { VChartPickServiceInterceptorContribution };
//# sourceMappingURL=picker-interceptor.js.map
