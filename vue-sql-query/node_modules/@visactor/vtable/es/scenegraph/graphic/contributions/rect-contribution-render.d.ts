import type { IRect, IContext2d, IRectGraphicAttribute, IMarkAttribute, IGraphicAttribute, IThemeAttribute, IRectRenderContribution, IDrawContext } from './../../../vrender';
import { BaseRenderContributionTime } from './../../../vrender';
export declare class SplitRectBeforeRenderContribution implements IRectRenderContribution {
    time: BaseRenderContributionTime;
    useStyle: boolean;
    order: number;
    drawShape(rect: IRect, context: IContext2d, x: number, y: number, doFill: boolean, doStroke: boolean, fVisible: boolean, sVisible: boolean, rectAttribute: Required<IRectGraphicAttribute>, drawContext: IDrawContext, fillCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, strokeCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, doFillOrStroke?: {
        doFill: boolean;
        doStroke: boolean;
    }): void;
}
export declare class SplitRectAfterRenderContribution implements IRectRenderContribution {
    time: BaseRenderContributionTime;
    useStyle: boolean;
    order: number;
    drawShape(rect: IRect, context: IContext2d, x: number, y: number, doFill: boolean, doStroke: boolean, fVisible: boolean, sVisible: boolean, rectAttribute: Required<IRectGraphicAttribute>, drawContext: IDrawContext, fillCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean, strokeCb?: (ctx: IContext2d, markAttribute: Partial<IMarkAttribute & IGraphicAttribute>, themeAttribute: IThemeAttribute) => boolean): void;
}
export declare function renderStrokeWithCornerRadius(i: number, x1: number, y1: number, x2: number, y2: number, rect: IRect, context: IContext2d, x: number, y: number, rectAttribute: Required<IRectGraphicAttribute>, stroke: any, strokeArrayWidth: any, strokeArrayColor: any, width: number, height: number): void;
