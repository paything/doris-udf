{"version":3,"sources":["../src/scenegraph/layout/height-util.ts"],"names":[],"mappings":"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","file":"height-util.js","sourcesContent":["import { isArray, isNumber, isObject } from '@visactor/vutils';\nimport { validToString } from '../../tools/util';\nimport { getProp } from '../utils/get-prop';\nimport { CheckBox, Radio, Switch, Tag } from './../../vrender';\nimport type { FullExtendStyle, RadioColumnDefine } from '../../ts-types';\nimport type { BaseTableAPI } from '../../ts-types/base-table';\n\nconst utilCheckBoxMark = new CheckBox({});\nconst utilRadioMark = new Radio({});\nconst utilButtonMark = new Tag({});\n\nexport function computeCheckboxCellHeight(\n  cellValue: any,\n  col: number,\n  row: number,\n  endCol: number,\n  actStyle: FullExtendStyle,\n  autoWrapText: boolean,\n  iconWidth: number,\n  fontSize: number,\n  fontStyle: string,\n  fontWeight: string,\n  fontFamily: string,\n  lineHeight: number,\n  lineClamp: number | undefined,\n  padding: [number, number, number, number],\n  table: BaseTableAPI\n) {\n  const text = isObject(cellValue) ? (cellValue as any).text : cellValue;\n  const lines = validToString(text).split('\\n') || [];\n  const cellWidth = table.getColsWidth(col, endCol);\n  const size = getProp('size', actStyle, col, row, table);\n  let maxHeight = 0;\n  if (autoWrapText) {\n    const spaceBetweenTextAndIcon = getProp('spaceBetweenTextAndIcon', actStyle, col, row, table);\n    const maxLineWidth = cellWidth - (padding[1] + padding[3]) - iconWidth - size - spaceBetweenTextAndIcon;\n    utilCheckBoxMark.setAttributes({\n      text: {\n        maxLineWidth,\n        text: lines,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        lineHeight,\n        wordBreak: 'break-word',\n        lineClamp\n      },\n      icon: {\n        width: Math.floor(size / 1.4), // icon : box => 10 : 14\n        height: Math.floor(size / 1.4)\n      },\n      box: {\n        width: size,\n        height: size\n      },\n      spaceBetweenTextAndIcon\n    });\n    utilCheckBoxMark.render();\n    maxHeight = utilCheckBoxMark.AABBBounds.height();\n  } else {\n    maxHeight = Math.max(size, lines.length * lineHeight);\n  }\n\n  return maxHeight;\n}\n\nexport function computeRadioCellHeight(\n  cellValue: any,\n  col: number,\n  row: number,\n  endCol: number,\n  actStyle: FullExtendStyle,\n  autoWrapText: boolean,\n  iconWidth: number,\n  fontSize: number,\n  fontStyle: string,\n  fontWeight: string,\n  fontFamily: string,\n  lineHeight: number,\n  lineClamp: number | undefined,\n  padding: [number, number, number, number],\n  table: BaseTableAPI\n) {\n  if (isArray(cellValue)) {\n    // multi radio\n    let maxHeight = 0;\n    const define = table.getBodyColumnDefine(col, row);\n    const spaceBetweenRadio = getProp('spaceBetweenRadio', actStyle, col, row, table);\n    const radioDirectionInCell = (define as RadioColumnDefine)?.radioDirectionInCell ?? 'vertical';\n    if (radioDirectionInCell === 'vertical') {\n      // sum all radio height\n      cellValue.forEach((singleValue, index) => {\n        const height = computeSingleRadioCellHeight(\n          singleValue,\n          col,\n          row,\n          endCol,\n          actStyle,\n          autoWrapText,\n          iconWidth,\n          fontSize,\n          fontStyle,\n          fontWeight,\n          fontFamily,\n          lineHeight,\n          lineClamp,\n          padding,\n          table\n        );\n        maxHeight += height;\n        if (index !== cellValue.length - 1) {\n          maxHeight += spaceBetweenRadio;\n        }\n      });\n    } else if (radioDirectionInCell === 'horizontal') {\n      // get max radio height\n      cellValue.forEach(singleValue => {\n        const height = computeSingleRadioCellHeight(\n          singleValue,\n          col,\n          row,\n          endCol,\n          actStyle,\n          autoWrapText,\n          iconWidth,\n          fontSize,\n          fontStyle,\n          fontWeight,\n          fontFamily,\n          lineHeight,\n          lineClamp,\n          padding,\n          table\n        );\n        maxHeight = Math.max(height, maxHeight);\n      });\n    }\n    return maxHeight;\n  }\n  // single radio\n  return computeSingleRadioCellHeight(\n    cellValue,\n    col,\n    row,\n    endCol,\n    actStyle,\n    autoWrapText,\n    iconWidth,\n    fontSize,\n    fontStyle,\n    fontWeight,\n    fontFamily,\n    lineHeight,\n    lineClamp,\n    padding,\n    table\n  );\n}\n\nexport function computeSingleRadioCellHeight(\n  cellValue: any,\n  col: number,\n  row: number,\n  endCol: number,\n  actStyle: FullExtendStyle,\n  autoWrapText: boolean,\n  iconWidth: number,\n  fontSize: number,\n  fontStyle: string,\n  fontWeight: string,\n  fontFamily: string,\n  lineHeight: number,\n  lineClamp: number | undefined,\n  padding: [number, number, number, number],\n  table: BaseTableAPI\n) {\n  const text = isObject(cellValue) ? (cellValue as any).text : cellValue;\n  const lines = validToString(text).split('\\n') || [];\n  const cellWidth = table.getColsWidth(col, endCol);\n  const size = getProp('size', actStyle, col, row, table);\n  let outerRadius = getProp('outerRadius', actStyle, col, row, table);\n  const circleSize = isNumber(outerRadius) ? outerRadius * 2 : size;\n  let maxHeight = 0;\n  if (autoWrapText) {\n    const spaceBetweenTextAndIcon = getProp('spaceBetweenTextAndIcon', actStyle, col, row, table);\n    const maxLineWidth = cellWidth - (padding[1] + padding[3]) - iconWidth - circleSize - spaceBetweenTextAndIcon;\n    if (!isNumber(outerRadius)) {\n      outerRadius = Math.round(size / 2);\n    }\n    utilRadioMark.setAttributes({\n      text: {\n        maxLineWidth,\n        text: lines,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        lineHeight,\n        wordBreak: 'break-word',\n        lineClamp\n      },\n      circle: {\n        outerRadius\n      },\n      spaceBetweenTextAndIcon\n    });\n    utilRadioMark.render();\n    maxHeight = utilRadioMark.AABBBounds.height();\n  } else {\n    maxHeight = Math.max(size, lines.length * lineHeight);\n  }\n\n  return maxHeight;\n}\n\nexport function computeSwitchCellHeight(\n  cellValue: any,\n  col: number,\n  row: number,\n  endCol: number,\n  actStyle: FullExtendStyle,\n  autoWrapText: boolean,\n  iconWidth: number,\n  fontSize: number,\n  fontStyle: string,\n  fontWeight: string,\n  fontFamily: string,\n  lineHeight: number,\n  lineClamp: number | undefined,\n  padding: [number, number, number, number],\n  table: BaseTableAPI\n) {\n  const boxWidth = getProp('boxWidth', actStyle, col, row, table);\n\n  return boxWidth;\n}\n\nexport function computeButtonCellHeight(\n  cellValue: any,\n  col: number,\n  row: number,\n  endCol: number,\n  actStyle: FullExtendStyle,\n  autoWrapText: boolean,\n  iconWidth: number,\n  fontSize: number,\n  fontStyle: string,\n  fontWeight: string,\n  fontFamily: string,\n  lineHeight: number,\n  lineClamp: number | undefined,\n  padding: [number, number, number, number],\n  table: BaseTableAPI\n) {\n  const text = isObject(cellValue) ? (cellValue as any).text : cellValue;\n  const lines = validToString(text).split('\\n') || [];\n  const cellWidth = table.getColsWidth(col, endCol);\n  const buttonPadding = getProp('buttonPadding', actStyle, col, row, table);\n  const buttonLineWidth = getProp('buttonLineWidth', actStyle, col, row, table);\n  let maxHeight = 0;\n  if (autoWrapText) {\n    const maxLineWidth = cellWidth - (padding[1] + padding[3]);\n    utilButtonMark.setAttributes({\n      text: lines,\n      textStyle: {\n        maxLineWidth,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        lineHeight,\n        wordBreak: 'break-word',\n        lineClamp\n      },\n      padding: buttonPadding,\n      panel: {\n        visible: true,\n        fill: 'red',\n        stroke: 'red',\n        lineWidth: buttonLineWidth\n      }\n    });\n    utilRadioMark.render();\n    maxHeight = utilRadioMark.AABBBounds.height();\n  } else {\n    maxHeight = lines.length * lineHeight + buttonPadding * 2;\n  }\n\n  return maxHeight;\n}\n"]}