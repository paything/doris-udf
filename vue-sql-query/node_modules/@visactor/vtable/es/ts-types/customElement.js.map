{"version":3,"sources":["../src/ts-types/customElement.ts"],"names":[],"mappings":"","file":"customElement.js","sourcesContent":["import type { FieldData } from './table-engine';\nimport type { RectProps } from './common';\nimport type { BaseTableAPI } from './base-table';\nimport type { TextAlignType, TextBaselineType } from './style-define';\nexport interface CustomRenderFunctionArg<TypedTable = BaseTableAPI> {\n  row: number;\n  col: number;\n  table: TypedTable;\n  /**format之后的值 */\n  value: FieldData;\n  /**原始值 */\n  dataValue: FieldData;\n  rect?: RectProps;\n  originCol?: number;\n  originRow?: number;\n\n  forComputation?: boolean;\n}\ninterface baseElement {\n  elementKey?: string;\n  x: number | string | ((value: string) => number | string);\n  y: number | string | ((value: string) => number | string);\n  dx?: number;\n  dy?: number;\n  // clickable?: boolean; // @dispose\n  pickable?: boolean;\n  cursor?: string;\n  name?: string;\n}\nexport interface TextElement extends baseElement {\n  type: 'text';\n  text: string | ((value: string) => string);\n  stroke?: string | ((value: string) => string);\n  fill?: string | ((value: string) => string);\n  color?: string | ((value: string) => string);\n  lineWidth?: number;\n  fontSize?: number | ((value: string) => number);\n  fontFamily?: string | ((value: string) => string);\n  fontWeight?: string | number | ((value: string) => string | number);\n  fontVariant?: string;\n  fontStyle?: string;\n  ellipsis?: boolean | string;\n  maxLineWidth?: number;\n  textAlign?: TextAlignType;\n  textBaseline?: TextBaselineType;\n  lineHeight?: number;\n  underline?: number;\n  underlineDash?: number[];\n  underlineOffset?: number;\n  lineThrough?: number;\n  heightLimit?: number;\n  lineClamp?: number;\n  width?: number;\n  height?: number;\n  background?: {\n    fill?: string;\n    expandY?: number;\n    expandX?: number;\n    cornerRadius?: number;\n  };\n}\nexport interface LineElement extends Omit<baseElement, 'x' | 'y'> {\n  type: 'line';\n  stroke?: string | ((value: string) => string);\n  points: { x: number; y: number }[];\n  lineWidth?: number;\n}\n\nexport interface RectElement extends baseElement {\n  type: 'rect';\n  width: number | string | ((value: string) => number | string);\n  height: number | string | ((value: string) => number | string);\n  stroke?: string | ((value: string) => string);\n  fill?: string | ((value: string) => string);\n  radius?: number | string | ((value: string) => number | string);\n}\n\nexport interface CircleElement extends baseElement {\n  type: 'circle';\n  radius: number | string | ((value: string) => number | string);\n  // radian?: number | string | ((value: string) => number | string);\n  stroke?: string | ((value: string) => string);\n  fill?: string | ((value: string) => string);\n}\nexport interface ArcElement extends baseElement {\n  type: 'arc';\n  radius: number | string | ((value: string) => number | string);\n  startAngle?: number | ((value: string) => number);\n  endAngle?: number | ((value: string) => number);\n  // clockWise?: boolean;\n  stroke?: string | ((value: string) => string);\n  fill?: string | ((value: string) => string);\n}\nexport interface IconElement extends baseElement {\n  type: 'icon';\n  svg: string | ((value: string) => string);\n  width: number | string | ((value: string) => number | string);\n  height: number | string | ((value: string) => number | string);\n  hover?: {\n    x: number | string;\n    y: number | string;\n    width: number | string | ((value: string) => number | string);\n    height: number | string | ((value: string) => number | string);\n    bgColor: string;\n    radius?: number;\n  };\n}\nexport interface ImageElement extends baseElement {\n  type: 'image';\n  src: string | ((value: string) => string);\n  width: number | string | ((value: string) => number | string);\n  height: number | string | ((value: string) => number | string);\n  hover?: {\n    x: number | string;\n    y: number | string;\n    width: number | string | ((value: string) => number | string);\n    height: number | string | ((value: string) => number | string);\n    bgColor: string;\n    radius?: number;\n  };\n  shape?: 'circle' | 'square';\n}\nexport type ICustomRenderElement =\n  | TextElement\n  | RectElement\n  | CircleElement\n  | IconElement\n  | ImageElement\n  | ArcElement\n  | LineElement;\nexport type ICustomRenderElements = Array<ICustomRenderElement>;\n\nexport type ICustomRenderFuc<T = BaseTableAPI> = (args: CustomRenderFunctionArg<T>) => ICustomRenderObj;\n\nexport type ICustomRenderObj = {\n  /** 配置出来的类型集合 */\n  elements: ICustomRenderElements;\n  /** 期望单元格的高度 */\n  expectedHeight: number;\n  /** 期望单元格的宽度 */\n  expectedWidth: number;\n  /**\n   * 是否还需要默认渲染内容 只有配置true才绘制 默认 不绘制\n   */\n  renderDefault?: boolean;\n};\n\nexport type ICustomRender<T = BaseTableAPI> = ICustomRenderFuc<T> | ICustomRenderObj;\n"]}