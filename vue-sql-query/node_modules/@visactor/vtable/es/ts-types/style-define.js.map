{"version":3,"sources":["../src/ts-types/style-define.ts"],"names":[],"mappings":"","file":"style-define.js","sourcesContent":["import type { BaseTableAPI } from './base-table';\nimport type { ColorsDef, ICellHeaderPaths, LineDashsDef, LineWidthsDef, PaddingsDef } from './common';\nimport type { ColumnIconOption } from './icon';\nimport type { FieldData } from './table-engine';\n\n// ****** TextStyle Options *******\nexport type TextOverflow = string /* a char */; //设置一行的省略形式，另外还有clip。如果autoWrapText设置了自动换行，这个无效\nexport type LineClamp = number | 'auto'; //设置单元格显示的行数，如果不设置的话 默认全部展示直到超过了显示范围，会截断暂时文本，如果设置了auto，显示不了的文本会出现省略号\nexport type TextAlignType = 'center' | 'end' | 'left' | 'right' | 'start'; // 设置单元格内文字的水平对齐方式\nexport type TextBaselineType = 'alphabetic' | 'bottom' | 'middle' | 'top'; // 设置单元格内文字的垂直对齐方式\n\nexport interface StylePropertyFunctionArg {\n  row: number;\n  col: number;\n  /** 表格实例 */\n  table: BaseTableAPI;\n  /**有format的话 格式化后或者计算后的值 */\n  value?: FieldData;\n  /**原始值 */\n  dataValue?: FieldData;\n  /** progressbar类型特有，表示当前数值在总体数据范围的比例 */\n  percentile?: number;\n  /** 单元格的表头路径信息 */\n  cellHeaderPaths?: ICellHeaderPaths;\n}\nexport type ColorPropertyDefine =\n  | string\n  | ((args: StylePropertyFunctionArg) => string)\n  | ((args: StylePropertyFunctionArg) => CanvasGradient)\n  | ((args: StylePropertyFunctionArg) => CanvasPattern);\n\nexport type ColorsPropertyDefine =\n  | ColorPropertyDefine\n  | (string | null)[]\n  | ((args: StylePropertyFunctionArg) => (string | null)[]);\n\nexport type LineWidthPropertyDefine = number | ((args: StylePropertyFunctionArg) => number);\n\nexport type LineWidthsPropertyDefine =\n  | LineWidthPropertyDefine\n  | (number | null)[]\n  | ((args: StylePropertyFunctionArg) => (number | null)[]);\n\nexport type LineDashPropertyDefine = Array<number> | ((args: StylePropertyFunctionArg) => Array<number>);\n\nexport type LineDashsPropertyDefine =\n  | LineDashPropertyDefine\n  | (Array<number> | null)[]\n  | ((args: StylePropertyFunctionArg) => (Array<number> | null)[]);\n\n// export type FontPropertyDefine = string | ((args: StylePropertyFunctionArg) => string);\nexport type FontSizePropertyDefine = number | ((args: StylePropertyFunctionArg) => number);\nexport type FontFamilyPropertyDefine = string | ((args: StylePropertyFunctionArg) => string);\nexport type FontWeightPropertyDefine = string | number | ((args: StylePropertyFunctionArg) => string | number);\nexport type FontVariantPropertyDefine = string | ((args: StylePropertyFunctionArg) => string);\nexport type FontStylePropertyDefine = string | ((args: StylePropertyFunctionArg) => string);\n\nexport type TagPropertyDefine = string | ((args: StylePropertyFunctionArg) => string);\n\nexport type CursorPropertyDefine = string | ((args: StylePropertyFunctionArg) => string);\n\nexport type IconPropertyDefine =\n  | string\n  | ColumnIconOption\n  | ((args: StylePropertyFunctionArg) => string | ColumnIconOption);\n\nexport type UnderlinePropertyDefine = boolean | ((args: StylePropertyFunctionArg) => boolean);\nexport type LineThroughPropertyDefine = boolean | ((args: StylePropertyFunctionArg) => boolean);\n\nexport type PaddingPropertyDefine = number | ((args: StylePropertyFunctionArg) => number);\n\nexport type PaddingsPropertyDefine =\n  | PaddingPropertyDefine\n  | (number | null)[]\n  | ((args: StylePropertyFunctionArg) => (number | null)[]);\n\nexport type MarkCellStyle = {\n  /** 标记背景色 默认蓝色*/\n  bgColor?: CanvasRenderingContext2D['fillStyle'];\n  /** 标记形状 默认'sector' */\n  shape?: 'rect' | 'triangle' | 'sector';\n  /** 标记位置 默认'right-top' */\n  position?: 'left-top' | 'left-bottom' | 'right-top' | 'right-bottom';\n  /** 标记大小 默认10 */\n  size?: number;\n  /** 标记偏移量 默认0 */\n  offset?: number;\n};\nexport type MarkedPropertyDefine =\n  | boolean\n  | MarkCellStyle\n  | ((args: StylePropertyFunctionArg) => boolean | MarkCellStyle);\n\nexport type CellStyle = {\n  textAlign: CanvasTextAlign;\n  padding: PaddingsDef;\n  textBaseline: CanvasTextBaseline;\n  color: CanvasRenderingContext2D['fillStyle'];\n  strokeColor?: CanvasRenderingContext2D['fillStyle'];\n  bgColor: CanvasRenderingContext2D['fillStyle'];\n  // font: string;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: string | number;\n  fontVariant: string;\n  fontStyle: string;\n  // lineHeight: string | number;\n  lineHeight: number;\n  autoWrapText: boolean;\n  lineClamp: LineClamp;\n  textOverflow: TextOverflow;\n  borderColor: ColorsDef;\n  borderLineWidth: LineWidthsDef;\n  borderLineDash: LineDashsDef;\n  underline: boolean;\n  // underlineColor: CanvasRenderingContext2D['strokeStyle'];\n  underlineWidth: number;\n  underlineDash: number[];\n  underlineOffset: number;\n  lineThrough: boolean;\n  // lineThroughColor: CanvasRenderingContext2D['strokeStyle'];\n  // lineThroughDash: number[];\n  lineThroughLineWidth: number;\n\n  _strokeArrayWidth: number[];\n  _strokeArrayColor: string[];\n  _linkColor: CanvasRenderingContext2D['fillStyle'];\n};\n"]}