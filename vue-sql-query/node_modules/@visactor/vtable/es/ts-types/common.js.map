{"version":3,"sources":["../src/ts-types/common.ts"],"names":[],"mappings":"AAyHA,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,uCAAqB,CAAA;IACrB,uCAAqB,CAAA;IACrB,2CAAyB,CAAA;AAC3B,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AASD,MAAM,CAAN,IAAY,cAMX;AAND,WAAY,cAAc;IACxB,mCAAmB,CAAA;IACnB,mCAAmB,CAAA;IACnB,6BAAa,CAAA;IACb,iCAAiB,CAAA;IACjB,+BAAe,CAAA;AACjB,CAAC,EANW,cAAc,KAAd,cAAc,QAMzB","file":"common.js","sourcesContent":["import type { Style } from '../body-helper/style';\nimport type { ColumnStyleOption, ColumnTypeOption } from './column';\nimport type { ColumnData } from './list-table/layout-map/api';\nimport type { CellLocation, CellPivotRole, CellRange, FieldData, FieldDef } from './table-engine';\nimport type { Rect } from '../tools/Rect';\nimport type { BaseTableAPI } from './base-table';\nimport type { StylePropertyFunctionArg } from './style-define';\n\nexport type MaybePromise<T> = T | Promise<T>;\n\nexport type MaybeCall<T, A extends any[]> = T | ((...args: A) => T);\n\nexport type MaybePromiseOrUndefined = any | undefined | Promise<any | undefined>;\nexport type MaybePromiseOrCallOrUndefined = any | undefined | Promise<any | undefined> | ((...args: any) => any);\nexport type PromiseMaybeUndefOrCall<T, A extends any[]> = Promise<T | undefined> | ((...args: A) => T);\nexport type AnyFunction = (...args: any[]) => any;\n\nexport interface RectProps {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  width: number;\n  height: number;\n}\n\nexport interface CellPosition {\n  col: number;\n  row: number;\n}\n\nexport type ColorsDef = string | (string | null)[];\nexport type LineWidthsDef = number | (number | null)[];\nexport type LineDashsDef = number[] | (number[] | null)[];\nexport type shadowColorsDef = { from: string; to: string } | ({ from: string; to: string } | null)[];\nexport type PaddingsDef = number | (number | null)[];\nexport type SortOption = boolean | ((v1: any, v2: any, order: SortOrder) => -1 | 0 | 1);\nexport type MergeCellOption =\n  | boolean\n  | ((\n      v1: any,\n      v2: any,\n      extraArgs: {\n        source: CellPosition;\n        target: CellPosition;\n        table: BaseTableAPI;\n      }\n    ) => boolean);\nexport type BaseCellInfo = {\n  row: number;\n  col: number;\n  /**format之后的值 */\n  value: FieldData;\n  /**原始值 */\n  dataValue: FieldData;\n};\nexport type MergeCellInfo = {\n  colStart: number;\n  colEnd: number;\n  rowStart: number;\n  rowEnd: number;\n};\nexport type CellInfo = {\n  col: number;\n  row: number;\n  title?: string | (() => string) | undefined;\n  /**维度名称 */\n  field?: FieldDef;\n  /**单元格行列表头paths */\n  cellHeaderPaths?: ICellHeaderPaths;\n  /**单元格的位置 */\n  cellRange?: Rect;\n  /**整条数据-原始数据 */\n  originData?: any;\n  /**format之后的值 */\n  value?: FieldData;\n  /**原始值 */\n  dataValue?: FieldData;\n  cellLocation?: CellLocation;\n  cellType?: ColumnTypeOption;\n};\n\nexport type ICellHeaderPaths = IListTableCellHeaderPaths | IPivotTableCellHeaderPaths;\nexport type IListTableCellHeaderPaths = {\n  readonly colHeaderPaths?: {\n    field: FieldDef;\n    // title: string | (() => string) | undefined;\n  }[];\n  readonly rowHeaderPaths?: {\n    field: FieldDef;\n    // title: string | (() => string) | undefined;\n  }[];\n  cellLocation: CellLocation;\n};\nexport type IPivotTableCellHeaderPaths = {\n  /** 列表头各级path表头信息 */\n  readonly colHeaderPaths?: IDimensionInfo[];\n  /** 行表头各级path表头信息 */\n  readonly rowHeaderPaths?: IDimensionInfo[];\n  cellLocation: CellLocation;\n  role?: CellPivotRole;\n};\n\nexport interface IDimensionInfo {\n  dimensionKey?: string;\n  value?: string;\n  indicatorKey?: string;\n  isPivotCorner?: boolean;\n  virtual?: boolean;\n  role?: CellPivotRole;\n}\n\n/**\n * 当前表格的交互状态：\n * Default 默认展示\n * grabing 拖拽中\n *   -Resize column 改变列宽\n *   -column move 调整列顺序\n *   -drag select 拖拽多选\n * Scrolling 滚动中\n */\nexport enum InteractionState {\n  'default' = 'default',\n  'grabing' = 'grabing',\n  'scrolling' = 'scrolling'\n}\n/**\n * 单元格的高亮效果设置\n * single 单个单元格高亮\n * column 整列高亮\n * row 整行高量\n * cross 十字花 行列均高亮\n * none 无高亮\n */\nexport enum HighlightScope {\n  'single' = 'single',\n  'column' = 'column',\n  'row' = 'row',\n  'cross' = 'cross',\n  'none' = 'none'\n}\n\nexport type SortOrder = 'asc' | 'desc' | 'normal' | 'ASC' | 'DESC' | 'NORMAL';\n\nexport type CustomCellStyle = {\n  id: string;\n  style: ColumnStyleOption | ((styleArg: StylePropertyFunctionArg) => ColumnStyleOption);\n};\n\nexport type CustomCellStyleArrangement = {\n  cellPosition: {\n    col?: number;\n    row?: number;\n    range?: CellRange;\n  };\n  customStyleId: string;\n};\n"]}