{"version":3,"sources":["../src/ts-types/list-table/layout-map/api.ts"],"names":[],"mappings":"","file":"api.js","sourcesContent":["import type {\n  CellAddress,\n  CellRange,\n  ColumnIconOption,\n  ColumnStyle,\n  ColumnStyleOption,\n  // ColumnTypeOption,\n  FieldDef,\n  FieldFormat,\n  HeaderStyleOption,\n  LayoutObjectId,\n  MenuListItem,\n  IPivotTableCellHeaderPaths,\n  CellInfo,\n  // ICustomRenderFuc,\n  // ICustomRenderObj,\n  PivotInfo,\n  FieldKeyDef,\n  CustomRenderFunctionArg,\n  SparklineSpec,\n  HierarchyState,\n  Aggregation,\n  IRowSeriesNumber,\n  SortOption,\n  FieldGetter,\n  BaseCellInfo\n} from '../../';\nimport type { Aggregator } from '../../dataset/aggregation';\nimport type { BaseTableAPI } from '../../base-table';\n\nimport type { HeaderDefine, ColumnDefine, ColumnBodyDefine } from '../define';\n\n// todo: 修改引用这些类型的路径\nexport type {\n  HeaderDefine,\n  ColumnDefine,\n  ColumnBodyDefine,\n  ColumnsDefine,\n  LinkColumnDefine,\n  ChartColumnDefine,\n  ImageColumnDefine,\n  SparklineColumnDefine,\n  ProgressbarColumnDefine,\n  TextColumnDefine,\n  GroupColumnDefine\n} from '../define';\n\n/**\n * layout中组织表头的信息类  和HeaderDefine对应\n */\nexport interface HeaderData extends WidthData {\n  id: LayoutObjectId;\n  title?: string | (() => string);\n  // captionIcon?: ColumnIconOption;\n  headerIcon?:\n    | string\n    | ColumnIconOption\n    | (string | ColumnIconOption)[]\n    | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);\n  icons?: (string | ColumnIconOption)[] | ((args: CellInfo) => (string | ColumnIconOption)[]);\n\n  field: FieldDef;\n  fieldFormat?: FieldFormat;\n  style?: HeaderStyleOption | ColumnStyle | null | undefined;\n  headerType: 'text' | 'link' | 'image' | 'video' | 'checkbox'; // headerType.BaseHeader;\n  define: ColumnDefine;\n  // sortIconPosition?: RectProps;\n  // freezeIconPosition?: RectProps;\n  /**存储图标的位置 坐标及宽高 是包括了boxWidth boxWidth 共getHitIcon方法使用 计算是否命中图标*/\n  // iconPositionList?: { [key in IconFuncTypeEnum]?: RectProps & { icon: ColumnIconOption } };\n  dropDownMenu?: MenuListItem[] | ((args: { row: number; col: number; table: BaseTableAPI }) => MenuListItem[]);\n  pivotInfo?: PivotInfo;\n  /**\n   * 维度层级level 从0开始：第0层 第1层\n   */\n  hierarchyLevel?: number;\n  /**\n   * 维度总层级数\n   */\n  dimensionTotalLevel?: number;\n  /**\n   * 层级展开or折叠状态\n   */\n  hierarchyState?: HierarchyState;\n  columnWidthComputeMode?: 'normal' | 'only-header' | 'only-body';\n\n  showSort?: boolean | ((args: { row: number; col: number; table: BaseTableAPI }) => boolean);\n  sort?: SortOption;\n\n  /**\n   * 表头描述 鼠标hover会提示该信息\n   */\n  description?: string | ((args: CellInfo) => string);\n\n  // header内容为空\n  isEmpty?: boolean;\n\n  /** 记录当前表头节点的上级表头结点的cellId */\n  parentCellId?: LayoutObjectId;\n}\n\nexport interface WidthData {\n  width?: number | string;\n  minWidth?: number | string;\n  maxWidth?: number | string;\n  columnWidthComputeMode?: 'normal' | 'only-header' | 'only-body';\n}\n/**\n * layout中组织body列的信息类  和ColumnDefine对应\n */\nexport interface ColumnData extends WidthData {\n  id: LayoutObjectId;\n  field: FieldDef;\n  // fieldKey?: FieldKeyDef;\n  fieldFormat?: FieldFormat;\n  // icon?: ColumnIconOption | ColumnIconOption[];\n  icon?:\n    | string\n    | ColumnIconOption\n    | (string | ColumnIconOption)[]\n    | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);\n\n  cellType: 'text' | 'link' | 'image' | 'video' | 'sparkline' | 'progressbar' | 'chart' | 'checkbox' | 'radio';\n  /** 如果是绘制图表库组件的图表类型 需要将注入的组件名称 写到chartType */\n  chartModule?: string;\n  /** 如果是绘制图表库组件的图表类型 统一图表配置chartSpec */\n  chartSpec?: any | ((arg0: CellInfo) => any);\n  chartInstance?: any;\n  sparklineSpec?: SparklineSpec | ((arg0: CellInfo) => SparklineSpec);\n  style: ColumnStyleOption | null | undefined;\n  define: ColumnDefine;\n  templateLink?: string | FieldGetter;\n  columnWidthComputeMode?: 'normal' | 'only-header' | 'only-body';\n  /**存储图标的位置 坐标及宽高 是包括了boxWidth boxWidth 共getHitIcon方法使用 计算是否命中图标*/\n  // iconPositionList?: { [key in IconFuncTypeEnum]?: RectProps & { icon: ColumnIconOption } };\n  /**\n   * 是否禁用调整列宽,如果是转置表格或者是透视表的指标是行方向指定 那该配置不生效\n   */\n  disableColumnResize?: boolean;\n  aggregation?: Aggregation | Aggregation[];\n  aggregator?: Aggregator | Aggregator[];\n  /** 是否为子节点 即上层还有父节点 */\n  isChildNode?: boolean;\n}\n\nexport interface IndicatorData extends WidthData {\n  id: LayoutObjectId;\n  field: string | number;\n  /**\n   * 唯一标识一种指标\n   */\n  indicatorKey: string;\n  // fieldKey: FieldKeyDef;\n  fieldFormat?: FieldFormat;\n  cellType: 'text' | 'link' | 'image' | 'video' | 'sparkline' | 'progressbar' | 'chart'; //BaseColumn<T, any>;\n  chartModule?: string;\n  chartSpec?: any | ((arg0: CustomRenderFunctionArg) => any);\n  chartInstance?: any;\n  noDataRenderNothing?: boolean;\n  style?: ColumnStyleOption | null | undefined;\n  define: ColumnDefine;\n  // headerIcon?:\n  //   | (string | ColumnIconOption)[]\n  //   | ((args: CellInfo) => (string | ColumnIconOption)[]);\n  icon?:\n    | string\n    | ColumnIconOption\n    | (string | ColumnIconOption)[]\n    | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);\n  sparklineSpec?: SparklineSpec | ((arg0: CustomRenderFunctionArg) => SparklineSpec);\n  /**\n   * 是否禁用调整列宽,如果是转置表格或者是透视表的指标是行方向指定 那该配置不生效\n   */\n  disableColumnResize?: boolean;\n}\n\n/**\n * 序号列定义\n */\nexport interface SeriesNumberColumnData extends WidthData {\n  id: LayoutObjectId;\n  title?: string | (() => string);\n  field?: FieldDef;\n  // fieldKey?: FieldKeyDef;\n  format?: (col?: number, row?: number, table?: BaseTableAPI, originValue?: string | number) => any;\n  // icon?: ColumnIconOption | ColumnIconOption[];\n  icon?:\n    | string\n    | ColumnIconOption\n    | (string | ColumnIconOption)[]\n    | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);\n  headerIcon?: string | ColumnIconOption | (string | ColumnIconOption)[];\n  cellType: 'text' | 'link' | 'image' | 'video' | 'checkbox' | 'radio';\n  headerType: 'text' | 'link' | 'image' | 'video' | 'checkbox';\n  style: ColumnStyleOption | null | undefined;\n  define: IRowSeriesNumber;\n  isChildNode?: false;\n}\n// Simple header\n\n// export interface GroupHeaderDefine extends HeaderDefine {\n//   columns: HeadersDefine;\n//   hideColumnsSubHeader?: boolean;\n//   dropDownMenu?: MenuListItem[];\n// }\n// type Either<X, Y> =\n//   | ({\n//       [KX in keyof X]: X[KX];\n//     } & {\n//       [KY in Exclude<keyof Y, keyof X>]?: never;\n//     })\n//   | ({\n//       [KY in keyof Y]: Y[KY];\n//     } & {\n//       [KX in Exclude<keyof X, keyof Y>]?: never;\n//     });\n// export type HeaderColumnDefine = Either<GroupHeaderDefine, ColumnDefine>;\n// export type HeadersDefine = HeaderColumnDefine[];\n\n// Advanced layout\n\n// export interface HeaderCellDefine extends HeaderDefine {\n//   colSpan?: number;\n//   rowSpan?: number;\n// }\nexport type HeaderCellDefine = HeaderDefine & {\n  colSpan?: number;\n  rowSpan?: number;\n};\n\n// export interface CellDefine extends ColumnDefine {\n//   colSpan?: number;\n//   rowSpan?: number;\n// }\n\nexport type CellDefine = ColumnBodyDefine & {\n  colSpan?: number;\n  rowSpan?: number;\n};\n\nexport type ArrayLayoutDefine = CellDefine[][];\n/** @internal */\ninterface LayoutMapAPI {\n  readonly headerLevelCount: number;\n  readonly rowHeaderLevelCount: number;\n  readonly columnHeaderLevelCount: number;\n  readonly bodyRowSpanCount: number;\n  readonly colCount: number | undefined;\n  readonly rowCount: number | undefined;\n  readonly columnWidths: WidthData[];\n  readonly headerObjects: HeaderData[];\n  readonly columnObjects: ColumnData[] | IndicatorData[];\n  // transpose: boolean;\n  // showHeader: boolean;\n  isHeader: (col: number, row: number) => boolean;\n  // isHeaderNode(col: number, row: number): boolean; //是否为叶子表头\n  /**获取单元格header对象 包括field style type 等 */\n  getHeader: (col: number, row: number) => HeaderData | SeriesNumberColumnData;\n  /**获取对应header的field  */\n  getHeaderField: (col: number, row: number) => FieldDef;\n  // getHeaderFieldKey(col: number, row: number): FieldKeyDef;\n  /**获取单元格column对象 包括field style type 等 */\n  getBody: (col: number, row: number) => ColumnData | IndicatorData | SeriesNumberColumnData;\n  /**获取单元格标识key */\n  getCellId: (col: number, row: number) => LayoutObjectId;\n  getCellRange: (col: number, row: number) => CellRange;\n  // getCellRangeTranspose(col: number, row: number): CellRange;\n  // getBodyLayoutRangeById: (id: LayoutObjectId) => CellRange;\n  getHeaderCellAdressById: (id: number) => CellAddress | undefined;\n  getHeaderCellAddressByField: (field: string) => CellAddress | undefined;\n  getRecordShowIndexByCell: (col: number, row: number) => number;\n  getRecordStartRowByRecordIndex: (index: number) => number;\n  /** 从定义中获取一列配置项width的定义值 */\n  getColumnWidthDefined: (col: number) => WidthData;\n  release: () => void;\n\n  isFrozenColumn: (col: number, row?: number) => boolean;\n  isRightFrozenColumn: (col: number, row?: number) => boolean;\n  isFrozenRow: (col: number, row?: number) => boolean;\n  isBottomFrozenRow: (col: number, row?: number) => boolean;\n}\n\nexport type { LayoutMapAPI };\n"]}