{"version":3,"sources":["../src/state/common/check-in-select.ts"],"names":[],"mappings":"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","file":"check-in-select.js","sourcesContent":["import { cellInRange, rangeIntersected } from '../../tools/helper';\nimport type { CellAddress, CellRange, HighlightScope } from '../../ts-types';\n\nexport function checkColInlineInSelect(col: number, cellRanges: CellRange[]): boolean {\n  for (let i = 0; i < cellRanges.length; i++) {\n    const currentRangeMinCol = Math.min(cellRanges[i].start.col, cellRanges[i].end.col);\n    const currentRangeMaxCol = Math.max(cellRanges[i].start.col, cellRanges[i].end.col);\n    if (col >= currentRangeMinCol && col <= currentRangeMaxCol) {\n      // 不更新在select范围内的单元格\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function checkRowInlineInSelect(row: number, cellRanges: CellRange[]): boolean {\n  for (let i = 0; i < cellRanges.length; i++) {\n    const currentRangeMinRow = Math.min(cellRanges[i].start.row, cellRanges[i].end.row);\n    const currentRangeMaxRow = Math.max(cellRanges[i].start.row, cellRanges[i].end.row);\n    if (row >= currentRangeMinRow && row <= currentRangeMaxRow) {\n      // 不更新在select范围内的单元格\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * @description: 判断单元格是否在select区域中\n * @param {number} col\n * @param {number} row\n * @param {CellAddress} selectCellPosStart\n * @param {CellAddress} selectCellPosEnd\n * @param {HighlightScope} selectMode\n * @return {*}\n */\nexport function checkCellInSelect(\n  col: number,\n  row: number,\n  // selectCellPosStart: CellAddress,\n  // selectCellPosEnd: CellAddress,\n  cellRanges: CellRange[]\n  // selectMode: HighlightScope\n): boolean {\n  for (let i = 0; i < cellRanges.length; i++) {\n    const range = cellRanges[i];\n    const _in = cellInRange(range, col, row);\n    if (_in) {\n      return true;\n    }\n  }\n  // if (selectMode === HighlightScope.single) {\n  //   if (cellInRange(cellRange, col, row)) {\n  //     return true;\n  //   }\n  // } else if (selectMode === HighlightScope.column) {\n  //   if (col >= cellRange.start.col && col <= cellRange.end.col) {\n  //     return true;\n  //   }\n  // } else if (selectMode === HighlightScope.row) {\n  //   if (row >= cellRange.start.row && row <= cellRange.end.row) {\n  //     return true;\n  //   }\n  // } else if (selectMode === HighlightScope.cross) {\n  //   if (col >= cellRange.start.col && col <= cellRange.end.col) {\n  //     return true;\n  //   } else if (row >= cellRange.start.row && row <= cellRange.end.row) {\n  //     return true;\n  //   }\n  // }\n\n  return false;\n}\n\n/**\n * @description: 判断单元格范围是否与select区域有交集\n * @param {CellAddress} cellPosStart\n * @param {CellAddress} cellPosEnd\n * @param {CellAddress} selectCellPosStart\n * @param {CellAddress} selectCellPosEnd\n * @param {HighlightScope} selectMode\n * @return {*}\n */\nexport function checkMultiCellInSelect(\n  cellPosStart: CellAddress,\n  cellPosEnd: CellAddress,\n  // selectCellPosStart: CellAddress,\n  // selectCellPosEnd: CellAddress,\n  selectRangs: CellRange[],\n  selectMode: HighlightScope\n): boolean {\n  for (let i = 0; i < selectRangs.length; i++) {\n    const range = selectRangs[i];\n    const inSelect = rangeIntersected(range, { start: cellPosStart, end: cellPosEnd });\n    if (inSelect) {\n      return true;\n    }\n  }\n\n  // for (let col = cellPosStart.col; col <= cellPosEnd.col; col++) {\n  //   for (let row = cellPosStart.row; row <= cellPosEnd.row; row++) {\n  //     const inSelect = checkCellInSelect(\n  //       col,\n  //       row,\n  //       selectCellPosStart,\n  //       selectCellPosEnd,\n  //       selectMode\n  //     );\n  //     if (inSelect) {\n  //       return true;\n  //     }\n  //   }\n  // }\n\n  return false;\n}\n\nexport function checkRowInSelect(\n  row: number,\n  // selectCellPosStart: CellAddress,\n  // selectCellPosEnd: CellAddress,\n  cellRanges: CellRange[]\n  // selectMode: HighlightScope\n): boolean {\n  for (let i = 0; i < cellRanges.length; i++) {\n    const range = cellRanges[i];\n    const minRow = Math.min(range.start.row, range.end.row);\n    const maxRow = Math.max(range.start.row, range.end.row);\n    const _in = row >= minRow && row <= maxRow;\n    if (_in) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function checkColInSelect(\n  col: number,\n  // selectCellPosStart: CellAddress,\n  // selectCellPosEnd: CellAddress,\n  cellRanges: CellRange[]\n  // selectMode: HighlightScope\n): boolean {\n  for (let i = 0; i < cellRanges.length; i++) {\n    const range = cellRanges[i];\n    const minCol = Math.min(range.start.col, range.end.col);\n    const maxCol = Math.max(range.start.col, range.end.col);\n    const _in = col >= minCol && col <= maxCol;\n    if (_in) {\n      return true;\n    }\n  }\n  return false;\n}\n"]}