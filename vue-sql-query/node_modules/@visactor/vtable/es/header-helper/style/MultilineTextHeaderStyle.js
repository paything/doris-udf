import { Style } from "./Style";

let defaultStyle;

export class TextHeaderStyle extends Style {
    static get DEFAULT() {
        return defaultStyle || (defaultStyle = new TextHeaderStyle);
    }
    constructor(style = {}, headerStyle = null) {
        var _a, _b;
        super(style, headerStyle), this._autoWrapText = null !== (_a = null == style ? void 0 : style.autoWrapText) && void 0 !== _a ? _a : null == headerStyle ? void 0 : headerStyle.autoWrapText, 
        this._lineClamp = null !== (_b = null == style ? void 0 : style.lineClamp) && void 0 !== _b ? _b : null == headerStyle ? void 0 : headerStyle.lineClamp;
    }
    clone() {
        return new TextHeaderStyle(this, null);
    }
    get lineClamp() {
        return this._lineClamp;
    }
    set lineClamp(lineClamp) {
        this._lineClamp = lineClamp;
    }
    get autoWrapText() {
        return this._autoWrapText;
    }
    set autoWrapText(autoWrapText) {
        this._autoWrapText = autoWrapText;
    }
}
//# sourceMappingURL=MultilineTextHeaderStyle.js.map
