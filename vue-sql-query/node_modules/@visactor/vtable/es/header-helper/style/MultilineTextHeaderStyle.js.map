{"version":3,"sources":["../src/header-helper/style/MultilineTextHeaderStyle.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,IAAI,YAA6B,CAAC;AAClC,MAAM,OAAO,eAAgB,SAAQ,KAAK;IAGxC,MAAM,KAAK,OAAO;QAChB,OAAO,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,GAAG,IAAI,eAAe,EAAE,CAAC,CAAC;IAC9E,CAAC;IACD,YAAY,QAA0B,EAAE,EAAE,cAAgC,IAAI;;QAC5E,KAAK,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,YAAY,mCAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,YAAY,CAAC;QACtE,IAAI,CAAC,UAAU,GAAG,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS,mCAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS,CAAC;IAC/D,CAAC;IACD,KAAK;QACH,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IACD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,IAAI,SAAS,CAAC,SAAgC;QAC5C,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAE9B,CAAC;IACD,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACD,IAAI,YAAY,CAAC,YAAiC;QAChD,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IAEpC,CAAC;CACF","file":"MultilineTextHeaderStyle.js","sourcesContent":["import type { ITextStyleOption, LineClamp } from '../../ts-types';\nimport { Style } from './Style';\n\nlet defaultStyle: TextHeaderStyle;\nexport class TextHeaderStyle extends Style {\n  private _autoWrapText?: boolean;\n  private _lineClamp?: LineClamp;\n  static get DEFAULT(): TextHeaderStyle {\n    return defaultStyle ? defaultStyle : (defaultStyle = new TextHeaderStyle());\n  }\n  constructor(style: ITextStyleOption = {}, headerStyle: ITextStyleOption = null) {\n    super(style, headerStyle);\n    this._autoWrapText = style?.autoWrapText ?? headerStyle?.autoWrapText;\n    this._lineClamp = style?.lineClamp ?? headerStyle?.lineClamp;\n  }\n  clone(): TextHeaderStyle {\n    return new TextHeaderStyle(this, null);\n  }\n  get lineClamp(): LineClamp | undefined {\n    return this._lineClamp;\n  }\n  set lineClamp(lineClamp: LineClamp | undefined) {\n    this._lineClamp = lineClamp;\n    //this.doChangeStyle();\n  }\n  get autoWrapText(): boolean | undefined {\n    return this._autoWrapText;\n  }\n  set autoWrapText(autoWrapText: boolean | undefined) {\n    this._autoWrapText = autoWrapText;\n    //this.doChangeStyle();\n  }\n}\n"]}