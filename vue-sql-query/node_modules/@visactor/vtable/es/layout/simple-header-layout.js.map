{"version":3,"sources":["../src/layout/simple-header-layout.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAElD,OAAO,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,EAQL,cAAc,EACf,MAAM,aAAa,CAAC;AAUrB,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAC9E,OAAO,EACL,mBAAmB,EACnB,2BAA2B,EAC3B,wBAAwB,EACxB,kBAAkB,EACnB,MAAM,iBAAiB,CAAC;AAEzB,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAC9C,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAI9D,MAAM,OAAO,qBAAqB;IAsChC,YAAY,KAAgB,EAAE,OAAsB,EAAE,UAAmB,EAAE,eAAuB;;QArC1F,UAAK,GAAW,CAAC,CAAC;QAY1B,mCAA8B,GAAW,CAAC,CAAC;QAC3C,oCAA+B,GAAW,CAAC,CAAC;QAGnC,qBAAgB,GAAW,CAAC,CAAC;QAMtC,eAAU,GAAG,KAAK,CAAC;QACnB,gBAAW,GAAG,IAAI,CAAC;QACnB,kBAAa,GAAG,CAAC,CAAC;QAElB,oBAAe,GAAY,KAAK,CAAC;QACjC,8BAAyB,GAAW,CAAC,CAAC;QACtC,iCAA4B,GAAW,CAAC,CAAC;QAUvC,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,eAAe,aAAf,eAAe,cAAf,eAAe,GAAI,EAAE,CAAC;QAC7C,IAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC,OAAO,CAAC,2BAA2B,CAAC;QAC7E,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC;QAC7D,IAAI,CAAC,iBAAiB,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,iBAAiB,mCAAI,CAAC,CAAC;QAC9D,IAAI,CAAC,UAAU,GAAG,IAAI,aAAa,CACjC,OAAc,EACd,EAAE,KAAK,EAAE,CAAC,EAAE,EACZ,MAAA,IAAI,CAAC,mBAAmB,mCAAI,IAAI,EAChC,IAAI,CAAC,mBAAmB,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,SAAS,CAC9E,CAAC;QACF,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;QAMnE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;YACjE,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1D,CAAC,CAAC,CAAC,CAAC,EAAY,CAAC,GAAG,CAAC,CAAC;YACtB,OAAO,CAAC,CAAC;QACX,CAAC,EAAE,EAA6C,CAAC,CAAC;QAClD,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QACnE,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,4BAA4B,GAAG,2BAA2B,CAAC,IAAI,CAAC,CAAC;QACtE,IAAI,CAAC,yBAAyB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;QAKhE,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;IAClE,CAAC;IACD,qBAAqB,CAAC,eAAiC;;QACrD,IAAI,eAAe,EAAE;YACnB,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;gBAClC,IAAI,CAAC,qBAAqB,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;;oBACvE,OAAO;wBACL,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;wBAChB,KAAK,EAAE,YAAY,CAAC,KAAK;wBACzB,MAAM,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,2BAA2B,GAAG,KAAK,EAAE,EAAE,YAAY,CAAC;wBAC3E,QAAQ,EAAE,MAAA,YAAY,CAAC,QAAQ,mCAAI,MAAM;wBACzC,UAAU,EAAE,YAAY,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM;wBACtE,KAAK,EAAE,YAAY,CAAC,KAAK;wBACzB,KAAK,EAAE,YAAY,CAAC,KAAK;wBACzB,MAAM,EAAE,YAAY,CAAC,MAAM;wBAC3B,KAAK,EAAE,MAAA,YAAY,CAAC,KAAK,mCAAI,2BAA2B,GAAG,KAAK;wBAChE,IAAI,EAAE,YAAY,CAAC,IAAI;wBACvB,UAAU,EAAE,YAAY,CAAC,UAAU;wBACnC,WAAW,EAAE,KAAK;qBACnB,CAAC;gBACJ,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,qBAAqB,GAAG;oBAC3B;wBACE,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;wBAChB,KAAK,EAAE,eAAe,CAAC,KAAK;wBAC5B,MAAM,EAAE,KAAK,CAAC,EAAE,KAAK,EAAE,0BAA0B,EAAE,EAAE,eAAe,CAAC;wBACrE,QAAQ,EAAE,MAAA,eAAe,CAAC,QAAQ,mCAAI,MAAM;wBAC5C,UAAU,EAAE,eAAe,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM;wBACzE,KAAK,EAAE,eAAe,CAAC,KAAK;wBAC5B,KAAK,EAAE,eAAe,CAAC,KAAK;wBAC5B,MAAM,EAAE,eAAe,CAAC,MAAM;wBAC9B,KAAK,EAAE,0BAA0B;wBACjC,IAAI,EAAE,eAAe,CAAC,IAAI;wBAC1B,UAAU,EAAE,eAAe,CAAC,UAAU;wBACtC,WAAW,EAAE,KAAK;qBACnB;iBACF,CAAC;aACH;YACD,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE;gBAIvF,OAAO,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE;gBAIxF,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;YAC5E,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC;SAC/E;IACH,CAAC;IAID,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,IAAI,SAAS,CAAC,UAAmB;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACD,IAAI,UAAU,CAAC,WAAoB;QACjC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IACD,sBAAsB,CAAC,GAAW,EAAE,GAAW;QAC7C,IAAI,IAAI,CAAC,8BAA8B,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE;YAChH,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,KAAK,CAAC;aACd;iBAAM,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE;gBACtC,OAAO,IAAI,CAAC;aACb;SACF;QACD,IACE,IAAI,CAAC,+BAA+B,GAAG,CAAC;YACxC,GAAG,IAAI,CAAC;YACR,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,EAC3D;YACA,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,KAAK,CAAC;aACd;iBAAM,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE;gBACtC,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,oBAAoB,CAAC,GAAW,EAAE,GAAW;QAC3C,IAAI,IAAI,CAAC,8BAA8B,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE;YACpG,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAChC,OAAO,IAAI,CAAC;aACb;SACF;QACD,IAAI,IAAI,CAAC,+BAA+B,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,EAAE;YAC3G,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,IAAI,CAAC;aACb;YACD,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAChC,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,cAAc,CAAC,GAAW,EAAE,GAAW;QACrC,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChC,IACE,IAAI,CAAC,8BAA8B,GAAG,CAAC;gBACvC,GAAG,IAAI,CAAC;gBACR,GAAG,IAAI,CAAC;gBACR,GAAG,GAAG,IAAI,CAAC,8BAA8B,EACzC;gBACA,OAAO,IAAI,CAAC;aACb;YACD,IACE,IAAI,CAAC,+BAA+B,GAAG,CAAC;gBACxC,GAAG,IAAI,CAAC;gBACR,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,EAC3D;gBACA,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,qBAAqB,CAAC,GAAW,EAAE,GAAW;QAC5C,IAAI,IAAI,CAAC,8BAA8B,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE;YACpG,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE;gBAC/B,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,EAAE;oBAC5D,KAAK,EAAE,MAAM,CAAC,MAAM,CAClB,EAAE,EACF,IAAI,CAAC,MAAM,CAAC,SAAS;wBACnB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,cAAc;wBAChD,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,WAAW,EAC/C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,WAAW,CACtD;iBACF,CAAC,CAAC;aACJ;SACF;QACD,IACE,IAAI,CAAC,+BAA+B,GAAG,CAAC;YACxC,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B;YAC3D,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAC3B;YACA,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE;gBAC/B,OAAO,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;aACtG;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,mBAAmB,CAAC,GAAW,EAAE,GAAW;QAC1C,IAAI,IAAI,CAAC,8BAA8B,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE;YACpG,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;aAC5C;YACD,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAChC,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;aAC5C;SACF;QACD,IAAI,IAAI,CAAC,+BAA+B,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,EAAE;YAC3G,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;aACtG;YACD,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAChC,OAAO,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;aACtG;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,QAAQ,CAAC,GAAW,EAAE,GAAW;QAC/B,IACE,IAAI,CAAC,SAAS;YACd,GAAG,IAAI,IAAI,CAAC,8BAA8B;YAC1C,GAAG,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,8BAA8B,EACjE;YACA,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE;YAC9D,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,aAAa,CAAC,GAAW,EAAE,GAAW;QAGpC,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,IAAI,CAAC,2BAA2B,EAAE;gBACpC,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,EAAE;wBAC3D,OAAO,IAAI,CAAC;qBACb;iBACF;qBAAM;oBACL,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,EAAE;wBAC3D,OAAO,IAAI,CAAC;qBACb;iBACF;aACF;YACD,IAAI,IAAI,CAAC,wBAAwB,EAAE;gBACjC,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,IAAI,GAAG,IAAI,IAAI,CAAC,mBAAmB,IAAI,GAAG,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,EAAE;wBACrG,OAAO,IAAI,CAAC;qBACb;iBACF;qBAAM;oBACL,IAAI,GAAG,IAAI,IAAI,CAAC,sBAAsB,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,wBAAwB,EAAE;wBAC3G,OAAO,IAAI,CAAC;qBACb;iBACF;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,gBAAgB,CAAC,GAAW,EAAE,GAAW;QACvC,IAAI,IAAI,CAAC,wBAAwB,EAAE;YACjC,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,GAAG,IAAI,IAAI,CAAC,mBAAmB,IAAI,GAAG,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,EAAE;oBACrG,OAAO,IAAI,CAAC;iBACb;aACF;iBAAM;gBACL,IAAI,GAAG,IAAI,IAAI,CAAC,sBAAsB,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,wBAAwB,EAAE;oBAC3G,OAAO,IAAI,CAAC;iBACb;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,mBAAmB,CAAC,GAAW,EAAE,GAAW;QAC1C,IAAI,IAAI,CAAC,2BAA2B,EAAE;YACpC,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,EAAE;oBAC3D,OAAO,IAAI,CAAC;iBACb;aACF;iBAAM;gBACL,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,EAAE;oBAC3D,OAAO,IAAI,CAAC;iBACb;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAI,wBAAwB;QAC1B,OAAO,IAAI,CAAC,yBAAyB,CAAC;IACxC,CAAC;IAED,IAAI,2BAA2B;QAC7B,OAAO,IAAI,CAAC,4BAA4B,CAAC;IAC3C,CAAC;IAED,oBAAoB,CAAC,GAAW,EAAE,GAAW;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAI,MAAc,CAAC,iBAAiB,CAAC;QACtD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,yBAAyB,CAAC,QAAgB,EAAE,QAAgB,EAAE,MAAc,EAAE,MAAc;QAC1F,IAAI,WAAW,GAAiB,EAAE,CAAC;QACnC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAQ,CAAC;gBACxD,IAAI,MAAM,CAAC,iBAAiB,EAAE;oBAC5B,WAAW,GAAG,WAAW,CAAC,MAAM,CAC9B,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAChG,CAAC;iBACH;aACF;SACF;aAAM;YACL,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,QAAQ,CAAQ,CAAC;gBACxD,IAAI,MAAM,CAAC,iBAAiB,EAAE;oBAC5B,WAAW,GAAG,WAAW,CAAC,MAAM,CAC9B,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAChG,CAAC;iBACH;aACF;YACD,OAAO,WAAW,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,kBAAkB,CAAC,GAAW,EAAE,GAAW;QACzC,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAI,MAAc,CAAC,iBAAiB,CAAC;QACtD,MAAM,WAAW,GAAI,MAAuB,CAAC,WAAW,CAAC;QACzD,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YAC9B,MAAM,oBAAoB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;gBACrE,IAAI,GAAG,CAAC,SAAS,EAAE;oBACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACpB;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,EAAE,EAAE,CAAC,CAAC;YACP,MAAM,cAAc,GAAG,oBAAoB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7E,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAQ,cAA+B,CAAC,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC;aACzE;YACD,OAAQ,cAA+B,CAAC,GAAG,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC;SAC5E;QACD,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,IAAI,CAAC,mBAAmB,KAAK,CAAC,EAAE;YAC1D,OAAO,CAAC,WAA2B,aAA3B,WAAW,uBAAX,WAAW,CAAkB,SAAS,EAAC,CAAC,CAAE,WAA0B,CAAC,CAAC,CAAC,IAAI,CAAC;SACrF;aAAM,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,IAAI,CAAC,sBAAsB,KAAK,CAAC,EAAE;YACrE,OAAO,CAAC,WAA2B,aAA3B,WAAW,uBAAX,WAAW,CAAkB,SAAS,EAAC,CAAC,CAAE,WAA0B,CAAC,CAAC,CAAC,IAAI,CAAC;SACrF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,qBAAqB,CAAC,GAAW,EAAE,GAAW;QAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAI,MAAc,CAAC,iBAAiB,CAAC;QACtD,MAAM,WAAW,GAAI,MAAuB,CAAC,WAAW,CAAC;QACzD,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YAC9B,MAAM,uBAAuB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;gBACxE,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;oBAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACpB;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,EAAE,EAAE,CAAC,CAAC;YACP,MAAM,iBAAiB,GAAG,uBAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACnF,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAQ,iBAAkC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;aACtG;YACD,OAAQ,iBAAkC,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;SACtG;QACD,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE;YACpF,OAAO,CAAC,CAAC,WAA2B,aAA3B,WAAW,uBAAX,WAAW,CAAkB,SAAS,CAAA,CAAC,CAAC,CAAE,WAA0B,CAAC,CAAC,CAAC,IAAI,CAAC;SACtF;aAAM,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE;YAC5F,OAAO,CAAC,CAAC,WAA2B,aAA3B,WAAW,uBAAX,WAAW,CAAkB,SAAS,CAAA,CAAC,CAAC,CAAE,WAA0B,CAAC,CAAC,CAAC,IAAI,CAAC;SACtF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAOD,wBAAwB,CAAC,QAAgB,EAAE,QAAgB,EAAE,MAAc,EAAE,MAAc;QACzF,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC;QAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,2BAA2B,CAAC;QACrD,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,KAAK,IAAI,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;gBAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,GAAG,CAAQ,CAAC;gBAC1D,IAAI,MAAM,CAAC,iBAAiB,EAAE;oBAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;wBACjC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;qBACzD;oBACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;wBACpC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,GAAG,WAAW,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;qBAC/D;iBACF;aACF;SACF;aAAM;YACL,KAAK,IAAI,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;gBAC7C,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAQ,CAAC;gBAC1D,IAAI,MAAM,CAAC,iBAAiB,EAAE;oBAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;wBACjC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAAC,CAAC;qBACzD;oBACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;wBACpC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,GAAG,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC;qBAC/D;iBACF;aACF;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,eAAe,CAAC,GAAW,EAAE,GAAW;QACtC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAC3B,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,WAAW,CAAC;aACpB;YACD,OAAO,cAAc,CAAC;SACvB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,WAAW,CAAC,GAAW,EAAE,GAAW;QAClC,IACE,IAAI,CAAC,SAAS;YACd,GAAG,IAAI,IAAI,CAAC,8BAA8B;YAC1C,GAAG,GAAG,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,8BAA8B,EACjE;YACA,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,cAAc,CAAC,GAAW,EAAE,GAAW;QACrC,IACE,CAAC,IAAI,CAAC,SAAS;YACf,GAAG,IAAI,CAAC;YACR,GAAG,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC;YAChC,GAAG,IAAI,IAAI,CAAC,8BAA8B;YAC1C,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,+BAA+B,EAC1D;YACA,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAOD,cAAc,CAAC,GAAW,EAAE,GAAY;QACtC,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,IACE,GAAG,IAAI,CAAC;gBACR,GAAG,GAAG,IAAI,CAAC,cAAc;gBACzB,GAAG,IAAI,IAAI,CAAC,cAAc;gBAC1B,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAC/C;gBACA,OAAO,IAAI,CAAC;aACb;SACF;aAAM;YACL,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE;gBACpE,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAOD,mBAAmB,CAAC,GAAW,EAAE,GAAY;QAC3C,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,IACE,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB;gBAC/C,GAAG,IAAI,IAAI,CAAC,cAAc;gBAC1B,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAC/C;gBACA,OAAO,IAAI,CAAC;aACb;SACF;aAAM;YACL,IAAI,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE;gBACnF,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAOD,WAAW,CAAC,GAAW,EAAE,GAAY;QACnC,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,IACE,GAAG,IAAI,CAAC;gBACR,GAAG,GAAG,IAAI,CAAC,cAAc;gBACzB,GAAG,IAAI,IAAI,CAAC,cAAc;gBAC1B,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAC9C;gBACA,OAAO,IAAI,CAAC;aACb;SACF;aAAM;YACL,GAAG,GAAG,GAAG,CAAC;YACV,IAAI,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE;gBACpE,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAOD,iBAAiB,CAAC,GAAW,EAAE,GAAY;QACzC,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,IACE,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB;gBAChD,GAAG,IAAI,IAAI,CAAC,cAAc;gBAC1B,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAC9C;gBACA,OAAO,IAAI,CAAC;aACb;SACF;aAAM;YACL,GAAG,GAAG,GAAG,CAAC;YACV,IAAI,IAAI,CAAC,oBAAoB,GAAG,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAAE;gBACrF,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,eAAe,CAAC,GAAW,EAAE,GAAW;QACtC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE;YAClF,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,kBAAkB,CAAC,GAAW,EAAE,GAAW;QACzC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAAE;YAC7F,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,gBAAgB,CAAC,GAAW,EAAE,GAAW;QACvC,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE;YAC5F,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,mBAAmB,CAAC,GAAW,EAAE,GAAW;QAC1C,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAAE;YACvG,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,cAAc,CAAC,GAAW,EAAE,GAAW;QACrC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,oBAAoB;;QAClB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO;gBACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;gBACzB,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE;aAC5E,CAAC;SACH;QACD,OAAO;YACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;SAC5E,CAAC;IACJ,CAAC;IAED,iBAAiB;;QACf,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO;gBACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;gBACzB,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE;aAC5E,CAAC;SACH;QACD,OAAO;YACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;SAC5E,CAAC;IACJ,CAAC;IACD,oBAAoB;QAClB,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,YAAY;;QACV,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO;gBACL,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,EAAE;gBAC7C,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE;aACtE,CAAC;SACH;QACD,OAAO;YACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,EAAE;YAC7C,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,GAAG,CAAC,EAAE;SACtE,CAAC;IACJ,CAAC;IAiBD,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;IACD,IAAI,sBAAsB;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACpD,CAAC;IACD,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IACD,IAAI,cAAc;QAChB,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE;YAC5C,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE;gBAC5D,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC;aACjD;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,cAAc;QAEhB,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE;YAC5C,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,EAAE;gBAC7D,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC;aACjD;YACD,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,oBAAoB;QACtB,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,EAAE;YAClD,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,EAAE;gBAC3F,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC;aACvD;YACD,OAAO,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAC9C;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,mBAAmB;QACrB,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,EAAE;YACjD,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,EAAE;gBACxF,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC;aACtD;YACD,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;SACzD;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IACD,IAAI,QAAQ;QAEV,OAAO,IAAI,CAAC,SAAS;YACnB,CAAC,CAAC,IAAI,CAAC,gBAAgB;gBACnB,IAAI,CAAC,YAAY;gBACjB,IAAI,CAAC,8BAA8B;gBACnC,IAAI,CAAC,+BAA+B;YACxC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,+BAA+B,CAAC;IACxG,CAAC;IACD,IAAI,QAAQ;QAEV,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC;IAC3F,CAAC;IAED,IAAI,YAAY;QAEd,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC;IACnH,CAAC;IAED,IAAI,YAAY;QAEd,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACrH,CAAC;IACD,IAAI,YAAY;QAEd,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IACD,IAAI,YAAY,CAAC,YAAoB;QAEnC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;IACpC,CAAC;IACD,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IACD,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IACD,IAAI,yBAAyB;QAC3B,OAAO,IAAI,CAAC,0BAA0B,CAAC;IACzC,CAAC;IAED,IAAI,YAAY;QACd,IAAI,IAAI,CAAC,8BAA8B,EAAE;YACvC,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACvD,OAAO;oBACL,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBACxB,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,IAAI,CACT,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC1B,OAAO;oBACL,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBACxB,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;YACF,OAAO,MAAM,CAAC;SACf;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC9B,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACxB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,GAAW;;QAC/B,IAAI,GAAG,IAAI,CAAC,EAAE;YACZ,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE;gBAC7C,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;aAC5C;YACD,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAI,KAAK,GAAoB,CAAC,CAAC;gBAC/B,IAAI,QAAyB,CAAC;gBAC9B,IAAI,QAAyB,CAAC;gBAC9B,IAAI,GAAG,IAAI,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,8BAA8B,EAAE;oBACzE,IAAI,MAAM,CAAC;oBACX,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;wBACxC,IAAI,OAAO,GAAG,CAAC,KAAK,KAAK,QAAQ,EAAE;4BACjC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAU,KAAK,CAAC,CAAC;yBAC5C;6BAAM,IAAI,GAAG,CAAC,KAAK,KAAK,MAAM,EAAE;4BAC/B,MAAM,GAAG,IAAI,CAAC;yBACf;wBACD,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE;4BACpC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAU,QAAQ,CAAC,CAAC;yBACrD;wBACD,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,QAAQ,EAAE;4BACpC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAU,QAAQ,CAAC,CAAC;yBACrD;oBACH,CAAC,CAAC,CAAC;oBACH,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC;oBACxD,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;iBACtC;gBACD,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;oBAC5B,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;wBACnE,CAAC,CAAC,MAAA,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,GAAG,CAAC,mCAAI,IAAI,CAAC,MAAM,CAAC,eAAe;wBACvE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC;oBACtC,IAAI,YAAY,KAAK,MAAM,EAAE;wBAC3B,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;qBAC1B;oBACD,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC;iBAChC;aACF;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC;SACjE;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,SAAS,CAAC,GAAW,EAAE,GAAW;;QAChC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,8BAA8B,EAAE;gBACtE,OAAO,MAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,0CAAE,EAAE,CAAC;aAC/B;YACD,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;gBACjC,OAAO,GAAG,GAAG,gBAAgB,CAAC;aAC/B;YAED,OAAO,MAAA,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,0CAAG,GAAG,CAAC,CAAC;SAC9E;QACD,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;SAC3C;QACD,IAAI,IAAI,CAAC,gBAAgB,IAAI,GAAG,EAAE;YAChC,OAAO,MAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,0CAAE,EAAE,CAAC;SACrE;QAED,OAAO,MAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,0CAAG,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC/E,CAAC;IACD,SAAS,CAAC,GAAW,EAAE,GAAW;QAChC,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC7C;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAY,CAAE,CAAC;IAC9C,CAAC;IACD,cAAc,CAAC,GAAW,EAAE,GAAW;;QACrC,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACzC,OAAO,MAAA,IAAI,CAAC,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,0CAAE,KAAK,CAAC;SACpD;aAAM,IAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAC9C,OAAO,MAAA,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,0CAAE,KAAK,CAAC;SAClD;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpC,OAAO,CACL,CAAA,MAAA,IAAI,CAAC,gBAAgB,CAAC,EAAY,CAAC,0CAAE,KAAK;YAC1C,CAAC,IAAI,CAAC,SAAS;gBACb,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK;gBAChD,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC;oBACxD,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC,KAAK,CAAC,CACpE,CAAC;IACJ,CAAC;IACD,uBAAuB,CAAC,EAAU;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnD,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE;oBACjB,IAAI,IAAI,CAAC,SAAS,EAAE;wBAClB,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;qBAC3B;oBACD,OAAO,EAAE,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;iBACjE;aACF;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,2BAA2B,CAAC,KAAa;QACvC,MAAM,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;QAC7E,OAAO,EAAE,IAAI,IAAI,CAAC,uBAAuB,CAAC,EAAE,CAAC,EAAY,CAAC,CAAC;IAC7D,CAAC;IACD,OAAO,CAAC,GAAW,EAAE,IAAY;QAC/B,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC;IACzG,CAAC;IACD,sBAAsB,CAAC,EAAkB;;QACvC,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;gBACnD,IAAI,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE;oBAChC,OAAO;wBACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;wBACtB,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE;qBACrB,CAAC;iBACH;aACF;SACF;aAAM;YACL,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE,GAAG,GAAG,CAAC,MAAA,IAAI,CAAC,QAAQ,mCAAI,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;gBACrF,IAAI,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC,EAAE,EAAE;oBACtE,OAAO;wBACL,KAAK,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;wBACtB,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;qBACrB,CAAC;iBACH;aACF;SACF;QACD,OAAO;YACL,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;YAC3B,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE;SAC1B,CAAC;IAEJ,CAAC;IACD,YAAY,CAAC,GAAW,EAAE,GAAW;QACnC,OAAO,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IACD,gBAAgB,CAAC,GAAW,EAAE,GAAW,EAAE,SAAiB,EAAE,SAAiB;QAC7E,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACvD,OAAO,CACL,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,MAAM,CAAC,KAAK,CAAC,GAAG;YACrC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,GAAG;YACjC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,MAAM,CAAC,KAAK,CAAC,GAAG;YACrC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,GAAG,CAClC,CAAC;IACJ,CAAC;IACD,wBAAwB,CAAC,GAAW,EAAE,GAAW;QAC/C,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;QACvG,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,GAAG,GAAG,YAAY,EAAE;gBACtB,OAAO,CAAC,CAAC,CAAC;aACX;YACD,OAAO,GAAG,GAAG,YAAY,CAAC;SAC3B;QAED,IAAI,GAAG,GAAG,YAAY,EAAE;YACtB,OAAO,CAAC,CAAC,CAAC;SACX;QACD,OAAO,GAAG,GAAG,YAAY,CAAC;IAC5B,CAAC;IACD,8BAA8B,CAAC,KAAa;QAC1C,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;QACvG,OAAO,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IACO,WAAW,CACjB,GAAW,EACX,MAAqB,EACrB,KAAe,EACf,oBAA8B;QAE9B,MAAM,OAAO,GAAiB,EAAE,CAAC;QACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACzD,MAAM,CAAC,OAAO,CAAC,CAAC,EAAgB,EAAE,EAAE;;YAClC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YACjC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YACxB,MAAM,IAAI,GAAe;gBACvB,EAAE;gBACF,KAAK,EAAE,MAAA,EAAE,CAAC,KAAK,mCAAK,EAAU,CAAC,OAAO;gBAEtC,UAAU,EAAE,EAAE,CAAC,UAAU;gBACzB,KAAK,EAAG,EAAmB,CAAC,KAAK;gBAEjC,KAAK,EAAE,EAAE,CAAC,WAAW;gBACrB,UAAU,EAAE,MAAA,EAAE,CAAC,UAAU,mCAAI,MAAM;gBACnC,YAAY,EAAE,EAAE,CAAC,YAAY;gBAC7B,MAAM,EAAE,EAAE;gBAEV,cAAc,EAAG,EAAiB,CAAC,cAAc;gBACjD,sBAAsB,EAAE,EAAE,CAAC,sBAAsB;aAElD,CAAC;YAEF,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;YACnB,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBACjC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACpE;YACD,IAAI,CAAC,oBAAoB,EAAE;gBACzB,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;aACpB;iBAAM,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE;gBACvC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;aACnD;YAED,MAAM,MAAM,GAAG,CAAE,EAAiB,CAAC,cAAc,IAAK,EAAiB,CAAC,cAAc,KAAK,cAAc,CAAC,MAAM,CAAC;YACjH,IAAI,CAAC,CAAC,EAAE,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,EAAE;gBAC5B,MAAM,UAAU,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;gBACxD,CAAC,UAAU;oBACT,IAAI,CAAC,WAAW,CACd,GAAG,GAAG,CAAC,EACP,EAAE,CAAC,OAAO,EACV,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EACd,EAAE,CAAC,oBAAoB,IAAI,oBAAoB,CAChD,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aACnC;iBAAM;gBACL,MAAM,MAAM,GAAG;oBACb,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE;oBAChB,KAAK,EAAE,EAAE,CAAC,KAAK;oBAEf,WAAW,EAAE,EAAE,CAAC,WAAW;oBAC3B,KAAK,EAAE,EAAE,CAAC,KAAK;oBACf,QAAQ,EAAE,EAAE,CAAC,QAAQ;oBACrB,QAAQ,EAAE,EAAE,CAAC,QAAQ;oBACrB,IAAI,EAAE,EAAE,CAAC,IAAI;oBACb,QAAQ,EAAE,MAAA,MAAA,EAAE,CAAC,QAAQ,mCAAK,EAAU,CAAC,UAAU,mCAAI,MAAM;oBACzD,WAAW,EAAE,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI;oBACxD,SAAS,EAAE,WAAW,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI;oBAClD,aAAa,EAAE,eAAe,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,oBAAoB;oBAC9E,KAAK,EAAE,EAAE,CAAC,KAAK;oBACf,MAAM,EAAE,EAAE;oBACV,sBAAsB,EAAE,EAAE,CAAC,sBAAsB;oBACjD,mBAAmB,EAAE,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,mBAAmB;oBAC5C,WAAW,EAAE,EAAE,CAAC,WAAW;oBAC3B,WAAW,EAAE,GAAG,IAAI,CAAC;iBACtB,CAAC;gBACF,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,EAAE;oBACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAE3B,KAAK,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;wBACzD,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;qBAClC;iBACF;aACF;QACH,CAAC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;IAEO,OAAO,CAAC,GAAW,EAAE,oBAAoB,GAAG,KAAK;QAEvD,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;YAC1C,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE;gBACjD,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;oBACxE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC3C;aACF;YACD,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;SACjC;QAED,IAAI,oBAAoB,EAAE;YACxB,OAAO,EAAE,CAAC;SACX;QAED,MAAM,MAAM,GAAa,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;QACzD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACzB,OAAO,MAAM,CAAC;SACf;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAC1C,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YAC1C,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,kBAAkB,CAAC,GAAW,EAAE,GAAW;QACzC,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACjC,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,OAAO,GAAgD,EAAE,CAAC;QAC9D,IAAI,OAAO,GAAgD,EAAE,CAAC;QAC9D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,OAAO,GAAG;gBACR;oBACE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC,KAAK;iBACtE;aACF,CAAC;SACH;aAAM;YACL,OAAO,GAAG;gBACR;oBACE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK;iBAChC;aACF,CAAC;SACH;QACD,OAAO;YACL,cAAc,EAAE,OAAO;YACvB,cAAc,EAAE,OAAO;YACvB,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC;SAC7C,CAAC;IACJ,CAAC;IACO,eAAe,CAAC,GAAW,EAAE,GAAW;QAC9C,IAAI,GAAG,KAAK,CAAC,EAAE;YACb,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACjC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;SACrC;aAAM,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YACrC,IAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,EAAE;gBAC3C,OAAO,SAAS,CAAC;aAClB;YACD,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;SACrC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAOD,qBAAqB,CAAC,MAAmB,EAAE,MAAmB;QAC5D,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;YAC9G,OAAO,KAAK,CAAC;SACd;aAAM,IACL,CAAC,IAAI,CAAC,SAAS;YACf,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;YACjD,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EACjD;YAEA,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YACjE,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YACjE,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAChF,OAAO,OAAO,CAAC;SAChB;aAAM,IACL,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;YACjD,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EACjD;YAEA,IACE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW;gBACtF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EACtF;gBACA,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;gBAC7F,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;aAC9F;iBAAM;gBAEL,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC;gBAC9D,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC;aAC/D;SACF;QACD,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,uBAAuB,KAAK,UAAU,EAAE;YACpE,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;gBAC1C,OAAO,KAAK,CAAC;aACd;SACF;QAGD,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;QAElE,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;YAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChF,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,EAAE,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChF,OAAO,WAAW,KAAK,WAAW,CAAC;SACpC;aAAM,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;YACnD,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YAChF,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YAChF,OAAO,WAAW,KAAK,WAAW,CAAC;SACpC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAOD,kBAAkB,CAChB,MAAmB,EACnB,MAAmB;;QASnB,IACE,CAAC,CAAC,CAAA,MAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,0CAAE,sBAAsB,CAAA;aACrD,MAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,0CAAE,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA,CAAC;YACxE,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC,EAC1C;YACA,IAAI,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YAEhE,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;gBAE/C,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;gBAE3E,IAAI,WAAW,CAAC;gBAChB,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACjF,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE;oBAC5B,WAAW,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,UAAU,GAAG,CAAC,CAAC;iBACxD;qBAAM;oBACL,WAAW,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC;iBACzC;gBAED,IAAI,WAAW,KAAK,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE;oBAC7C,OAAO,IAAI,CAAC;iBACb;gBAED,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;oBAEzD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,CAC/C,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAC/D,UAAU,CACX,CAAC;oBAGF,SAAS,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAC;oBACxE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;iBACnE;gBAED,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CACxC,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAC/D,UAAU,CACX,CAAC;gBACF,aAAa,CAAC,OAAO,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,8BAA8B,CAAQ,EAAE,CAAQ,CAAC,CAAC;gBAC5F,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;gBAG3D,IAAI,CAAC,UAAU,CAAC,YAAY,CAC1B,eAAe,CAAC,KAAK,CAAC,GAAG,EACzB,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAC/D,WAAW,GAAG,IAAI,CAAC,8BAA8B,CAClD,CAAC;gBACF,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrD,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;gBAC/B,OAAO;oBACL,WAAW,EAAE,eAAe,CAAC,KAAK,CAAC,GAAG;oBACtC,WAAW;oBACX,UAAU;oBACV,UAAU,EAAE,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;oBACnE,QAAQ,EAAE,QAAQ;iBACnB,CAAC;aACH;iBAAM,IACL,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;gBACxC,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,EACrE;gBACA,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;oBACrD,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;iBACnG;gBAED,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC;gBAE3E,IAAI,WAAW,CAAC;gBAChB,MAAM,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;gBACjF,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE;oBAC5B,WAAW,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,UAAU,GAAG,CAAC,CAAC;iBACxD;qBAAM;oBACL,WAAW,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC;iBACzC;gBAED,IAAI,WAAW,KAAK,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE;oBAC7C,OAAO,IAAI,CAAC;iBACb;gBAED,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;oBAEzD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;oBAGzF,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBAClC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC;iBACnE;gBAED,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;gBAClF,aAAa,CAAC,OAAO,CAAC,WAAkB,EAAE,CAAQ,CAAC,CAAC;gBACpD,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;gBAG3D,IAAI,CAAC,UAAU,CAAC,YAAY,CAC1B,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAC/D,eAAe,CAAC,KAAK,CAAC,GAAG,EACzB,WAAW,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAClG,CAAC;gBACF,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrD,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;gBAC/B,OAAO;oBACL,WAAW,EAAE,eAAe,CAAC,KAAK,CAAC,GAAG;oBACtC,WAAW;oBACX,UAAU;oBACV,UAAU,EAAE,eAAe,CAAC,GAAG,CAAC,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;oBACnE,QAAQ,EAAE,KAAK;iBAChB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,EAAE;gBAC5D,OAAO;oBACL,WAAW,EAAE,MAAM,CAAC,GAAG;oBACvB,WAAW,EAAE,MAAM,CAAC,GAAG;oBACvB,UAAU,EAAE,CAAC;oBACb,UAAU,EAAE,CAAC;oBACb,QAAQ,EAAE,KAAK;iBAChB,CAAC;aACH;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAID,oBAAoB,CAAC,eAAoD;QAuBvE,MAAM,gBAAgB,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACvD,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB,GAAG,KAAK,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QACH,MAAM,mBAAmB,GAAG,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAC7D,OAAO,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,sBAAsB,GAAG,KAAK,EAAE,CAAC;QACrE,CAAC,CAAC,CAAC;QACH,OAAO;YACL,gBAAgB;YAChB,mBAAmB;SACpB,CAAC;IACJ,CAAC;IACD,gBAAgB,CAAC,IAAY,EAAE,IAAY,EAAE,aAAkB;QAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC;QACnH,IAAI,OAAO,SAAS,CAAC,SAAS,KAAK,UAAU,EAAE;YAC7C,OAAO;SACR;QACD,SAAS,CAAC,aAAa,GAAG,aAAa,CAAC;IAC1C,CAAC;IAED,gBAAgB,CAAC,IAAY,EAAE,IAAY;QACzC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC;QACnH,OAAO,SAAS,CAAC,aAAa,CAAC;IACjC,CAAC;IACD,aAAa;QACX,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,yBAAyB,CAAC,GAAW,EAAE,GAAW;QAChD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,OAAO,CAAC,GAAW,EAAE,GAAW;QAC9B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,UAAU,CAAC,GAAW,EAAE,GAAW;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IACD,YAAY,CAAC,GAAW,EAAE,GAAW;QACnC,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,gBAAgB,CAAC,GAAW,EAAE,GAAW;QACvC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpC,MAAM,SAAS,GAAI,IAAmB,aAAnB,IAAI,uBAAJ,IAAI,CAAiB,SAAS,CAAC;QAClD,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;YACnC,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B,CAAC,GAAW,EAAE,GAAW;QACjD,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpC,MAAM,mBAAmB,GAAG,CAAE,IAAmB,aAAnB,IAAI,uBAAJ,IAAI,CAAiB,MAA4B,CAAA,CAAC,mBAAmB,CAAC;QACpG,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IACD,YAAY,CAAC,GAAW,EAAE,GAAW;QACnC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACxC,CAAC;IACD,eAAe,CAAC,GAAW,EAAE,GAAW;QACtC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpC,MAAM,SAAS,GAAI,IAAmB,aAAnB,IAAI,uBAAJ,IAAI,CAAiB,SAAS,CAAC;QAClD,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;YAEnC,MAAM,GAAG,GAAG;gBACV,GAAG;gBACH,GAAG;gBACH,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE;gBACzD,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,EAAE;gBAC/C,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBAC9E,KAAK,EAAE,IAAI,CAAC,MAAM;aACnB,CAAC;YACF,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;SACvB;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,cAAc,CAAC,GAAW,EAAE,GAAW;QACrC,OAAO,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IACD,OAAO;QACL,MAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;QAClE,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,OAAO,EAAE,CAAC;QAC/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;;YAC3C,MAAA,eAAe,CAAC,aAAa,0CAAE,OAAO,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAED,iBAAiB,CAAC,GAAW,EAAE,GAAW,EAAE,KAAa;QACvD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACvE,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,gBAAgB,CAAC,KAAsB;;QAIrC,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,aAAa,0CAAE,MAAM,CAAC,CAAC,GAAgD,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;YACzG,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,EAAE;gBACvB,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;aAC7C;YACD,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;QACP,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,cAAc,CAAC,GAAW;;QAIxB,IAAI,GAAG,CAAC;QACR,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,aAAa,0CAAE,IAAI,CAAC,CAAC,UAAsB,EAAE,KAAK,EAAE,EAAE;;YACxE,IAAI,CAAA,MAAA,UAAU,CAAC,MAAM,0CAAE,GAAG,MAAK,GAAG,EAAE;gBAClC,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,8BAA8B,CAAC;gBAClD,OAAO,IAAI,CAAC;aACb;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QACH,OAAO;YACL,YAAY,EAAE,MAAM;YACpB,GAAG;SACJ,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,GAAW,EAAE,GAAW;QACtC,IAAI,GAAG,IAAI,CAAC,EAAE;YACZ,IAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,EAAE;gBAC7C,OAAO,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;aACnD;YACD,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;aAClC;YAED,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,CAAC,MAAM,CAAC;SACxE;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF","file":"simple-header-layout.js","sourcesContent":["/* eslint-disable sort-imports */\nimport { isValid, merge } from '@visactor/vutils';\nimport type { ListTable } from '../ListTable';\nimport { DefaultSparklineSpec } from '../tools/global';\nimport {\n  type CellAddress,\n  type CellRange,\n  type CellLocation,\n  type IListTableCellHeaderPaths,\n  type LayoutObjectId,\n  type Aggregation,\n  type IRowSeriesNumber,\n  HierarchyState\n} from '../ts-types';\nimport type { ChartColumnDefine, ColumnsDefine } from '../ts-types/list-table/define';\nimport type {\n  ColumnData,\n  ColumnDefine,\n  HeaderData,\n  LayoutMapAPI,\n  SeriesNumberColumnData,\n  WidthData\n} from '../ts-types/list-table/layout-map/api';\nimport { checkHasChart, getChartDataId } from './chart-helper/get-chart-spec';\nimport {\n  checkHasAggregation,\n  checkHasAggregationOnBottom,\n  checkHasAggregationOnTop,\n  checkHasTreeDefine\n} from './layout-helper';\nimport type { Aggregator } from '../ts-types/dataset/aggregation';\nimport { DimensionTree } from './tree-helper';\nimport { getCellRange } from './cell-range/simple-cell-range';\n// import { EmptyDataCache } from './utils';\n\n// let seqId = 0;\nexport class SimpleHeaderLayoutMap implements LayoutMapAPI {\n  private seqId: number = 0;\n  private _headerObjects: HeaderData[];\n  private _headerObjectMap: { [key in LayoutObjectId]: HeaderData };\n  private _headerObjectsIncludeHided: HeaderData[];\n  // private _headerObjectMapIncludeHided: { [key in LayoutObjectId]: HeaderData };\n  // private _headerObjectFieldKey: { [key in string]: HeaderData };\n  private _headerCellIds: number[][];\n  private _columns: ColumnData[];\n  private _columnsIncludeHided: ColumnData[];\n  rowSeriesNumberColumn: SeriesNumberColumnData[];\n  leftRowSeriesNumberColumn: SeriesNumberColumnData[];\n  rightRowSeriesNumberColumn: SeriesNumberColumnData[];\n  leftRowSeriesNumberColumnCount: number = 0;\n  rightRowSeriesNumberColumnCount: number = 0;\n  /** 后期加的 对应pivot-header-layout 中的columnDimensionTree 为了排序后获取到排序后的columns */\n  columnTree: DimensionTree;\n  readonly bodyRowSpanCount: number = 1;\n  //透视表中树形结构使用 这里为了table逻辑不报错\n  // rowHierarchyIndent?: number = 0;\n  hierarchyIndent?: number; // 树形展示缩进值\n  hierarchyTextStartAlignment?: boolean;\n  // private _emptyDataCache = new EmptyDataCache();\n  _transpose = false;\n  _showHeader = true;\n  _recordsCount = 0;\n  _table: ListTable;\n  _hasAggregation: boolean = false;\n  _hasAggregationOnTopCount: number = 0;\n  _hasAggregationOnBottomCount: number = 0;\n  /**层级维度结构显示形式 */\n  rowHierarchyType?: 'grid' | 'tree';\n  /** 列表头树形展示模式 */\n  columnHierarchyType?: 'grid-tree';\n  /** 列表头默认展开层级 */\n  columnExpandLevel?: number;\n  // 缓存行号列号对应的cellRange 需要注意当表头位置拖拽后 这个缓存的行列号已不准确 进行重置\n  _cellRangeMap: Map<string, CellRange>; //存储单元格的行列号范围 针对解决是否为合并单元格情况\n  constructor(table: ListTable, columns: ColumnsDefine, showHeader: boolean, hierarchyIndent: number) {\n    this._cellRangeMap = new Map();\n    this._showHeader = showHeader;\n    this._table = table;\n    this._columns = [];\n    this._columnsIncludeHided = [];\n    this._headerCellIds = [];\n    this.hierarchyIndent = hierarchyIndent ?? 20;\n    this.hierarchyTextStartAlignment = table.options.hierarchyTextStartAlignment;\n    this.columnHierarchyType = table.options.headerHierarchyType;\n    this.columnExpandLevel = table.options.headerExpandLevel ?? 1;\n    this.columnTree = new DimensionTree(\n      columns as any,\n      { seqId: 0 },\n      this.columnHierarchyType ?? null,\n      this.columnHierarchyType === 'grid-tree' ? this.columnExpandLevel : undefined\n    ); //seqId这里没有利用上 所有顺便传了0\n    this._headerObjectsIncludeHided = this._addHeaders(0, columns, []);\n    // this._headerObjectMapIncludeHided = this._headerObjectsIncludeHided.reduce((o, e) => {\n    //   o[e.id as number] = e;\n    //   return o;\n    // }, {} as { [key in LayoutObjectId]: HeaderData });\n\n    this._headerObjects = this._headerObjectsIncludeHided.filter(col => {\n      return col.define.hide !== true;\n    });\n    this._headerObjectMap = this._headerObjects.reduce((o, e) => {\n      o[e.id as number] = e;\n      return o;\n    }, {} as { [key in LayoutObjectId]: HeaderData });\n    this.rowHierarchyType = checkHasTreeDefine(this) ? 'tree' : 'grid';\n    this._hasAggregation = checkHasAggregation(this);\n    this._hasAggregationOnBottomCount = checkHasAggregationOnBottom(this);\n    this._hasAggregationOnTopCount = checkHasAggregationOnTop(this);\n    // this._headerObjectFieldKey = this._headerObjects.reduce((o, e) => {\n    //   o[e.fieldKey] = e;\n    //   return o;\n    // }, {} as { [key in string]: HeaderData });\n    this.handleRowSeriesNumber(table.internalProps.rowSeriesNumber);\n  }\n  handleRowSeriesNumber(rowSeriesNumber: IRowSeriesNumber) {\n    if (rowSeriesNumber) {\n      if (Array.isArray(rowSeriesNumber)) {\n        this.rowSeriesNumberColumn = rowSeriesNumber.map((seriesNumber, index) => {\n          return {\n            id: this.seqId++,\n            title: seriesNumber.title,\n            define: merge({ field: '_vtable_rowSeries_number_' + index }, seriesNumber),\n            cellType: seriesNumber.cellType ?? 'text',\n            headerType: seriesNumber.cellType === 'checkbox' ? 'checkbox' : 'text',\n            style: seriesNumber.style,\n            width: seriesNumber.width,\n            format: seriesNumber.format,\n            field: seriesNumber.field ?? '_vtable_rowSeries_number_' + index,\n            icon: seriesNumber.icon,\n            headerIcon: seriesNumber.headerIcon,\n            isChildNode: false\n          };\n        });\n      } else {\n        this.rowSeriesNumberColumn = [\n          {\n            id: this.seqId++,\n            title: rowSeriesNumber.title,\n            define: merge({ field: '_vtable_rowSeries_number' }, rowSeriesNumber),\n            cellType: rowSeriesNumber.cellType ?? 'text',\n            headerType: rowSeriesNumber.cellType === 'checkbox' ? 'checkbox' : 'text',\n            style: rowSeriesNumber.style,\n            width: rowSeriesNumber.width,\n            format: rowSeriesNumber.format,\n            field: '_vtable_rowSeries_number', //rowSeriesNumber.field,\n            icon: rowSeriesNumber.icon,\n            headerIcon: rowSeriesNumber.headerIcon,\n            isChildNode: false\n          }\n        ];\n      }\n      this.leftRowSeriesNumberColumn = this.rowSeriesNumberColumn.filter(rowSeriesNumberItem => {\n        // if (rowSeriesNumberItem.define.align === 'left' || !isValid(rowSeriesNumberItem.define.align)) {\n        //   return true;\n        // }\n        return true;\n      });\n      this.rightRowSeriesNumberColumn = this.rowSeriesNumberColumn.filter(rowSeriesNumberItem => {\n        // if (rowSeriesNumberItem.define.align === 'right') {\n        //   return true;\n        // }\n        return false;\n      });\n      this.leftRowSeriesNumberColumnCount = this.leftRowSeriesNumberColumn.length;\n      this.rightRowSeriesNumberColumnCount = this.rightRowSeriesNumberColumn.length;\n    }\n  }\n  // get columnWidths(): ColumnData[] {\n  //   return this._columns;\n  // }\n  get transpose(): boolean {\n    return this._transpose;\n  }\n  set transpose(_transpose: boolean) {\n    this._transpose = _transpose;\n  }\n  get showHeader(): boolean {\n    return this._showHeader;\n  }\n  set showHeader(_showHeader: boolean) {\n    this._showHeader = _showHeader;\n  }\n  isSeriesNumberInHeader(col: number, row: number): boolean {\n    if (this.leftRowSeriesNumberColumnCount > 0 && col >= 0 && row >= 0 && col < this.leftRowSeriesNumberColumnCount) {\n      if (this.transpose) {\n        return false;\n      } else if (row < this.headerLevelCount) {\n        return true;\n      }\n    }\n    if (\n      this.rightRowSeriesNumberColumnCount > 0 &&\n      row >= 0 &&\n      col >= this.colCount - this.rightRowSeriesNumberColumnCount\n    ) {\n      if (this.transpose) {\n        return false;\n      } else if (row < this.headerLevelCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isSeriesNumberInBody(col: number, row: number): boolean {\n    if (this.leftRowSeriesNumberColumnCount > 0 && col >= 0 && col < this.leftRowSeriesNumberColumnCount) {\n      if (this.transpose) {\n        return true;\n      }\n      if (row >= this.headerLevelCount) {\n        return true;\n      }\n    }\n    if (this.rightRowSeriesNumberColumnCount > 0 && col >= this.colCount - this.rightRowSeriesNumberColumnCount) {\n      if (this.transpose) {\n        return true;\n      }\n      if (row >= this.headerLevelCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isSeriesNumber(col: number, row: number): boolean {\n    if (isValid(col) && isValid(row)) {\n      if (\n        this.leftRowSeriesNumberColumnCount > 0 &&\n        col >= 0 &&\n        row >= 0 &&\n        col < this.leftRowSeriesNumberColumnCount\n      ) {\n        return true;\n      }\n      if (\n        this.rightRowSeriesNumberColumnCount > 0 &&\n        row >= 0 &&\n        col >= this.colCount - this.rightRowSeriesNumberColumnCount\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n  getSeriesNumberHeader(col: number, row: number) {\n    if (this.leftRowSeriesNumberColumnCount > 0 && col >= 0 && col < this.leftRowSeriesNumberColumnCount) {\n      if (this.transpose) {\n        return undefined;\n      }\n      if (row < this.headerLevelCount) {\n        return Object.assign({}, this.leftRowSeriesNumberColumn[col], {\n          style: Object.assign(\n            {},\n            this._table.transpose\n              ? this._table.internalProps.theme.rowHeaderStyle\n              : this._table.internalProps.theme.headerStyle,\n            this._table.internalProps.rowSeriesNumber.headerStyle\n          )\n        });\n      }\n    }\n    if (\n      this.rightRowSeriesNumberColumnCount > 0 &&\n      col >= this.colCount - this.rightRowSeriesNumberColumnCount &&\n      row < this.headerLevelCount\n    ) {\n      if (this.transpose) {\n        return undefined;\n      }\n      if (row < this.headerLevelCount) {\n        return this.rightRowSeriesNumberColumn[col - (this.colCount - this.rightRowSeriesNumberColumnCount)];\n      }\n    }\n    return undefined;\n  }\n  getSeriesNumberBody(col: number, row: number) {\n    if (this.leftRowSeriesNumberColumnCount > 0 && col >= 0 && col < this.leftRowSeriesNumberColumnCount) {\n      if (this.transpose) {\n        return this.leftRowSeriesNumberColumn[col];\n      }\n      if (row >= this.headerLevelCount) {\n        return this.leftRowSeriesNumberColumn[col];\n      }\n    }\n    if (this.rightRowSeriesNumberColumnCount > 0 && col >= this.colCount - this.rightRowSeriesNumberColumnCount) {\n      if (this.transpose) {\n        return this.rightRowSeriesNumberColumn[col - (this.colCount - this.rightRowSeriesNumberColumnCount)];\n      }\n      if (row >= this.headerLevelCount) {\n        return this.rightRowSeriesNumberColumn[col - (this.colCount - this.rightRowSeriesNumberColumnCount)];\n      }\n    }\n    return undefined;\n  }\n  isHeader(col: number, row: number): boolean {\n    if (\n      this.transpose &&\n      col >= this.leftRowSeriesNumberColumnCount &&\n      col < this.headerLevelCount + this.leftRowSeriesNumberColumnCount\n    ) {\n      return true;\n    }\n    if (!this.transpose && row >= 0 && row < this.headerLevelCount) {\n      return true;\n    }\n    return false;\n  }\n  isAggregation(col: number, row: number): boolean {\n    // const column = this.getBody(col, row);\n    // const aggregation = column.aggregation;\n    if (this.hasAggregation) {\n      if (this.hasAggregationOnBottomCount) {\n        if (this.transpose) {\n          if (col >= this.colCount - this.hasAggregationOnBottomCount) {\n            return true;\n          }\n        } else {\n          if (row >= this.rowCount - this.hasAggregationOnBottomCount) {\n            return true;\n          }\n        }\n      }\n      if (this.hasAggregationOnTopCount) {\n        if (this.transpose) {\n          if (col >= this.rowHeaderLevelCount && col < this.rowHeaderLevelCount + this.hasAggregationOnTopCount) {\n            return true;\n          }\n        } else {\n          if (row >= this.columnHeaderLevelCount && row < this.columnHeaderLevelCount + this.hasAggregationOnTopCount) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  isTopAggregation(col: number, row: number): boolean {\n    if (this.hasAggregationOnTopCount) {\n      if (this.transpose) {\n        if (col >= this.rowHeaderLevelCount && col < this.rowHeaderLevelCount + this.hasAggregationOnTopCount) {\n          return true;\n        }\n      } else {\n        if (row >= this.columnHeaderLevelCount && row < this.columnHeaderLevelCount + this.hasAggregationOnTopCount) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isBottomAggregation(col: number, row: number): boolean {\n    if (this.hasAggregationOnBottomCount) {\n      if (this.transpose) {\n        if (col >= this.colCount - this.hasAggregationOnBottomCount) {\n          return true;\n        }\n      } else {\n        if (row >= this.rowCount - this.hasAggregationOnBottomCount) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  get hasAggregation() {\n    return this._hasAggregation;\n  }\n\n  get hasAggregationOnTopCount() {\n    return this._hasAggregationOnTopCount;\n  }\n\n  get hasAggregationOnBottomCount() {\n    return this._hasAggregationOnBottomCount;\n  }\n\n  getAggregatorsByCell(col: number, row: number) {\n    const column = this.getColumnDefine(col, row);\n    const aggregators = (column as any).vtable_aggregator;\n    return aggregators;\n  }\n\n  getAggregatorsByCellRange(startCol: number, startRow: number, endCol: number, endRow: number) {\n    let aggregators: Aggregator[] = [];\n    if (this.transpose) {\n      for (let i = startRow; i <= endRow; i++) {\n        const column = this.getColumnDefine(startCol, i) as any;\n        if (column.vtable_aggregator) {\n          aggregators = aggregators.concat(\n            Array.isArray(column.vtable_aggregator) ? column.vtable_aggregator : [column.vtable_aggregator]\n          );\n        }\n      }\n    } else {\n      for (let i = startCol; i <= endCol; i++) {\n        const column = this.getColumnDefine(i, startRow) as any;\n        if (column.vtable_aggregator) {\n          aggregators = aggregators.concat(\n            Array.isArray(column.vtable_aggregator) ? column.vtable_aggregator : [column.vtable_aggregator]\n          );\n        }\n      }\n      return aggregators;\n    }\n    return [];\n  }\n  getAggregatorOnTop(col: number, row: number) {\n    const column = this.getColumnDefine(col, row);\n    const aggregators = (column as any).vtable_aggregator;\n    const aggregation = (column as ColumnDefine).aggregation;\n    if (Array.isArray(aggregation)) {\n      const topAggregationIndexs = aggregation.reduce((indexs, agg, index) => {\n        if (agg.showOnTop) {\n          indexs.push(index);\n        }\n        return indexs;\n      }, []);\n      const topAggregators = topAggregationIndexs.map(index => aggregators[index]);\n      if (this.transpose) {\n        return (topAggregators as Aggregator[])[col - this.rowHeaderLevelCount];\n      }\n      return (topAggregators as Aggregator[])[row - this.columnHeaderLevelCount];\n    }\n    if (this.transpose && col - this.rowHeaderLevelCount === 0) {\n      return (aggregation as Aggregation)?.showOnTop ? (aggregators as Aggregator) : null;\n    } else if (!this.transpose && row - this.columnHeaderLevelCount === 0) {\n      return (aggregation as Aggregation)?.showOnTop ? (aggregators as Aggregator) : null;\n    }\n    return null;\n  }\n\n  getAggregatorOnBottom(col: number, row: number) {\n    const column = this.getColumnDefine(col, row);\n    const aggregators = (column as any).vtable_aggregator;\n    const aggregation = (column as ColumnDefine).aggregation;\n    if (Array.isArray(aggregation)) {\n      const bottomAggregationIndexs = aggregation.reduce((indexs, agg, index) => {\n        if (!agg.showOnTop) {\n          indexs.push(index);\n        }\n        return indexs;\n      }, []);\n      const bottomAggregators = bottomAggregationIndexs.map(index => aggregators[index]);\n      if (this.transpose) {\n        return (bottomAggregators as Aggregator[])[col - (this.colCount - this.hasAggregationOnBottomCount)];\n      }\n      return (bottomAggregators as Aggregator[])[row - (this.rowCount - this.hasAggregationOnBottomCount)];\n    }\n    if (this.transpose && col - (this.colCount - this.hasAggregationOnBottomCount) === 0) {\n      return !(aggregation as Aggregation)?.showOnTop ? (aggregators as Aggregator) : null;\n    } else if (!this.transpose && row - (this.rowCount - this.hasAggregationOnBottomCount) === 0) {\n      return !(aggregation as Aggregation)?.showOnTop ? (aggregators as Aggregator) : null;\n    }\n    return null;\n  }\n  /**\n   * 获取单元格所在行或者列中的聚合值的单元格地址\n   * @param col\n   * @param row\n   * @returns\n   */\n  getAggregatorCellAddress(startCol: number, startRow: number, endCol: number, endRow: number) {\n    const cellAddrs = [];\n    const topCount = this.hasAggregationOnTopCount;\n    const bottomCount = this.hasAggregationOnBottomCount;\n    if (this.transpose) {\n      for (let row = startRow; row <= endRow; row++) {\n        const column = this.getColumnDefine(startCol, row) as any;\n        if (column.vtable_aggregator) {\n          for (let i = 0; i < topCount; i++) {\n            cellAddrs.push({ col: this.headerLevelCount + i, row });\n          }\n          for (let i = 0; i < bottomCount; i++) {\n            cellAddrs.push({ col: this.rowCount - bottomCount + i, row });\n          }\n        }\n      }\n    } else {\n      for (let col = startCol; col <= endCol; col++) {\n        const column = this.getColumnDefine(col, startRow) as any;\n        if (column.vtable_aggregator) {\n          for (let i = 0; i < topCount; i++) {\n            cellAddrs.push({ col, row: this.headerLevelCount + i });\n          }\n          for (let i = 0; i < bottomCount; i++) {\n            cellAddrs.push({ col, row: this.rowCount - bottomCount + i });\n          }\n        }\n      }\n    }\n    return cellAddrs;\n  }\n  getCellLocation(col: number, row: number): CellLocation {\n    if (this.isHeader(col, row)) {\n      if (this.transpose) {\n        return 'rowHeader';\n      }\n      return 'columnHeader';\n    }\n    return 'body';\n  }\n  isRowHeader(col: number, row: number): boolean {\n    if (\n      this.transpose &&\n      col >= this.leftRowSeriesNumberColumnCount &&\n      col < this.headerLevelCount + this.leftRowSeriesNumberColumnCount\n    ) {\n      return true;\n    }\n    return false;\n  }\n  isColumnHeader(col: number, row: number): boolean {\n    if (\n      !this.transpose &&\n      row >= 0 &&\n      row <= this.headerLevelCount - 1 &&\n      col >= this.leftRowSeriesNumberColumnCount &&\n      col < this.colCount - this.rightRowSeriesNumberColumnCount\n    ) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * 是否属于冻结左侧列\n   * @param col\n   * @param row 不传的话 只需要判断col，传入row的话非冻结角头部分的才返回true\n   * @returns\n   */\n  isFrozenColumn(col: number, row?: number): boolean {\n    if (isValid(row)) {\n      if (\n        col >= 0 &&\n        col < this.frozenColCount &&\n        row >= this.frozenRowCount &&\n        row < this.rowCount - this.bottomFrozenRowCount\n      ) {\n        return true;\n      }\n    } else {\n      if (this.frozenColCount > 0 && col >= 0 && col < this.frozenColCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * 是否属于右侧冻结列\n   * @param col\n   * @param row 不传的话 只需要判断col，传入row的话非冻结角头部分的才返回true\n   * @returns\n   */\n  isRightFrozenColumn(col: number, row?: number): boolean {\n    if (isValid(row)) {\n      if (\n        col >= this.colCount - this.rightFrozenColCount &&\n        row >= this.frozenRowCount &&\n        row < this.rowCount - this.bottomFrozenRowCount\n      ) {\n        return true;\n      }\n    } else {\n      if (this.rightFrozenColCount > 0 && col >= this.colCount - this.rightFrozenColCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * 是否属于冻结顶部行\n   * @param col 只传入col一个值的话 会被当做row\n   * @param row 不传的话只需要判断col（其实会当做row）；传入两个值的话非冻结角头部分的才返回true\n   * @returns\n   */\n  isFrozenRow(col: number, row?: number): boolean {\n    if (isValid(row)) {\n      if (\n        row >= 0 &&\n        row < this.frozenRowCount &&\n        col >= this.frozenColCount &&\n        col < this.colCount - this.rightFrozenColCount\n      ) {\n        return true;\n      }\n    } else {\n      row = col;\n      if (this.frozenRowCount > 0 && row >= 0 && row < this.frozenRowCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * 是否属于冻结底部行\n   * @param col 只传入col一个值的话 会被当做row\n   * @param row 不传的话只需要判断col（其实会当做row）；传入两个值的话非冻结角头部分的才返回true\n   * @returns\n   */\n  isBottomFrozenRow(col: number, row?: number): boolean {\n    if (isValid(row)) {\n      if (\n        row >= this.rowCount - this.bottomFrozenRowCount &&\n        col >= this.frozenColCount &&\n        col < this.colCount - this.rightFrozenColCount\n      ) {\n        return true;\n      }\n    } else {\n      row = col;\n      if (this.bottomFrozenRowCount > 0 && row >= this.rowCount - this.bottomFrozenRowCount) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isLeftTopCorner(col: number, row: number): boolean {\n    if (col >= 0 && col < this.frozenColCount && row >= 0 && row < this.frozenRowCount) {\n      return true;\n    }\n    return false;\n  }\n  isLeftBottomCorner(col: number, row: number): boolean {\n    if (col >= 0 && col < this.frozenColCount && row >= this.rowCount - this.bottomFrozenRowCount) {\n      return true;\n    }\n    return false;\n  }\n  isRightTopCorner(col: number, row: number): boolean {\n    if (col >= this.colCount - this.rightFrozenColCount && row >= 0 && row < this.frozenRowCount) {\n      return true;\n    }\n    return false;\n  }\n  isRightBottomCorner(col: number, row: number): boolean {\n    if (col >= this.colCount - this.rightFrozenColCount && row >= this.rowCount - this.bottomFrozenRowCount) {\n      return true;\n    }\n    return false;\n  }\n  isCornerHeader(col: number, row: number): boolean {\n    return false;\n  }\n\n  getColumnHeaderRange(): CellRange {\n    if (this.transpose) {\n      return {\n        start: { col: 0, row: 0 },\n        end: { col: this._headerCellIds.length - 1, row: (this.rowCount ?? 0) - 1 }\n      };\n    }\n    return {\n      start: { col: 0, row: 0 },\n      end: { col: (this.colCount ?? 0) - 1, row: this._headerCellIds.length - 1 }\n    };\n  }\n  //目前和getColumnHeaderRange 逻辑一致 因为基本表格只有一侧有表头\n  getRowHeaderRange(): CellRange | undefined {\n    if (this.transpose) {\n      return {\n        start: { col: 0, row: 0 },\n        end: { col: this._headerCellIds.length - 1, row: (this.rowCount ?? 0) - 1 }\n      };\n    }\n    return {\n      start: { col: 0, row: 0 },\n      end: { col: (this.colCount ?? 0) - 1, row: this._headerCellIds.length - 1 }\n    };\n  }\n  getCornerHeaderRange(): CellRange | undefined {\n    return undefined;\n  }\n  getBodyRange(): CellRange {\n    if (this.transpose) {\n      return {\n        start: { col: this.headerLevelCount, row: 0 },\n        end: { col: (this.colCount ?? 0) - 1, row: (this.rowCount ?? 0) - 1 }\n      };\n    }\n    return {\n      start: { col: 0, row: this.headerLevelCount },\n      end: { col: (this.colCount ?? 0) - 1, row: (this.rowCount ?? 0) - 1 }\n    };\n  }\n  /**\n   * 是否为最底层表头\n   * @param col\n   * @param row\n   * @returns\n   */\n  // isHeaderNode(col: number, row: number): boolean {\n  //   const header = this.getHeader(col, row);\n  //   if (\n  //     header &&\n  //     header.define &&\n  //     (!(<any>header.define).columns || (<any>header.define).hideColumnsSubHeader)\n  //   )\n  //     return true;\n  //   return false;\n  // }\n  get headerLevelCount(): number {\n    return this.showHeader ? this._headerCellIds.length : 0;\n  }\n  get columnHeaderLevelCount(): number {\n    return this.transpose ? 0 : this.headerLevelCount;\n  }\n  get rowHeaderLevelCount(): number {\n    return this.transpose ? this.headerLevelCount : 0;\n  }\n  get frozenColCount(): number {\n    if (this._table.internalProps.frozenColCount) {\n      if (this.colCount > this._table.internalProps.frozenColCount) {\n        return this._table.internalProps.frozenColCount;\n      }\n      return this.colCount;\n    }\n    return 0;\n  }\n  get frozenRowCount(): number {\n    // return this._table.internalProps.frozenRowCount ?? 0;\n    if (this._table.internalProps.frozenRowCount) {\n      if (this.rowCount >= this._table.internalProps.frozenRowCount) {\n        return this._table.internalProps.frozenRowCount;\n      }\n      return this.rowCount;\n    }\n    return 0;\n  }\n  get bottomFrozenRowCount(): number {\n    if (this._table.internalProps.bottomFrozenRowCount) {\n      if (this.rowCount - this.headerLevelCount >= this._table.internalProps.bottomFrozenRowCount) {\n        return this._table.internalProps.bottomFrozenRowCount;\n      }\n      return this.rowCount - this.headerLevelCount;\n    }\n    return 0;\n  }\n  get rightFrozenColCount(): number {\n    if (this._table.internalProps.rightFrozenColCount) {\n      if (this.colCount - this.frozenColCount >= this._table.internalProps.rightFrozenColCount) {\n        return this._table.internalProps.rightFrozenColCount;\n      }\n      return Math.max(0, this.colCount - this.frozenColCount);\n    }\n    return 0;\n  }\n  get colCount(): number {\n    //标准表格 列数是由表头定义的field决定的；如果是转置表格，这个值么有地方用到，而且是由数据量决定的，在listTable中有定义这个值\n    return this.transpose\n      ? this.headerLevelCount +\n          this.recordsCount +\n          this.leftRowSeriesNumberColumnCount +\n          this.rightRowSeriesNumberColumnCount\n      : this._columns.length + this.leftRowSeriesNumberColumnCount + this.rightRowSeriesNumberColumnCount;\n  }\n  get rowCount(): number {\n    //转置表格 行数是由表头定义的field决定的；如果是标准表格，这个值么有地方用到，而且是由数据量决定的，在listTable中有定义这个值\n    return this.transpose ? this._columns.length : this.headerLevelCount + this.recordsCount;\n  }\n  /** 不包括冻结的行 */\n  get bodyRowCount(): number {\n    //转置表格 行数是由表头定义的field决定的；如果是标准表格，这个值么有地方用到，而且是由数据量决定的，在listTable中有定义这个值\n    return this.transpose ? this._columns.length : this.rowCount - this.bottomFrozenRowCount - this.headerLevelCount;\n  }\n  /** 不包括冻结的列 */\n  get bodyColCount(): number {\n    //转置表格 行数是由表头定义的field决定的；如果是标准表格，这个值么有地方用到，而且是由数据量决定的，在listTable中有定义这个值\n    return this.transpose ? this.colCount - this.rightFrozenColCount - this.rowHeaderLevelCount : this._columns.length;\n  }\n  get recordsCount() {\n    //标准表格 列数是由表头定义的field决定的；如果是转置表格，这个值么有地方用到，而且是由数据量决定的，在listTable中有定义这个值\n    return this._recordsCount;\n  }\n  set recordsCount(recordsCount: number) {\n    //标准表格 列数是由表头定义的field决定的；如果是转置表格，这个值么有地方用到，而且是由数据量决定的，在listTable中有定义这个值\n    this._recordsCount = recordsCount;\n  }\n  get headerObjects(): HeaderData[] {\n    return this._headerObjects;\n  }\n  get columnObjects(): ColumnData[] {\n    return this._columns;\n  }\n  get headerObjectsIncludeHided(): HeaderData[] {\n    return this._headerObjectsIncludeHided;\n  }\n  //对比multi-layout 那个里面有columWidths对象，保持结构一致\n  get columnWidths(): WidthData[] {\n    if (this.leftRowSeriesNumberColumnCount) {\n      const widths = this.leftRowSeriesNumberColumn.map(item => {\n        return {\n          width: item.width,\n          minWidth: item.minWidth,\n          maxWidth: item.maxWidth\n        };\n      });\n      widths.push(\n        ...this._columns.map(item => {\n          return {\n            width: item.width,\n            minWidth: item.minWidth,\n            maxWidth: item.maxWidth\n          };\n        })\n      );\n      return widths;\n    }\n\n    return this._columns.map(item => {\n      return {\n        width: item.width,\n        minWidth: item.minWidth,\n        maxWidth: item.maxWidth\n      };\n    });\n  }\n\n  getColumnWidthDefined(col: number): WidthData {\n    if (col >= 0) {\n      if (col < this.leftRowSeriesNumberColumnCount) {\n        return this.leftRowSeriesNumberColumn[col];\n      }\n      if (this.transpose) {\n        let width: string | number = 0;\n        let maxWidth: string | number;\n        let minWidth: string | number;\n        if (col >= this.rowHeaderLevelCount + this.leftRowSeriesNumberColumnCount) {\n          let isAuto;\n          this.columnObjects.forEach((obj, index) => {\n            if (typeof obj.width === 'number') {\n              width = Math.max(obj.width, <number>width);\n            } else if (obj.width === 'auto') {\n              isAuto = true;\n            }\n            if (typeof obj.minWidth === 'number') {\n              minWidth = Math.max(obj.minWidth, <number>minWidth);\n            }\n            if (typeof obj.maxWidth === 'number') {\n              maxWidth = Math.max(obj.maxWidth, <number>maxWidth);\n            }\n          });\n          width = width > 0 ? width : isAuto ? 'auto' : undefined;\n          return { width, minWidth, maxWidth };\n        }\n        if (this.isRowHeader(col, 0)) {\n          const defaultWidth = Array.isArray(this._table.defaultHeaderColWidth)\n            ? this._table.defaultHeaderColWidth[col] ?? this._table.defaultColWidth\n            : this._table.defaultHeaderColWidth;\n          if (defaultWidth === 'auto') {\n            return { width: 'auto' };\n          }\n          return { width: defaultWidth };\n        }\n      }\n\n      return this._columns[col - this.leftRowSeriesNumberColumnCount];\n    }\n    return undefined;\n  }\n  getCellId(col: number, row: number): LayoutObjectId {\n    if (this.transpose) {\n      if (col >= this.headerLevelCount + this.leftRowSeriesNumberColumnCount) {\n        return this._columns[row]?.id;\n      }\n      if (this.isSeriesNumber(col, row)) {\n        return row + '_series_number';\n      }\n      //in header\n      return this._headerCellIds[col - this.leftRowSeriesNumberColumnCount]?.[row];\n    }\n    if (this.isSeriesNumber(col, row)) {\n      return this.rowSeriesNumberColumn[col].id;\n    }\n    if (this.headerLevelCount <= row) {\n      return this._columns[col - this.leftRowSeriesNumberColumnCount]?.id;\n    }\n    //in header\n    return this._headerCellIds[row]?.[col - this.leftRowSeriesNumberColumnCount];\n  }\n  getHeader(col: number, row: number): HeaderData | SeriesNumberColumnData {\n    if (this.isSeriesNumberInHeader(col, row)) {\n      return this.getSeriesNumberHeader(col, row);\n    }\n    const id = this.getCellId(col, row);\n    return this._headerObjectMap[id as number]!;\n  }\n  getHeaderField(col: number, row: number) {\n    if (this.isSeriesNumberInHeader(col, row)) {\n      return this.getSeriesNumberHeader(col, row)?.field;\n    } else if (this.isSeriesNumberInBody(col, row)) {\n      return this.getSeriesNumberBody(col, row)?.field;\n    }\n    const id = this.getCellId(col, row);\n    return (\n      this._headerObjectMap[id as number]?.field ||\n      (this.transpose\n        ? this._columns[row] && this._columns[row].field\n        : this._columns[col - this.leftRowSeriesNumberColumnCount] &&\n          this._columns[col - this.leftRowSeriesNumberColumnCount].field)\n    );\n  }\n  getHeaderCellAdressById(id: number): CellAddress | undefined {\n    for (let i = 0; i < this._headerCellIds.length; i++) {\n      const row = this._headerCellIds[i];\n      for (let j = 0; j < row.length; j++) {\n        if (row[j] === id) {\n          if (this.transpose) {\n            return { col: i, row: j };\n          }\n          return { col: j + this.leftRowSeriesNumberColumnCount, row: i };\n        }\n      }\n    }\n    return undefined;\n  }\n  /** 根据field获取表头cell位置 */\n  getHeaderCellAddressByField(field: string): CellAddress | undefined {\n    const hd = this.headerObjects.find((col: any) => col && col.field === field);\n    return hd && this.getHeaderCellAdressById(hd.id as number);\n  }\n  getBody(col: number, _row: number): ColumnData | SeriesNumberColumnData {\n    if (this.isSeriesNumber(col, _row)) {\n      return this.getSeriesNumberBody(col, _row);\n    }\n    return this.transpose ? this._columns[_row] : this._columns[col - this.leftRowSeriesNumberColumnCount];\n  }\n  getBodyLayoutRangeById(id: LayoutObjectId): CellRange {\n    if (this.transpose) {\n      for (let row = 0; row < (this.rowCount ?? 0); row++) {\n        if (id === this._columns[row].id) {\n          return {\n            start: { col: 0, row },\n            end: { col: 0, row }\n          };\n        }\n      }\n    } else {\n      for (let col = this.leftRowSeriesNumberColumnCount; col < (this.colCount ?? 0); col++) {\n        if (id === this._columns[col - this.leftRowSeriesNumberColumnCount].id) {\n          return {\n            start: { col, row: 0 },\n            end: { col, row: 0 }\n          };\n        }\n      }\n    }\n    return {\n      start: { col: -1, row: -1 },\n      end: { col: -1, row: -1 }\n    };\n    // throw new Error(`can not found body layout @id=${id as number}`);\n  }\n  getCellRange(col: number, row: number): CellRange {\n    return getCellRange(col, row, this);\n  }\n  isCellRangeEqual(col: number, row: number, targetCol: number, targetRow: number): boolean {\n    const range1 = this.getCellRange(col, row);\n    const range2 = this.getCellRange(targetCol, targetRow);\n    return (\n      range1.start.col === range2.start.col &&\n      range1.end.col === range2.end.col &&\n      range1.start.row === range2.start.row &&\n      range1.end.row === range2.end.row\n    );\n  }\n  getRecordShowIndexByCell(col: number, row: number): number {\n    const skipRowCount = this.hasAggregationOnTopCount ? this.headerLevelCount + 1 : this.headerLevelCount;\n    if (this.transpose) {\n      if (col < skipRowCount) {\n        return -1;\n      }\n      return col - skipRowCount;\n    }\n\n    if (row < skipRowCount) {\n      return -1;\n    }\n    return row - skipRowCount;\n  }\n  getRecordStartRowByRecordIndex(index: number): number {\n    const skipRowCount = this.hasAggregationOnTopCount ? this.headerLevelCount + 1 : this.headerLevelCount;\n    return skipRowCount + index;\n  }\n  private _addHeaders(\n    row: number,\n    column: ColumnsDefine,\n    roots: number[],\n    hideColumnsSubHeader?: boolean\n  ): HeaderData[] {\n    const results: HeaderData[] = [];\n    const rowCells = this._newRow(row, hideColumnsSubHeader); // !hideColumnsSubHeader ? this._headerCellIds[row] || this._newRow(row) : [];\n    column.forEach((hd: ColumnDefine) => {\n      const col = this._columns.length;\n      const id = this.seqId++;\n      const cell: HeaderData = {\n        id,\n        title: hd.title ?? (hd as any).caption,\n        // captionIcon,\n        headerIcon: hd.headerIcon,\n        field: (hd as ColumnDefine).field,\n        // fieldFormat: (hd as ColumnDefine).fieldFormat,\n        style: hd.headerStyle,\n        headerType: hd.headerType ?? 'text',\n        dropDownMenu: hd.dropDownMenu,\n        define: hd,\n        // 展开/折叠状态\n        hierarchyState: (hd as HeaderData).hierarchyState,\n        columnWidthComputeMode: hd.columnWidthComputeMode\n        // iconPositionList:[]\n      };\n\n      results[id] = cell;\n      for (let r = row - 1; r >= 0; r--) {\n        this._headerCellIds[r] && (this._headerCellIds[r][col] = roots[r]);\n      }\n      if (!hideColumnsSubHeader) {\n        rowCells[col] = id;\n      } else if (this._headerCellIds[row - 1]) {\n        rowCells[col] = this._headerCellIds[row - 1][col];\n      }\n      // 当前节点是展开状态才需要添加子节点\n      const expand = !(hd as HeaderData).hierarchyState || (hd as HeaderData).hierarchyState === HierarchyState.expand;\n      if (!!hd.columns && !!expand) {\n        const isAllHided = hd.columns.every((c: any) => c.hide);\n        !isAllHided &&\n          this._addHeaders(\n            row + 1,\n            hd.columns,\n            [...roots, id],\n            hd.hideColumnsSubHeader || hideColumnsSubHeader\n          ).forEach(c => results.push(c));\n      } else {\n        const colDef = {\n          id: this.seqId++,\n          field: hd.field,\n          // fieldKey: colDef.fieldKey,\n          fieldFormat: hd.fieldFormat,\n          width: hd.width,\n          minWidth: hd.minWidth,\n          maxWidth: hd.maxWidth,\n          icon: hd.icon,\n          cellType: hd.cellType ?? (hd as any).columnType ?? 'text',\n          chartModule: 'chartModule' in hd ? hd.chartModule : null, // todo: 放到对应的column对象中\n          chartSpec: 'chartSpec' in hd ? hd.chartSpec : null, // todo: 放到对应的column对象中\n          sparklineSpec: 'sparklineSpec' in hd ? hd.sparklineSpec : DefaultSparklineSpec, // todo: 放到对应的column对象中\n          style: hd.style,\n          define: hd,\n          columnWidthComputeMode: hd.columnWidthComputeMode,\n          disableColumnResize: hd?.disableColumnResize,\n          aggregation: hd.aggregation, //getAggregationForColumn(hd, col, this._table),\n          isChildNode: row >= 1\n        };\n        this._columnsIncludeHided.push(colDef);\n        if (hd.hide !== true) {\n          this._columns.push(colDef);\n\n          for (let r = row + 1; r < this._headerCellIds.length; r++) {\n            this._headerCellIds[r][col] = id;\n          }\n        }\n      }\n    });\n    return results;\n  }\n\n  private _newRow(row: number, hideColumnsSubHeader = false): number[] {\n    //如果当前行已经有数组对象 将上一行的id内容补全到当前行上\n    if (this._headerCellIds[row]) {\n      const prev = this._headerCellIds[row - 1];\n      if (prev.length > this._headerCellIds[row].length) {\n        for (let col = this._headerCellIds[row].length; col < prev.length; col++) {\n          this._headerCellIds[row][col] = prev[col];\n        }\n      }\n      return this._headerCellIds[row];\n    }\n    // 隐藏子标题的情况 吐出一个新的数组\n    if (hideColumnsSubHeader) {\n      return [];\n    }\n    // 其他情况 不隐藏子标题 同步上一行的id\n    const newRow: number[] = (this._headerCellIds[row] = []);\n    if (!this._columns.length) {\n      return newRow;\n    }\n    const prev = this._headerCellIds[row - 1];\n    for (let col = 0; col < prev.length; col++) {\n      newRow[col] = prev[col];\n    }\n    return newRow;\n  }\n  getCellHeaderPaths(col: number, row: number): IListTableCellHeaderPaths {\n    if (this.isSeriesNumber(col, row)) {\n      return undefined;\n    }\n    let colPath: IListTableCellHeaderPaths['colHeaderPaths'] = [];\n    let rowPath: IListTableCellHeaderPaths['rowHeaderPaths'] = [];\n    if (!this.transpose) {\n      colPath = [\n        {\n          field: this._columns[col - this.leftRowSeriesNumberColumnCount].field\n        }\n      ];\n    } else {\n      rowPath = [\n        {\n          field: this._columns[row].field\n        }\n      ];\n    }\n    return {\n      colHeaderPaths: colPath,\n      rowHeaderPaths: rowPath,\n      cellLocation: this.getCellLocation(col, row)\n    };\n  }\n  private getParentCellId(col: number, row: number) {\n    if (row === 0) {\n      return undefined;\n    }\n    if (this.isColumnHeader(col, row)) {\n      return this.getCellId(col, row - 1);\n    } else if (this.isRowHeader(col, row)) {\n      if (this.isSeriesNumberInBody(col - 1, row)) {\n        return undefined;\n      }\n      return this.getCellId(col - 1, row);\n    }\n    return undefined;\n  }\n  /**\n   * 判断从source地址是否可以移动到target地址\n   * @param source\n   * @param target\n   * @returns boolean 是否可以移动\n   */\n  canMoveHeaderPosition(source: CellAddress, target: CellAddress): boolean {\n    if (this.isSeriesNumberInHeader(target.col, target.row) || this.isSeriesNumberInHeader(source.col, source.row)) {\n      return false;\n    } else if (\n      !this.transpose &&\n      this.isSeriesNumberInBody(target.col, target.row) &&\n      this.isSeriesNumberInBody(source.col, source.row)\n    ) {\n      // return true;\n      const sourceIndex = this.getRecordShowIndexByCell(0, source.row);\n      const targetIndex = this.getRecordShowIndexByCell(0, target.row);\n      const canMove = this._table.dataSource.canChangeOrder(sourceIndex, targetIndex);\n      return canMove;\n    } else if (\n      this.transpose &&\n      this.isSeriesNumberInBody(target.col, target.row) &&\n      this.isSeriesNumberInBody(source.col, source.row)\n    ) {\n      // 如果是子节点之间相互换位置  则匹配表头最后一级\n      if (\n        this.getBody(source.col + this.leftRowSeriesNumberColumnCount, source.row).isChildNode &&\n        this.getBody(target.col + this.leftRowSeriesNumberColumnCount, target.row).isChildNode\n      ) {\n        source.col = source.col + this.leftRowSeriesNumberColumnCount + this.rowHeaderLevelCount - 1;\n        target.col = target.col + this.leftRowSeriesNumberColumnCount + this.rowHeaderLevelCount - 1;\n      } else {\n        // 为适应下面的判断逻辑 将col加至表格第一级\n        source.col = source.col + this.leftRowSeriesNumberColumnCount;\n        target.col = target.col + this.leftRowSeriesNumberColumnCount;\n      }\n    }\n    if (source.col < 0 || source.row < 0 || target.col < 0 || target.row < 0) {\n      return false;\n    }\n    if (this._table.internalProps.frozenColDragHeaderMode === 'disabled') {\n      if (this._table.isFrozenColumn(target.col)) {\n        return false;\n      }\n    }\n\n    // 获取操作单元格的range范围\n    const sourceCellRange = this.getCellRange(source.col, source.row);\n    // 获取source和target对应sourceCellRange.start.row的headerId\n    if (this.isColumnHeader(source.col, source.row)) {\n      const sourceTopId = this.getParentCellId(source.col, sourceCellRange.start.row);\n      const targetTopId = this.getParentCellId(target.col, sourceCellRange.start.row);\n      return sourceTopId === targetTopId;\n    } else if (this.isRowHeader(source.col, source.row)) {\n      const sourceTopId = this.getParentCellId(sourceCellRange.start.col, source.row);\n      const targetTopId = this.getParentCellId(sourceCellRange.start.col, target.row);\n      return sourceTopId === targetTopId;\n    }\n    return false;\n  }\n  /**\n   * 拖拽换位置 从source地址换到target地址\n   * @param source\n   * @param target\n   * @returns\n   */\n  moveHeaderPosition(\n    source: CellAddress,\n    target: CellAddress\n  ): {\n    sourceIndex: number;\n    targetIndex: number;\n    sourceSize: number;\n    targetSize: number;\n    moveType: 'column' | 'row';\n  } {\n    // 判断从source地址是否可以移动到target地址\n    if (\n      (!this._table.options.dragOrder?.validateDragOrderOnEnd ||\n        this._table.options.dragOrder?.validateDragOrderOnEnd(source, target)) &&\n      this.canMoveHeaderPosition(source, target)\n    ) {\n      let sourceCellRange = this.getCellRange(source.col, source.row);\n      // 对移动列表头 行表头 分别处理\n      if (this.isColumnHeader(source.col, source.row)) {\n        // source单元格包含的列数\n        const sourceSize = sourceCellRange.end.col - sourceCellRange.start.col + 1;\n        // 插入目标地址的列index\n        let targetIndex;\n        const targetCellRange = this.getCellRange(target.col, sourceCellRange.start.row);\n        if (target.col >= source.col) {\n          targetIndex = targetCellRange.end.col - sourceSize + 1;\n        } else {\n          targetIndex = targetCellRange.start.col;\n        }\n        //如果操作列和目标地址col一样 则不执行其他逻辑\n        if (targetIndex === sourceCellRange.start.col) {\n          return null;\n        }\n        // 逐行将每一行的source id 移动到目标地址targetCol处\n        for (let row = 0; row < this._headerCellIds.length; row++) {\n          // 从header id的二维数组中取出需要操作的source ids\n          const sourceIds = this._headerCellIds[row].splice(\n            sourceCellRange.start.col - this.leftRowSeriesNumberColumnCount,\n            sourceSize\n          );\n          // 将source ids插入到目标地址targetCol处\n          // 把sourceIds变成一个适合splice的数组（包含splice前2个参数的数组） 以通过splice来插入sourceIds数组\n          sourceIds.unshift(targetIndex - this.leftRowSeriesNumberColumnCount, 0);\n          Array.prototype.splice.apply(this._headerCellIds[row], sourceIds);\n        }\n        //将_columns的列定义调整位置 同调整_headerCellIds逻辑\n        const sourceColumns = this._columns.splice(\n          sourceCellRange.start.col - this.leftRowSeriesNumberColumnCount,\n          sourceSize\n        );\n        sourceColumns.unshift((targetIndex - this.leftRowSeriesNumberColumnCount) as any, 0 as any);\n        Array.prototype.splice.apply(this._columns, sourceColumns);\n\n        // 对表头columnTree调整节点位置\n        this.columnTree.movePosition(\n          sourceCellRange.start.row,\n          sourceCellRange.start.col - this.leftRowSeriesNumberColumnCount,\n          targetIndex - this.leftRowSeriesNumberColumnCount\n        );\n        this.columnTree.reset(this.columnTree.tree.children);\n        this._cellRangeMap = new Map();\n        return {\n          sourceIndex: sourceCellRange.start.col,\n          targetIndex,\n          sourceSize,\n          targetSize: targetCellRange.end.col - targetCellRange.start.col + 1,\n          moveType: 'column'\n        };\n      } else if (\n        this.isRowHeader(source.col, source.row) ||\n        (this.isSeriesNumberInBody(source.col, source.row) && this.transpose)\n      ) {\n        if (this.isSeriesNumberInBody(source.col, source.row)) {\n          sourceCellRange = this.getCellRange(source.col + this.leftRowSeriesNumberColumnCount, source.row); // 把拖拽转移到拖拽表头节点\n        }\n        // source单元格包含的列数\n        const sourceSize = sourceCellRange.end.row - sourceCellRange.start.row + 1;\n        // 插入目标地址的列index\n        let targetIndex;\n        const targetCellRange = this.getCellRange(sourceCellRange.start.col, target.row);\n        if (target.row >= source.row) {\n          targetIndex = targetCellRange.end.row - sourceSize + 1;\n        } else {\n          targetIndex = targetCellRange.start.row;\n        }\n        //如果操作列和目标地址col一样 则不执行其他逻辑\n        if (targetIndex === sourceCellRange.start.row) {\n          return null;\n        }\n        // 逐行将每一行的source id 移动到目标地址targetCol处\n        for (let row = 0; row < this._headerCellIds.length; row++) {\n          // 从header id的二维数组中取出需要操作的source ids\n          const sourceIds = this._headerCellIds[row].splice(sourceCellRange.start.row, sourceSize);\n          // 将source ids插入到目标地址targetCol处\n          // 把sourceIds变成一个适合splice的数组（包含splice前2个参数的数组） 以通过splice来插入sourceIds数组\n          sourceIds.unshift(targetIndex, 0);\n          Array.prototype.splice.apply(this._headerCellIds[row], sourceIds);\n        }\n        //将_columns的列定义调整位置 同调整_headerCellIds逻辑\n        const sourceColumns = this._columns.splice(sourceCellRange.start.row, sourceSize);\n        sourceColumns.unshift(targetIndex as any, 0 as any);\n        Array.prototype.splice.apply(this._columns, sourceColumns);\n\n        // 对表头columnTree调整节点位置\n        this.columnTree.movePosition(\n          sourceCellRange.start.col - this.leftRowSeriesNumberColumnCount,\n          sourceCellRange.start.row,\n          targetIndex + (target.row > source.row ? sourceCellRange.end.row - sourceCellRange.start.row : 0)\n        );\n        this.columnTree.reset(this.columnTree.tree.children);\n        this._cellRangeMap = new Map();\n        return {\n          sourceIndex: sourceCellRange.start.row,\n          targetIndex,\n          sourceSize,\n          targetSize: targetCellRange.end.row - targetCellRange.start.row + 1,\n          moveType: 'row'\n        };\n      } else if (this.isSeriesNumberInBody(source.col, source.row)) {\n        return {\n          sourceIndex: source.row,\n          targetIndex: target.row,\n          sourceSize: 1,\n          targetSize: 1,\n          moveType: 'row'\n        };\n      }\n    }\n    return null;\n  }\n  /**\n   * 点击某个单元格的展开折叠按钮 改变该节点的状态 维度树重置\n   */\n  toggleHierarchyState(diffDataIndices: { add: number[]; remove: number[] }) {\n    // const addCellPositions: any[] = [];\n    // diffDataIndices.add.forEach(index => {\n    //   if (\n    //     this._table.frozenRowCount + index >= this._table.scenegraph.proxy.rowStart &&\n    //     this._table.frozenRowCount + index <=\n    //       Math.max(\n    //         this._table.scenegraph.proxy.rowEnd,\n    //         this._table.scenegraph.proxy.rowStart + this._table.scenegraph.proxy.rowLimit\n    //       )\n    //   ) {\n    //     addCellPositions.push({ col: 0, row: this._table.frozenRowCount + index });\n    //   }\n    // });\n    // const removeCellPositions: any[] = [];\n    // diffDataIndices.remove.forEach(index => {\n    //   if (\n    //     this._table.frozenRowCount + index >= this._table.scenegraph.proxy.rowStart &&\n    //     this._table.frozenRowCount + index <= this._table.scenegraph.proxy.rowEnd\n    //   ) {\n    //     removeCellPositions.push({ col: 0, row: this._table.frozenRowCount + index });\n    //   }\n    // });\n    const addCellPositions = diffDataIndices.add.map(index => {\n      return { col: 0, row: this._table.columnHeaderLevelCount + index };\n    });\n    const removeCellPositions = diffDataIndices.remove.map(index => {\n      return { col: 0, row: this._table.columnHeaderLevelCount + index };\n    });\n    return {\n      addCellPositions,\n      removeCellPositions\n    };\n  }\n  setChartInstance(_col: number, _row: number, chartInstance: any) {\n    const columnObj = this.transpose ? this._columns[_row] : this._columns[_col - this.leftRowSeriesNumberColumnCount];\n    if (typeof columnObj.chartSpec === 'function') {\n      return;\n    }\n    columnObj.chartInstance = chartInstance;\n  }\n\n  getChartInstance(_col: number, _row: number) {\n    const columnObj = this.transpose ? this._columns[_row] : this._columns[_col - this.leftRowSeriesNumberColumnCount];\n    return columnObj.chartInstance;\n  }\n  checkHasChart() {\n    return checkHasChart(this);\n  }\n\n  getAxisConfigInPivotChart(col: number, row: number): any {\n    return undefined;\n  }\n  isEmpty(col: number, row: number) {\n    return false;\n  }\n  isAxisCell(col: number, row: number) {\n    return false;\n  }\n  getChartAxes(col: number, row: number): any[] {\n    return [];\n  }\n  /** 共享chartSpec 非函数 */\n  isShareChartSpec(col: number, row: number): boolean {\n    const body = this.getBody(col, row);\n    const chartSpec = (body as ColumnData)?.chartSpec;\n    if (typeof chartSpec === 'function') {\n      return false;\n    }\n    return true;\n  }\n  /** 是否当chart没有数据时 图表单元格不绘制chart的任何内容 如网格线 */\n  isNoChartDataRenderNothing(col: number, row: number): boolean {\n    const body = this.getBody(col, row);\n    const noDataRenderNothing = ((body as ColumnData)?.define as ChartColumnDefine).noDataRenderNothing;\n    return noDataRenderNothing;\n  }\n  getChartSpec(col: number, row: number) {\n    return this.getRawChartSpec(col, row);\n  }\n  getRawChartSpec(col: number, row: number): any {\n    const body = this.getBody(col, row);\n    const chartSpec = (body as ColumnData)?.chartSpec;\n    if (typeof chartSpec === 'function') {\n      // 动态组织spec\n      const arg = {\n        col,\n        row,\n        dataValue: this._table.getCellOriginValue(col, row) || '',\n        value: this._table.getCellValue(col, row) || '',\n        rect: this._table.getCellRangeRelativeRect(this._table.getCellRange(col, row)),\n        table: this._table\n      };\n      return chartSpec(arg);\n    }\n    return chartSpec;\n  }\n  getChartDataId(col: number, row: number): any {\n    return getChartDataId(col, row, this);\n  }\n  release() {\n    const activeChartInstance = this._table._getActiveChartInstance();\n    activeChartInstance?.release();\n    this.columnObjects.forEach(indicatorObject => {\n      indicatorObject.chartInstance?.release();\n    });\n  }\n\n  clearCellRangeMap() {\n    this._cellRangeMap.clear();\n  }\n\n  updateColumnTitle(col: number, row: number, title: string) {\n    const define = this._table.internalProps.layoutMap.getHeader(col, row);\n    define.title = title;\n    define.define.title = title;\n  }\n\n  getColumnByField(field: string | number): {\n    col: number;\n    columnDefine: ColumnData;\n  }[] {\n    const result = this.columnObjects?.reduce((pre: { col: number; columnDefine: ColumnData }[], cur, index) => {\n      if (cur.field === field) {\n        pre.push({ col: index, columnDefine: cur });\n      }\n      return pre;\n    }, []);\n    return result;\n  }\n\n  getColumnByKey(key: string): {\n    col: number;\n    columnDefine: ColumnData;\n  } {\n    let col;\n    const result = this.columnObjects?.find((columnData: ColumnData, index) => {\n      if (columnData.define?.key === key) {\n        col = index + this.leftRowSeriesNumberColumnCount;\n        return true;\n      }\n      return false;\n    });\n    return {\n      columnDefine: result,\n      col\n    };\n  }\n\n  getColumnDefine(col: number, row: number) {\n    if (col >= 0) {\n      if (col < this.leftRowSeriesNumberColumnCount) {\n        return this.leftRowSeriesNumberColumn[col].define;\n      }\n      if (this.transpose) {\n        return this._columns[row].define;\n      }\n\n      return this._columns[col - this.leftRowSeriesNumberColumnCount].define;\n    }\n    return undefined;\n  }\n}\n"]}