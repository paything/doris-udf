{"version":3,"sources":["../src/layout/tree-helper.ts"],"names":[],"mappings":"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","file":"tree-helper.js","sourcesContent":["import { cloneDeep, isValid } from '@visactor/vutils';\nimport { NumberMap } from '../tools/NumberMap';\nimport { IndicatorDimensionKeyPlaceholder } from '../tools/global';\nimport type { Either } from '../tools/helper';\nimport type {\n  CellInfo,\n  ColumnIconOption,\n  FieldData,\n  HeaderData,\n  ICustomRender,\n  IDimension,\n  IDimensionInfo,\n  IHeaderTreeDefine,\n  IIndicator,\n  IRowDimension,\n  LayoutObjectId\n} from '../ts-types';\nimport { HierarchyState } from '../ts-types';\nimport type { PivotHeaderLayoutMap } from './pivot-header-layout';\nimport type { ILinkDimension } from '../ts-types/pivot-table/dimension/link-dimension';\nimport type { IImageDimension } from '../ts-types/pivot-table/dimension/image-dimension';\nimport type { BaseTableAPI } from '../ts-types/base-table';\n// import { sharedVar } from './pivot-header-layout';\n\ninterface ITreeLayoutBaseHeadNode {\n  id: number;\n  // dimensionKey: string;\n  // // title: string;\n  // indicatorKey?: string;\n  value: string;\n  children: ITreeLayoutHeadNode[] | undefined;\n  columns?: any; //兼容ListTable情况 simple-header-layout中增加了columnTree\n  //节点所在真正的level\n  level: number;\n  //计算节点跨占（+spanLevel）情况下的level\n  afterSpanLevel: number;\n  /** 节点跨占层数 如汇总节点跨几层维度 */\n  levelSpan: number;\n  startIndex: number;\n  size: number; //对应到colSpan或者rowSpan\n  // parsing?:  'img' | 'link' | 'video' | 'templateLink';\n  startInTotal: number;\n  // headerStyle:HeaderStyleOption| null;\n  customRender?: ICustomRender;\n\n  hierarchyState: HierarchyState;\n  headerIcon?: (string | ColumnIconOption)[] | ((args: CellInfo) => (string | ColumnIconOption)[]);\n}\n\ninterface ITreeLayoutDimensionHeadNode extends ITreeLayoutBaseHeadNode {\n  dimensionKey: string;\n  virtual?: boolean;\n}\ninterface ITreeLayoutIndicatorHeadNode extends ITreeLayoutBaseHeadNode {\n  indicatorKey: string;\n  hide?: boolean;\n}\nexport type ITreeLayoutHeadNode = Either<ITreeLayoutDimensionHeadNode, ITreeLayoutIndicatorHeadNode>;\nexport class DimensionTree {\n  sharedVar: { seqId: number };\n  // 每一个值对应的序号 结果缓存\n  // cache: {\n  //   [propName: string]: any;\n  // };\n  hasHideNode = false;\n  //树形展示 会将非叶子节点单独展示一行 所以size会增加非叶子节点的个数\n  sizeIncludeParent = false;\n  setExpandLevel: number;\n  hierarchyType: 'grid' | 'tree' | 'grid-tree';\n  tree: ITreeLayoutHeadNode = {\n    id: 0,\n    dimensionKey: '',\n    // title: '',\n    value: '',\n    children: [],\n    level: -1,\n    afterSpanLevel: -1,\n    levelSpan: 1,\n    startIndex: 0,\n    size: 0,\n    startInTotal: 0,\n    hierarchyState: undefined\n  };\n\n  totalLevel = 0;\n  expandedMaxLevel = 0;\n\n  // blockLevel: number = 0;\n\n  // blockStartIndexMap: Map<number, boolean> = new Map();\n  // blockEndIndexMap: Map<number, boolean> = new Map();\n  dimensionKeys: NumberMap<string> = new NumberMap<string>();\n  dimensionKeysIncludeVirtual: NumberMap<string> = new NumberMap<string>();\n  // dimensions: IDimension[] | undefined;//目前用不到这个\n  cache: Map<number, any> = new Map();\n  constructor(\n    tree: ITreeLayoutHeadNode[],\n    sharedVar: { seqId: number },\n    hierarchyType: 'grid' | 'tree' | 'grid-tree' = 'grid',\n    rowExpandLevel: number = undefined\n  ) {\n    this.sizeIncludeParent = rowExpandLevel !== null && rowExpandLevel !== undefined;\n    this.setExpandLevel = rowExpandLevel;\n    this.hierarchyType = hierarchyType;\n    this.sharedVar = sharedVar;\n    this.reset(tree);\n  }\n\n  reset(tree: ITreeLayoutHeadNode[]) {\n    this.totalLevel = 0;\n    this.expandedMaxLevel = 0;\n    this.hasHideNode = false;\n    // 清空缓存的计算\n    // this.cache = {};\n    // this.dimensions = dimensions;\n    this.cache.clear();\n    this.dimensionKeys = new NumberMap<string>();\n    this.dimensionKeysIncludeVirtual = new NumberMap<string>();\n    this.tree.children = tree as ITreeLayoutHeadNode[];\n    this.setTreeNode(this.tree, 0, this.tree);\n  }\n  setTreeNode(node: ITreeLayoutHeadNode, startIndex: number, parent: ITreeLayoutHeadNode): number {\n    node.startIndex = startIndex;\n\n    node.startInTotal = (parent.startInTotal ?? 0) + node.startIndex;\n    if (node.hide) {\n      this.hasHideNode = true;\n    }\n    // if (node.dimensionKey) {\n    //   !this.dimensionKeys.contain(node.dimensionKey) &&\n    //     this.dimensionKeys.put(node.level, node.dimensionKey);\n    //   if (!node.id) node.id = ++seqId;\n    // }\n    if (node.dimensionKey ?? node.indicatorKey) {\n      if (\n        !node.virtual &&\n        !this.dimensionKeys.contain(\n          (node as any).indicatorKey ? IndicatorDimensionKeyPlaceholder : (node as any).dimensionKey\n        )\n      ) {\n        this.dimensionKeys.put(\n          (node as any).level,\n          (node as any).indicatorKey ? IndicatorDimensionKeyPlaceholder : (node as any).dimensionKey\n        );\n      }\n      if (\n        !this.dimensionKeysIncludeVirtual.contain(\n          (node as any).indicatorKey ? IndicatorDimensionKeyPlaceholder : (node as any).dimensionKey\n        )\n      ) {\n        this.dimensionKeysIncludeVirtual.put(\n          (node as any).level,\n          (node as any).indicatorKey ? IndicatorDimensionKeyPlaceholder : (node as any).dimensionKey\n        );\n      }\n      if (!(node as any).id) {\n        (node as any).id = ++this.sharedVar.seqId;\n      }\n    }\n    let size = node.dimensionKey ? (this.sizeIncludeParent ? 1 : 0) : 0;\n    const children = node.children || node.columns;\n    //平铺展示 分析所有层级\n    if (this.hierarchyType === 'grid' || this.hierarchyType === null) {\n      if (children?.length >= 1) {\n        children.forEach((n: any) => {\n          n.level = (node.level ?? 0) + 1;\n          this.hierarchyType === 'grid' && (n.afterSpanLevel = (node.afterSpanLevel ?? 0) + (node.levelSpan ?? 1));\n          this.totalLevel = Math.max(this.totalLevel, n.level + 1);\n          size += this.setTreeNode(n, size, node);\n        });\n      } else {\n        node.level === -1 ? (size = 0) : (size = 1);\n        // re.totalLevel = Math.max(re.totalLevel, (node.level ?? -1) + 1);\n      }\n    } else if (node.hierarchyState === HierarchyState.expand && children?.length >= 1) {\n      //树形展示 有子节点 且下一层需要展开\n      children.forEach((n: any) => {\n        n.level = (node.level ?? 0) + 1;\n        // n.afterSpanLevel = (node.afterSpanLevel ?? 0) + (node.levelSpan ?? 1);\n        this.totalLevel = Math.max(this.totalLevel, n.level + 1);\n        this.expandedMaxLevel = Math.max(this.expandedMaxLevel, n.level + 1);\n        size += this.setTreeNode(n, size, node);\n      });\n    } else if (node.hierarchyState === HierarchyState.collapse && children?.length >= 1) {\n      //树形展示 有子节点 且下一层不需要展开\n      children.forEach((n: any) => {\n        n.level = (node.level ?? 0) + 1;\n        // n.afterSpanLevel = (node.afterSpanLevel ?? 0) + (node.levelSpan ?? 1);\n        this.totalLevel = Math.max(this.totalLevel, n.level + 1);\n        this.setTreeNode(n, size, node);\n      });\n    } else if (\n      !node.hierarchyState &&\n      node.level + 1 < this.setExpandLevel &&\n      (children?.length >= 1 || children === true)\n    ) {\n      //树形展示 有子节点 且下一层需要展开\n      if (!(children[0]?.indicatorKey && this.hierarchyType === 'grid-tree')) {\n        //平铺情况 指标已经是最后一层且已经显示了 不需要设置图标昨天\n        node.hierarchyState = HierarchyState.expand;\n      }\n      children?.length >= 1 &&\n        children.forEach((n: any) => {\n          n.level = (node.level ?? 0) + 1;\n          // n.afterSpanLevel = (node.afterSpanLevel ?? 0) + (node.levelSpan ?? 1);\n          this.totalLevel = Math.max(this.totalLevel, n.level + 1);\n          this.expandedMaxLevel = Math.max(this.expandedMaxLevel, n.level + 1);\n          size += this.setTreeNode(n, size, node);\n        });\n    } else if (children?.length >= 1 || children === true) {\n      //树形展示 有子节点 且下一层不需要展开\n\n      if (!(children[0]?.indicatorKey && this.hierarchyType === 'grid-tree')) {\n        //平铺情况 指标已经是最后一层且已经显示了 不需要设置图标昨天\n        node.hierarchyState = HierarchyState.collapse;\n      }\n      children?.length >= 1 &&\n        children.forEach((n: any) => {\n          n.level = (node.level ?? 0) + 1;\n          // n.afterSpanLevel = (node.afterSpanLevel ?? 0) + (node.levelSpan ?? 1);\n          this.totalLevel = Math.max(this.totalLevel, n.level + 1);\n          this.setTreeNode(n, size, node);\n        });\n    } else {\n      //树形展示 无children子节点。但不能确定是最后一层的叶子节点 totalLevel还不能确定是计算完整棵树的整体深度\n      node.hierarchyState = HierarchyState.none;\n      node.level === -1 ? (size = 0) : (size = 1);\n    }\n\n    node.size = size;\n    // startInTotal = parent.startIndex + prevStartIndex\n    return size;\n  }\n  getTreePath(index: number, maxDeep = 30): Array<ITreeLayoutHeadNode> {\n    const path: any[] = [];\n    this.searchPath(index, this.tree, path, maxDeep);\n    path.shift();\n    return path;\n  }\n\n  // 用pivot-header-layout中的getTreePathByCellIds 代替\n  // getTreePathByCellIds(ids: LayoutObjectId[]): Array<ITreeLayoutHeadNode> {\n  //   const path: any[] = [];\n  //   let nodes = this.tree.children;\n  //   for (let i = 0; i < ids.length; i++) {\n  //     const id = ids[i];\n  //     if (i > 0 && id === ids[i - 1]) {\n  //       continue;\n  //     }\n  //     const pathNode = this.findNodeById(nodes, id);\n  //     if (pathNode) {\n  //       path.push(pathNode);\n  //       nodes = pathNode.children;\n  //     } else {\n  //       break;\n  //     }\n  //   }\n  //   // path.shift();\n  //   return path;\n  // }\n  findNodeById(nodes: ITreeLayoutHeadNode[], id: LayoutObjectId) {\n    return nodes.find(node => {\n      return node.id === id;\n    });\n  }\n  searchPath(index: number, node: ITreeLayoutHeadNode, path: Array<ITreeLayoutHeadNode>, maxDeep: number) {\n    if (!node) {\n      return;\n    }\n    if (index < node.startIndex || index >= node.startIndex + node.size) {\n      return;\n    }\n    path.push(node);\n    if (!node.children || node.children.length === 0 || node.level >= maxDeep) {\n      return;\n    }\n\n    // const cIndex = index - node.startIndex;\n    // for (let i = 0; i < node.children.length; i++) {\n    //   const element = node.children[i];\n    //   if (cIndex >= element.startIndex && cIndex < element.startIndex + element.size) {\n    //     this.searchPath(cIndex, element, path, maxDeep);\n    //     break;\n    //   }\n    // }\n\n    // use dichotomy to optimize search performance\n    const cIndex = index - node.startIndex;\n\n    if (this.cache.has(node.level + 1)) {\n      const cacheNode = this.cache.get(node.level + 1);\n      if (cIndex >= cacheNode.startIndex && cIndex < cacheNode.startIndex + cacheNode.size) {\n        this.searchPath(cIndex, cacheNode, path, maxDeep);\n        return;\n      }\n    }\n\n    let left = 0;\n    let right = node.children.length - 1;\n\n    while (left <= right) {\n      const middle = Math.floor((left + right) / 2);\n      const element = node.children[middle];\n\n      if (cIndex >= element.startIndex && cIndex < element.startIndex + element.size) {\n        this.cache.set(element.level, element);\n        const deleteLevels: number[] = [];\n        this.cache.forEach((node, key) => {\n          if (key > element.level) {\n            deleteLevels.push(key);\n          }\n        });\n        deleteLevels.forEach(key => {\n          this.cache.delete(key);\n        });\n        this.searchPath(cIndex, element, path, maxDeep);\n        break;\n      } else if (cIndex < element.startIndex) {\n        right = middle - 1;\n      } else {\n        left = middle + 1;\n      }\n    }\n    return;\n  }\n  /**\n   * 将该树中 层级为level 的sourceIndex处的节点移动到targetIndex位置\n   * @param level\n   * @param sourceIndex\n   * @param targetIndex\n   */\n  movePosition(level: number, sourceIndex: number, targetIndex: number) {\n    // let sourceNode: IPivotLayoutHeadNode;\n    let parNode: ITreeLayoutHeadNode;\n    let sourceSubIndex: number;\n    let targetSubIndex: number;\n    /**\n     * 对parNode的子节点第subIndex处的node节点 进行判断是否为sourceIndex或者targetIndex\n     * 如果是 则记录下subIndex 以对parNode中个节点位置进行移位\n     * @param node\n     * @param subIndex\n     * @returns\n     */\n    const findTargetNode = (node: ITreeLayoutHeadNode, subIndex: number) => {\n      if (sourceSubIndex !== undefined && targetSubIndex !== undefined) {\n        return;\n      }\n      if (node.level === level) {\n        if (node.startInTotal === sourceIndex) {\n          // sourceNode = node;\n          sourceSubIndex = subIndex;\n        }\n        // if (node.startInTotal === targetIndex) targetSubIndex = subIndex;\n        // 判断targetIndex是否在node的范围内 将当前node的subIndex记为targetSubIndex\n        if (node.startInTotal <= targetIndex && targetIndex <= node.startInTotal + node.size - 1) {\n          targetSubIndex = subIndex;\n        }\n      }\n      const children = node.children || node.columns;\n      if (children && node.level < level) {\n        parNode = node;\n        for (let i = 0; i < children.length; i++) {\n          if (\n            (sourceIndex >= children[i].startInTotal && sourceIndex <= children[i].startInTotal + children[i].size) ||\n            (targetIndex >= children[i].startInTotal && targetIndex <= children[i].startInTotal + children[i].size)\n          ) {\n            findTargetNode(children[i], i);\n          }\n        }\n      }\n    };\n    findTargetNode(this.tree, 0);\n\n    //对parNode子节点位置进行移位【根据sourceSubIndex和targetSubIndex】\n    const children = parNode.children || parNode.columns;\n    const sourceColumns = children.splice(sourceSubIndex, 1);\n    sourceColumns.unshift(targetSubIndex as any, 0 as any);\n    Array.prototype.splice.apply(children, sourceColumns);\n  }\n  /** 获取纯净树结构 没有level size index这些属性 */\n  getCopiedTree() {\n    const children = cloneDeep(this.tree.children);\n    clearNode(children);\n    return children;\n  }\n}\n\n//#region 为方法getLayoutRowTree提供的类型和工具方法\nexport type LayouTreeNode = {\n  dimensionKey?: string;\n  indicatorKey?: string;\n  value: string;\n  hierarchyState: HierarchyState;\n  children?: LayouTreeNode[];\n};\n\nexport function generateLayoutTree(tree: LayouTreeNode[], children: ITreeLayoutHeadNode[]) {\n  children?.forEach((node: ITreeLayoutHeadNode) => {\n    const diemnsonNode: {\n      dimensionKey?: string;\n      indicatorKey?: string;\n      value: string;\n      virtual?: boolean;\n      hierarchyState: HierarchyState;\n      children: ITreeLayoutHeadNode[];\n      levelSpan: number;\n    } = {\n      dimensionKey: node.dimensionKey,\n      indicatorKey: node.indicatorKey,\n      value: node.value,\n      hierarchyState: node.hierarchyState,\n      children: undefined,\n      virtual: node.virtual ?? false,\n      levelSpan: node.levelSpan ?? 1\n    };\n    tree.push(diemnsonNode);\n    if (node.children) {\n      diemnsonNode.children = [];\n      generateLayoutTree(diemnsonNode.children, node.children);\n    }\n  });\n}\n//#endregion\n\n//#region   为方法getLayoutRowTreeCount提的工具方法\nexport function countLayoutTree(children: { children?: any }[], countParentNode: boolean) {\n  let count = 0;\n  children?.forEach((node: ITreeLayoutHeadNode) => {\n    if (countParentNode) {\n      count++;\n    } else {\n      if (!node.children || node.children.length === 0) {\n        count++;\n      }\n    }\n    if (node.children) {\n      count += countLayoutTree(node.children, countParentNode);\n    }\n  });\n  return count;\n}\n//#endregion\n\nexport function dealHeader(\n  hd: ITreeLayoutHeadNode,\n  _headerCellIds: number[][],\n  results: HeaderData[],\n  roots: number[],\n  row: number,\n  layoutMap: PivotHeaderLayoutMap\n  // totalLevel: number,\n  // indicatorKeys: string[]\n) {\n  // const col = this._columns.length;\n  const id = hd.id;\n  const dimensionInfo: IDimension =\n    (layoutMap.rowsDefine?.find(dimension =>\n      typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n    ) as IDimension) ??\n    (layoutMap.columnsDefine?.find(dimension =>\n      typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n    ) as IDimension);\n  const indicatorInfo = layoutMap.indicatorsDefine?.find(indicator => {\n    if (typeof indicator === 'string') {\n      return false;\n    }\n    if (hd.indicatorKey) {\n      return indicator.indicatorKey === hd.indicatorKey;\n    }\n    return indicator.title === hd.value && !hd.dimensionKey;\n  }) as IIndicator;\n  const cell: HeaderData = {\n    id,\n    title: hd.value ?? indicatorInfo?.title,\n    field: hd.dimensionKey,\n    style:\n      typeof (indicatorInfo ?? dimensionInfo)?.headerStyle === 'function'\n        ? (indicatorInfo ?? dimensionInfo)?.headerStyle\n        : Object.assign({}, (indicatorInfo ?? dimensionInfo)?.headerStyle),\n    headerType: indicatorInfo?.headerType ?? dimensionInfo?.headerType ?? 'text',\n    headerIcon: indicatorInfo?.headerIcon ?? dimensionInfo?.headerIcon,\n    // define: <any>hd,\n    define: Object.assign({}, <any>hd, indicatorInfo ?? Object.assign({}, dimensionInfo, { sort: undefined })),\n    fieldFormat: indicatorInfo?.headerFormat ?? dimensionInfo?.headerFormat,\n    // iconPositionList:[]\n    dropDownMenu: indicatorInfo?.dropDownMenu ?? dimensionInfo?.dropDownMenu,\n    pivotInfo: {\n      value: hd.value,\n      dimensionKey: hd.dimensionKey,\n      isPivotCorner: false\n      // customInfo: dimensionInfo?.customInfo\n    },\n    width: (dimensionInfo as IRowDimension)?.width,\n    minWidth: (dimensionInfo as IRowDimension)?.minWidth,\n    maxWidth: (dimensionInfo as IRowDimension)?.maxWidth,\n    showSort: indicatorInfo?.showSort ?? dimensionInfo?.showSort,\n    sort: indicatorInfo?.sort,\n    description: dimensionInfo?.description\n  };\n\n  if (indicatorInfo) {\n    //收集indicatorDimensionKey  提到了构造函数中\n    // this.indicatorDimensionKey = dimensionInfo.dimensionKey;\n    if (indicatorInfo.customRender) {\n      hd.customRender = indicatorInfo.customRender;\n    }\n    if (!isValid(layoutMap._indicators?.find(indicator => indicator.indicatorKey === indicatorInfo.indicatorKey))) {\n      layoutMap._indicators?.push({\n        id: ++layoutMap.sharedVar.seqId,\n        indicatorKey: indicatorInfo.indicatorKey,\n        field: indicatorInfo.indicatorKey,\n        fieldFormat: indicatorInfo?.format,\n        cellType: indicatorInfo?.cellType ?? (indicatorInfo as any)?.columnType ?? 'text',\n        chartModule: 'chartModule' in indicatorInfo ? indicatorInfo.chartModule : null,\n        chartSpec: 'chartSpec' in indicatorInfo ? indicatorInfo.chartSpec : null,\n        noDataRenderNothing: 'noDataRenderNothing' in indicatorInfo ? indicatorInfo.noDataRenderNothing : false,\n        sparklineSpec: 'sparklineSpec' in indicatorInfo ? indicatorInfo.sparklineSpec : null,\n        style: indicatorInfo?.style,\n        icon: indicatorInfo?.icon,\n        define: Object.assign({}, <any>hd, indicatorInfo, {\n          dragHeader: dimensionInfo?.dragHeader\n        }),\n        width: indicatorInfo?.width,\n        minWidth: indicatorInfo?.minWidth,\n        maxWidth: indicatorInfo?.maxWidth,\n        disableColumnResize: indicatorInfo?.disableColumnResize\n      });\n    }\n  } else if (hd.indicatorKey) {\n    //兼容当某个指标没有设置在dimension.indicators中\n    if (!isValid(layoutMap._indicators?.find(indicator => indicator.indicatorKey === hd.indicatorKey))) {\n      layoutMap._indicators?.push({\n        id: ++layoutMap.sharedVar.seqId,\n        indicatorKey: hd.indicatorKey,\n        field: hd.indicatorKey,\n        cellType: 'text',\n        define: Object.assign({}, <any>hd)\n      });\n    }\n  }\n  // if (dimensionInfo.indicators) {\n  //   layoutMap.hideIndicatorName = dimensionInfo.hideIndicatorName ?? false;\n  //   layoutMap.indicatorsAsCol = dimensionInfo.indicatorsAsCol ?? true;\n  // }\n  results[id] = cell;\n  layoutMap._headerObjects[id] = cell;\n  // //这个if判断处理上层维度和指标之间跨级的情况。即表头可能总共有5层，但是有的节点从跟到指标只有三级，那么合并单元格之前是指标单元格跨了三个单元格，现在处理成最后一个维度单元格跨三个单元格\n  // if (\n  //   ((hd as any).levelSpan ?? 0) <= 1 &&\n  //   row < totalLevel - 1 &&\n  //   hd.indicatorKey &&\n  //   indicatorKeys.includes(hd.indicatorKey) &&\n  //   (hd.children?.length ?? 0) === 0\n  // ) {\n  //   const newRoots = [...roots];\n  //   const lastId = newRoots[row - 1] ?? id;\n  //   for (; row < totalLevel - 1; row++) {\n  //     if (!_headerCellIds[row]) {\n  //       _headerCellIds[row] = [];\n  //     }\n  //     _headerCellIds[row][layoutMap.colIndex] = lastId;\n  //     newRoots[row] = lastId;\n  //   }\n  //   for (let r = row - 1; r >= 0; r--) {\n  //     _headerCellIds[r][layoutMap.colIndex] = newRoots[r];\n  //   }\n  //   if (!_headerCellIds[row]) {\n  //     _headerCellIds[row] = [];\n  //   }\n  // } else {\n  for (let r = row - 1; r >= 0; r--) {\n    _headerCellIds[r][layoutMap.colIndex] = roots[r];\n  }\n  // }\n  _headerCellIds[row][layoutMap.colIndex] = id;\n\n  // 处理汇总小计跨维度层级的情况\n  if ((hd as any).levelSpan > 1) {\n    for (let i = 1; i < (hd as any).levelSpan; i++) {\n      if (!_headerCellIds[row + i]) {\n        _headerCellIds[row + i] = [];\n        // 当行前几个没有赋值的id 赋值\n        for (let col = 0; col < layoutMap.colIndex; col++) {\n          _headerCellIds[row + i][col] = _headerCellIds[row][col];\n        }\n      }\n      _headerCellIds[row + i][layoutMap.colIndex] = id;\n    }\n  }\n\n  if ((hd as ITreeLayoutHeadNode).children?.length >= 1) {\n    layoutMap._addHeaders(\n      _headerCellIds,\n      row + ((hd as any).levelSpan ?? 1),\n      (hd as ITreeLayoutHeadNode).children ?? [],\n      [...roots, ...Array((hd as any).levelSpan ?? 1).fill(id)],\n      results\n      // totalLevel,\n      // indicatorKeys\n    );\n    // .forEach(c => results.push(c));\n  } else {\n    // columns.push([\"\"])//代码一个路径\n    for (let r = row + 1; r < _headerCellIds.length; r++) {\n      _headerCellIds[r][layoutMap.colIndex] = id;\n\n      // if ((hd as any).levelSpan > 1) {\n      //   for (let i = 1; i < (hd as any).levelSpan; i++) {\n      //     _headerCellIds[r + i][layoutMap.colIndex] = id;\n      //   }\n      // }\n    }\n    layoutMap.colIndex++;\n  }\n}\nexport function dealHeaderForGridTreeMode(\n  hd: ITreeLayoutHeadNode,\n  _headerCellIds: number[][],\n  results: HeaderData[],\n  roots: number[],\n  row: number,\n  totalLevel: number,\n  expandedMaxLevel: number,\n  /** 其子节点是否都进行展示 */\n  show: boolean,\n  dimensions: (IDimension | string)[],\n  isRowTree: boolean,\n  indicatorsAsCol: boolean,\n  layoutMap: PivotHeaderLayoutMap\n  // totalLevel: number,\n  // indicatorKeys: string[]\n) {\n  // const col = this._columns.length;\n  const id = hd.id;\n  const dimensionInfo: IDimension =\n    (layoutMap.rowsDefine?.find(dimension =>\n      typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n    ) as IDimension) ??\n    (layoutMap.columnsDefine?.find(dimension =>\n      typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n    ) as IDimension);\n  const indicatorInfo = layoutMap.indicatorsDefine?.find(indicator => {\n    if (typeof indicator === 'string') {\n      return false;\n    }\n    if (hd.indicatorKey) {\n      return indicator.indicatorKey === hd.indicatorKey;\n    }\n    return indicator.title === hd.value && !hd.dimensionKey;\n  }) as IIndicator;\n  const cell: HeaderData = {\n    id,\n    title: hd.value ?? indicatorInfo?.title,\n    field: hd.dimensionKey,\n    style:\n      typeof (indicatorInfo ?? dimensionInfo)?.headerStyle === 'function'\n        ? (indicatorInfo ?? dimensionInfo)?.headerStyle\n        : Object.assign({}, (indicatorInfo ?? dimensionInfo)?.headerStyle),\n    headerType: indicatorInfo?.headerType ?? dimensionInfo?.headerType ?? 'text',\n    headerIcon: indicatorInfo?.headerIcon ?? dimensionInfo?.headerIcon,\n    // define: <any>hd,\n    define: Object.assign(<any>hd, {\n      linkJump: ((indicatorInfo ?? dimensionInfo) as ILinkDimension)?.linkJump,\n      linkDetect: ((indicatorInfo ?? dimensionInfo) as ILinkDimension)?.linkDetect,\n      templateLink: ((indicatorInfo ?? dimensionInfo) as ILinkDimension)?.templateLink,\n\n      // image相关 to be fixed\n      keepAspectRatio: ((indicatorInfo ?? dimensionInfo) as IImageDimension)?.keepAspectRatio ?? false,\n      imageAutoSizing: ((indicatorInfo ?? dimensionInfo) as IImageDimension)?.imageAutoSizing,\n\n      headerCustomRender: (indicatorInfo ?? dimensionInfo)?.headerCustomRender,\n      headerCustomLayout: (indicatorInfo ?? dimensionInfo)?.headerCustomLayout,\n      dragHeader: dimensionInfo?.dragHeader,\n      disableHeaderHover: !!(indicatorInfo ?? dimensionInfo)?.disableHeaderHover,\n      disableHeaderSelect: !!(indicatorInfo ?? dimensionInfo)?.disableHeaderSelect,\n      showSort: indicatorInfo?.showSort ?? dimensionInfo?.showSort,\n      hide: indicatorInfo?.hide\n    }), //这里不能新建对象，要用hd保持引用关系\n    fieldFormat: indicatorInfo?.headerFormat ?? dimensionInfo?.headerFormat,\n    // iconPositionList:[]\n    dropDownMenu: indicatorInfo?.dropDownMenu ?? dimensionInfo?.dropDownMenu,\n    pivotInfo: {\n      value: hd.value,\n      dimensionKey: hd.dimensionKey,\n      isPivotCorner: false\n      // customInfo: dimensionInfo?.customInfo\n    },\n    hierarchyLevel: hd.level,\n    dimensionTotalLevel: totalLevel,\n    hierarchyState: hd.hierarchyState,\n    width: (dimensionInfo as IRowDimension)?.width,\n    minWidth: (dimensionInfo as IRowDimension)?.minWidth,\n    maxWidth: (dimensionInfo as IRowDimension)?.maxWidth,\n    showSort: indicatorInfo?.showSort ?? dimensionInfo?.showSort,\n    sort: indicatorInfo?.sort,\n    description: dimensionInfo?.description,\n    parentCellId: roots[roots.length - 1]\n  };\n\n  if (indicatorInfo) {\n    //收集indicatorDimensionKey  提到了构造函数中\n    // this.indicatorDimensionKey = dimensionInfo.dimensionKey;\n    if (indicatorInfo.customRender) {\n      hd.customRender = indicatorInfo.customRender;\n    }\n    if (!isValid(layoutMap._indicators?.find(indicator => indicator.indicatorKey === indicatorInfo.indicatorKey))) {\n      layoutMap._indicators?.push({\n        id: ++layoutMap.sharedVar.seqId,\n        indicatorKey: indicatorInfo.indicatorKey,\n        field: indicatorInfo.indicatorKey,\n        fieldFormat: indicatorInfo?.format,\n        cellType: indicatorInfo?.cellType ?? (indicatorInfo as any)?.columnType ?? 'text',\n        chartModule: 'chartModule' in indicatorInfo ? indicatorInfo.chartModule : null,\n        chartSpec: 'chartSpec' in indicatorInfo ? indicatorInfo.chartSpec : null,\n        noDataRenderNothing: 'noDataRenderNothing' in indicatorInfo ? indicatorInfo.noDataRenderNothing : false,\n        sparklineSpec: 'sparklineSpec' in indicatorInfo ? indicatorInfo.sparklineSpec : null,\n        style: indicatorInfo?.style,\n        icon: indicatorInfo?.icon,\n        define: Object.assign({}, <any>hd, indicatorInfo, {\n          dragHeader: dimensionInfo?.dragHeader\n        }),\n        width: indicatorInfo?.width,\n        minWidth: indicatorInfo?.minWidth,\n        maxWidth: indicatorInfo?.maxWidth,\n        disableColumnResize: indicatorInfo?.disableColumnResize\n      });\n    }\n  } else if (hd.indicatorKey) {\n    //兼容当某个指标没有设置在dimension.indicators中\n    if (!isValid(layoutMap._indicators?.find(indicator => indicator.indicatorKey === hd.indicatorKey))) {\n      layoutMap._indicators?.push({\n        id: ++layoutMap.sharedVar.seqId,\n        indicatorKey: hd.indicatorKey,\n        field: hd.indicatorKey,\n        cellType: 'text',\n        define: Object.assign({}, <any>hd)\n      });\n    }\n  }\n\n  results[id] = cell;\n  layoutMap._headerObjects[id] = cell;\n\n  for (let r = row - 1; r >= 0; r--) {\n    _headerCellIds[r][layoutMap.colIndex] = roots[r];\n  }\n  // }\n  _headerCellIds[row][layoutMap.colIndex] = id;\n\n  // 处理汇总小计跨维度层级的情况\n  const span = Math.min(\n    (isRowTree ? indicatorsAsCol : !indicatorsAsCol) ? expandedMaxLevel : expandedMaxLevel - 1,\n    (hd as any).levelSpan ?? 1000\n  );\n  if (span > 0) {\n    for (let r = row + 1; r < span; r++) {\n      if (!_headerCellIds[r]) {\n        _headerCellIds[r] = [];\n        // 当行前几个没有赋值的id 赋值\n        for (let col = 0; col < layoutMap.colIndex; col++) {\n          _headerCellIds[r][col] = _headerCellIds[row][col];\n        }\n      }\n      _headerCellIds[r][layoutMap.colIndex] = id;\n    }\n  }\n\n  if ((hd.hierarchyState === HierarchyState.expand && (hd as ITreeLayoutHeadNode)).children?.length >= 1) {\n    layoutMap._addHeadersForGridTreeMode(\n      _headerCellIds,\n      row + ((hd as any).levelSpan ?? 1),\n      (hd as ITreeLayoutHeadNode).children ?? [],\n      [...roots, ...Array((hd as any).levelSpan ?? 1).fill(id)],\n      totalLevel,\n      expandedMaxLevel,\n      show && hd.hierarchyState === HierarchyState.expand, //当前节点show即显示状态 且当前节点状态为展开 则传给子节点为show：true\n      dimensions,\n      results,\n      isRowTree\n      // totalLevel,\n      // indicatorKeys\n    );\n    // .forEach(c => results.push(c));\n  } else {\n    // columns.push([\"\"])//代码一个路径\n    const needSupplementLength = (isRowTree ? indicatorsAsCol : !indicatorsAsCol)\n      ? expandedMaxLevel\n      : expandedMaxLevel - 1;\n    for (let r = row + 1; r < needSupplementLength; r++) {\n      if (!_headerCellIds[r]) {\n        _headerCellIds[r] = [];\n      }\n      _headerCellIds[r][layoutMap.colIndex] = id;\n    }\n\n    // 指标在表头的情况下 就算是折叠状态也需要显示最后的指标节点\n    if (\n      row <= needSupplementLength - 1 &&\n      ((isRowTree && indicatorsAsCol === false) || (!isRowTree && indicatorsAsCol === true))\n    ) {\n      let lastIndidcatorChildren = hd;\n      const levelSpan = needSupplementLength - row;\n      // 为找到最后的指标节点\n      while (lastIndidcatorChildren) {\n        if (lastIndidcatorChildren.children?.[0].indicatorKey) {\n          break;\n        }\n        // levelSpan++;\n        lastIndidcatorChildren = lastIndidcatorChildren.children[0];\n      }\n\n      layoutMap._addHeadersForGridTreeMode(\n        _headerCellIds,\n        expandedMaxLevel - 1,\n        (lastIndidcatorChildren as ITreeLayoutHeadNode).children ?? [],\n        [...roots, ...Array(Math.max(levelSpan, (hd as any).levelSpan ?? 1)).fill(id)],\n        totalLevel,\n        expandedMaxLevel,\n        true, //当前节点show即显示状态 且当前节点状态为展开 则传给子节点为show：true\n        dimensions,\n        results,\n        isRowTree\n        // totalLevel,\n        // indicatorKeys\n      );\n    } else {\n      layoutMap.colIndex++;\n    }\n  }\n}\nexport function dealHeaderForTreeMode(\n  hd: ITreeLayoutHeadNode,\n  _headerCellIds: number[][],\n  results: HeaderData[],\n  roots: number[],\n  row: number,\n  totalLevel: number,\n  /** 其子节点是否都进行展示 */\n  show: boolean,\n  dimensions: (IDimension | string)[],\n  layoutMap: PivotHeaderLayoutMap\n) {\n  const id = hd.id;\n  // const dimensionInfo: IDimension =\n  //   (this.rowsDefine?.find(dimension =>\n  //     typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n  //   ) as IDimension) ??\n  //   (this.columnsDefine?.find(dimension =>\n  //     typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n  //   ) as IDimension);\n  const dimensionInfo: IDimension = dimensions.find(dimension =>\n    typeof dimension === 'string' ? false : dimension.dimensionKey === hd.dimensionKey\n  ) as IDimension;\n  const indicatorInfo = layoutMap.indicatorsDefine?.find(indicator => {\n    if (typeof indicator === 'string') {\n      return false;\n    }\n    if (hd.indicatorKey) {\n      return indicator.indicatorKey === hd.indicatorKey;\n    }\n    return indicator.title === hd.value;\n  }) as IIndicator;\n  const cell: HeaderData = {\n    id,\n    title: hd.value ?? indicatorInfo.title,\n    field: hd.dimensionKey as FieldData,\n    //如果不是整棵树的叶子节点，都靠左显示\n    style:\n      hd.level + 1 === totalLevel || typeof (indicatorInfo ?? dimensionInfo)?.headerStyle === 'function'\n        ? (indicatorInfo ?? dimensionInfo)?.headerStyle\n        : Object.assign({}, (indicatorInfo ?? dimensionInfo)?.headerStyle, { textAlign: 'left' }),\n    headerType: indicatorInfo?.headerType ?? dimensionInfo?.headerType ?? 'text',\n    headerIcon: indicatorInfo?.headerIcon ?? dimensionInfo?.headerIcon,\n    define: Object.assign(<any>hd, {\n      linkJump: ((indicatorInfo ?? dimensionInfo) as ILinkDimension)?.linkJump,\n      linkDetect: ((indicatorInfo ?? dimensionInfo) as ILinkDimension)?.linkDetect,\n      templateLink: ((indicatorInfo ?? dimensionInfo) as ILinkDimension)?.templateLink,\n\n      // image相关 to be fixed\n      keepAspectRatio: ((indicatorInfo ?? dimensionInfo) as IImageDimension)?.keepAspectRatio ?? false,\n      imageAutoSizing: ((indicatorInfo ?? dimensionInfo) as IImageDimension)?.imageAutoSizing,\n\n      headerCustomRender: (indicatorInfo ?? dimensionInfo)?.headerCustomRender,\n      headerCustomLayout: (indicatorInfo ?? dimensionInfo)?.headerCustomLayout,\n      dragHeader: dimensionInfo?.dragHeader,\n      disableHeaderHover: !!(indicatorInfo ?? dimensionInfo)?.disableHeaderHover,\n      disableHeaderSelect: !!(indicatorInfo ?? dimensionInfo)?.disableHeaderSelect,\n      showSort: indicatorInfo?.showSort ?? dimensionInfo?.showSort,\n      hide: indicatorInfo?.hide\n    }), //这里不能新建对象，要用hd保持引用关系\n    fieldFormat: indicatorInfo?.headerFormat ?? dimensionInfo?.headerFormat,\n    // iconPositionList:[]\n    dropDownMenu: indicatorInfo?.dropDownMenu ?? dimensionInfo?.dropDownMenu,\n    pivotInfo: {\n      value: hd.value,\n      dimensionKey: hd.dimensionKey as string,\n      isPivotCorner: false\n      // customInfo: dimensionInfo?.customInfo\n    },\n    hierarchyLevel: hd.level,\n    dimensionTotalLevel: totalLevel,\n    hierarchyState: hd.hierarchyState, //hd.level + 1 === totalLevel ? undefined : hd.hierarchyState,\n    width: (dimensionInfo as IRowDimension)?.width,\n    minWidth: (dimensionInfo as IRowDimension)?.minWidth,\n    maxWidth: (dimensionInfo as IRowDimension)?.maxWidth,\n    parentCellId: roots[roots.length - 1]\n  };\n  if (indicatorInfo) {\n    //收集indicatorDimensionKey  提到了构造函数中\n    // this.indicatorDimensionKey = dimensionInfo.dimensionKey;\n    if (indicatorInfo.customRender) {\n      hd.customRender = indicatorInfo.customRender;\n    }\n    if (!isValid(layoutMap._indicators?.find(indicator => indicator.indicatorKey === indicatorInfo.indicatorKey))) {\n      layoutMap._indicators?.push({\n        id: ++layoutMap.sharedVar.seqId,\n        indicatorKey: indicatorInfo.indicatorKey,\n        field: indicatorInfo.indicatorKey,\n        fieldFormat: indicatorInfo?.format,\n        cellType: indicatorInfo?.cellType ?? (indicatorInfo as any)?.columnType ?? 'text',\n        chartModule: 'chartModule' in indicatorInfo ? indicatorInfo.chartModule : null,\n        chartSpec: 'chartSpec' in indicatorInfo ? indicatorInfo.chartSpec : null,\n        noDataRenderNothing: 'noDataRenderNothing' in indicatorInfo ? indicatorInfo.noDataRenderNothing : false,\n        sparklineSpec: 'sparklineSpec' in indicatorInfo ? indicatorInfo.sparklineSpec : null,\n        style: indicatorInfo?.style,\n        icon: indicatorInfo?.icon,\n        define: Object.assign({}, <any>hd, indicatorInfo, {\n          dragHeader: dimensionInfo?.dragHeader\n        }),\n        width: indicatorInfo?.width,\n        minWidth: indicatorInfo?.minWidth,\n        maxWidth: indicatorInfo?.maxWidth,\n        disableColumnResize: indicatorInfo?.disableColumnResize\n      });\n    }\n  } else if (hd.indicatorKey) {\n    //兼容当某个指标没有设置在dimension.indicators中\n    if (!isValid(layoutMap._indicators?.find(indicator => indicator.indicatorKey === hd.indicatorKey))) {\n      layoutMap._indicators?.push({\n        id: ++layoutMap.sharedVar.seqId,\n        indicatorKey: hd.indicatorKey,\n        field: hd.indicatorKey,\n        cellType: 'text',\n        define: Object.assign({}, <any>hd)\n      });\n    }\n  }\n  results[id] = cell;\n  // this._cellIdDiemnsionMap.set(id, {\n  //   dimensionKey: hd.dimensionKey,\n  //   value: hd.value\n  // });\n  layoutMap._headerObjects[id] = cell;\n  _headerCellIds[row][layoutMap.colIndex] = id;\n  for (let r = row - 1; r >= 0; r--) {\n    _headerCellIds[r][layoutMap.colIndex] = roots[r];\n  }\n  if (hd.hierarchyState === HierarchyState.expand && (hd as ITreeLayoutHeadNode).children?.length >= 1) {\n    //row传值 colIndex++和_addHeaders有区别\n    show && layoutMap.colIndex++;\n    layoutMap._addHeadersForTreeMode(\n      _headerCellIds,\n      row,\n      (hd as ITreeLayoutHeadNode).children ?? [],\n      [...roots, id],\n      totalLevel,\n      show && hd.hierarchyState === HierarchyState.expand, //当前节点show即显示状态 且当前节点状态为展开 则传给子节点为show：true\n      dimensions,\n      results\n    );\n    // .forEach(c => results.push(c));\n  } else {\n    // columns.push([\"\"])//代码一个路径\n    show && layoutMap.colIndex++;\n    for (let r = row + 1; r < _headerCellIds.length; r++) {\n      _headerCellIds[r][layoutMap.colIndex] = id;\n    }\n  }\n}\n\nfunction clearNode(children: any) {\n  for (let i = 0; i < children.length; i++) {\n    const node = children[i];\n    delete node.level;\n    delete node.startIndex;\n    delete node.id;\n    delete node.levelSpan;\n    delete node.size;\n    delete node.startInTotal;\n    const childrenNew = node.children || node.columns;\n    if (childrenNew) {\n      clearNode(childrenNew);\n    }\n  }\n}\n\nexport function deleteTreeHideNode(\n  tree_children: LayouTreeNode[],\n  dimensionPath: IDimensionInfo[],\n  indicators: IIndicator[],\n  hasHideNode: boolean,\n  table: BaseTableAPI\n) {\n  for (let i = tree_children.length - 1; i >= 0; i--) {\n    const node = tree_children[i];\n    dimensionPath.push(node);\n    if (hasHideNode && (node as any).hide) {\n      tree_children.splice(i, 1);\n    } else if (node.indicatorKey) {\n      const hide = indicators?.find(indicator => indicator.indicatorKey === node.indicatorKey)?.hide;\n      if (typeof hide === 'function') {\n        if (hide({ dimensionPaths: dimensionPath, table })) {\n          tree_children.splice(i, 1);\n        }\n      } else if (hide) {\n        tree_children.splice(i, 1);\n      }\n    } else if (node.children && node.children.length > 0) {\n      deleteTreeHideNode(node.children, dimensionPath, indicators, hasHideNode, table);\n    }\n    dimensionPath.pop();\n  }\n}\n"]}