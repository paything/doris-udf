import type { IStyleOption, ButtonStyleOption } from '../../ts-types';
import { Style } from '../style';
import type { ButtonStyle as ButtonStyleThemeOption } from '../../ts-types/column/style';
export declare class ButtonStyle extends Style {
    private _buttonColor;
    private _buttonBorderColor;
    private _buttonLineWidth;
    private _buttonBorderRadius;
    private _buttonHoverColor;
    private _buttonHoverBorderColor;
    private _buttonTextHoverColor;
    private _buttonDisableColor;
    private _buttonDisableBorderColor;
    private _buttonTextDisableColor;
    private _buttonTextHoverBorderColor;
    private _buttonPadding;
    static get DEFAULT(): ButtonStyle;
    constructor(style?: ButtonStyleOption, headerStyle?: ButtonStyleOption, buttonThemeStyle?: ButtonStyleThemeOption);
    get buttonColor(): string;
    set buttonColor(buttonColor: string);
    get buttonBorderColor(): string;
    set buttonBorderColor(buttonBorderColor: string);
    get buttonLineWidth(): number;
    set buttonLineWidth(buttonLineWidth: number);
    get buttonBorderRadius(): number;
    set buttonBorderRadius(buttonBorderRadius: number);
    get buttonHoverColor(): string;
    set buttonHoverColor(buttonHoverColor: string);
    get buttonHoverBorderColor(): string;
    set buttonHoverBorderColor(buttonHoverBorderColor: string);
    get buttonTextHoverColor(): string;
    set buttonTextHoverColor(buttonTextHoverColor: string);
    get buttonDisableColor(): string;
    set buttonDisableColor(buttonDisableColor: string);
    get buttonDisableBorderColor(): string;
    set buttonDisableBorderColor(buttonDisableBorderColor: string);
    get buttonTextDisableColor(): string;
    set buttonTextDisableColor(buttonTextDisableColor: string);
    get buttonTextHoverBorderColor(): string;
    set buttonTextHoverBorderColor(buttonTextHoverBorderColor: string);
    get buttonPadding(): number;
    set buttonPadding(buttonPadding: number);
    getStyle(style: IStyleOption): ButtonStyle;
    clone(): ButtonStyle;
}
