import { getCellEventArgsSet } from "../../util";

import { clearChartCacheImage } from "../../../scenegraph/refresh-node/update-chart";

export function bindAxisClickEvent(table) {
    table.isPivotChart() && table.scenegraph.tableGroup.addEventListener("click", (e => {
        var _a;
        if (!table.stateManager.columnMove.moving && !table.stateManager.columnResize.resizing) if ("axis-label" === e.target.name) {
            const eventArgsSet = getCellEventArgsSet(e), {col: col, row: row} = eventArgsSet.eventArgs, layout = table.internalProps.layoutMap;
            let dimensionKey, dimensions;
            layout.indicatorsAsCol ? (dimensionKey = layout.getDimensionKeyInChartSpec(layout.rowHeaderLevelCount, row), 
            dimensions = layout.getCellHeaderPaths(layout.rowHeaderLevelCount - 2, row).rowHeaderPaths) : (dimensionKey = layout.getDimensionKeyInChartSpec(col, layout.columnHeaderLevelCount), 
            dimensions = layout.getCellHeaderPaths(col, layout.columnHeaderLevelCount - 1).colHeaderPaths);
            const filter = dimensions.map((dimension => ({
                key: dimension.dimensionKey,
                value: dimension.value
            }))).filter((dimension => dimension.key));
            if (filter.push({
                key: dimensionKey,
                value: e.target.attribute.text
            }), table._selectedDimensionInChart.length && isSameSelectedDimension(table._selectedDimensionInChart, filter)) return;
            table._selectedDimensionInChart = filter, layout.updateDataStateToChartInstance(), 
            clearChartCacheImage(table.scenegraph), table.scenegraph.updateNextFrame();
        } else if (null === (_a = table._selectedDimensionInChart) || void 0 === _a ? void 0 : _a.length) {
            table._selectedDimensionInChart.length = 0;
            table.internalProps.layoutMap.updateDataStateToChartInstance(), clearChartCacheImage(table.scenegraph), 
            table.scenegraph.updateNextFrame();
        }
    }));
}

function isSameSelectedDimension(dimensions1, dimensions2) {
    if (dimensions1.length !== dimensions2.length) return !1;
    for (let i = 0; i < dimensions1.length; i++) if (dimensions1[i].key !== dimensions2[i].key || dimensions1[i].value !== dimensions2[i].value) return !1;
    return !0;
}
//# sourceMappingURL=axis-click.js.map
