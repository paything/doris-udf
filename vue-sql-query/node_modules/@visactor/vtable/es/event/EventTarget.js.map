{"version":3,"sources":["../src/event/EventTarget.ts"],"names":[],"mappings":"AAWA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAE3C,IAAI,OAAO,GAAG,CAAC,CAAC;AAEhB,MAAM,OAAO,WAAW;IAAxB;QACU,kBAAa,GASjB;YACF,SAAS,EAAE,EAAE;YACb,YAAY,EAAE,EAAE;SACjB,CAAC;IAuGJ,CAAC;IA/FC,EAAE,CACA,IAAU,EACV,QAAkC;QAElC,MAAM,IAAI,GACR,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAClF,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEpB,MAAM,EAAE,GAAG,OAAO,EAAE,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,GAAG;YACpC,IAAI;YACJ,QAAQ;YACR,MAAM,EAAE,GAAS,EAAE;gBACjB,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;gBAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACrC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;oBAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBAC3C;YACH,CAAC;SACF,CAAC;QACF,OAAO,EAAE,CAAC;IACZ,CAAC;IAID,GAAG,CACD,QAAkC,EAClC,QAAuE;;QAEvE,IAAI,QAAQ,EAAE;YACZ,MAAM,IAAI,GAAG,QAAkB,CAAC;YAChC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SAC1C;aAAM;YACL,MAAM,EAAE,GAAG,QAA2B,CAAC;YACvC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,OAAO;aACR;YACD,MAAA,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,CAAC,0CAAE,MAAM,EAAE,CAAC;SAC/C;IACH,CAAC;IAED,gBAAgB,CACd,IAAU,EACV,QAAkC,EAClC,MAAY;QAEZ,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC1B,CAAC;IAED,mBAAmB,CAAC,IAAY,EAAE,QAAsE;QACtG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO;SACR;QACD,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;YACjD,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC1D,IAAI,YAAY,CAAC,IAAI,KAAK,IAAI,IAAI,YAAY,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBACpE,IAAI,CAAC,GAAG,CAAC,GAAwB,CAAC,CAAC;aACpC;SACF;IACH,CAAC;IAED,YAAY,CAAC,IAAY;QACvB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAYD,aAAa,CACX,IAAU,EACV,KAA+C;QAE/C,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO,EAAE,CAAC;SACX;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,EAAE,CAAC;SACX;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IACD,OAAO;QACL,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;CACF","file":"EventTarget.js","sourcesContent":["/* Adapted from cheetah-grid by yosuke ota\n *url:https://github.com/future-architect/cheetah-grid/blob/master/packages/cheetah-grid/src/js/core/EventTarget.ts\n *License: https://github.com/future-architect/cheetah-grid/blob/master/LICENSE\n * @license\n */\nimport type {\n  TableEventListener,\n  EventListenerId,\n  TableEventHandlersEventArgumentMap,\n  TableEventHandlersReturnMap\n} from '../ts-types';\nimport { isValid } from '@visactor/vutils';\n\nlet idCount = 1;\n\nexport class EventTarget {\n  private listenersData: {\n    listeners: { [TYPE in keyof TableEventHandlersEventArgumentMap]?: TableEventListener<TYPE>[] };\n    listenerData: {\n      [id: number]: {\n        type: string;\n        listener: TableEventListener<keyof TableEventHandlersEventArgumentMap>;\n        remove: () => void;\n      };\n    };\n  } = {\n    listeners: {},\n    listenerData: {}\n  };\n\n  /**\n   * 监听事件\n   * @param type 事件类型\n   * @param listener 事件监听器\n   * @returns 事件监听器id\n   */\n  on<TYPE extends keyof TableEventHandlersEventArgumentMap>(\n    type: TYPE,\n    listener: TableEventListener<TYPE>\n  ): EventListenerId {\n    const list: TableEventListener<TYPE>[] =\n      this.listenersData.listeners[type] || (this.listenersData.listeners[type] = []);\n    list.push(listener);\n\n    const id = idCount++;\n    this.listenersData.listenerData[id] = {\n      type,\n      listener,\n      remove: (): void => {\n        delete this.listenersData.listenerData[id];\n        const index = list.indexOf(listener);\n        list.splice(index, 1);\n        if (!this.listenersData.listeners[type].length) {\n          delete this.listenersData.listeners[type];\n        }\n      }\n    };\n    return id;\n  }\n\n  off(type: string, listener: TableEventListener<keyof TableEventHandlersEventArgumentMap>): void;\n  off(id: EventListenerId): void;\n  off(\n    idOrType: EventListenerId | string,\n    listener?: TableEventListener<keyof TableEventHandlersEventArgumentMap>\n  ): void {\n    if (listener) {\n      const type = idOrType as string;\n      this.removeEventListener(type, listener);\n    } else {\n      const id = idOrType as EventListenerId;\n      if (!this.listenersData) {\n        return;\n      }\n      this.listenersData.listenerData[id]?.remove();\n    }\n  }\n\n  addEventListener<TYPE extends keyof TableEventHandlersEventArgumentMap>(\n    type: TYPE,\n    listener: TableEventListener<TYPE>,\n    option?: any\n  ): void {\n    this.on(type, listener);\n  }\n\n  removeEventListener(type: string, listener: TableEventListener<keyof TableEventHandlersEventArgumentMap>): void {\n    if (!this.listenersData) {\n      return;\n    }\n    for (const key in this.listenersData.listenerData) {\n      const listenerData = this.listenersData.listenerData[key];\n      if (listenerData.type === type && listenerData.listener === listener) {\n        this.off(key as unknown as number);\n      }\n    }\n  }\n\n  hasListeners(type: string): boolean {\n    if (!this.listenersData) {\n      return false;\n    }\n    return !!this.listenersData.listeners[type];\n  }\n\n  // fireListeners(type: string, ...args: any[]): any {\n  //   if (!this.listenersData) {\n  //     return [];\n  //   }\n  //   const list = this.listenersData.listeners[type];\n  //   if (!list) {\n  //     return [];\n  //   }\n  //   return list.map(listener => listener.call(this, ...args)).filter(r => isValid(r));\n  // }\n  fireListeners<TYPE extends keyof TableEventHandlersEventArgumentMap>(\n    type: TYPE,\n    event: TableEventHandlersEventArgumentMap[TYPE]\n  ): TableEventHandlersReturnMap[TYPE][] {\n    if (!this.listenersData) {\n      return [];\n    }\n    const list = this.listenersData.listeners[type];\n    if (!list) {\n      return [];\n    }\n    return list.map(listener => listener.call(this, event)).filter(r => isValid(r));\n  }\n  release(): void {\n    delete this.listenersData;\n  }\n}\n"]}