{"version":3,"sources":["../src/event/sparkline-event.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAM5D,MAAM,UAAU,uBAAuB,CAAC,KAAmB;IACzD,IAAI,KAAK,CAAC,YAAY,CAAC,uBAAuB,EAAE;QAC9C,OAAO;KACR;IAGD,IAAI,YAAY,GAAG,KAAK,CAAC;IACzB,IAAI,KAAK,CAAC,YAAY,EAAE,EAAE;QACxB,MAAM,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,SAAiC,CAAC;QACxE,YAAY,GAAG,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACzD,OAAO,OAAO,SAAS,KAAK,QAAQ,IAAI,SAAS,CAAC,QAAQ,KAAK,WAAW,CAAC;QAC7E,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,MAAM,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,SAAkC,CAAC;QACzE,YAAY,GAAG,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACnD,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,UAAU,CAAC;QAClF,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO;KACR;IAED,KAAK,CAAC,YAAY,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAElD,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,CAAwB,EAAE,EAAE;QACrE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAC7B,MAAM,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC/C,IAAI,IAAI,KAAK,WAAW,EAAE;YACxB,KAAK,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3D;QACD,KAAK,CAAC,YAAY,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,CAAC,CAAwB,EAAE,EAAE;QACvE,KAAK,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC","file":"sparkline-event.js","sourcesContent":["import { TABLE_EVENT_TYPE } from '../core/TABLE_EVENT_TYPE';\nimport type { SimpleHeaderLayoutMap } from '../layout';\nimport type { PivotHeaderLayoutMap } from '../layout/pivot-header-layout';\nimport type { MousePointerCellEvent } from '../ts-types';\nimport type { BaseTableAPI } from '../ts-types/base-table';\n\nexport function bindSparklineHoverEvent(table: BaseTableAPI) {\n  if (table.eventManager.bindSparklineHoverEvent) {\n    return;\n  }\n\n  // 判断是否有sparkline 类型\n  let hasSparkLine = false;\n  if (table.isPivotTable()) {\n    const layoutMap = table.internalProps.layoutMap as PivotHeaderLayoutMap;\n    hasSparkLine = layoutMap.indicatorsDefine.some(indicator => {\n      return typeof indicator !== 'string' && indicator.cellType === 'sparkline';\n    });\n  } else {\n    const layoutMap = table.internalProps.layoutMap as SimpleHeaderLayoutMap;\n    hasSparkLine = layoutMap.columnObjects.some(column => {\n      return column.cellType === 'sparkline' || typeof column.cellType === 'function';\n    });\n  }\n\n  if (!hasSparkLine) {\n    return;\n  }\n\n  table.eventManager.bindSparklineHoverEvent = true;\n\n  table.on(TABLE_EVENT_TYPE.MOUSEMOVE_CELL, (e: MousePointerCellEvent) => {\n    const { col, row, x, y } = e;\n    const type = table.getBodyColumnType(col, row);\n    if (type !== 'sparkline') {\n      table.stateManager.updateSparklineHoverPose(-1, -1, 0, 0);\n    }\n    table.stateManager.updateSparklineHoverPose(col, row, x, y);\n  });\n\n  table.on(TABLE_EVENT_TYPE.MOUSELEAVE_TABLE, (e: MousePointerCellEvent) => {\n    table.stateManager.updateSparklineHoverPose(-1, -1, 0, 0);\n  });\n}\n"]}