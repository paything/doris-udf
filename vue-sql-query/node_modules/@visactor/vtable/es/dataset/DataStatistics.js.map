{"version":3,"sources":["../src/dataset/DataStatistics.ts"],"names":[],"mappings":"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","file":"DataStatistics.js","sourcesContent":["export interface NumberFormatOption {\n  /**小数点后几位 */\n  digitsAfterDecimal?: number;\n  /**数据缩放倍数 */\n  scaler?: number;\n  /**千位分隔符 */\n  thousandsSep?: string;\n  /**小数分隔符 */\n  decimalSep?: string;\n  /**数据前缀 */\n  prefix?: string;\n  /**数据后缀 */\n  suffix?: string;\n}\n/**\n * 对字符型数值处理，千位分隔符 小数分隔符\n * @param str\n * @param thousandsSep\n * @param decimalSep\n * @returns\n */\nfunction numberAddSeparators(str: string, thousandsSep: string, decimalSep: string) {\n  str += '';\n  const strArr = str.split('.');\n  let str1 = strArr[0];\n  const str2 = strArr.length > 1 ? decimalSep + strArr[1] : '';\n  // const regex = /(?<=\\d)(?=(\\d{3})+$)/g;\n  // str1 = str1.replace(regex, thousandsSep);\n  str1 = numFormat(str1, thousandsSep);\n  return str1 + str2;\n}\nfunction numFormat(num: string, thousandsSep: string) {\n  const res = num.replace(/\\d+/, function (n) {\n    // 先提取整数部分\n    return n.replace(/(\\d)(?=(\\d{3})+$)/g, function ($1) {\n      return `${$1}${thousandsSep}`;\n    });\n  });\n  return res;\n}\n/**\n * 对数据进行格式化\n * @param option 格式化规则参数\n * @returns\n */\nexport function numberFormat(option?: NumberFormatOption): (num: number) => string {\n  const defaults: NumberFormatOption = {\n    digitsAfterDecimal: 2,\n    scaler: 1,\n    thousandsSep: ',',\n    decimalSep: '.',\n    prefix: '',\n    suffix: ''\n  };\n  option = Object.assign({}, defaults, option);\n  return function (num: number) {\n    if (isNaN(num) || !isFinite(num)) {\n      return '';\n    }\n    const result = numberAddSeparators(\n      (option.scaler * num).toFixed(option.digitsAfterDecimal),\n      option.thousandsSep,\n      option.decimalSep\n    );\n    return `${option.prefix}${result}${option.suffix}`;\n  };\n}\n\nexport function dateFormat(\n  baseField: string,\n  formatString: string,\n  utcOutput: boolean,\n  mthNames?: string[],\n  dayNames?: string[]\n): (record: Record<string, any>) => string {\n  const mthNamesEn = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const dayNamesEn = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  if (utcOutput === null || utcOutput === undefined) {\n    utcOutput = false;\n  }\n  if (mthNames === null || mthNames === undefined) {\n    mthNames = mthNamesEn;\n  }\n  if (dayNames === null || dayNames === undefined) {\n    dayNames = dayNamesEn;\n  }\n  const utc = utcOutput ? 'UTC' : '';\n  const zeroPad = function (number: number) {\n    return `0${number}`.substring(0, 2);\n  };\n  return function (record) {\n    const date = new Date(Date.parse(record[baseField]));\n    return formatString.replace(/%(.)/g, function (m: any, p: any): any {\n      switch (p) {\n        case 'y':\n          return date[`get${utc}FullYear`]();\n        case 'm':\n          return zeroPad(date[`get${utc}Month`]() + 1);\n        case 'n':\n          return mthNames[date[`get${utc}Month`]()];\n        case 'd':\n          return zeroPad(date[`get${utc}Date`]());\n        case 'w':\n          return dayNames[date[`get${utc}Day`]()];\n        case 'x':\n          return date[`get${utc}Day`]();\n        case 'H':\n          return zeroPad(date[`get${utc}Hours`]());\n        case 'M':\n          return zeroPad(date[`get${utc}Minutes`]());\n        case 'S':\n          return zeroPad(date[`get${utc}Seconds`]());\n        default:\n          return `%${p}`;\n      }\n    });\n  };\n}\n// export const defaultNumberFormat = numberFormat();\n"]}