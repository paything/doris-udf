{"version":3,"sources":["../src/data/CachedDataSource.ts"],"names":[],"mappings":"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","file":"CachedDataSource.js","sourcesContent":["import { cloneDeep, isArray, isNumber, isValid } from '@visactor/vutils';\nimport type { ListTableConstructorOptions } from '../ts-types';\nimport {\n  AggregationType,\n  HierarchyState,\n  type FieldData,\n  type FieldDef,\n  type IListTableDataConfig,\n  type IPagination,\n  type MaybePromise,\n  type MaybePromiseOrUndefined\n} from '../ts-types';\nimport type { BaseTableAPI } from '../ts-types/base-table';\nimport type { ColumnData, ColumnsDefine } from '../ts-types/list-table/layout-map/api';\nimport type { DataSourceParam } from './DataSource';\nimport { DataSource, getValue, getValueFromDeepArray, sortRecordIndexs } from './DataSource';\nimport get from 'lodash/get';\n\n/** @private */\nfunction _setFieldCache(\n  fCache: { [index: number]: Map<FieldDef, any> },\n  index: number,\n  field: FieldDef,\n\n  value: any\n): void {\n  const recCache = fCache[index] || (fCache[index] = new Map());\n  recCache.set(field, value);\n}\n/**\n * table data source for caching Promise data\n *\n * @classdesc VTable.data.CachedDataSource\n * @memberof VTable.data\n */\nexport class CachedDataSource extends DataSource {\n  /**\n   * record cache 当用户定义的CachedDataSource.get为promise的时候 可以用rCache缓存已获取数据条目\n   */\n  private _recordCache: any[];\n  /**\n   * field cache 当用户定义field为promise的时候 可以用fCache缓存已获取值\n   */\n  private _fieldCache: { [index: number]: Map<FieldDef, any> };\n\n  groupAggregator: any;\n  private _isGrouped: boolean;\n\n  static get EVENT_TYPE(): typeof DataSource.EVENT_TYPE {\n    return DataSource.EVENT_TYPE;\n  }\n  static ofArray(\n    array: any[],\n    dataConfig?: IListTableDataConfig,\n    pagination?: IPagination,\n    columns?: ColumnsDefine,\n    rowHierarchyType?: 'grid' | 'tree',\n    hierarchyExpandLevel?: number\n  ): CachedDataSource {\n    return new CachedDataSource(\n      {\n        get: (index: number): any => {\n          // if (Array.isArray(index)) {\n          //   return getValueFromDeepArray(array, index);\n          // }\n          return array[index];\n        },\n        length: array.length,\n        records: array\n      },\n      dataConfig,\n      pagination,\n      columns,\n      rowHierarchyType,\n      hierarchyExpandLevel\n    );\n  }\n\n  // _originalRecords: any[];\n  constructor(\n    opt?: DataSourceParam,\n    dataConfig?: IListTableDataConfig,\n    pagination?: IPagination,\n    columns?: ColumnsDefine,\n    rowHierarchyType?: 'grid' | 'tree',\n    hierarchyExpandLevel?: number\n  ) {\n    let _isGrouped;\n    if (isArray(dataConfig?.groupByRules)) {\n      rowHierarchyType = 'tree';\n      _isGrouped = true;\n    }\n    super(opt, dataConfig, pagination, columns, rowHierarchyType, hierarchyExpandLevel);\n    this._isGrouped = _isGrouped;\n    this._recordCache = [];\n    this._fieldCache = {};\n  }\n  protected getOriginalRecord(index: number | number[]): MaybePromiseOrUndefined {\n    if (isNumber(index) && this._recordCache && this._recordCache[index]) {\n      return this._recordCache[index];\n    }\n    return super.getOriginalRecord(index);\n  }\n  protected getRawRecord(index: number | number[]): MaybePromiseOrUndefined {\n    let originRecordIndex;\n    if (this._isGrouped) {\n      // in group mode, record with children is title, do not return record\n      originRecordIndex = this.getOriginRecordIndexForGroup(index);\n      if (isValid(originRecordIndex) && this.beforeChangedRecordsMap?.has(originRecordIndex.toString())) {\n        return this.beforeChangedRecordsMap?.get(originRecordIndex.toString());\n      }\n    } else {\n      if (this.beforeChangedRecordsMap?.has(index.toString())) {\n        return this.beforeChangedRecordsMap?.get(index.toString());\n      }\n    }\n    if (isNumber(index) && this._recordCache && this._recordCache[index]) {\n      return this._recordCache[index];\n    }\n    // return super.getRawRecord(index);\n\n    let data;\n    if (!this.dataSourceObj.records) {\n      data = (this as any)._get(index);\n    } else {\n      if (Array.isArray(index)) {\n        data = getValueFromDeepArray(this.records, index);\n      } else {\n        data = this.records[index];\n      }\n    }\n    return getValue(data, (val: MaybePromiseOrUndefined) => {\n      this.recordPromiseCallBack(index as number, val);\n    });\n  }\n  protected getOriginalField<F extends FieldDef>(\n    index: number,\n    field: F,\n    col?: number,\n    row?: number,\n    table?: BaseTableAPI\n  ): FieldData {\n    const rowCache = this._fieldCache && this._fieldCache[index];\n    if (rowCache) {\n      const cache = rowCache.get(field);\n      if (cache) {\n        return cache;\n      }\n    }\n    return super.getOriginalField(index, field, col, row, table);\n  }\n\n  clearCache(): void {\n    if (this._recordCache) {\n      this._recordCache = [];\n    }\n    if (this._fieldCache) {\n      this._fieldCache = {};\n    }\n  }\n\n  protected fieldPromiseCallBack<F extends FieldDef>(index: number, field: F, value: MaybePromiseOrUndefined): void {\n    _setFieldCache(this._fieldCache, index, field, value);\n  }\n  protected recordPromiseCallBack(index: number, record: MaybePromiseOrUndefined): void {\n    this._recordCache && (this._recordCache[index] = record);\n  }\n  get records(): any[] {\n    return Array.isArray(this._recordCache) && this._recordCache.length > 0 ? this._recordCache : super.records;\n  }\n\n  release(): void {\n    super.release?.();\n    this._recordCache = null;\n    this._fieldCache = null;\n  }\n\n  _generateFieldAggragations() {\n    super._generateFieldAggragations();\n    // groupby aggragations\n    if (isArray(this.dataConfig?.groupByRules)) {\n      // const groupByKey = this.dataConfig.groupByRules[0];\n      const groupByKeys = this.dataConfig.groupByRules;\n      this.groupAggregator = new this.registedAggregators[AggregationType.CUSTOM]({\n        field: '',\n        aggregationFun: (values: any, records: any, field: any) => {\n          const groupMap = new Map();\n          const groupResult = [] as any[];\n          for (let i = 0; i < records.length; i++) {\n            dealWithGroup(records[i], groupResult, groupMap, groupByKeys, 0);\n          }\n          return groupResult;\n        }\n      });\n      this.fieldAggregators.push(this.groupAggregator);\n    }\n  }\n\n  processRecords(records: any[]) {\n    const result = super.processRecords(records);\n    const groupResult = this.groupAggregator?.value();\n    if (groupResult) {\n      // this._originalRecords = result;\n      return groupResult;\n    }\n    return result;\n  }\n\n  getGroupLength() {\n    return this.dataConfig?.groupByRules?.length ?? 0;\n  }\n\n  updateGroup() {\n    this.clearCache();\n\n    const oldSource = this.source;\n    (this as any)._source = this.processRecords(this.dataSourceObj?.records ?? this.dataSourceObj);\n    if (oldSource) {\n      syncGroupCollapseState(oldSource, this.source);\n    }\n\n    // syncGroupCollapseState(this.source, newSource.source);\n    this.sourceLength = this.source?.length || 0;\n    this.sortedIndexMap.clear();\n    this.currentIndexedData = Array.from({ length: this.sourceLength }, (_, i) => i);\n    if (!this.userPagination) {\n      this.pagination.perPageCount = this.sourceLength;\n      this.pagination.totalCount = this.sourceLength;\n    }\n\n    this.initTreeHierarchyState();\n    this.updatePagerData();\n  }\n\n  getOriginRecordIndexForGroup(recordIndex: number | number[]) {\n    const targetRecord = this.getOriginalRecord(recordIndex);\n    if (!isValid(targetRecord)) {\n      return undefined;\n    }\n    if (targetRecord.children && targetRecord.children.length > 0) {\n      return undefined;\n    }\n    for (let i = 0; i < this.dataSourceObj.records.length; i++) {\n      if (this.dataSourceObj.records[i] === targetRecord) {\n        return i;\n      }\n    }\n    return undefined;\n  }\n\n  addRecordsForGroup(recordArr: any[], recordIndex?: number | number[]) {\n    if (!isArray(recordArr) || recordArr.length === 0) {\n      return;\n    }\n    let originRecordIndex = this.getOriginRecordIndexForGroup(recordIndex);\n\n    if (originRecordIndex === undefined || originRecordIndex > this.dataSourceObj.records) {\n      originRecordIndex = this.dataSourceObj.records.length;\n    }\n    this.dataSourceObj.records.splice(originRecordIndex, 0, ...recordArr);\n\n    this.adjustBeforeChangedRecordsMap(originRecordIndex, recordArr.length);\n\n    this.updateGroup();\n  }\n\n  deleteRecordsForGroup(recordIndexs: (number | number[])[]) {\n    if (!isArray(recordIndexs) || recordIndexs.length === 0) {\n      return;\n    }\n    const recordIndexsMaxToMin = sortRecordIndexs(recordIndexs, -1);\n    for (let index = 0; index < recordIndexsMaxToMin.length; index++) {\n      const recordIndex = recordIndexsMaxToMin[index];\n      if (isNumber(recordIndex) && (recordIndex >= this.sourceLength || recordIndex < 0)) {\n        continue;\n      }\n      const originRecordIndex = this.getOriginRecordIndexForGroup(recordIndex);\n\n      this.beforeChangedRecordsMap.delete(originRecordIndex.toString());\n      this.dataSourceObj.records.splice(originRecordIndex, 1);\n      this.sourceLength -= 1;\n\n      this.adjustBeforeChangedRecordsMap(originRecordIndex, 1, 'delete');\n    }\n\n    this.updateGroup();\n  }\n\n  updateRecordsForGroup(records: any[], recordIndexs: (number | number[])[]) {\n    for (let index = 0; index < recordIndexs.length; index++) {\n      const recordIndex = recordIndexs[index];\n      if (isNumber(recordIndex) && (recordIndex >= this.sourceLength || recordIndex < 0)) {\n        continue;\n      }\n      const originRecordIndex = this.getOriginRecordIndexForGroup(recordIndex);\n      this.beforeChangedRecordsMap.delete(originRecordIndex.toString());\n      this.dataSourceObj.records[originRecordIndex] = records[index];\n    }\n\n    this.updateGroup();\n  }\n\n  addRecordsForTree(recordArr: any[], recordIndex?: number | number[]) {\n    if (!isArray(recordArr) || recordArr.length === 0) {\n      return;\n    }\n\n    this.adjustBeforeChangedRecordsMap(recordIndex, recordArr.length);\n\n    if (isNumber(recordIndex)) {\n      this.dataSourceObj.records.splice(recordIndex, 0, ...recordArr);\n    } else {\n      const index = recordIndex.pop();\n      const parentRecord = this.getOriginalRecord(recordIndex);\n      if (parentRecord.children) {\n        parentRecord.children.splice(index, 0, ...recordArr);\n      } else {\n        parentRecord.children = recordArr;\n      }\n    }\n\n    this.initTreeHierarchyState();\n    this.updatePagerData();\n  }\n\n  deleteRecordsForTree(recordIndexs: (number | number[])[]) {\n    if (!isArray(recordIndexs) || recordIndexs.length === 0) {\n      return;\n    }\n    const recordIndexsMaxToMin = sortRecordIndexs(recordIndexs, -1);\n    for (let index = 0; index < recordIndexsMaxToMin.length; index++) {\n      const recordIndex = recordIndexsMaxToMin[index];\n      if (isNumber(recordIndex) && (recordIndex >= this.sourceLength || recordIndex < 0)) {\n        continue;\n      }\n      this.beforeChangedRecordsMap.delete(recordIndex.toString());\n\n      if (isNumber(recordIndex)) {\n        this.dataSourceObj.records.splice(recordIndex, 1);\n      } else {\n        const index = recordIndex.pop();\n        const parentRecord = this.getOriginalRecord(recordIndex);\n        // delete parentRecord.children[index];\n        parentRecord.children.splice(index, 1);\n      }\n\n      this.adjustBeforeChangedRecordsMap(recordIndex, 1, 'delete');\n    }\n\n    this.initTreeHierarchyState();\n    this.updatePagerData();\n  }\n\n  updateRecordsForTree(records: any[], recordIndexs: (number | number[])[]) {\n    for (let index = 0; index < recordIndexs.length; index++) {\n      const recordIndex = recordIndexs[index];\n      const record = records[index];\n      if (isNumber(recordIndex) && (recordIndex >= this.sourceLength || recordIndex < 0)) {\n        continue;\n      }\n      this.beforeChangedRecordsMap.delete(recordIndex.toString());\n\n      if (isNumber(recordIndex)) {\n        this.dataSourceObj.records.splice(recordIndex, 1, record);\n      } else {\n        const index = recordIndex.pop();\n        const parentRecord = this.getOriginalRecord(recordIndex);\n        parentRecord.children.splice(index, 1, record);\n      }\n    }\n\n    this.initTreeHierarchyState();\n    this.updatePagerData();\n  }\n\n  adjustBeforeChangedRecordsMap(insertIndex: number | number[], insertCount: number, type: 'add' | 'delete' = 'add') {\n    if (this.rowHierarchyType === 'tree') {\n      let insertIndexArr: number[];\n      if (isNumber(insertIndex)) {\n        insertIndexArr = [insertIndex];\n      } else {\n        insertIndexArr = insertIndex;\n      }\n\n      const targetResult: { originKey: string; targetKey: string; value: any }[] = [];\n      this.beforeChangedRecordsMap.forEach((value, key) => {\n        const keyArray = key.split(',');\n        const length = Math.max(keyArray.length, insertIndexArr.length);\n        for (let i = 0; i < length; i++) {\n          const current = insertIndexArr[i] ?? -1;\n          const keyIndex = Number(keyArray[i]) ?? -1;\n          if (\n            current < keyIndex ||\n            (current === keyIndex && i === keyArray.length - 1 && i === insertIndexArr.length - 1)\n          ) {\n            keyArray[i] = (keyIndex + (type === 'add' ? insertCount : -insertCount)).toString();\n            targetResult.push({\n              originKey: key,\n              targetKey: keyArray.toString(),\n              value\n            });\n            return;\n          }\n        }\n      });\n      targetResult.forEach(({ originKey, targetKey, value }) => {\n        this.beforeChangedRecordsMap.delete(originKey);\n        this.beforeChangedRecordsMap.set(targetKey, value);\n      });\n    } else {\n      super.adjustBeforeChangedRecordsMap(insertIndex as number, insertCount, type);\n    }\n  }\n\n  cacheBeforeChangedRecord(dataIndex: number | number[], table?: BaseTableAPI) {\n    const originRecord = this.getOriginalRecord(dataIndex);\n    if ((table.options as ListTableConstructorOptions).groupBy) {\n      dataIndex = this.getOriginRecordIndexForGroup(dataIndex);\n    }\n    if (!this.beforeChangedRecordsMap.has(dataIndex.toString())) {\n      this.beforeChangedRecordsMap.set(\n        dataIndex.toString(),\n        cloneDeep(originRecord, undefined, ['vtable_gantt_linkedFrom', 'vtable_gantt_linkedTo']) ?? {}\n      );\n    }\n  }\n\n  getGroupSeriesNumber(showIndex: number) {\n    const recordIndex = this.dataSource.currentIndexedData[showIndex] as number[];\n    const parentRecordIndexLength = recordIndex.length - 1;\n\n    let recordIndexLength = recordIndex.length;\n    let i = 1;\n    for (; recordIndexLength > parentRecordIndexLength; i++) {\n      const index = this.dataSource.currentIndexedData[showIndex - i];\n      recordIndexLength = isNumber(index) ? 1 : (index as number[]).length;\n    }\n    return i - 1;\n  }\n}\n\nfunction dealWithGroup(record: any, children: any[], map: Map<number, any>, groupByKeys: string[], level: number): any {\n  const groupByKey = groupByKeys[level];\n  if (!isValid(groupByKey)) {\n    children.push(record);\n    return;\n  }\n  const value = get(record, groupByKey);\n  if (value !== undefined) {\n    if (map.has(value)) {\n      const index = map.get(value);\n      // children[index].children.push(record);\n      return dealWithGroup(record, children[index].children, children[index].map, groupByKeys, level + 1);\n    }\n    map.set(value, children.length);\n    children.push({\n      vtableMerge: true,\n      vtableMergeName: value,\n      children: [] as any,\n      map: new Map()\n    });\n    return dealWithGroup(\n      record,\n      children[children.length - 1].children,\n      children[children.length - 1].map,\n      groupByKeys,\n      level + 1\n    );\n  }\n}\n\nfunction syncGroupCollapseState(\n  oldSource: any,\n  newSource: any,\n  oldGroupMap?: Map<string, number>,\n  newGroupMap?: Map<string, number>\n) {\n  if (!oldGroupMap) {\n    oldGroupMap = new Map();\n    for (let i = 0; i < oldSource.length; i++) {\n      const record = oldSource[i];\n      if (record.vtableMerge) {\n        oldGroupMap.set(record.vtableMergeName, i);\n      }\n    }\n  }\n\n  if (!newGroupMap) {\n    newGroupMap = new Map();\n    for (let i = 0; i < newSource.length; i++) {\n      const record = newSource[i];\n      if (record.vtableMerge) {\n        newGroupMap.set(record.vtableMergeName, i);\n      }\n    }\n  }\n\n  for (let i = 0; i < oldSource.length; i++) {\n    const oldRecord = oldSource[i];\n    const newRecord = newSource[newGroupMap.get(oldRecord.vtableMergeName)];\n    if (isValid(newRecord)) {\n      newRecord.hierarchyState = oldSource[i].hierarchyState;\n    }\n    if (\n      isArray(oldRecord.children) &&\n      isArray(newRecord.children) &&\n      oldRecord.map.size !== 0 &&\n      newRecord.map.size !== 0\n    ) {\n      syncGroupCollapseState(oldRecord.children, newRecord.children, oldRecord.map, newRecord.map);\n    }\n  }\n}\n"]}