{"version":3,"sources":["../src/scenegraph/graphic/contributions/chart-render.ts"],"names":[],"mappings":"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","file":"chart-render.js","sourcesContent":["import type {\n  IGraphicAttribute,\n  IContext2d,\n  IDrawContext,\n  IGraphicRender,\n  IGraphicRenderDrawParams,\n  IMarkAttribute,\n  IRenderService,\n  IThemeAttribute\n} from './../../../vrender';\nimport {\n  ContributionProvider,\n  getTheme,\n  IGroupRenderContribution,\n  createImage,\n  inject,\n  injectable,\n  named,\n  BaseRender\n} from './../../../vrender';\nimport type { Chart } from '../chart';\nimport { CHART_NUMBER_TYPE } from '../chart';\nimport {\n  IsHandlingChartQueue,\n  chartRenderKeys,\n  chartRenderQueueList,\n  renderChart,\n  startRenderChartQueue\n} from './chart-render-helper';\nimport { isArray } from '@visactor/vutils';\n\nexport const ChartRender = Symbol.for('ChartRender');\nexport const ChartRenderContribution = Symbol.for('ChartRenderContribution');\n\n@injectable()\nexport class DefaultCanvasChartRender extends BaseRender<Chart> implements IGraphicRender {\n  type: 'chart';\n  numberType: number = CHART_NUMBER_TYPE;\n\n  drawShape(\n    chart: Chart,\n    context: IContext2d,\n    x: number,\n    y: number,\n    drawContext: IDrawContext,\n    params?: IGraphicRenderDrawParams,\n    fillCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean,\n    strokeCb?: (\n      ctx: IContext2d,\n      markAttribute: Partial<IMarkAttribute & IGraphicAttribute>,\n      themeAttribute: IThemeAttribute\n    ) => boolean\n  ) {\n    // console.log(chart.parent.col, chart.parent.row);\n    // if (chart.parent.col !== 2 || chart.parent.row !== 2) {\n    //   return;\n    // }\n    const groupAttribute = getTheme(chart, params?.theme).group;\n\n    const { dataId, data, spec } = chart.attribute;\n    const viewBox = chart.getViewBox();\n    const { width = groupAttribute.width, height = groupAttribute.height } = chart.attribute;\n    const { table } = chart.getRootNode() as any;\n\n    const { active, cacheCanvas, activeChartInstance } = chart;\n    // console.log('render chart', chart.parent.col, chart.parent.row, viewBox, cacheCanvas);\n    if (!active && cacheCanvas) {\n      if (isArray(cacheCanvas)) {\n        cacheCanvas.forEach(singleCacheCanvas => {\n          const { x, y, width, height, canvas } = singleCacheCanvas;\n          context.drawImage(canvas, x, y, width, height);\n        });\n      } else {\n        context.drawImage(cacheCanvas, x, y, width, height);\n      }\n    } else if (activeChartInstance) {\n      if (table.options.specFormat) {\n        const formatResult = table.options.specFormat(chart.attribute.spec, activeChartInstance, chart);\n        if (formatResult.needFormatSpec && formatResult.spec) {\n          const spec = formatResult.spec;\n          activeChartInstance.updateSpecSync(spec);\n          // return;\n        }\n      }\n\n      const viewBox = chart.getViewBox();\n      activeChartInstance.updateViewBox(\n        // {\n        //   x1: viewBox.x1 - (chart.getRootNode() as any).table.scrollLeft,\n        //   x2: viewBox.x2 - (chart.getRootNode() as any).table.scrollLeft,\n        //   y1: viewBox.y1 - (chart.getRootNode() as any).table.scrollTop,\n        //   y2: viewBox.y2 - (chart.getRootNode() as any).table.scrollTop\n        // },\n        {\n          x1: 0,\n          x2: viewBox.x2 - viewBox.x1,\n          y1: 0,\n          y2: viewBox.y2 - viewBox.y1\n        },\n        false,\n        false\n      );\n      // console.log(viewBox);\n\n      const chartStage = activeChartInstance.getStage();\n      chartStage.needRender = true;\n      // chartStage.background = 'red';\n      const matrix = chart.globalTransMatrix.clone();\n      const stageMatrix = chart.stage.window.getViewBoxTransform().clone();\n      // matrix.multiply(stageMatrix.a, stageMatrix.b, stageMatrix.c, stageMatrix.d, stageMatrix.e, stageMatrix.f);\n      stageMatrix.multiply(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n      chartStage.window.setViewBoxTransform(\n        stageMatrix.a,\n        stageMatrix.b,\n        stageMatrix.c,\n        stageMatrix.d,\n        stageMatrix.e,\n        stageMatrix.f\n      );\n\n      if (typeof dataId === 'string') {\n        activeChartInstance.updateDataSync(dataId, data ?? []);\n      } else {\n        const dataBatch = [];\n        // 如果是组合图有series系列 需要组个设置数据 这里的data包括的单元格完整数据 需要根据key过滤\n        for (const dataIdStr in dataId) {\n          const dataIdAndField = dataId[dataIdStr];\n          const series = spec.series.find((item: any) => item?.data?.id === dataIdStr);\n          dataBatch.push({\n            id: dataIdStr,\n            values: dataIdAndField\n              ? data?.filter((item: any) => {\n                  return item.hasOwnProperty(dataIdAndField);\n                }) ?? []\n              : data ?? [],\n            fields: series?.data?.fields\n          });\n          if (!activeChartInstance.updateFullDataSync) {\n            activeChartInstance.updateDataSync(\n              dataIdStr,\n              dataIdAndField\n                ? data?.filter((item: any) => {\n                    return item.hasOwnProperty(dataIdAndField);\n                  }) ?? []\n                : data ?? []\n            );\n          }\n        }\n        activeChartInstance.updateFullDataSync?.(dataBatch);\n      }\n      // debugger;\n      // console.log(drawContext.context.canvas.toDataURL());\n    } else {\n      if (table.internalProps.renderChartAsync) {\n        if (chartRenderKeys.indexOf(`${chart.parent.col}+${chart.parent.row}`) === -1) {\n          chartRenderKeys.push(`${chart.parent.col}+${chart.parent.row}`);\n          chartRenderQueueList.push(chart);\n        }\n        //判断是否已经开启渲染队列\n        if (!IsHandlingChartQueue()) {\n          startRenderChartQueue(table);\n        }\n      } else {\n        renderChart(chart);\n      }\n    }\n  }\n\n  // draw(chart: Chart, renderService: IRenderService, drawContext: IDrawContext, params?: IGraphicRenderDrawParams) {\n  //   const { context } = drawContext;\n  //   if (!context) {\n  //     return;\n  //   }\n  //   // debugger;\n  //   const { clip } = chart.attribute;\n  //   if (clip) {\n  //     context.save();\n  //   } else {\n  //     context.highPerformanceSave();\n  //   }\n  //   // group直接transform\n  //   context.transformFromMatrix(chart.transMatrix, true);\n\n  //   context.beginPath();\n  //   // 如果跳过绘制，那就不绘制\n  //   if (params.skipDraw) {\n  //     this.drawShape(\n  //       chart,\n  //       context,\n  //       0,\n  //       0,\n  //       drawContext,\n  //       params,\n  //       () => false,\n  //       () => false\n  //     );\n  //   } else {\n  //     this.drawShape(chart, context, 0, 0, drawContext);\n  //   }\n\n  //   if (clip) {\n  //     context.restore();\n  //   } else {\n  //     context.highPerformanceRestore();\n  //   }\n  // }\n  draw(chart: Chart, renderService: IRenderService, drawContext: IDrawContext, params?: IGraphicRenderDrawParams) {\n    // const circleAttribute = getTheme(circle, params?.theme).circle;\n    this._draw(chart, {} as any, false, drawContext, params);\n  }\n}\n"]}