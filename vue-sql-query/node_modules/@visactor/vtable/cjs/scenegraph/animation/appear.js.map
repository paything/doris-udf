{"version":3,"sources":["../src/scenegraph/animation/appear.ts"],"names":[],"mappings":";;;AAGA,SAAgB,uBAAuB,CAAC,KAAmB;;IACzD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE;QAClC,OAAO;KACR;IAED,IAAI,QAAgB,CAAC;IACrB,IAAI,KAAa,CAAC;IAClB,IAAI,IAA0B,CAAC;IAC/B,IAAI,SAA2B,CAAC;IAEhC,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,KAAK,IAAI,EAAE;QAC1C,QAAQ,GAAG,GAAG,CAAC;QACf,KAAK,GAAG,CAAC,CAAC;QACV,IAAI,GAAG,YAAY,CAAC;QACpB,SAAS,GAAG,QAAQ,CAAC;KACtB;SAAM;QACL,QAAQ,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,QAAQ,mCAAI,GAAG,CAAC;QACzD,KAAK,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,mCAAI,CAAC,CAAC;QACjD,IAAI,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,mCAAI,YAAY,CAAC;QAC1D,SAAS,GAAG,MAAA,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,mCAAI,KAAK,CAAC;KAC9D;IAED,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;IAGpE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;IAE3D,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;QACtC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;YACtC,MAAM,SAAS,GAAG,KAAK,CAAC,sBAAsB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACzD,IAAI,SAAS,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,EAAE;gBAC1C,SAAS,CAAC,eAAe,CAAC,CAAC,KAAW,EAAE,EAAE;oBACxC,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;oBACjC,KAAK;yBACF,OAAO,EAAE;yBACT,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;yBAC5F,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;aACJ;SACF;KACF;AACH,CAAC;AAzCD,0DAyCC","file":"appear.js","sourcesContent":["import type { Text } from './../../vrender';\nimport type { BaseTableAPI } from '../../ts-types/base-table';\n\nexport function dealWithAnimationAppear(table: BaseTableAPI) {\n  if (!table.options.animationAppear) {\n    return;\n  }\n\n  let duration: number;\n  let delay: number;\n  let type: 'all' | 'one-by-one';\n  let direction: 'row' | 'column';\n\n  if (table.options.animationAppear === true) {\n    duration = 500;\n    delay = 0;\n    type = 'one-by-one';\n    direction = 'column';\n  } else {\n    duration = table.options.animationAppear.duration ?? 500;\n    delay = table.options.animationAppear.delay ?? 0;\n    type = table.options.animationAppear.type ?? 'one-by-one';\n    direction = table.options.animationAppear.direction ?? 'row';\n  }\n\n  const { scenegraph: scene, frozenColCount, frozenRowCount } = table;\n\n  // header cell\n  const { colStart, colEnd, rowStart, rowEnd } = scene.proxy; // to do: right bottom frozen\n\n  for (let col = 0; col <= colEnd; col++) {\n    for (let row = 0; row <= rowEnd; row++) {\n      const cellGroup = scene.highPerformanceGetCell(col, row);\n      if (cellGroup && cellGroup.role === 'cell') {\n        cellGroup.forEachChildren((child: Text) => {\n          child.setAttribute('opacity', 0);\n          child\n            .animate()\n            .wait(type === 'one-by-one' ? (direction === 'row' ? row : col) * (duration - delay) : delay)\n            .to({ opacity: 1 }, duration, 'linear');\n        });\n      }\n    }\n  }\n}\n"]}