{"version":3,"sources":["../src/scenegraph/layout/compute-col-width.ts"],"names":[],"mappings":"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","file":"compute-col-width.js","sourcesContent":["import type { SimpleHeaderLayoutMap } from '../../layout';\nimport type {\n  ColumnDefine,\n  ColumnTypeOption,\n  IRowSeriesNumber,\n  ListTableAPI,\n  PivotTableAPI,\n  RadioColumnDefine,\n  RadioStyleOption,\n  TextColumnDefine\n} from '../../ts-types';\nimport { HierarchyState, IconPosition } from '../../ts-types';\nimport * as calc from '../../tools/calc';\nimport { validToString } from '../../tools/util';\nimport { getQuadProps } from '../utils/padding';\nimport { getProp } from '../utils/get-prop';\nimport type { BaseTableAPI, HeaderData } from '../../ts-types/base-table';\nimport type { PivotHeaderLayoutMap } from '../../layout/pivot-header-layout';\nimport type { ComputeAxisComponentWidth } from '../../components/axis/get-axis-component-size';\nimport { Factory } from '../../core/factory';\nimport type { Group as VGroup } from './../../vrender';\nimport { isArray, isFunction, isNumber, isObject, isValid } from '@visactor/vutils';\nimport { decodeReactDom, dealPercentCalc } from '../component/custom';\nimport { breakString } from '../utils/break-string';\nimport { emptyCustomLayout } from '../../components/react/react-custom-layout';\nimport { getOrApply } from '../../tools/helper';\n\n/**\n * @description: 计算列宽\n * @param {BaseTableAPI} table\n * @param {number} colStart\n * @param {number} colEnd\n * @param {boolean} update 是否执行更新场景树\n */\nexport function computeColsWidth(table: BaseTableAPI, colStart?: number, colEnd?: number, update?: boolean): void {\n  // const time = typeof window !== 'undefined' ? window.performance.now() : 0;\n  (table as PivotTableAPI | ListTableAPI).internalProps.columnWidthConfig &&\n    (table as PivotTableAPI | ListTableAPI)._parseColumnWidthConfig(\n      (table as PivotTableAPI | ListTableAPI).internalProps.columnWidthConfig as any\n    );\n\n  (table as PivotTableAPI).isPivotTable() &&\n    (table as PivotTableAPI).internalProps.columnWidthConfigForRowHeader &&\n    (table as PivotTableAPI)._parseColumnWidthConfigForRowHeader(\n      (table as PivotTableAPI).internalProps.columnWidthConfigForRowHeader\n    );\n\n  colStart = colStart ?? 0;\n  colEnd = colEnd ?? table.colCount - 1;\n  // table._clearColRangeWidthsMap();\n  // clear colRangeWidthsMap\n  if (colStart === 0 && colEnd === table.colCount - 1) {\n    table._clearColRangeWidthsMap();\n    // } else {\n    //   for (let col = colStart; col <= colEnd; col++) {\n    //     table._clearColRangeWidthsMap(col);\n    //   }\n  }\n\n  const layoutMap = table.internalProps.layoutMap;\n  if (table.isPivotTable()) {\n    (layoutMap as PivotHeaderLayoutMap).enableUseGetBodyCache();\n    (layoutMap as PivotHeaderLayoutMap).enableUseHeaderPathCache();\n  }\n\n  const oldColWidths: number[] = [];\n  const newWidths: number[] = [];\n  if (update) {\n    for (let col = 0; col < table.colCount; col++) {\n      oldColWidths[col] = table.getColWidth(col);\n    }\n  }\n  for (let col = colStart; col <= colEnd; col++) {\n    let maxWidth;\n    if (\n      !table.internalProps.transpose &&\n      (table.internalProps.layoutMap.columnObjects?.[col]?.columnWidthComputeMode === 'only-header' ||\n        table.columnWidthComputeMode === 'only-header') &&\n      'showHeader' in table.internalProps.layoutMap\n    ) {\n      const temp = table.internalProps.layoutMap.showHeader;\n      table.internalProps.layoutMap.showHeader = true;\n      maxWidth = computeColWidth(col, 0, table.internalProps.layoutMap.headerLevelCount - 1, table);\n      table.internalProps.layoutMap.showHeader = temp;\n    } else if (\n      !table.internalProps.transpose &&\n      (table.internalProps.layoutMap.columnObjects?.[col]?.columnWidthComputeMode === 'only-body' ||\n        table.columnWidthComputeMode === 'only-body')\n    ) {\n      maxWidth = computeColWidth(\n        col,\n        table.internalProps.layoutMap.getBodyRange().start.row,\n        table.internalProps.layoutMap.getBodyRange().end.row,\n        table\n      );\n    } else {\n      maxWidth = computeColWidth(col, 0, table.rowCount - 1, table);\n    }\n\n    table._setColContentWidth(col, maxWidth);\n\n    const oldWidth = table.getColWidth(col);\n    if (oldWidth !== maxWidth) {\n      table._clearColRangeWidthsMap(col);\n    }\n    if (update) {\n      newWidths[col] = Math.round(table._adjustColWidth(col, maxWidth));\n    } else {\n      table._setColWidth(col, table._adjustColWidth(col, maxWidth), false, true);\n    }\n  }\n\n  // 处理adaptive宽度\n  if (table.widthMode === 'adaptive') {\n    // const rowHeaderWidth = table.getColsWidth(0, table.rowHeaderLevelCount - 1);\n    // const rightHeaderWidth = table.isPivotChart() ? table.getRightFrozenColsWidth() : 0;\n    // const totalDrawWidth = table.tableNoFrameWidth - rowHeaderWidth - rightHeaderWidth;\n\n    table._clearColRangeWidthsMap();\n    const canvasWidth = table.tableNoFrameWidth;\n    let actualHeaderWidth = 0;\n    let startCol = 0;\n    let endCol = table.colCount;\n    if (table.widthAdaptiveMode === 'only-body') {\n      for (let col = 0; col < table.colCount; col++) {\n        const colWidth = update ? newWidths[col] ?? table.getColWidth(col) : table.getColWidth(col);\n        if (\n          col < table.rowHeaderLevelCount ||\n          (table.isPivotChart() && col >= table.colCount - table.rightFrozenColCount)\n        ) {\n          actualHeaderWidth += colWidth;\n        }\n      }\n      startCol = table.rowHeaderLevelCount;\n      endCol = table.isPivotChart() ? table.colCount - table.rightFrozenColCount : table.colCount;\n    }\n    getAdaptiveWidth(canvasWidth - actualHeaderWidth, startCol, endCol, update, newWidths, table);\n    // const canvasWidth = table.internalProps.canvas.width;\n    // const rowHeaderWidth = table.getColsWidth(0, table.rowHeaderLevelCount - 1);\n    // const rightHeaderWidth = table.isPivotChart() ? table.getRightFrozenColsWidth() : 0;\n    // const totalDrawWidth = table.tableNoFrameWidth - rowHeaderWidth - rightHeaderWidth;\n    // const startCol = table.rowHeaderLevelCount;\n    // const endCol = table.isPivotChart() ? table.colCount - table.rightFrozenColCount : table.colCount;\n    // let actualWidth = 0;\n    // for (let col = startCol; col < endCol; col++) {\n    //   actualWidth += update ? newWidths[col] : table.getColWidth(col);\n    // }\n    // const factor = totalDrawWidth / actualWidth;\n    // for (let col = startCol; col < endCol; col++) {\n    //   let colWidth;\n    //   if (col === endCol - 1) {\n    //     colWidth =\n    //       totalDrawWidth -\n    //       (update\n    //         ? newWidths.reduce((acr, cur, index) => {\n    //             if (index >= startCol && index <= endCol - 2) {\n    //               return acr + cur;\n    //             }\n    //             return acr;\n    //           }, 0)\n    //         : table.getColsWidth(startCol, endCol - 2));\n    //   } else {\n    //     colWidth = Math.round((update ? newWidths[col] : table.getColWidth(col)) * factor);\n    //   }\n    //   if (update) {\n    //     newWidths[col] = table._adjustColWidth(col, colWidth);\n    //   } else {\n    //     table._setColWidth(col, table._adjustColWidth(col, colWidth), false, true);\n    //   }\n    // }\n  } else if (table.autoFillWidth) {\n    table._clearColRangeWidthsMap();\n    const canvasWidth = table.tableNoFrameWidth;\n    let actualHeaderWidth = 0;\n    let actualWidth = 0;\n    for (let col = 0; col < table.colCount; col++) {\n      const colWidth = update ? newWidths[col] ?? table.getColWidth(col) : table.getColWidth(col);\n      if (\n        col < table.rowHeaderLevelCount + table.leftRowSeriesNumberCount ||\n        (table.isPivotChart() && col >= table.colCount - table.rightFrozenColCount)\n      ) {\n        actualHeaderWidth += colWidth;\n      }\n      actualWidth += colWidth;\n    }\n    // 如果内容宽度小于canvas宽度，执行adaptive放大\n    if (actualWidth < canvasWidth && actualWidth > actualHeaderWidth) {\n      const startCol = table.rowHeaderLevelCount + table.leftRowSeriesNumberCount;\n      const endCol = table.isPivotChart() ? table.colCount - table.rightFrozenColCount : table.colCount;\n      getAdaptiveWidth(canvasWidth - actualHeaderWidth, startCol, endCol, update, newWidths, table);\n    }\n\n    // // 如果内容宽度小于canvas宽度，执行adaptive放大\n    // if (actualWidth < canvasWidth && actualWidth - actualHeaderWidth > 0) {\n    //   const factor = (canvasWidth - actualHeaderWidth) / (actualWidth - actualHeaderWidth);\n    //   for (let col = table.frozenColCount; col < table.colCount - table.rightFrozenColCount; col++) {\n    //     let colWidth;\n    //     if (col === table.colCount - table.rightFrozenColCount - 1) {\n    //       colWidth =\n    //         canvasWidth -\n    //         actualHeaderWidth -\n    //         (update\n    //           ? newWidths.reduce((acr, cur, index) => {\n    //               if (index >= table.frozenColCount && index <= table.colCount - table.rightFrozenColCount - 2) {\n    //                 return acr + cur;\n    //               }\n    //               return acr;\n    //             }, 0)\n    //           : table.getColsWidth(table.frozenColCount, table.colCount - table.rightFrozenColCount - 2));\n    //     } else {\n    //       colWidth = Math.round((update ? newWidths[col] : table.getColWidth(col)) * factor);\n    //     }\n    //     if (update) {\n    //       // newWidths[col] = newWidths[col] * factor;\n    //       newWidths[col] = table._adjustColWidth(col, colWidth);\n    //     } else {\n    //       // table.setColWidth(col, table.getColWidth(col) * factor, false, true);\n    //       table._setColWidth(col, table._adjustColWidth(col, colWidth), false, true);\n    //     }\n    //   }\n    // }\n  }\n  // console.log('computeColsWidth  time:', (typeof window !== 'undefined' ? window.performance.now() : 0) - time);\n\n  if (update) {\n    for (let col = 0; col < table.colCount; col++) {\n      // newColWidth could not be in column min max range possibly\n      // const newColWidth = table._adjustColWidth(col, newWidths[col]) ?? table.getColWidth(col);\n      const newColWidth = newWidths[col] ?? table.getColWidth(col) ?? table.getColWidth(col);\n      if (newColWidth !== oldColWidths[col]) {\n        // update the column width in scenegraph\n        table._setColWidth(col, newColWidth, false, true);\n        // table.scenegraph.updateColWidth(col, newColWidth - oldColWidths[col], true, true);\n      }\n    }\n    table.stateManager.checkFrozen();\n    for (let col = 0; col < table.colCount; col++) {\n      // newColWidth could not be in column min max range possibly\n      // const newColWidth = table._adjustColWidth(col, newWidths[col]) ?? table.getColWidth(col);\n      const newColWidth = table.getColWidth(col);\n      if (newColWidth !== oldColWidths[col]) {\n        // update the column width in scenegraph\n        // table._setColWidth(col, newColWidth);\n        table.scenegraph.updateColWidth(col, newColWidth - oldColWidths[col], true, true);\n      }\n    }\n    table.scenegraph.updateContainer(true);\n  }\n  // console.log('computeColsWidth  time:', (typeof window !== 'undefined' ? window.performance.now() : 0) - time, colStart, colEnd);\n\n  if (table.isPivotTable()) {\n    (layoutMap as PivotHeaderLayoutMap).disableUseGetBodyCache();\n    (layoutMap as PivotHeaderLayoutMap).disableUseHeaderPathCache();\n  }\n}\n\n/**\n * @description: 计算列宽\n * @param {number} col\n * @param {number} startRow\n * @param {number} endRow\n * @param {BaseTableAPI} table\n * @param {boolean} forceCompute\n * @return {*}\n */\nexport function computeColWidth(\n  col: number,\n  startRow: number,\n  endRow: number,\n  table: BaseTableAPI,\n  forceCompute: boolean = false //forceCompute如果设置为true 即便不是自动列宽的列也会按内容计算列宽\n): number {\n  let width = getColWidthDefinedWidthResizedWidth(col, table);\n  if (\n    table.internalProps.transpose &&\n    width === 'auto' &&\n    ((table.columnWidthComputeMode === 'only-header' && col >= table.rowHeaderLevelCount) ||\n      (table.columnWidthComputeMode === 'only-body' && col < table.rowHeaderLevelCount))\n  ) {\n    width = table.getDefaultColumnWidth(col);\n  }\n\n  if (forceCompute && !table.internalProps.transpose) {\n    return computeAutoColWidth(width, col, startRow, endRow, forceCompute, table);\n  } else if (typeof width === 'number') {\n    return width;\n  } else if (width !== 'auto' && typeof width === 'string') {\n    // return calc.toPx(width, table.internalProps.calcWidthContext);\n    return table._adjustColWidth(col, table._colWidthDefineToPxWidth(width));\n  }\n  return computeAutoColWidth(width, col, startRow, endRow, forceCompute, table);\n}\n\n/**\n * @description: 计算width: auto情况下的列宽\n * @param {number} col\n * @param {number} startRow\n * @param {number} endRow\n * @param {boolean} forceCompute\n * @param {BaseTableAPI} table\n * @return {*}\n */\nfunction computeAutoColWidth(\n  widthDeifne: string | number,\n  col: number,\n  startRow: number,\n  endRow: number,\n  forceCompute: boolean,\n  table: BaseTableAPI\n): number {\n  // 处理 auto width\n  let maxWidth = 0;\n  let deltaRow = 1;\n  let prepareDeltaRow = 1; // 当计算完表头单元格的宽度后再采用采用逻辑，prepareDeltaRow这个值为期body部分做准备\n  if (endRow - startRow > 5000) {\n    // 超过5000行启动列宽自动计算采样\n    prepareDeltaRow = Math.ceil((endRow - startRow) / 5000);\n  }\n  // 如果是透视图\n  if (table.isPivotChart() && col >= table.rowHeaderLevelCount && col < table.colCount - table.rightFrozenColCount) {\n    if (!(table.internalProps.layoutMap as PivotHeaderLayoutMap).indicatorsAsCol) {\n      //并且指标是以行展示 计算列宽需要根据x轴的值域范围\n      const optimunWidth = (table.internalProps.layoutMap as PivotHeaderLayoutMap).getOptimunWidthForChart(col);\n      if (optimunWidth > 0) {\n        return optimunWidth;\n      }\n    } else {\n      //直接拿表头的默认列宽\n      return table.defaultColWidth;\n    }\n  }\n\n  for (let row = startRow; row <= endRow; row += deltaRow) {\n    // 判断透视图轴组件\n    if (table.isPivotChart()) {\n      const layout = table.internalProps.layoutMap as PivotHeaderLayoutMap;\n      const axisConfig = layout.getAxisConfigInPivotChart(col, row);\n      if (axisConfig) {\n        const computeAxisComponentWidth: ComputeAxisComponentWidth = Factory.getFunction('computeAxisComponentWidth');\n        const axisWidth = computeAxisComponentWidth(axisConfig, table);\n        if (typeof axisWidth === 'number') {\n          maxWidth = Math.max(axisWidth, maxWidth);\n          continue;\n        }\n      } else if (\n        layout.isLeftBottomCorner(col, row) ||\n        layout.isRightTopCorner(col, row) ||\n        layout.isRightBottomCorner(col, row)\n      ) {\n        // 透视图三角为无效单元格，不参与宽度计算\n        continue;\n      }\n    }\n\n    // 判断CustomRender\n    const customWidth = computeCustomRenderWidth(col, row, table);\n    if (customWidth) {\n      maxWidth = Math.max(customWidth.width, maxWidth);\n      if (!customWidth.renderDefault) {\n        continue;\n      }\n    }\n\n    // 判断透视表如果在指标\n    // const indicatorWidth = computeIndicatorWidth(col, row, forceCompute, table);\n    // const indicatorWidth = table.internalProps.layoutMap.getColumnWidthDefined(col);\n    const indicatorWidth = widthDeifne;\n    if (typeof indicatorWidth === 'number' && table.widthMode === 'standard' && !forceCompute) {\n      maxWidth = Math.max(indicatorWidth, maxWidth);\n      continue;\n    }\n\n    const cellType = table.isHeader(col, row)\n      ? (table._getHeaderLayoutMap(col, row) as HeaderData)?.headerType\n      : table.getBodyColumnType(col, row);\n    if (\n      isValid(cellType) &&\n      cellType !== 'text' &&\n      cellType !== 'link' &&\n      cellType !== 'progressbar' &&\n      cellType !== 'checkbox' &&\n      cellType !== 'radio' &&\n      cellType !== 'switch' &&\n      cellType !== 'button'\n    ) {\n      // text&link&progressbar测量文字宽度\n      // image&video&sparkline使用默认宽度\n      maxWidth = Math.max(maxWidth, table.getColWidthDefinedNumber(col) || 0);\n      continue;\n    }\n\n    // 处理树形展开\n    let cellHierarchyIndent = 0;\n    const layoutMap = table.internalProps.layoutMap;\n    //判断是否为表头\n    if (layoutMap.isHeader(col, row)) {\n      const hd = layoutMap.getHeader(col, row);\n      // 如果某级表头设置了only-body，在计算表头内容宽度时跳过改级表头\n      if ((hd as HeaderData)?.define?.columnWidthComputeMode === 'only-body') {\n        continue;\n      }\n      if (isValid((hd as HeaderData)?.hierarchyLevel)) {\n        cellHierarchyIndent =\n          ((hd as HeaderData).hierarchyLevel ?? 0) *\n          ((layoutMap as PivotHeaderLayoutMap).rowHierarchyType === 'tree'\n            ? (layoutMap as PivotHeaderLayoutMap).rowHierarchyIndent ?? 0\n            : 0);\n        if (\n          (layoutMap as PivotHeaderLayoutMap).rowHierarchyTextStartAlignment &&\n          !table.internalProps.headerHelper.getHierarchyIcon(col, row)\n        ) {\n          cellHierarchyIndent += table.internalProps.headerHelper.getHierarchyIconWidth();\n        }\n      }\n    } else if (table.isListTable()) {\n      deltaRow = prepareDeltaRow;\n      // 基本表格表身body单元格 如果是树形展开 需要考虑缩进值\n      // const cellHierarchyState = table.getHierarchyState(col, row);\n      // if (cellHierarchyState === HierarchyState.expand || cellHierarchyState === HierarchyState.collapse) {\n      const define = table.getBodyColumnDefine(col, row);\n      if ((define as ColumnDefine)?.tree) {\n        const indexArr = table.dataSource.getIndexKey(table.getRecordShowIndexByCell(col, row));\n        cellHierarchyIndent =\n          Array.isArray(indexArr) && table.getHierarchyState(col, row) !== HierarchyState.none\n            ? (indexArr.length - 1) * ((layoutMap as SimpleHeaderLayoutMap).hierarchyIndent ?? 0)\n            : 0;\n        if (\n          (layoutMap as SimpleHeaderLayoutMap).hierarchyTextStartAlignment &&\n          !table.internalProps.bodyHelper.getHierarchyIcon(col, row)\n        ) {\n          cellHierarchyIndent += table.internalProps.headerHelper.getHierarchyIconWidth();\n        }\n      }\n    }\n\n    // 测量文字宽度\n    const textWidth = computeTextWidth(col, row, cellType, table);\n    maxWidth = Math.max(textWidth + cellHierarchyIndent, maxWidth);\n    //在前面设置了采用规则的情况下，为了确保底部冻结的每一行都测到\n    if (\n      deltaRow > 1 &&\n      table.bottomFrozenRowCount > 0 &&\n      row < table.rowCount - table.bottomFrozenRowCount &&\n      row + deltaRow >= table.rowCount - table.bottomFrozenRowCount\n    ) {\n      row = table.rowCount - table.bottomFrozenRowCount - deltaRow;\n      deltaRow = 1;\n      prepareDeltaRow = 1;\n    }\n  }\n\n  // 处理宽度限制\n  const colMinWidth = table.getMinColWidth(col);\n  const colMaxWidth = table.getMaxColWidth(col);\n  if (maxWidth < colMinWidth) {\n    return colMinWidth;\n  } else if (maxWidth > colMaxWidth) {\n    return colMaxWidth;\n  } else if (maxWidth <= 0) {\n    // In the case of partially hiding the header, the width calculation may be 0.\n    // In this case, the default value is used to prevent it from being unable to be displayed\n    maxWidth = table.defaultColWidth;\n  }\n  return maxWidth;\n}\n\n/**\n * @description: 计算customRender相关列宽\n * @param {number} col\n * @param {number} row\n * @param {BaseTableAPI} table\n * @return {*}\n */\nfunction computeCustomRenderWidth(col: number, row: number, table: BaseTableAPI) {\n  const customRender = table.getCustomRender(col, row);\n  let customLayout = table.getCustomLayout(col, row);\n  if (customRender || customLayout) {\n    let spanCol = 1;\n    let width = 0;\n    let renderDefault = false;\n    let enableCellPadding = false;\n    let cellRange;\n    if (\n      table.isHeader(col, row) ||\n      (table.getBodyColumnDefine(col, row) as TextColumnDefine)?.mergeCell ||\n      table.hasCustomMerge()\n    ) {\n      cellRange = table.getCellRange(col, row);\n      spanCol = cellRange.end.col - cellRange.start.col + 1;\n    }\n    const arg = {\n      col: cellRange?.start.col ?? col,\n      row: cellRange?.start.row ?? row,\n      dataValue: table.getCellOriginValue(col, row),\n      value: table.getCellValue(col, row) || '',\n      rect: getCellRect(col, row, table),\n      table,\n      originCol: col,\n      originRow: row,\n      forComputation: true\n    };\n    if (customLayout === 'react-custom-layout') {\n      // customLayout = table._reactCreateGraphic;\n      customLayout = table.reactCustomLayout?.getCustomLayoutFunc(col, row) || emptyCustomLayout;\n    }\n    if (isFunction(customLayout)) {\n      // 处理customLayout\n      const customLayoutObj = customLayout(arg);\n      if (customLayoutObj.rootContainer) {\n        customLayoutObj.rootContainer = decodeReactDom(customLayoutObj.rootContainer);\n        dealPercentCalc(customLayoutObj.rootContainer, 0, table.getRowHeight(row));\n        const setedWidth = (customLayoutObj.rootContainer as VGroup).attribute.width;\n        customLayoutObj.rootContainer.setStage(table.scenegraph.stage);\n        width = setedWidth > 0 ? setedWidth : (customLayoutObj.rootContainer as VGroup).AABBBounds.width() ?? 0;\n        renderDefault = customLayoutObj.renderDefault;\n        enableCellPadding = customLayoutObj.enableCellPadding;\n      } else {\n        width = 0;\n        renderDefault = customLayoutObj.renderDefault;\n        enableCellPadding = customLayoutObj.enableCellPadding;\n      }\n    } else if (typeof customRender === 'function') {\n      // 处理customRender\n      const customRenderObj = customRender(arg);\n      width = customRenderObj?.expectedWidth ?? 0;\n      renderDefault = customRenderObj?.renderDefault;\n    } else {\n      width = customRender?.expectedWidth ?? 0;\n      renderDefault = customRender?.renderDefault;\n    }\n    width = Math.ceil(width);\n    if (enableCellPadding) {\n      const actStyle = table._getCellStyle(col, row);\n      const padding = getQuadProps(getProp('padding', actStyle, col, row, table));\n      width += padding[1] + padding[3];\n    }\n    return {\n      width: width / spanCol,\n      renderDefault\n    };\n  }\n  return undefined;\n}\n\n/**\n * @description: 计算指标相关列宽\n * @param {number} col\n * @param {number} row\n * @param {boolean} forceCompute\n * @param {BaseTableAPI} table\n * @return {*}\n */\nfunction computeIndicatorWidth(\n  col: number,\n  row: number,\n  forceCompute: boolean,\n  table: BaseTableAPI\n): number | undefined {\n  const { layoutMap } = table.internalProps;\n  if (table.isPivotTable() && (layoutMap as PivotHeaderLayoutMap).isColumnIndicatorHeader(col, row)) {\n    // 透视表如果在指标中配置了宽度，使用该宽度作为指标单元格及下面内容单元格的列宽\n    const body = layoutMap.getBody(col, row);\n    if (body && body.width && body.width !== 'auto' && !forceCompute) {\n      const width = Math.round(calc.toPx(body.width, table.internalProps.calcWidthContext));\n      return width;\n    }\n  }\n  return undefined;\n}\n\n/**\n * @description: 计算文字宽度\n * @param {number} col\n * @param {number} row\n * @param {BaseTableAPI} table\n * @return {*}\n */\nfunction computeTextWidth(col: number, row: number, cellType: ColumnTypeOption, table: BaseTableAPI): number {\n  let maxWidth = 0;\n  const cellValue = table.getCellValue(col, row);\n  // const dataValue = table.getCellOriginValue(col, row);\n  const actStyle = table._getCellStyle(col, row);\n  let iconWidth = 0;\n\n  // const define = table.getBodyColumnDefine(col, row);\n  // const mayHaveIcon = table.getCellLocation(col, row) !== 'body' ? true : !!define?.icon || !!define?.tree;\n\n  let mayHaveIcon = false;\n  if (table.getCellLocation(col, row) !== 'body') {\n    mayHaveIcon = true;\n  } else {\n    const define = table.getBodyColumnDefine(col, row);\n    mayHaveIcon = !!define?.icon || !!(define as ColumnDefine)?.tree || (define as IRowSeriesNumber)?.dragOrder;\n  }\n  if (mayHaveIcon) {\n    const icons = table.getCellIcons(col, row);\n    icons?.forEach(icon => {\n      if (icon.positionType !== IconPosition.absoluteRight) {\n        iconWidth += (icon.width ?? 0) + (icon.marginLeft ?? 0) + (icon.marginRight ?? 0);\n      }\n    });\n  }\n\n  let spanCol = 1;\n  if (\n    table.isHeader(col, row) ||\n    (table.getBodyColumnDefine(col, row) as TextColumnDefine)?.mergeCell ||\n    table.hasCustomMerge()\n  ) {\n    const cellRange = table.getCellRange(col, row);\n    spanCol = cellRange.end.col - cellRange.start.col + 1;\n  }\n\n  const padding = getQuadProps(getProp('padding', actStyle, col, row, table));\n  const paddingWidth = padding[1] + padding[3]; // + cellHierarchyIndent\n\n  const fontSize = getProp('fontSize', actStyle, col, row, table);\n  const fontFamily = getProp('fontFamily', actStyle, col, row, table);\n  const fontWeight = getProp('fontWeight', actStyle, col, row, table);\n  let text: string;\n  if (cellType === 'checkbox') {\n    text = isObject(cellValue) ? (cellValue as any).text : cellValue;\n  } else if (cellType === 'radio') {\n    if (isArray(cellValue)) {\n      text = '';\n      const define = table.getBodyColumnDefine(col, row);\n      const radioDirectionInCell = (define as RadioColumnDefine)?.radioDirectionInCell ?? 'vertical';\n      if (radioDirectionInCell === 'vertical') {\n        cellValue.forEach(line => {\n          text += (isObject(line) ? (line as any).text : line).toString() + '\\n';\n        });\n      } else if (radioDirectionInCell === 'horizontal') {\n        cellValue.forEach(line => {\n          text += (isObject(line) ? (line as any).text : line).toString();\n        });\n      }\n    } else {\n      text = isObject(cellValue) ? (cellValue as any).text : cellValue;\n    }\n  } else if (cellType === 'button') {\n    const define = table.getBodyColumnDefine(col, row);\n    const buttonTextValue = getOrApply((define as any).text, {\n      col,\n      row,\n      table,\n      context: null,\n      value: cellValue,\n      dataValue: table.getCellOriginValue(col, row)\n    });\n    text = buttonTextValue ?? (cellValue as string) ?? '';\n  } else {\n    text = cellValue;\n  }\n  const lines = breakString(text, table).text;\n  if (lines.length >= 1 && !(lines.length === 1 && lines[0] === '')) {\n    // eslint-disable-next-line no-loop-func\n    lines.forEach((line: string) => {\n      const width = table.measureText(line, {\n        fontSize,\n        fontFamily,\n        fontWeight\n      }).width;\n      maxWidth = Math.max(\n        // 最大字符上限控制测量的字符\n        (width + paddingWidth + 4 + iconWidth) / spanCol, // 这里+4为列宽测量结果的buffer\n        maxWidth\n      );\n    });\n  } else {\n    maxWidth = Math.max(\n      // 最大字符上限控制测量的字符\n      (paddingWidth + 4 + iconWidth) / spanCol,\n      maxWidth\n    );\n  }\n  // 判断是否需要限制最大宽度 之前写死的450 需要使用配置来判断\n  if (table.internalProps.limitMaxAutoWidth !== false) {\n    maxWidth = Math.min(\n      typeof table.internalProps.limitMaxAutoWidth === 'number' ? table.internalProps.limitMaxAutoWidth : 450,\n      maxWidth\n    );\n  }\n\n  if (cellType === 'checkbox') {\n    const size = getProp('size', actStyle, col, row, table);\n    maxWidth += size;\n\n    if (text) {\n      const spaceBetweenTextAndIcon = getProp('spaceBetweenTextAndIcon', actStyle, col, row, table);\n      maxWidth += spaceBetweenTextAndIcon;\n    }\n  } else if (cellType === 'radio') {\n    const size = getProp('size', actStyle, col, row, table);\n    const outerRadius = getProp('outerRadius', actStyle, col, row, table);\n    const circleSize = isNumber(outerRadius) ? outerRadius * 2 : size;\n    const spaceBetweenTextAndIcon = getProp('spaceBetweenTextAndIcon', actStyle, col, row, table);\n\n    if (isArray(cellValue)) {\n      const define = table.getBodyColumnDefine(col, row);\n      const spaceBetweenRadio = getProp('spaceBetweenRadio', actStyle, col, row, table);\n      const radioDirectionInCell = (define as RadioColumnDefine)?.radioDirectionInCell ?? 'vertical';\n      if (radioDirectionInCell === 'vertical') {\n        // one icon\n        maxWidth += circleSize;\n        maxWidth += spaceBetweenTextAndIcon;\n      } else if (radioDirectionInCell === 'horizontal') {\n        // multi icon\n        maxWidth += (circleSize + spaceBetweenTextAndIcon) * cellValue.length;\n        maxWidth += spaceBetweenRadio * (cellValue.length - 1);\n      }\n    } else {\n      // one icon\n      maxWidth += circleSize;\n      if (text) {\n        maxWidth += spaceBetweenTextAndIcon;\n      }\n    }\n  } else if (cellType === 'switch') {\n    const boxWidth = getProp('boxWidth', actStyle, col, row, table);\n    maxWidth = boxWidth;\n  } else if (cellType === 'button') {\n    const buttonPadding = getProp('buttonPadding', actStyle, col, row, table);\n    maxWidth += buttonPadding * 2;\n  }\n\n  return maxWidth;\n}\n\nfunction getCellRect(col: number, row: number, table: BaseTableAPI): any {\n  return {\n    left: 0,\n    top: 0,\n    right: table.getColWidth(col),\n    bottom: table.getRowHeight(row),\n    width: null, // vrender 逻辑中通过判断null对flex的元素来自动计算宽高\n    height: null\n  };\n}\n\nfunction getColWidthDefinedWidthResizedWidth(col: number, table: BaseTableAPI) {\n  const widthDefined = table.getColWidthDefined(col);\n  if (table.internalProps._widthResizedColMap.has(col)) {\n    return table.getColWidth(col);\n  }\n  return widthDefined;\n}\n\nexport function getAdaptiveWidth(\n  totalDrawWidth: number,\n  startCol: number,\n  endColPlus1: number,\n  update: boolean,\n  newWidths: number[],\n  table: BaseTableAPI,\n  fromScenegraph?: boolean\n) {\n  let actualWidth = 0;\n  const adaptiveColumns: number[] = [];\n  const sparklineColumns = [];\n  let totalSparklineAbleWidth = 0;\n  for (let col = startCol; col < endColPlus1; col++) {\n    const width = update ? newWidths[col] ?? table.getColWidth(col) : table.getColWidth(col);\n    const maxWidth = table.getMaxColWidth(col);\n    const minWidth = table.getMinColWidth(col);\n    if (width !== maxWidth && width !== minWidth) {\n      actualWidth += width;\n      adaptiveColumns.push(col);\n    } else {\n      // fixed width, do not adaptive\n      totalDrawWidth -= width;\n    }\n\n    if (table.options.customConfig?.shrinkSparklineFirst) {\n      const bodyCellType = table.getBodyColumnType(col, 0);\n      if (bodyCellType === 'sparkline') {\n        sparklineColumns.push({ col, width });\n        totalSparklineAbleWidth += width - table.defaultColWidth;\n      }\n    }\n  }\n\n  const factor = totalDrawWidth / actualWidth;\n\n  if (\n    table.options.customConfig?.shrinkSparklineFirst &&\n    factor < 1 &&\n    actualWidth - totalDrawWidth < totalSparklineAbleWidth\n  ) {\n    // only shrink sparkline column\n    for (let i = 0; i < sparklineColumns.length; i++) {\n      const { col, width } = sparklineColumns[i];\n      const deltaWidth = (actualWidth - totalDrawWidth) / sparklineColumns.length;\n      const colWidth = Math.floor(width - deltaWidth);\n\n      if (update) {\n        newWidths[col] = table._adjustColWidth(col, colWidth);\n      } else if (fromScenegraph) {\n        table.scenegraph.setColWidth(col, table._adjustColWidth(col, colWidth));\n      } else {\n        table._setColWidth(col, table._adjustColWidth(col, colWidth), false, true);\n      }\n    }\n    return;\n  }\n\n  for (let i = 0; i < adaptiveColumns.length; i++) {\n    const col = adaptiveColumns[i];\n    let colWidth;\n    if (i === adaptiveColumns.length - 1) {\n      colWidth =\n        totalDrawWidth -\n        adaptiveColumns.reduce((acr, cur, index) => {\n          if (cur !== col) {\n            return acr + (update ? newWidths[cur] ?? table.getColWidth(col) : table.getColWidth(cur));\n          }\n          return acr;\n        }, 0);\n    } else {\n      colWidth = Math.round((update ? newWidths[col] ?? table.getColWidth(col) : table.getColWidth(col)) * factor);\n    }\n    if (update) {\n      newWidths[col] = table._adjustColWidth(col, colWidth);\n    } else if (fromScenegraph) {\n      table.scenegraph.setColWidth(col, table._adjustColWidth(col, colWidth));\n    } else {\n      table._setColWidth(col, table._adjustColWidth(col, colWidth), false, true);\n    }\n  }\n}\n"]}