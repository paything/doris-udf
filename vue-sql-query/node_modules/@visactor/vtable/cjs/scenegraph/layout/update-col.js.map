{"version":3,"sources":["../src/scenegraph/layout/update-col.ts"],"names":[],"mappings":"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","file":"update-col.js","sourcesContent":["import { isNumber } from '@visactor/vutils';\nimport type { CellAddress } from '../../ts-types';\nimport type { BaseTableAPI } from '../../ts-types/base-table';\nimport { Group } from '../graphic/group';\nimport { updateCell } from '../group-creater/cell-helper';\nimport type { Scenegraph } from '../scenegraph';\nimport { getCellMergeInfo } from '../utils/get-cell-merge';\nimport type { IGroup } from './../../vrender';\nimport { checkHaveTextStick, resetTextStick } from '../stick-text';\n\n/**\n * add and remove rows in scenegraph\n */\nexport function updateCol(\n  removeCells: CellAddress[],\n  addCells: CellAddress[],\n  updateCells: CellAddress[],\n  table: BaseTableAPI\n) {\n  if (checkHaveTextStick(table)) {\n    resetTextStick(table); // reset text stick\n  }\n\n  const scene = table.scenegraph;\n  // deduplication\n  const removeCols = deduplication(removeCells.map(cell => cell.col)).sort((a, b) => b - a);\n  const addCols = deduplication(addCells.map(cell => cell.col)).sort((a, b) => a - b);\n  const updateCols = deduplication(updateCells.map(cell => cell.col)).sort((a, b) => a - b);\n\n  // remove cells\n  removeCols.forEach(col => {\n    removeCol(col, scene);\n  });\n\n  const colWidthsMap = table.colWidthsMap;\n  removeCols.forEach(col => {\n    colWidthsMap.delAndReorder(col);\n  });\n\n  if (removeCols.length) {\n    resetColNumber(scene);\n  }\n\n  scene.table._clearColRangeWidthsMap();\n\n  // add cells\n  let updateAfter: number;\n  addCols.forEach(col => {\n    const needUpdateAfter = addCol(col, scene);\n    resetColNumber(scene);\n    updateAfter = updateAfter ?? needUpdateAfter;\n    colWidthsMap.addAndReorder(col);\n  });\n\n  // reset attribute y and col number in CellGroup\n  // const newTotalHeight = resetColNumberAndY(scene);\n  resetColNumberAndX(scene);\n  // add cells\n  updateCols.forEach(col => {\n    for (let row = 0; row < table.rowCount; row++) {\n      // updateColAttr(col, scene);\n      const mergeInfo = getCellMergeInfo(scene.table, col, row);\n      if (mergeInfo) {\n        for (let col = mergeInfo.start.col; col <= mergeInfo.end.col; col++) {\n          for (let col = mergeInfo.start.col; col <= mergeInfo.end.col; col++) {\n            updateCell(col, row, scene.table, false);\n          }\n        }\n      } else {\n        updateCell(col, row, scene.table, false);\n      }\n    }\n  });\n\n  if (isNumber(updateAfter)) {\n    for (\n      let col = updateAfter;\n      col < Math.max(table.colCount, table.internalProps._oldColCount ?? table.colCount);\n      col++\n    ) {\n      for (let row = 0; row < Math.max(table.rowCount, table.internalProps._oldRowCount ?? table.rowCount); row++) {\n        const cellGroup = scene.highPerformanceGetCell(col, row, true);\n        cellGroup && (cellGroup.needUpdate = true);\n      }\n    }\n    scene.proxy.colUpdatePos = updateAfter;\n  }\n  if (addCols.length) {\n    if (!isNumber(updateAfter)) {\n      const minCol = Math.min(...addCols);\n      scene.proxy.colUpdatePos = minCol;\n    }\n    scene.proxy.colUpdateDirection = 'left';\n    scene.proxy.updateColGroups(scene.proxy.screenColCount * 2);\n    updateRightFrozeCellGroups();\n    scene.proxy.progress();\n  } else if (removeCols.length) {\n    scene.proxy.updateColGroups(scene.proxy.screenColCount * 2);\n    updateRightFrozeCellGroups();\n    scene.proxy.progress();\n  }\n\n  // update table size\n  const newTotalWidth = table.getColsWidth(table.frozenColCount, table.colCount - 1);\n  scene.updateContainerWidth(scene.table.frozenColCount, newTotalWidth - scene.bodyGroup.attribute.width);\n\n  function updateRightFrozeCellGroups() {\n    if (\n      addCols?.[addCols?.length - 1] >= table.colCount - table.rightFrozenColCount ||\n      updateCols?.[updateCols?.length - 1] >= table.colCount - table.rightFrozenColCount ||\n      removeCols?.[0] >= table.colCount - table.rightFrozenColCount\n    ) {\n      for (let col = table.colCount - table.rightFrozenColCount; col < table.colCount; col++) {\n        for (let row = 0; row < table.rowCount; row++) {\n          const cellGroup = scene.highPerformanceGetCell(col, row, true);\n          cellGroup && (cellGroup.needUpdate = true);\n        }\n      }\n      scene.proxy.updateRightFrozenCellGroups();\n    }\n  }\n}\n\nfunction removeCol(col: number, scene: Scenegraph) {\n  const proxy = scene.proxy;\n  // removeCellGroup(col, scene);\n  //先考虑非表头部分删除情况\n  if (col >= scene.table.rowHeaderLevelCount) {\n    if (col >= scene.table.colCount - scene.table.rightFrozenColCount) {\n      // 如果是删除的右侧固定列 这里不做真正的删除，只需要后面将相应列做更新\n      // scene.bodyGroup.removeChild(scene.bodyGroup.lastChild as any);\n      // scene.bottomFrozenGroup.removeChild(scene.bottomFrozenGroup.lastChild as any);\n    } else {\n      const colGroup = scene.getColGroup(col, false);\n      if (colGroup && colGroup.parent === scene.bodyGroup) {\n        scene.bodyGroup.removeChild(colGroup);\n      }\n      const bottomColGroup = scene.getColGroupInBottom(col);\n      if (bottomColGroup && bottomColGroup.parent === scene.bottomFrozenGroup) {\n        scene.bottomFrozenGroup.removeChild(bottomColGroup);\n      }\n      const headerColGroup = scene.getColGroup(col, true);\n      if (headerColGroup && headerColGroup.parent === scene.colHeaderGroup) {\n        scene.colHeaderGroup.removeChild(headerColGroup);\n      }\n    }\n  }\n\n  // TODO 需要整体更新proxy的状态\n  if (col >= proxy.colStart && col <= proxy.colEnd) {\n    proxy.colEnd--;\n    proxy.currentCol--;\n  }\n  proxy.bodyRightCol--;\n  // proxy.totalCol--;\n  const totalActualBodyColCount = Math.min(proxy.colLimit, proxy.bodyRightCol - proxy.bodyLeftCol + 1); // 渐进加载总col数量\n  proxy.totalActualBodyColCount = totalActualBodyColCount;\n  proxy.totalCol = proxy.colStart + totalActualBodyColCount - 1; // 目标渐进完成的col\n}\n\nfunction addCol(col: number, scene: Scenegraph) {\n  const proxy = scene.proxy;\n  proxy.bodyRightCol++;\n  // proxy.totalCol++;\n  const totalActualBodyColCount = Math.min(proxy.colLimit, proxy.bodyRightCol - proxy.bodyLeftCol + 1); // 渐进加载总col数量\n  proxy.totalActualBodyColCount = totalActualBodyColCount;\n  proxy.totalCol = proxy.colStart + totalActualBodyColCount - 1; // 目标渐进完成的col\n\n  if (col < proxy.colStart) {\n    return undefined;\n  } else if (col > proxy.colEnd) {\n    if (proxy.colEnd - proxy.colStart + 1 < proxy.colLimit) {\n      // can add col\n      proxy.colEnd++;\n      proxy.currentCol++;\n\n      addColGroup(col, scene);\n      return col;\n    }\n    return undefined;\n  }\n  if (proxy.colEnd - proxy.colStart + 1 < proxy.colLimit) {\n    // can add col\n    proxy.colEnd++;\n    proxy.currentCol++;\n\n    addColGroup(col, scene);\n    return col;\n  }\n  return col;\n}\n\n// array deduplication\nfunction deduplication(array: number[]) {\n  const result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (result.indexOf(array[i]) === -1) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n}\n\nfunction resetColNumber(scene: Scenegraph) {\n  let colIndex = scene.bodyColStart;\n  scene.bodyGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colIndex++;\n  });\n\n  colIndex = scene.bodyColStart;\n  scene.colHeaderGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colIndex++;\n  });\n\n  colIndex = scene.bodyColStart;\n  scene.bottomFrozenGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colIndex++;\n  });\n  function processCell(cellGroup: Group) {\n    cellGroup.col = colIndex;\n    const merge = getCellMergeInfo(scene.table, cellGroup.col, cellGroup.row);\n    if (merge) {\n      cellGroup.mergeStartCol = merge.start.col;\n      cellGroup.mergeStartCol = merge.start.col;\n      cellGroup.mergeEndCol = merge.end.col;\n      cellGroup.mergeEndCol = merge.end.col;\n    }\n\n    if (cellGroup.role !== 'cell') {\n      return;\n    }\n  }\n}\n\nfunction resetColNumberAndX(scene: Scenegraph) {\n  let colIndex = scene.bodyColStart;\n  let x = scene.getCellGroupX(colIndex);\n  scene.bodyGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colGroup.setAttribute('x', x);\n    x += colGroup.attribute.width;\n    colIndex++;\n  });\n\n  colIndex = scene.bodyColStart;\n  x = scene.getCellGroupX(colIndex);\n  scene.colHeaderGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colGroup.setAttribute('x', x);\n    x += colGroup.attribute.width;\n    colIndex++;\n  });\n\n  colIndex = scene.bodyColStart;\n  x = scene.getCellGroupX(colIndex);\n  scene.bottomFrozenGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colGroup.setAttribute('x', x);\n    x += colGroup.attribute.width;\n    colIndex++;\n  });\n  colIndex = scene.table.colCount - scene.table.rightFrozenColCount;\n  x = 0;\n  scene.rightFrozenGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colGroup.setAttribute('x', x);\n    x += colGroup.attribute.width;\n    colIndex++;\n  });\n\n  colIndex = scene.table.colCount - scene.table.rightFrozenColCount;\n  x = 0;\n  scene.rightTopCornerGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colGroup.setAttribute('x', x);\n    x += colGroup.attribute.width;\n    colIndex++;\n  });\n\n  colIndex = scene.table.colCount - scene.table.rightFrozenColCount;\n  x = 0;\n  scene.rightBottomCornerGroup.forEachChildren((colGroup: Group) => {\n    colGroup.col = colIndex;\n    colGroup?.forEachChildren((cellGroup: Group) => {\n      processCell(cellGroup);\n    });\n    colGroup.setAttribute('x', x);\n    x += colGroup.attribute.width;\n    colIndex++;\n  });\n  function processCell(cellGroup: Group) {\n    cellGroup.col = colIndex;\n    const merge = getCellMergeInfo(scene.table, cellGroup.col, cellGroup.row);\n    if (merge) {\n      cellGroup.mergeStartCol = merge.start.col;\n      cellGroup.mergeStartCol = merge.start.col;\n      cellGroup.mergeEndCol = merge.end.col;\n      cellGroup.mergeEndCol = merge.end.col;\n    }\n\n    if (cellGroup.role !== 'cell') {\n      return;\n    }\n  }\n}\n\nfunction addColGroup(col: number, scene: Scenegraph) {\n  if (scene.colHeaderGroup && scene.table.columnHeaderLevelCount > 0) {\n    const columnGroup = new Group({\n      x: 0,\n      y: 0,\n      width: scene.table.getColWidth(col),\n      height: 0,\n      clip: false,\n      pickable: false\n    });\n    columnGroup.role = 'column';\n    columnGroup.col = col;\n\n    const colAfter = scene.getColGroup(col, true);\n    if (colAfter) {\n      scene.colHeaderGroup.insertBefore(columnGroup, colAfter);\n    } else {\n      scene.colHeaderGroup.appendChild(columnGroup);\n    }\n    generateCellGroup(columnGroup, col, 0, scene.table.columnHeaderLevelCount - 1);\n  }\n\n  if (scene.bodyGroup) {\n    const columnGroup = new Group({\n      x: 0,\n      y: 0,\n      width: scene.table.getColWidth(col),\n      height: 0,\n      clip: false,\n      pickable: false\n    });\n    columnGroup.role = 'column';\n    columnGroup.col = col;\n\n    const colAfter = scene.getColGroup(col, false);\n    if (colAfter) {\n      scene.bodyGroup.insertBefore(columnGroup, colAfter);\n    } else {\n      scene.bodyGroup.appendChild(columnGroup);\n    }\n    generateCellGroup(columnGroup, col, scene.bodyRowStart, scene.bodyRowEnd);\n  }\n  if (scene.bottomFrozenGroup && scene.table.bottomFrozenRowCount > 0) {\n    const columnGroup = new Group({\n      x: 0,\n      y: 0,\n      width: scene.table.getColWidth(col),\n      height: 0,\n      clip: false,\n      pickable: false\n    });\n    columnGroup.role = 'column';\n    columnGroup.col = col;\n\n    const colAfter = scene.getColGroupInBottom(col);\n    if (colAfter) {\n      scene.bottomFrozenGroup.insertBefore(columnGroup, colAfter);\n    } else {\n      scene.bottomFrozenGroup.appendChild(columnGroup);\n    }\n\n    generateCellGroup(\n      columnGroup,\n      col,\n      scene.table.rowCount - scene.table.bottomFrozenRowCount,\n      scene.table.rowCount - 1\n    );\n  }\n\n  function generateCellGroup(group: IGroup, col: number, rowStart: number, rowEnd: number) {\n    for (let row = rowStart; row <= rowEnd; row++) {\n      // create cellGroup\n      // const cellGroup = updateCell(col, row, scene.table, true);\n      const cellGroup = new Group({\n        x: 0,\n        y: 0,\n        width: scene.table.getColWidth(col),\n        height: scene.table.getRowHeight(row)\n      });\n      cellGroup.role = 'cell';\n      cellGroup.col = col;\n      cellGroup.row = row;\n      cellGroup.needUpdate = true;\n      group.appendChild(cellGroup);\n    }\n  }\n}\n"]}