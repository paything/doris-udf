import type { IThemeSpec } from './../../vrender';
import type { CellRange, ColumnIconOption } from '../../ts-types';
import type { Group } from '../graphic/group';
import { Icon, TextIcon } from '../graphic/icon';
import type { Scenegraph } from '../scenegraph';
import type { BaseTableAPI } from '../../ts-types/base-table';
export declare function createCellContent(cellGroup: Group, icons: ColumnIconOption[] | null, textStr: string, padding: [number, number, number, number], autoColWidth: boolean, autoRowHeight: boolean, autoWrapText: boolean, lineClamp: number | undefined, cellWidth: number, cellHeight: number, textAlign: CanvasTextAlign, textBaseline: CanvasTextBaseline, table: BaseTableAPI, cellTheme: IThemeSpec, range: CellRange | undefined): void;
export declare function dealWithIcon(icon: ColumnIconOption, mark?: Icon, col?: number, row?: number, range?: CellRange, table?: BaseTableAPI, dealWithIconComputeVar?: {
    addedHierarchyOffset: number;
}): Icon | TextIcon;
export declare function dealWithRichTextIcon(icon: ColumnIconOption): any;
export declare function updateCellContentWidth(cellGroup: Group, distWidth: number, cellHeight: number, detaX: number, autoRowHeight: boolean, padding: [number, number, number, number], textAlign: CanvasTextAlign, textBaseline: CanvasTextBaseline, scene: Scenegraph): boolean;
export declare function updateCellContentHeight(cellGroup: Group, distHeight: number, detaY: number, autoRowHeight: boolean, padding: [number, number, number, number], textAlign: CanvasTextAlign, textBaseline: CanvasTextBaseline, table: BaseTableAPI): void;
export declare function dealWithIconLayout(icons: ColumnIconOption[], cellGroup: Group, range: CellRange | undefined, table: BaseTableAPI): {
    leftIcons: ColumnIconOption[];
    rightIcons: ColumnIconOption[];
    contentLeftIcons: ColumnIconOption[];
    contentRightIcons: ColumnIconOption[];
    inlineFrontIcons: ColumnIconOption[];
    inlineEndIcons: ColumnIconOption[];
    absoluteLeftIcons: ColumnIconOption[];
    absoluteRightIcons: ColumnIconOption[];
    leftIconWidth: number;
    leftIconHeight: number;
    rightIconWidth: number;
    rightIconHeight: number;
    absoluteLeftIconWidth: number;
    absoluteRightIconWidth: number;
};
