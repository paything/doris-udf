{"version":3,"sources":["../src/scenegraph/utils/get-hierarchy-offset.ts"],"names":[],"mappings":";;;AAAA,6CAAoD;AAIpD,6CAAgD;AAGhD,SAAgB,kBAAkB,CAAC,GAAW,EAAE,GAAW,EAAE,KAAmB;;IAE9E,IAAI,mBAAmB,GAAG,CAAC,CAAC;IAC5B,MAAM,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC;IAEhD,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;QAChC,MAAM,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAe,CAAC;QACvD,IAAI,IAAA,gBAAO,EAAC,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,cAAc,CAAC,EAAE;YAC/B,mBAAmB;gBACjB,CAAC,MAAA,EAAE,CAAC,cAAc,mCAAI,CAAC,CAAC;oBACxB,CAAE,SAAkC,CAAC,gBAAgB,KAAK,MAAM;wBAC9D,CAAC,CAAC,MAAC,SAAkC,CAAC,kBAAkB,mCAAI,CAAC;wBAC7D,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IACG,SAAkC,CAAC,8BAA8B;gBAClE,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,EAC5D;gBACA,mBAAmB,IAAI,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC;aACjF;SACF;KACF;SAAM;QAGL,IACG,KAAK,CAAC,OAAuC,CAAC,OAAO;aACtD,MAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,CAAkB,0CAAE,IAAI,CAAA,EAC3D;YACA,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;YACxF,MAAM,WAAW,GAAG,MAAA,KAAK,CAAC,UAAU,CAAC,cAAc,EAAE,mCAAI,CAAC,CAAC;YAC3D,IAAI,aAAa,GAAG,IAAA,gBAAO,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,IAAI,WAAW,GAAG,CAAC,IAAI,aAAa,KAAK,WAAW,EAAE;gBACpD,aAAa,GAAG,CAAC,CAAC;aACnB;YACD,mBAAmB;gBACjB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,yBAAc,CAAC,IAAI;oBAClF,CAAC,CAAC,aAAa,GAAG,CAAC,MAAC,SAAmC,CAAC,eAAe,mCAAI,CAAC,CAAC;oBAC7E,CAAC,CAAC,CAAC,CAAC;YACR,IACG,SAAmC,CAAC,2BAA2B;gBAChE,CAAC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,EAC1D;gBACA,mBAAmB,IAAI,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;aAC/E;SACF;KACF;IAED,OAAO,mBAAmB,CAAC;AAC7B,CAAC;AA/CD,gDA+CC","file":"get-hierarchy-offset.js","sourcesContent":["import { isArray, isValid } from '@visactor/vutils';\nimport type { SimpleHeaderLayoutMap } from '../../layout';\nimport type { PivotHeaderLayoutMap } from '../../layout/pivot-header-layout';\nimport type { ColumnDefine, ListTableConstructorOptions } from '../../ts-types';\nimport { HierarchyState } from '../../ts-types';\nimport type { BaseTableAPI, HeaderData } from '../../ts-types/base-table';\n\nexport function getHierarchyOffset(col: number, row: number, table: BaseTableAPI): number {\n  // 处理树形展开\n  let cellHierarchyIndent = 0;\n  const layoutMap = table.internalProps.layoutMap;\n  //判断是否为表头\n  if (layoutMap.isHeader(col, row)) {\n    const hd = layoutMap.getHeader(col, row) as HeaderData;\n    if (isValid(hd?.hierarchyLevel)) {\n      cellHierarchyIndent =\n        (hd.hierarchyLevel ?? 0) *\n        ((layoutMap as PivotHeaderLayoutMap).rowHierarchyType === 'tree'\n          ? (layoutMap as PivotHeaderLayoutMap).rowHierarchyIndent ?? 0\n          : 0);\n      if (\n        (layoutMap as PivotHeaderLayoutMap).rowHierarchyTextStartAlignment &&\n        !table.internalProps.headerHelper.getHierarchyIcon(col, row)\n      ) {\n        cellHierarchyIndent += table.internalProps.headerHelper.getHierarchyIconWidth();\n      }\n    }\n  } else {\n    // 基本表格表身body单元格 如果是树形展开 需要考虑缩进值\n    // const cellHierarchyState = table.getHierarchyState(col, row);\n    if (\n      (table.options as ListTableConstructorOptions).groupBy ||\n      (table.getBodyColumnDefine(col, row) as ColumnDefine)?.tree\n    ) {\n      const indexArr = table.dataSource.getIndexKey(table.getRecordShowIndexByCell(col, row));\n      const groupLength = table.dataSource.getGroupLength() ?? 0;\n      let indexArrLngth = isArray(indexArr) ? indexArr.length - 1 : 0;\n      if (groupLength > 0 && indexArrLngth === groupLength) {\n        indexArrLngth = 0;\n      }\n      cellHierarchyIndent =\n        Array.isArray(indexArr) && table.getHierarchyState(col, row) !== HierarchyState.none\n          ? indexArrLngth * ((layoutMap as SimpleHeaderLayoutMap).hierarchyIndent ?? 0)\n          : 0;\n      if (\n        (layoutMap as SimpleHeaderLayoutMap).hierarchyTextStartAlignment &&\n        !table.internalProps.bodyHelper.getHierarchyIcon(col, row)\n      ) {\n        cellHierarchyIndent += table.internalProps.bodyHelper.getHierarchyIconWidth();\n      }\n    }\n  }\n\n  return cellHierarchyIndent;\n}\n"]}