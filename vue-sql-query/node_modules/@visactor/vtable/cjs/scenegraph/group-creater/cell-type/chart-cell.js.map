{"version":3,"sources":["../src/scenegraph/group-creater/cell-type/chart-cell.ts"],"names":[],"mappings":"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","file":"chart-cell.js","sourcesContent":["import { Group } from '../../graphic/group';\nimport { Chart } from '../../graphic/chart';\nimport * as registerChartTypes from '../../../chartModule';\nimport { getFunctionalProp } from '../../utils/get-prop';\nimport { isValid } from '@visactor/vutils';\nimport type { BaseTableAPI } from '../../../ts-types/base-table';\nimport type { IThemeSpec } from './../../../vrender';\nimport { getCellBorderStrokeWidth } from '../../utils/cell-border-stroke-width';\nexport function createChartCellGroup(\n  cellGroup: Group | null,\n  columnGroup: Group,\n  xOrigin: number,\n  yOrigin: number,\n  col: number,\n  row: number,\n  width: number,\n  height: number,\n  padding: number[],\n  dataValue: string,\n  chartModule: any,\n  chartSpec: any,\n  chartInstance: any,\n  dataId: string | Record<string, string>,\n  table: BaseTableAPI,\n  cellTheme: IThemeSpec,\n  isShareChartSpec: true,\n  isAsync: boolean,\n  isNoChartDataRenderNothing: boolean\n) {\n  // 获取注册的chart图表类型\n  const registerCharts = registerChartTypes.get();\n  const ClassType = registerCharts[chartModule];\n  const headerStyle = table._getCellStyle(col, row); // to be fixed\n  const functionalPadding = getFunctionalProp('padding', headerStyle, col, row, table);\n  if (isValid(functionalPadding)) {\n    padding = functionalPadding;\n  }\n  // cell\n  if (!cellGroup) {\n    const strokeArrayWidth = getCellBorderStrokeWidth(col, row, cellTheme, table);\n\n    if (isAsync) {\n      cellGroup = table.scenegraph.highPerformanceGetCell(col, row, true);\n      if (cellGroup && cellGroup.role === 'cell') {\n        cellGroup.setAttributes({\n          x: xOrigin,\n          y: yOrigin,\n          width,\n          height,\n          // 背景相关，cell背景由cellGroup绘制\n          lineWidth: cellTheme?.group?.lineWidth ?? undefined,\n          fill: cellTheme?.group?.fill ?? undefined,\n          stroke: cellTheme?.group?.stroke ?? undefined,\n          strokeArrayWidth: strokeArrayWidth,\n          strokeArrayColor: (cellTheme?.group as any)?.strokeArrayColor ?? undefined,\n          cursor: (cellTheme?.group as any)?.cursor ?? undefined,\n          lineDash: cellTheme?.group?.lineDash ?? undefined,\n          lineCap: 'butt',\n          clip: true,\n          cornerRadius: cellTheme.group.cornerRadius\n        } as any);\n      }\n    }\n    if (!cellGroup || cellGroup.role !== 'cell') {\n      cellGroup = new Group({\n        x: xOrigin,\n        y: yOrigin,\n        width,\n        height,\n        // 背景相关，cell背景由cellGroup绘制\n        lineWidth: cellTheme?.group?.lineWidth ?? undefined,\n        fill: cellTheme?.group?.fill ?? undefined,\n        stroke: cellTheme?.group?.stroke ?? undefined,\n        strokeArrayWidth: strokeArrayWidth,\n        strokeArrayColor: (cellTheme?.group as any)?.strokeArrayColor ?? undefined,\n        cursor: (cellTheme?.group as any)?.cursor ?? undefined,\n        lineDash: cellTheme?.group?.lineDash ?? undefined,\n        lineCap: 'butt',\n        clip: true,\n        cornerRadius: cellTheme.group.cornerRadius\n      } as any);\n      cellGroup.role = 'cell';\n      cellGroup.col = col;\n      cellGroup.row = row;\n      columnGroup?.addCellGroup(cellGroup);\n    }\n  }\n  cellGroup.AABBBounds.width(); // TODO 需要底层VRender修改\n  // chart\n  if ((isNoChartDataRenderNothing && Array.isArray(table.getCellValue(col, row))) || !isNoChartDataRenderNothing) {\n    const chartGroup = new Chart(isShareChartSpec, {\n      stroke: false,\n      x: padding[3],\n      y: padding[0],\n      // canvas: table.canvas,\n      canvas: table.canvas ?? (table.scenegraph.stage.window.getContext().canvas as unknown as HTMLCanvasElement),\n      mode: table.options.mode,\n      modeParams: table.options.modeParams,\n      spec: table.options.specTransformInCell ? table.options.specTransformInCell(chartSpec, col, row) : chartSpec,\n      ClassType,\n      width: width - padding[3] - padding[1],\n      height: height - padding[2] - padding[0],\n      chartInstance,\n      dataId,\n      data: table.getCellValue(col, row) || [],\n      cellPadding: padding,\n      dpr: table.internalProps.pixelRatio,\n      // viewBox: {\n      //   x1: Math.ceil(cellGroup.globalAABBBounds.x1 + padding[3] + table.scrollLeft),\n      //   x2: Math.ceil(cellGroup.globalAABBBounds.x1 + width - padding[1] + table.scrollLeft),\n      //   y1: Math.ceil(cellGroup.globalAABBBounds.y1 + padding[0] + table.scrollTop),\n      //   y2: Math.ceil(cellGroup.globalAABBBounds.y1 + height - padding[2] + table.scrollTop)\n      // },\n      axes: table.isPivotChart() ? table.internalProps.layoutMap.getChartAxes(col, row) : [],\n      // clipRect: {\n      //   left: cellGroup.globalAABBBounds.x1 + (table as any).tableX + padding[3],\n      //   top: cellGroup.globalAABBBounds.y1 + (table as any).tableY + padding[0],\n      //   width: width - padding[1] - padding[3], //cellGroup.globalAABBBounds.width() - padding[1] - padding[3],\n      //   height: height - padding[0] - padding[2],\n      // },\n      tableChartOption: table.options.chartOption,\n      col,\n      row\n    });\n    cellGroup.appendChild(chartGroup);\n    // 将生成的实例存到layoutMap中 共享\n    table.internalProps.layoutMap.setChartInstance(col, row, chartGroup.chartInstance);\n  }\n  return cellGroup;\n}\n\nexport type CreateChartCellGroup = typeof createChartCellGroup;\n"]}