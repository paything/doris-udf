{"version":3,"sources":["../src/scenegraph/group-creater/progress/proxy.ts"],"names":[],"mappings":"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","file":"proxy.js","sourcesContent":["import { isNumber, isValid } from '@visactor/vutils';\nimport type { BaseTableAPI } from '../../../ts-types/base-table';\nimport { Group } from '../../graphic/group';\nimport { computeColsWidth } from '../../layout/compute-col-width';\nimport { computeRowsHeight } from '../../layout/compute-row-height';\nimport { emptyGroup } from '../../utils/empty-group';\nimport { createColGroup } from '../column';\nimport { createComplexColumn } from '../column-helper';\nimport { createGroupForFirstScreen } from './create-group-for-first-screen';\nimport { dynamicSetX, updateColContent } from './update-position/dynamic-set-x';\nimport { dynamicSetY, updateRowContent } from './update-position/dynamic-set-y';\nimport { updateAutoRow } from './update-position/update-auto-row';\nimport { sortVertical } from './update-position/sort-vertical';\nimport { sortHorizontal } from './update-position/sort-horizontal';\nimport { updateAutoColumn } from './update-position/update-auto-column';\nimport { getDefaultHeight, getDefaultWidth } from './default-width-height';\nimport { handleTextStick } from '../../stick-text';\nimport type { ColumnInfo, RowInfo } from '../../../ts-types';\n\nexport class SceneProxy {\n  table: BaseTableAPI;\n  isRelease: boolean = false;\n  mode: 'column' | 'row' | 'pivot' = 'column';\n  isProgressing: boolean;\n\n  rowLimit = 200;\n  currentRow = 0; // 目前渐进生成的row number\n  totalRow: number; // 渐进完成最后一行的row number\n  yLimitTop: number; // y > yLimitTop动态更新，否则直接修改xy\n  yLimitBottom: number; // y < yLimitBottom动态更新，否则直接修改xy\n  rowStart = 0; // 当前维护的部分第一行的row number\n  rowEnd = 0; // 当前维护的部分最后一行的row number\n  referenceRow = 0; // 当前维护的部分中间一行的row number，认为referenceRow对应当前屏幕显示范围的第一行\n  // bodyTopRow: number; // table body部分的第一行row number\n  bodyBottomRow: number; // table body部分的最后一行row number\n  screenRowCount: number; // 预计屏幕范围内显示的row count\n  firstScreenRowLimit: number; // 首屏同步加载部分最后一行的row number\n  taskRowCount: number; // 一次任务生成/更新的row count\n  rowUpdatePos: number; // 异步任务目前更新到的行的row number\n  rowUpdateDirection: 'up' | 'down'; // 当前行更新的方向,up表示从下往上挨个更新，down表示从上往下挨个更新\n  screenTopRow: number = 0; // 当前屏幕范围内显示的第一行的row number\n  totalActualBodyRowCount: number; // 实际表格body部分的行数\n  deltaY: number = 0;\n  deltaHeight: number = 0;\n\n  colLimit = 100;\n  // bodyLeftCol: number; // table body部分的第一列col number\n  bodyRightCol: number; // table body部分的最后一列col number\n  totalCol: number; // 渐进完成最后一列的col number\n  colStart: number; // 当前维护的部分第一列的col number\n  colEnd: number; // 当前维护的部分最后一列的col number\n  taskColCount: number; // 一次任务生成/更新的col count\n  xLimitLeft: number; // x > xLimitLeft动态更新，否则直接修改xy\n  xLimitRight: number; // x < xLimitRight动态更新，否则直接修改xy\n  screenColCount: number; // 预计屏幕范围内显示的col count\n  firstScreenColLimit: number; // 首屏同步加载部分最后一列的col number\n  colUpdatePos: number; // 异步任务目前更新到的列的col number\n  currentCol: number; // 目前渐进生成的col number\n  referenceCol: number; // 当前维护的部分中间一列的col number，认为referenceCol对应当前屏幕显示范围的第一列\n  screenLeftCol: number = 0; // 当前屏幕范围内显示的第一列的col number\n  colUpdateDirection: 'left' | 'right'; // 当前列更新方向\n  totalActualBodyColCount: number; // 实际表格body部分的列数\n  deltaX: number = 0;\n  deltaWidth: number = 0;\n\n  cellCache: Map<number, Group> = new Map(); // 单元格位置快速查找缓存\n\n  constructor(table: BaseTableAPI) {\n    this.table = table;\n\n    if (this.table.isPivotChart()) {\n      // this.rowLimit = 100;\n      // this.colLimit = 100;\n      this.rowLimit = Math.max(100, Math.ceil((table.tableNoFrameHeight * 2) / table.defaultRowHeight));\n      this.colLimit = Math.max(100, Math.ceil((table.tableNoFrameWidth * 2) / table.defaultColWidth));\n    } else if (this.table.isAutoRowHeight(table.columnHeaderLevelCount)) {\n      // this.rowLimit = 100;\n      this.rowLimit = Math.max(100, Math.ceil((table.tableNoFrameHeight * 2) / table.defaultRowHeight));\n    } else if (this.table.widthMode === 'autoWidth') {\n      // this.colLimit = 100;\n      this.colLimit = Math.max(100, Math.ceil((table.tableNoFrameWidth * 2) / table.defaultColWidth));\n    } else {\n      this.rowLimit = Math.max(200, Math.ceil((table.tableNoFrameHeight * 2) / table.defaultRowHeight));\n      this.colLimit = Math.max(100, Math.ceil((table.tableNoFrameWidth * 2) / table.defaultColWidth));\n    }\n\n    if (this.table.internalProps.transpose) {\n      this.mode = 'row';\n    } else if (this.table.isPivotTable()) {\n      this.mode = 'pivot';\n    }\n    if (this.table.options.maintainedDataCount) {\n      this.rowLimit = this.table.options.maintainedDataCount;\n    }\n    if (this.table.options.maintainedColumnCount) {\n      this.colLimit = this.table.options.maintainedColumnCount;\n    }\n    if (this.table.heightMode === 'adaptive') {\n      this.rowLimit = this.table.rowCount;\n    }\n    if (this.table.widthMode === 'adaptive') {\n      this.colLimit = this.table.colCount;\n    }\n  }\n\n  get bodyLeftCol(): number {\n    return this.table.frozenColCount;\n  }\n  get bodyTopRow(): number {\n    return this.table.frozenRowCount;\n  }\n\n  setParamsForColumn() {\n    // this.bodyLeftCol = this.table.frozenColCount;\n    this.bodyRightCol = this.table.colCount - 1 - this.table.rightFrozenColCount;\n\n    // compute the column info about progress creation\n    const totalActualBodyColCount = Math.min(this.colLimit, this.bodyRightCol - this.bodyLeftCol + 1);\n    this.totalActualBodyColCount = totalActualBodyColCount;\n    this.totalCol = this.bodyLeftCol + totalActualBodyColCount - 1; // 目标渐进完成的col\n    this.colStart = this.bodyLeftCol;\n    this.colEnd = this.totalCol; // temp for first screen, will replace in createGroupForFirstScreen()\n    const defaultColWidth = this.table.defaultColWidth;\n    // const defaultColWidth = getDefaultHeight(this.table);\n    this.taskColCount = Math.ceil(this.table.tableNoFrameWidth / defaultColWidth) * 1;\n\n    // 确定动态更新限制\n    const totalBodyWidth = defaultColWidth * totalActualBodyColCount;\n    const totalWidth = defaultColWidth * (this.bodyRightCol - this.bodyLeftCol + 1);\n    this.xLimitLeft = totalBodyWidth / 2;\n    this.xLimitRight = totalWidth - totalBodyWidth / 2;\n\n    // 确定首屏高度范围\n    const widthLimit = this.table.tableNoFrameWidth * 5;\n    this.screenColCount = Math.ceil(this.table.tableNoFrameWidth / defaultColWidth);\n    this.firstScreenColLimit = Math.max(\n      15, // min firstScreenColLimit\n      this.bodyLeftCol + Math.min(this.colLimit, Math.ceil(widthLimit / defaultColWidth))\n    );\n    // this.firstScreenRowLimit = this.bodyBottomRow;\n\n    this.colUpdatePos = this.bodyRightCol;\n  }\n\n  setParamsForRow() {\n    // this.bodyTopRow = this.table.frozenRowCount;\n    this.bodyBottomRow = this.table.rowCount - 1 - this.table.bottomFrozenRowCount;\n    // this.bodyLeftCol = 0;\n    // this.bodyRightCol = this.table.colCount - 1 - this.table.rightFrozenColCount;\n\n    // 计算渐进加载数量\n    const totalActualBodyRowCount = Math.min(this.rowLimit, this.bodyBottomRow - this.bodyTopRow + 1); // 渐进加载总row数量\n    this.totalActualBodyRowCount = totalActualBodyRowCount;\n    this.totalRow = this.bodyTopRow + totalActualBodyRowCount - 1; // 目标渐进完成的row\n    this.rowStart = this.bodyTopRow;\n    this.rowEnd = this.totalRow; // temp for first screen, will replace in createGroupForFirstScreen()\n    const defaultRowHeight = this.table.defaultRowHeight;\n    // const defaultRowHeight = getDefaultWidth(this.table);\n    this.taskRowCount = Math.ceil(this.table.tableNoFrameHeight / defaultRowHeight) * 1;\n\n    // 确定动态更新限制\n    const totalBodyHeight = defaultRowHeight * totalActualBodyRowCount;\n    const totalHeight = defaultRowHeight * (this.bodyBottomRow - this.bodyTopRow + 1);\n    this.yLimitTop = totalBodyHeight / 2;\n    this.yLimitBottom = totalHeight - totalBodyHeight / 2;\n    // this.bottomOffset = totalHeight - totalBodyHeight / 2;\n\n    // 确定首屏高度范围\n    const heightLimit = this.table.tableNoFrameHeight * 5;\n    this.screenRowCount = Math.ceil(this.table.tableNoFrameHeight / defaultRowHeight);\n    this.firstScreenRowLimit = Math.max(\n      30, // min firstScreenRowLimit\n      this.bodyTopRow + Math.min(this.rowLimit, Math.ceil(heightLimit / defaultRowHeight))\n    );\n    // this.firstScreenRowLimit = this.bodyBottomRow;\n\n    this.rowUpdatePos = this.bodyBottomRow;\n  }\n\n  refreshRowCount() {\n    // this.bodyTopRow = this.table.frozenRowCount;\n    this.bodyBottomRow = this.table.rowCount - 1 - this.table.bottomFrozenRowCount;\n    const totalActualBodyRowCount = Math.min(this.rowLimit, this.bodyBottomRow - this.bodyTopRow + 1); // 渐进加载总row数量\n    this.totalActualBodyRowCount = totalActualBodyRowCount;\n    this.totalRow = this.rowStart + totalActualBodyRowCount - 1; // 目标渐进完成的row\n\n    // this.rowStart = this.bodyTopRow;\n    // this.rowEnd = this.totalRow; // temp for first screen, will replace in createGroupForFirstScreen()\n  }\n\n  refreshColCount() {\n    this.bodyRightCol = this.table.colCount - 1 - this.table.rightFrozenColCount;\n    const totalActualBodyColCount = Math.min(this.colLimit, this.bodyRightCol - this.bodyLeftCol + 1);\n    this.totalActualBodyColCount = totalActualBodyColCount;\n    this.totalCol = this.bodyLeftCol + totalActualBodyColCount - 1; // 目标渐进完成的col\n\n    this.colStart = this.bodyLeftCol;\n    this.colEnd = this.totalCol; // temp for first screen, will replace in createGroupForFirstScreen()\n  }\n\n  resize() {\n    const defaultColWidth = this.table.defaultColWidth;\n    this.taskColCount = Math.ceil(this.table.tableNoFrameWidth / defaultColWidth) * 1;\n    const widthLimit = this.table.tableNoFrameWidth * 5;\n    this.screenColCount = Math.ceil(this.table.tableNoFrameWidth / defaultColWidth);\n    this.firstScreenColLimit = this.bodyLeftCol + Math.min(this.colLimit, Math.ceil(widthLimit / defaultColWidth));\n\n    const defaultRowHeight = this.table.defaultRowHeight;\n    this.taskRowCount = Math.ceil(this.table.tableNoFrameHeight / defaultRowHeight) * 1;\n    const heightLimit = this.table.tableNoFrameHeight * 5;\n    this.screenRowCount = Math.ceil(this.table.tableNoFrameHeight / defaultRowHeight);\n    this.firstScreenRowLimit = this.bodyTopRow + Math.min(this.rowLimit, Math.ceil(heightLimit / defaultRowHeight));\n  }\n\n  createGroupForFirstScreen(\n    cornerHeaderGroup: Group,\n    colHeaderGroup: Group,\n    rowHeaderGroup: Group,\n    rightFrozenGroup: Group,\n    bottomFrozenGroup: Group,\n    bodyGroup: Group,\n    xOrigin: number,\n    yOrigin: number\n  ) {\n    createGroupForFirstScreen(\n      cornerHeaderGroup,\n      colHeaderGroup,\n      rowHeaderGroup,\n      rightFrozenGroup,\n      bottomFrozenGroup,\n      bodyGroup,\n      xOrigin,\n      yOrigin,\n      this\n    );\n  }\n  // async progress() {\n  //   if (this.rowUpdatePos < this.rowEnd) {\n  //     console.log('progress rowUpdatePos', this.rowUpdatePos);\n  //     // 先更新\n  //     await this.updateCellGroupsAsync();\n  //     await this.progress();\n  //   } else if (this.currentRow < this.totalRow) {\n  //     console.log('progress currentRow', this.currentRow);\n  //     // 先更新没有需要更新的节点，在生成新节点\n  //     await this.createRow();\n  //     await this.progress();\n  //   }\n  // }\n  async progress() {\n    if (this.isProgressing) {\n      return;\n    }\n    this.isProgressing = true;\n    return new Promise<void>((resolve, reject) => {\n      setTimeout(async () => {\n        this.isProgressing = false;\n        if (this.isRelease) {\n          return;\n        }\n        // console.log('progress col', this.colUpdatePos, this.colEnd, this.currentCol, this.totalCol);\n        // console.log('progress row', this.rowUpdatePos, this.rowEnd, this.currentRow, this.totalRow);\n        // console.log('before: createRow', table.scenegraph.bodyGroup.lastChild.attribute);\n        // if (this.isSkipProgress) {\n        //   await this.progress();\n        // } else\n        if (this.colUpdatePos <= this.colEnd) {\n          // console.log('progress colUpdatePos', this.colUpdatePos);\n          await this.updateColCellGroupsAsync();\n          await this.progress();\n        } else if (this.rowUpdatePos <= this.rowEnd) {\n          // console.log('progress rowUpdatePos', this.rowUpdatePos);\n          // 先更新\n          await this.updateRowCellGroupsAsync();\n          await this.progress();\n        } else if (this.currentCol < this.totalCol) {\n          await this.createCol();\n          await this.progress();\n        } else if (this.currentRow < this.totalRow) {\n          // console.log('progress currentRow', this.currentRow);\n          // 先更新没有需要更新的节点，在生成新节点\n          await this.createRow();\n          await this.progress();\n        }\n        handleTextStick(this.table);\n        this.table.scenegraph.updateNextFrame();\n        resolve();\n      }, 16);\n    });\n  }\n\n  async createRow() {\n    if (!this.taskRowCount) {\n      return;\n    }\n    // console.log('createRow', this.currentRow, this.currentRow + this.taskRowCount);\n    this.createRowCellGroup(this.taskRowCount);\n  }\n\n  async createCol() {\n    if (!this.taskColCount) {\n      return;\n    }\n    // console.log('createCol', this.currentCol, this.currentCol + this.taskColCount);\n    this.createColGroup(this.taskRowCount);\n  }\n\n  createRowCellGroup(onceCount: number) {\n    const endRow = Math.min(this.totalRow, this.currentRow + onceCount);\n    // compute rows height\n    if (this.table.heightMode !== 'adaptive') {\n      computeRowsHeight(this.table, this.currentRow + 1, endRow, false);\n    }\n\n    this.rowEnd = endRow;\n\n    if (this.table.frozenColCount) {\n      // create row header row cellGroup\n      let maxHeight = 0;\n      for (let col = 0; col < this.table.frozenColCount; col++) {\n        const colGroup = this.table.scenegraph.getColGroup(col);\n        const cellLocation = this.table.isListTable() ? 'body' : 'rowHeader';\n        const { height } = createComplexColumn(\n          colGroup,\n          col,\n          colGroup.attribute.width,\n          this.currentRow + 1,\n          endRow,\n          this.table.scenegraph.mergeMap,\n          this.table.defaultRowHeight,\n          this.table\n          // cellLocation\n        );\n        maxHeight = Math.max(maxHeight, height);\n        this.table.scenegraph.rowHeaderGroup.setAttribute('height', maxHeight);\n      }\n    }\n\n    if (this.table.rightFrozenColCount) {\n      // create row header row cellGroup\n      let maxHeight = 0;\n      for (let col = this.table.colCount - this.table.rightFrozenColCount; col < this.table.colCount; col++) {\n        const colGroup = this.table.scenegraph.getColGroup(col);\n        const cellLocation = this.table.isPivotChart() ? 'rowHeader' : 'body'; // isHeader\n        const { height } = createComplexColumn(\n          colGroup,\n          col,\n          colGroup.attribute.width,\n          this.currentRow + 1,\n          endRow,\n          this.table.scenegraph.mergeMap,\n          this.table.defaultRowHeight,\n          this.table\n          // cellLocation\n        );\n        maxHeight = Math.max(maxHeight, height);\n        this.table.scenegraph.rightFrozenGroup.setAttribute('height', maxHeight);\n      }\n    }\n\n    // create body row cellGroup\n    let maxHeight = 0;\n    for (let col = this.bodyLeftCol; col <= this.bodyRightCol; col++) {\n      const colGroup = this.table.scenegraph.getColGroup(col);\n      if (!colGroup) {\n        continue;\n      }\n      const cellLocation = col < this.table.rowHeaderLevelCount ? 'rowHeader' : 'body';\n      const { height } = createComplexColumn(\n        colGroup,\n        col,\n        colGroup.attribute.width,\n        this.currentRow + 1,\n        endRow,\n        this.table.scenegraph.mergeMap,\n        this.table.defaultRowHeight,\n        this.table\n        // cellLocation\n      );\n      maxHeight = Math.max(maxHeight, height);\n    }\n    this.table.scenegraph.bodyGroup.setAttribute('height', maxHeight);\n\n    this.currentRow = endRow;\n    this.rowUpdatePos = this.rowEnd;\n\n    // update container group size and border\n    this.table.scenegraph.updateContainer();\n    this.table.scenegraph.updateBorderSizeAndPosition();\n  }\n\n  createColGroup(onceCount: number) {\n    // compute rows height\n    const endCol = Math.min(this.totalCol, this.currentCol + onceCount);\n    if (this.table.widthMode !== 'adaptive') {\n      computeColsWidth(this.table, this.currentCol + 1, endCol);\n    }\n\n    this.colEnd = endCol;\n\n    // update last merge cell size\n    for (let row = 0; row < this.table.rowCount; row++) {\n      const cellGroup = this.highPerformanceGetCell(this.currentCol, row);\n      if (cellGroup.role === 'cell' && isNumber(cellGroup.mergeStartCol) && cellGroup.mergeStartCol > this.currentCol) {\n        this.table.scenegraph.updateCellContent(cellGroup.col, cellGroup.row);\n      }\n    }\n\n    // create column\n    if (this.table.frozenRowCount) {\n      // create colGroup\n      const lastColumnGroup = (\n        this.table.scenegraph.colHeaderGroup.lastChild instanceof Group\n          ? this.table.scenegraph.colHeaderGroup.lastChild\n          : this.table.scenegraph.colHeaderGroup.lastChild._prev\n      ) as Group;\n      const xOrigin = lastColumnGroup.attribute.x + lastColumnGroup.attribute.width;\n      const yOrigin = lastColumnGroup.attribute.y;\n      // create colHeaderGroup\n      createColGroup(\n        this.table.scenegraph.colHeaderGroup,\n        xOrigin,\n        yOrigin,\n        this.currentCol + 1, // colStart\n        endCol, // colEnd\n        0, // rowStart\n        this.table.frozenRowCount - 1, // rowEnd\n        'columnHeader', // isHeader\n        this.table\n      );\n    }\n    if (this.table.bottomFrozenRowCount) {\n      // create colGroup\n      const lastColumnGroup = (\n        this.table.scenegraph.bottomFrozenGroup.lastChild instanceof Group\n          ? this.table.scenegraph.bottomFrozenGroup.lastChild\n          : this.table.scenegraph.bottomFrozenGroup.lastChild._prev\n      ) as Group;\n      const xOrigin = lastColumnGroup.attribute.x + lastColumnGroup.attribute.width;\n      const yOrigin = lastColumnGroup.attribute.y;\n      // create bottomFrozenGroup\n      createColGroup(\n        this.table.scenegraph.bottomFrozenGroup,\n        xOrigin,\n        yOrigin,\n        this.currentCol + 1, // colStart\n        endCol, // colEnd\n        this.table.rowCount - this.table.bottomFrozenRowCount, // rowStart\n        this.table.rowCount - 1, // rowEnd\n        'columnHeader', // isHeader\n        this.table\n      );\n    }\n    // create colGroup\n    let lastColumnGroup =\n      this.table.scenegraph.bodyGroup.lastChild &&\n      ((this.table.scenegraph.bodyGroup.lastChild instanceof Group\n        ? this.table.scenegraph.bodyGroup.lastChild\n        : this.table.scenegraph.bodyGroup.lastChild._prev) as Group);\n    if (!lastColumnGroup) {\n      lastColumnGroup =\n        this.table.scenegraph.colHeaderGroup.lastChild &&\n        ((this.table.scenegraph.colHeaderGroup.lastChild instanceof Group\n          ? this.table.scenegraph.colHeaderGroup.lastChild\n          : this.table.scenegraph.colHeaderGroup.lastChild._prev) as Group);\n    }\n    const xOrigin = lastColumnGroup.attribute.x + lastColumnGroup.attribute.width;\n    const yOrigin = lastColumnGroup.attribute.y;\n    // create bodyGroup\n    createColGroup(\n      this.table.scenegraph.bodyGroup,\n      xOrigin,\n      yOrigin,\n      this.currentCol + 1, // colStart\n      endCol, // colEnd\n      this.rowStart, // rowStart\n      this.rowEnd, // rowEnd\n      'body', // isHeader\n      this.table\n    );\n\n    this.currentCol = endCol;\n    this.colUpdatePos = this.colEnd;\n\n    // update container group size and border\n    this.table.scenegraph.updateContainer();\n    this.table.scenegraph.updateBorderSizeAndPosition();\n  }\n\n  async setY(y: number, isEnd = false) {\n    const yLimitTop =\n      this.table.getRowsHeight(this.bodyTopRow, this.bodyTopRow + (this.rowEnd - this.rowStart + 1)) / 2;\n    const yLimitBottom = this.table.getAllRowsHeight() - yLimitTop;\n\n    const screenTop = this.table.getTargetRowAt(y + this.table.scenegraph.colHeaderGroup.attribute.height);\n    if (screenTop) {\n      this.screenTopRow = screenTop.row;\n    }\n\n    if (y < yLimitTop && this.rowStart === this.bodyTopRow) {\n      // 执行真实body group坐标修改\n      this.updateDeltaY(y);\n      this.updateBody(y - this.deltaY);\n    } else if (y > yLimitBottom && this.rowEnd === this.bodyBottomRow) {\n      // 执行真实body group坐标修改\n      this.updateDeltaY(y);\n      this.updateBody(y - this.deltaY);\n    } else if (\n      (!this.table.scenegraph.bodyGroup.firstChild ||\n        this.table.scenegraph.bodyGroup.firstChild.type !== 'group' ||\n        this.table.scenegraph.bodyGroup.firstChild.childrenCount === 0) &&\n      (!this.table.scenegraph.rowHeaderGroup.firstChild ||\n        this.table.scenegraph.rowHeaderGroup.firstChild.type !== 'group' ||\n        this.table.scenegraph.rowHeaderGroup.firstChild.childrenCount === 0)\n    ) {\n      this.updateDeltaY(y);\n      // 兼容异步加载数据promise的情况 childrenCount=0 如果用户立即调用setScrollTop执行dynamicSetY会出错\n      this.updateBody(y - this.deltaY);\n    } else {\n      // 执行动态更新节点\n      this.dynamicSetY(y, screenTop, isEnd);\n    }\n  }\n\n  async setX(x: number, isEnd = false) {\n    const xLimitLeft =\n      this.table.getColsWidth(this.bodyLeftCol, this.bodyLeftCol + (this.colEnd - this.colStart + 1)) / 2;\n    const xLimitRight = this.table.getAllColsWidth() - xLimitLeft;\n\n    const screenLeft = this.table.getTargetColAt(x + this.table.scenegraph.rowHeaderGroup.attribute.width);\n    if (screenLeft) {\n      this.screenLeftCol = screenLeft.col;\n    }\n\n    if (x < xLimitLeft && this.colStart === this.bodyLeftCol) {\n      // 执行真实body group坐标修改\n      this.updateDeltaX(x);\n      this.table.scenegraph.setBodyAndColHeaderX(-x + this.deltaX);\n    } else if (x > xLimitRight && this.colEnd === this.bodyRightCol) {\n      // 执行真实body group坐标修改\n      this.updateDeltaX(x);\n      this.table.scenegraph.setBodyAndColHeaderX(-x + this.deltaX);\n    } else if (\n      // 注意判断关系 这里不是 || 而是 &&\n      this.table.scenegraph.bodyGroup.firstChild &&\n      this.table.scenegraph.bodyGroup.firstChild.type === 'group' &&\n      this.table.scenegraph.bodyGroup.firstChild.childrenCount === 0\n    ) {\n      // 兼容异步加载数据promise的情况 childrenCount=0 如果用户立即调用setScrollLeft执行dynamicSetX会出错\n      this.updateDeltaX(x);\n      this.table.scenegraph.setBodyAndColHeaderX(-x + this.deltaX);\n    } else {\n      // 执行动态更新节点\n      this.dynamicSetX(x, screenLeft, isEnd);\n    }\n  }\n\n  async dynamicSetY(y: number, screenTop: RowInfo | null, isEnd = false) {\n    dynamicSetY(y, screenTop, isEnd, this);\n  }\n  async dynamicSetX(x: number, screenLeft: ColumnInfo | null, isEnd = false) {\n    dynamicSetX(x, screenLeft, isEnd, this);\n  }\n\n  updateBody(y: number) {\n    this.table.scenegraph.setBodyAndRowHeaderY(-y);\n  }\n\n  async updateRowCellGroupsAsync() {\n    this.updateCellGroups(this.taskRowCount);\n  }\n\n  updateCellGroups(count: number) {\n    const distRow = Math.min(this.bodyBottomRow, this.rowUpdatePos + count);\n    // console.log('updateCellGroups', this.rowUpdatePos, distRow);\n    if (this.table.isAutoRowHeight(this.rowUpdatePos)) {\n      computeRowsHeight(this.table, this.rowUpdatePos, distRow, false);\n    }\n\n    updateRowContent(this.rowUpdatePos, distRow, this);\n\n    if (this.table.isAutoRowHeight(this.rowUpdatePos)) {\n      // body group\n      updateAutoRow(\n        this.bodyLeftCol, // colStart\n        this.bodyRightCol, // colEnd\n        this.rowUpdatePos, // rowStart\n        distRow, // rowEnd\n        this.table,\n        this.rowUpdateDirection,\n        true\n      );\n      // row header group\n      updateAutoRow(\n        0, // colStart\n        this.table.frozenColCount - 1, // colEnd\n        this.rowUpdatePos, // rowStart\n        distRow, // rowEnd\n        this.table,\n        this.rowUpdateDirection,\n        true\n      );\n      // right frozen group\n      updateAutoRow(\n        this.table.colCount - this.table.rightFrozenColCount, // colStart\n        this.table.colCount - 1, // colEnd\n        this.rowUpdatePos, // rowStart\n        distRow, // rowEnd\n        this.table,\n        this.rowUpdateDirection,\n        true\n      );\n    }\n\n    this.rowUpdatePos = distRow + 1;\n  }\n  /** 更新底部冻结行的单元格内容 包括两边的角头 */\n  updateBottomFrozenCellGroups() {\n    const startRow = this.table.rowCount - this.table.bottomFrozenRowCount;\n    const endRow = this.table.rowCount - 1;\n    if (this.table.isAutoRowHeight(startRow)) {\n      computeRowsHeight(this.table, startRow, endRow, false);\n    }\n    updateRowContent(startRow, endRow, this);\n\n    if (this.table.isAutoRowHeight(startRow)) {\n      // body group\n      updateAutoRow(\n        this.bodyLeftCol, // colStart\n        this.bodyRightCol, // colEnd\n        startRow, // rowStart\n        endRow, // rowEnd\n        this.table,\n        this.rowUpdateDirection\n      );\n      // row header group\n      updateAutoRow(\n        0, // colStart\n        this.table.frozenColCount - 1, // colEnd\n        startRow, // rowStart\n        endRow, // rowEnd\n        this.table,\n        this.rowUpdateDirection\n      );\n      // right frozen group\n      updateAutoRow(\n        this.table.colCount - this.table.rightFrozenColCount, // colStart\n        this.table.colCount - 1, // colEnd\n        startRow, // rowStart\n        endRow, // rowEnd\n        this.table,\n        this.rowUpdateDirection\n      );\n    }\n  }\n  /** 更新底部冻结行的单元格内容 包括两边的角头 */\n  updateRightFrozenCellGroups() {\n    const startCol = this.table.colCount - this.table.rightFrozenColCount;\n    const endCol = this.table.colCount - 1;\n    if (this.table.widthMode === 'autoWidth') {\n      computeColsWidth(this.table, startCol, endCol, false);\n    }\n    console.log('updateRightFrozenCellGroups', startCol, endCol);\n    updateColContent(startCol, endCol, this);\n\n    if (this.table.isAutoRowHeight(this.rowStart)) {\n      // body group\n      updateAutoColumn(startCol, endCol, this.table, this.colUpdateDirection);\n    }\n  }\n  async updateColCellGroupsAsync() {\n    this.updateColGroups(this.taskRowCount);\n  }\n\n  updateColGroups(count: number) {\n    const distCol = Math.min(this.bodyRightCol, this.colUpdatePos + count);\n    // console.log('updateCellGroups', this.colUpdatePos, distCol);\n    // for (let col = this.colUpdatePos; col <= distCol; col++) {\n    //   const colGroup = this.table.scenegraph.getColGroup(col);\n    //   if (colGroup) {\n    //     // colGroup.forEachChildren((cellGroup: Group) => {\n    //     //   this.updateCellGroupContent(cellGroup);\n    //     // });\n    //     // for (let row = (colGroup.firstChild as Group).row; row <= (colGroup.lastChild as Group).row; row++) {\n    //     //   const cellGroup = this.highPerformanceGetCell(colGroup.col, row);\n    //     //   this.updateCellGroupContent(cellGroup);\n    //     // }\n    //     let cellGroup = colGroup.firstChild;\n    //     while (cellGroup) {\n    //       // this.updateCellGroupContent(cellGroup as Group);\n    //       // cellGroup = cellGroup._next;\n    //       const newCellGroup = this.updateCellGroupContent(cellGroup as Group);\n    //       cellGroup = newCellGroup._next;\n    //     }\n    //     colGroup.needUpdate = false;\n    //   }\n    // }\n    if (this.table.widthMode === 'autoWidth') {\n      computeColsWidth(this.table, this.colUpdatePos, distCol);\n    }\n    updateColContent(this.colUpdatePos, distCol, this);\n    this.colUpdatePos = distCol + 1;\n  }\n\n  updateCellGroupPosition(cellGroup: Group, newRow: number, y: number) {\n    // 更新位置&row\n    cellGroup.row = newRow;\n    cellGroup.mergeStartCol = undefined;\n    cellGroup.mergeStartRow = undefined;\n    cellGroup.mergeEndCol = undefined;\n    cellGroup.mergeEndRow = undefined;\n    cellGroup.setAttribute('y', y);\n    (cellGroup as any).needUpdate = true;\n    (cellGroup as any).needUpdateForAutoRowHeight = true;\n  }\n\n  updateCellGroupContent(cellGroup: Group) {\n    if (!cellGroup.needUpdate || cellGroup.role !== 'cell') {\n      return cellGroup;\n    }\n\n    const newCellGroup = this.table.scenegraph.updateCellContent(cellGroup.col, cellGroup.row);\n    cellGroup.needUpdate = false;\n    return newCellGroup || cellGroup;\n  }\n\n  async sortCellVertical() {\n    await sortVertical(this);\n  }\n\n  async sortCellHorizontal() {\n    await sortHorizontal(this);\n  }\n\n  highPerformanceGetCell(\n    col: number,\n    row: number,\n    // rowStart: number = this.rowStart,\n    // rowEnd: number = this.rowEnd,\n    getShadow?: boolean\n  ) {\n    // if (row < rowStart || row > rowEnd) {\n    //   return emptyGroup;\n    // }\n    // if (row < this.rowStart || row > this.rowEnd || col < this.colStart || col > this.colEnd) {\n    //   return emptyGroup;\n    // }\n\n    if (\n      row >= this.table.frozenRowCount && // not column header\n      row < this.table.rowCount - this.table.bottomFrozenRowCount && // not bottom frozen\n      (row < this.rowStart || row > this.rowEnd) // not in proxy row range\n    ) {\n      return emptyGroup;\n    }\n\n    if (\n      col >= this.table.frozenColCount && // not row header\n      col < this.table.colCount - this.table.rightFrozenColCount && // not right frozen\n      (col < this.colStart || col > this.colEnd) // not in proxy col range\n    ) {\n      return emptyGroup;\n    }\n\n    if (this.cellCache.get(col)) {\n      const cacheCellGoup = this.cellCache.get(col);\n      if ((cacheCellGoup._next || cacheCellGoup._prev) && Math.abs(cacheCellGoup.row - row) < row) {\n        // 由缓存单元格向前后查找要快于从头查找\n        let cellGroup = getCellByCache(cacheCellGoup, row);\n        if (!cellGroup || (!getShadow && cellGroup.role === 'shadow-cell')) {\n          cellGroup = this.table.scenegraph.getCell(col, row, getShadow);\n        }\n        cellGroup.row && this.cellCache.set(col, cellGroup);\n        return cellGroup;\n      }\n      const cellGroup = this.table.scenegraph.getCell(col, row, getShadow);\n      // cellGroup.row && this.cellCache.set(col, cellGroup);\n      if (cellGroup.col === col && cellGroup.row) {\n        this.cellCache.set(col, cellGroup);\n      }\n      return cellGroup;\n    }\n    const cellGroup = this.table.scenegraph.getCell(col, row, getShadow);\n    // cellGroup.row && this.cellCache.set(col, cellGroup);\n    if (cellGroup.col === col && cellGroup.row) {\n      this.cellCache.set(col, cellGroup);\n    }\n    return cellGroup;\n  }\n\n  updateDeltaY(y: number, screenTopY?: number, screenTopRow?: number) {\n    if (this.rowStart === this.bodyTopRow) {\n      const cellGroup = this.table.scenegraph.highPerformanceGetCell(this.colStart, this.rowStart, true);\n      if (cellGroup.role === 'cell') {\n        const deltaY = cellGroup.attribute.y;\n        this.deltaY = -deltaY;\n      }\n    } else if (this.rowEnd === this.bodyBottomRow) {\n      const cellGroup = this.table.scenegraph.highPerformanceGetCell(this.colStart, this.rowEnd, true);\n      if (cellGroup.role === 'cell') {\n        // const deltaY =\n        //   cellGroup.attribute.y +\n        //   cellGroup.attribute.height -\n        //   (this.table.tableNoFrameHeight - this.table.getFrozenRowsHeight() - this.table.getBottomFrozenRowsHeight()) -\n        //   y;\n        const deltaY =\n          cellGroup.attribute.y +\n          cellGroup.attribute.height -\n          (this.table.getAllRowsHeight() - this.table.getFrozenRowsHeight() - this.table.getBottomFrozenRowsHeight());\n        this.deltaY = -deltaY;\n      }\n    } else if (isValid(screenTopY) && isValid(screenTopRow)) {\n      let cellGroup = this.table.scenegraph.highPerformanceGetCell(this.colStart, screenTopRow, true);\n      if (cellGroup.role !== 'cell') {\n        cellGroup = this.table.scenegraph.highPerformanceGetCell(0, screenTopRow, true);\n      }\n      const bodyY = y - this.deltaY;\n      const distRowYOffset = screenTopY - bodyY; // dist cell 距离表格顶部的位置差\n      const currentRowYOffset = cellGroup.attribute.y - bodyY + this.table.getFrozenRowsHeight(); // current cell 距离表格顶部的位置差\n      // const deltaY = screenTopY - (cellGroup.attribute.y + );\n      this.deltaY = distRowYOffset - currentRowYOffset;\n    }\n  }\n\n  updateDeltaX(x: number, screenLeftX?: number, screenLeftCol?: number) {\n    if (this.colStart === this.bodyLeftCol) {\n      const colGroup = this.table.scenegraph.getColGroup(this.colStart);\n      if (colGroup) {\n        const deltaX = colGroup.attribute.x;\n        this.deltaX = -deltaX;\n      }\n    } else if (this.colEnd === this.bodyRightCol) {\n      const colGroup = this.table.scenegraph.getColGroup(this.colEnd);\n      if (colGroup) {\n        const deltaX =\n          colGroup.attribute.x +\n          colGroup.attribute.width -\n          (this.table.getAllColsWidth() - this.table.getFrozenColsWidth() - this.table.getRightFrozenColsWidth());\n        this.deltaX = -deltaX;\n      }\n    } else if (isValid(screenLeftX) && isValid(screenLeftCol)) {\n      const colGroup =\n        this.table.scenegraph.getColGroup(screenLeftCol) || this.table.scenegraph.getColGroup(screenLeftCol, true);\n      // const deltaX = screenLeftX - (colGroup.attribute.x + this.table.getFrozenColsWidth() + this.deltaX);\n      // this.deltaX = deltaX + this.deltaX;\n      const bodyX = x - this.deltaX;\n      const distColXOffset = screenLeftX - bodyX; // dist col 距离表格左侧的位置差\n      const currentColXOffset = colGroup.attribute.x - bodyX + this.table.getFrozenColsWidth(); // current col 距离表格左侧的位置差\n      this.deltaX = distColXOffset - currentColXOffset;\n    }\n  }\n\n  release() {\n    this.isRelease = true;\n  }\n}\n\nfunction getCellByCache(cacheCellGroup: Group, row: number): Group | null {\n  if (!cacheCellGroup) {\n    return null;\n  }\n  if (cacheCellGroup.row === row) {\n    return cacheCellGroup;\n  }\n  const prev = cacheCellGroup._prev as Group;\n  const next = cacheCellGroup._next as Group;\n  // cacheCellGroup may have wrong order\n  if (cacheCellGroup.row > row && prev && prev.row === cacheCellGroup.row - 1) {\n    return getCellByCache(prev, row);\n  }\n  if (cacheCellGroup.row < row && next && next.row === cacheCellGroup.row + 1) {\n    return getCellByCache(next, row);\n  }\n  return null;\n}\n"]}