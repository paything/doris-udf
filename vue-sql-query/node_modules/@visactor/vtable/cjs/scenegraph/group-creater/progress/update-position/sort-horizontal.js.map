{"version":3,"sources":["../src/scenegraph/group-creater/progress/update-position/sort-horizontal.ts"],"names":[],"mappings":"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","file":"sort-horizontal.js","sourcesContent":["import type { Group } from '../../../graphic/group';\nimport { computeColsWidth } from '../../../layout/compute-col-width';\nimport type { SceneProxy } from '../proxy';\nimport { updateColContent } from './dynamic-set-x';\nimport { updateAutoColumn } from './update-auto-column';\n\nexport async function sortHorizontal(proxy: SceneProxy) {\n  // 更新左 中 右 左下 底部 右下 部分的单元格需更新标记\n  proxy.table.scenegraph.bodyGroup.forEachChildren((colGroup: Group, index: number) => {\n    if (colGroup.type === 'group') {\n      colGroup.needUpdate = true;\n      colGroup?.forEachChildren((cellGroup: Group) => {\n        (cellGroup as any).needUpdate = true;\n      });\n    }\n  });\n\n  // 更新同步范围\n  const syncLeftCol = Math.max(proxy.bodyLeftCol, proxy.screenLeftCol - proxy.screenColCount * 1);\n  const syncRightCol = Math.min(proxy.bodyRightCol, proxy.screenLeftCol + proxy.screenColCount * 2);\n\n  computeColsWidth(proxy.table, syncLeftCol, syncRightCol);\n\n  for (let col = proxy.colStart; col <= proxy.colEnd; col++) {\n    // 将该列的chartInstance清除掉\n    const columnGroup = proxy.table.scenegraph.getColGroup(col);\n    columnGroup?.setAttribute('chartInstance', undefined);\n    for (let row = proxy.table.rowCount - proxy.table.bottomFrozenRowCount; row < proxy.table.rowCount; row++) {\n      proxy.table.scenegraph.updateCellContent(col, row);\n    }\n  }\n  for (let col = proxy.table.colCount - proxy.table.rightFrozenColCount; col < proxy.table.colCount; col++) {\n    // 将该列的chartInstance清除掉\n    const columnGroup = proxy.table.scenegraph.getColGroup(col);\n    columnGroup?.setAttribute('chartInstance', undefined);\n    for (let row = proxy.rowStart; row <= proxy.rowEnd; row++) {\n      proxy.table.scenegraph.updateCellContent(col, row);\n    }\n    for (let row = proxy.table.rowCount - proxy.table.bottomFrozenRowCount; row < proxy.table.rowCount; row++) {\n      proxy.table.scenegraph.updateCellContent(col, row);\n    }\n  }\n\n  updateColContent(syncLeftCol, syncRightCol, proxy);\n\n  // updateAutoColumn(\n  //   syncLeftCol, // colStart\n  //   syncRightCol, // colEnd\n  //   proxy.table,\n  //   proxy.colEnd > proxy.bodyRightCol - (proxy.colEnd - proxy.colStart + 1) ? 'right' : 'left' // 跳转到右侧时，从右向左对齐\n  // );\n\n  proxy.colUpdatePos = proxy.colStart;\n  proxy.colUpdateDirection = proxy.colEnd > proxy.bodyRightCol - (proxy.colEnd - proxy.colStart + 1) ? 'right' : 'left';\n\n  // if (\n  //   proxy.colEnd === proxy.table.scenegraph.proxy.bodyRightCol &&\n  //   proxy.colStart === proxy.table.scenegraph.proxy.bodyLeftCol\n  // ) {\n  //   // 全量更新，do nothing\n  // } else if (proxy.colEnd === proxy.table.scenegraph.proxy.bodyRightCol) {\n  //   const totalWidth = proxy.table.getAllColsWidth();\n  //   const left = totalWidth - proxy.table.scenegraph.width;\n  //   // proxy.updateBody(top);\n  //   proxy.table.scenegraph.setBodyAndColHeaderX(-left);\n  // } else if (proxy.colStart === proxy.table.scenegraph.proxy.bodyLeftCol) {\n  //   // proxy.updateBody(0);\n  //   proxy.table.scenegraph.setBodyAndColHeaderX(0);\n  // }\n\n  proxy.table.scenegraph.updateNextFrame();\n  await proxy.progress();\n}\n"]}