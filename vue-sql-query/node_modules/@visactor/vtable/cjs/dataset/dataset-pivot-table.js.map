{"version":3,"sources":["../src/dataset/dataset-pivot-table.ts"],"names":[],"mappings":"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","file":"dataset-pivot-table.js","sourcesContent":["import type {\n  FilterRules,\n  IPivotTableDataConfig,\n  SortRule,\n  AggregationRules,\n  AggregationRule,\n  SortRules,\n  DerivedFieldRule,\n  DerivedFieldRules,\n  SortByIndicatorRule,\n  SortByRule,\n  SortTypeRule,\n  SortFuncRule,\n  Totals,\n  MappingRules,\n  SortOrder,\n  IHeaderTreeDefine\n} from '../ts-types';\nimport { AggregationType, SortType } from '../ts-types';\nimport type { Aggregator } from '../ts-types/dataset/aggregation';\nimport {\n  AvgAggregator,\n  CountAggregator,\n  MaxAggregator,\n  MinAggregator,\n  SumAggregator,\n  naturalSort,\n  sortBy,\n  typeSort\n} from '../ts-types/dataset/aggregation';\n/**\n * 数据处理模块\n */\nexport class DatasetForPivotTable {\n  /**\n   * 用户配置\n   */\n  dataConfig: IPivotTableDataConfig;\n  /**\n   * 明细数据\n   */\n  records: any[];\n  /**\n   * 树形节点，最后的子节点对应到body部分的每个单元格 树结构： 行-列-单元格\n   */\n  tree: Record<string, Record<string, Aggregator[]>> = {};\n  private colFlatKeys = {};\n  private rowFlatKeys = {};\n\n  //列表头的每列对应的表头键值\n  colKeys: string[][] = [];\n  //行表头的每行对应的表头键值\n  rowKeys: string[][] = [];\n  /**\n   * 对应dataset中的rowKeys，行表头的每行表头键值，包含小计总计\n   */\n  rowKeysPath: string[][];\n  /**\n   * 对应dataset中的colKeys，列表头的每列表头键值，包含小计总计\n   */\n  colKeysPath: string[][];\n  // allTotal: SumAggregator;\n  rowOrder = 'key_a_to_z';\n  colOrder = 'key_a_to_z';\n  //是否已排序\n  sorted = false;\n  //排序规则\n  sortRules: SortRules;\n  //过滤规则\n  filterRules: FilterRules;\n  //聚合规则\n  aggregationRules: AggregationRules;\n  //派生字段规则\n  derivedFieldRules: DerivedFieldRules;\n  mappingRules: MappingRules;\n  //汇总配置\n  totals: Totals;\n  //全局统计各指标的极值\n  indicatorStatistics: { max: Aggregator; min: Aggregator; total: Aggregator }[] = [];\n\n  aggregators: {\n    [key: string]: { new (dimension: string | string[], formatFun?: any, isRecord?: boolean): Aggregator };\n  } = {};\n\n  stringJoinChar = String.fromCharCode(0);\n  //缓存rows对应每个值是否为汇总字段\n  private rowsIsTotal: boolean[] = [];\n  private colsIsTotal: boolean[] = [];\n  private colGrandTotalLabel: string;\n  private colSubTotalLabel: string;\n  private rowGrandTotalLabel: string;\n  private rowSubTotalLabel: string;\n  rows: string[];\n  columns: string[];\n  indicatorKeys: string[];\n  constructor(\n    dataConfig: IPivotTableDataConfig,\n    rows: string[],\n    columns: string[],\n    indicators: string[],\n    records: any[],\n    customColTree?: IHeaderTreeDefine[],\n    customRowTree?: IHeaderTreeDefine[]\n  ) {\n    this.registerAggregators();\n    this.dataConfig = dataConfig;\n    // this.allTotal = new SumAggregator(this.indicators[0]);\n    this.sortRules = this.dataConfig?.sortRules;\n    this.aggregationRules = this.dataConfig?.aggregationRules;\n    this.derivedFieldRules = this.dataConfig?.derivedFieldRules;\n    this.mappingRules = this.dataConfig?.mappingRules;\n    this.totals = this.dataConfig?.totals;\n    this.rows = rows;\n    this.columns = columns;\n    this.indicatorKeys = indicators;\n    this.colGrandTotalLabel = this.totals?.column?.grandTotalLabel ?? '总计';\n    this.colSubTotalLabel = this.totals?.column?.subTotalLabel ?? '小计';\n    this.rowGrandTotalLabel = this.totals?.row?.grandTotalLabel ?? '总计';\n    this.rowSubTotalLabel = this.totals?.row?.subTotalLabel ?? '小计';\n    // for (let i = 0; i < this.indicators?.length; i++) {\n    //   this.indicatorStatistics.push({\n    //     max: new this.aggregators[AggregationType.MAX](this.indicators[i]),\n    //     min: new this.aggregators[AggregationType.MIN](this.indicators[i]),\n    //     total: new this.aggregators[AggregationType.SUM](this.indicators[i]),\n    //   });\n    // }\n    this.rowsIsTotal = new Array(this.rows.length).fill(false);\n    this.colsIsTotal = new Array(this.columns.length).fill(false);\n    for (let i = 0, len = this.totals?.row?.subTotalsDimensions?.length; i < len; i++) {\n      const dimension = this.totals.row.subTotalsDimensions[i];\n      const dimensionIndex = this.rows.indexOf(dimension);\n      this.rowsIsTotal[dimensionIndex] = true;\n    }\n    for (let i = 0, len = this.totals?.column?.subTotalsDimensions?.length; i < len; i++) {\n      const dimension = this.totals.column.subTotalsDimensions[i];\n      const dimensionIndex = this.columns.indexOf(dimension);\n      this.colsIsTotal[dimensionIndex] = true;\n    }\n    if (records) {\n      //处理数据\n      this.records = records;\n      const t0 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      this.setRecords(records);\n      const t1 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      console.log('processRecords:', t1 - t0);\n\n      // 处理汇总\n      const t4 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      this.totalStatistics();\n      const t5 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      console.log('totalStatistics:', t5 - t4);\n\n      //对维度排序\n      const t2 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      this.sortKeys();\n      const t3 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      console.log('sortKeys:', t3 - t2);\n      //转为树形\n      // const t4 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      // this.madeTree(this.rowKeys);\n      // const t41 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      // console.log('madeTree:', t41 - t4);\n\n      const t7 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      if (customRowTree) {\n        this.rowKeysPath = this.TreeToArr2(customRowTree);\n      } else {\n        this.rowKeysPath = this.TreeToArr(\n          this.ArrToTree(\n            this.rowKeys,\n            this.rowsIsTotal,\n            this?.totals?.row?.showGrandTotals || this.columns.length === 0,\n            this.rowGrandTotalLabel,\n            this.rowSubTotalLabel\n          )\n        );\n      }\n      if (customColTree) {\n        this.colKeysPath = this.TreeToArr2(customColTree);\n      } else {\n        this.colKeysPath = this.TreeToArr(\n          this.ArrToTree(\n            this.colKeys,\n            this.colsIsTotal,\n            this.totals?.column?.showGrandTotals || this.rows.length === 0,\n            this.colGrandTotalLabel,\n            this.colSubTotalLabel\n          )\n        );\n      }\n      const t8 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      console.log('TreeToArr:', t8 - t7);\n    }\n\n    delete this.rowFlatKeys;\n    delete this.colFlatKeys;\n  }\n  //将聚合类型注册 收集到aggregators\n  registerAggregator(type: string, aggregator: any) {\n    this.aggregators[type] = aggregator;\n  }\n  //将聚合类型注册\n  registerAggregators() {\n    this.registerAggregator(AggregationType.SUM, SumAggregator);\n    this.registerAggregator(AggregationType.COUNT, CountAggregator);\n    this.registerAggregator(AggregationType.MAX, MaxAggregator);\n    this.registerAggregator(AggregationType.MIN, MinAggregator);\n    this.registerAggregator(AggregationType.AVG, AvgAggregator);\n  }\n  setRecords(records: any[]) {\n    this.processRecords();\n  }\n  /**\n   * 处理数据,遍历所有条目，过滤和派生字段的处理有待优化TODO\n   */\n  processRecords() {\n    for (let i = 0, len = this.records.length; i < len; i++) {\n      const record = this.records[i];\n      if (this.filterRecord(record)) {\n        this.processRecord(record);\n      }\n    }\n  }\n  filterRecord(record: any) {\n    let isReserved = true;\n    for (let i = 0; i < this.dataConfig?.filterRules?.length; i++) {\n      const filterRule = this.dataConfig?.filterRules[i];\n      if (!filterRule.filterFunc?.(record)) {\n        isReserved = false;\n        break;\n      }\n    }\n    return isReserved;\n  }\n  /**\n   * 处理单条数据\n   * @param record\n   * @returns\n   */\n  processRecord(record: any) {\n    //这个派生字段的计算位置有待确定，是否应该放到filter之前\n    this.derivedFieldRules?.forEach((derivedFieldRule: DerivedFieldRule, i: number) => {\n      record[derivedFieldRule.fieldName] = derivedFieldRule.derivedFunc(record);\n    });\n    const colKey = [];\n    const rowKey = [];\n\n    for (let l = 0, len1 = this.rows.length; l < len1; l++) {\n      const rowAttr = this.rows[l];\n      rowKey.push(record[rowAttr]);\n    }\n    for (let n = 0, len2 = this.columns.length; n < len2; n++) {\n      const colAttr = this.columns[n];\n      colKey.push(record[colAttr]);\n    }\n\n    // this.allTotal.push(record);\n\n    const flatRowKey = rowKey.join(this.stringJoinChar);\n    const flatColKey = colKey.join(this.stringJoinChar);\n\n    // 此方法判断效率很低\n    // if (this.rowKeys.indexOf(rowKey) === -1) this.rowKeys.push(rowKey);\n    // if (this.colKeys.indexOf(colKey) === -1) this.colKeys.push(colKey);\n\n    // rowTotals colTotals原本汇总的每行每列的总计，当columns或者rows不配置的时候 可以用这个值展示，现在放到了tree上 'total'作为默认键值\n    if (rowKey.length !== 0) {\n      if (!this.rowFlatKeys[flatRowKey]) {\n        this.rowKeys.push(rowKey);\n        this.rowFlatKeys[flatRowKey] = 1;\n      }\n      //如有需要显示总计 或者columns配置空\n      // if (this.totals?.row?.showGrandTotals || !(this.dataConfig?.columns?.length > 0))\n      //   for (let i = 0; i < this.indicators?.length; i++) {\n      //     if (!this.rowTotals[flatRowKey][i]) {\n      //       const aggRule = this.getAggregatorRule(this.indicators[i]);\n      //       this.rowTotals[flatRowKey][i] = new this.aggregators[\n      //         aggRule?.aggregationType ?? AggregationType.SUM\n      //       ](aggRule?.field ?? this.indicators[i], aggRule?.formatFun);\n      //     }\n      //     this.rowTotals[flatRowKey][i].push(record);\n      //   }\n    }\n    if (colKey.length !== 0) {\n      if (!this.colFlatKeys[flatColKey]) {\n        this.colKeys.push(colKey);\n        this.colFlatKeys[flatColKey] = 1;\n      }\n      //如有需要显示总计 或者rows配置空\n      // if (this.totals?.column?.showGrandTotals || !(this.dataConfig?.rows?.length > 0))\n      //   for (let i = 0; i < this.indicators?.length; i++) {\n      //     if (!this.colTotals[flatColKey][i]) {\n      //       const aggRule = this.getAggregatorRule(this.indicators[i]);\n      //       this.colTotals[flatColKey][i] = new this.aggregators[\n      //         aggRule?.aggregationType ?? AggregationType.SUM\n      //       ](aggRule?.field ?? this.indicators[i], aggRule?.formatFun);\n      //     }\n      //     this.colTotals[flatColKey][i].push(record);\n      //   }\n    }\n\n    //组织树结构： 行-列-单元格  行key为flatRowKey如’山东青岛‘  列key为flatColKey如’家具椅子‘\n    if (colKey.length !== 0 || rowKey.length !== 0) {\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      //这里改成数组 因为可能是多个指标值 遍历indicators 生成对应类型的聚合对象\n      if (!this.tree[flatRowKey]?.[flatColKey]) {\n        this.tree[flatRowKey][flatColKey] = [];\n      }\n      for (let i = 0; i < this.indicatorKeys.length; i++) {\n        if (!this.tree[flatRowKey]?.[flatColKey]?.[i]) {\n          const aggRule = this.getAggregatorRule(this.indicatorKeys[i]);\n          this.tree[flatRowKey][flatColKey][i] = new this.aggregators[aggRule?.aggregationType ?? AggregationType.SUM](\n            aggRule?.field ?? this.indicatorKeys[i],\n            aggRule?.formatFun\n          );\n        }\n        //push融合了计算过程\n        this.tree[flatRowKey]?.[flatColKey]?.[i].push(record);\n      }\n    }\n    //统计整体的最大最小值和总计值 共mapping使用\n    if (this.mappingRules) {\n      for (let i = 0; i < this.indicatorKeys.length; i++) {\n        if (!this.indicatorStatistics[i]) {\n          const aggRule = this.getAggregatorRule(this.indicatorKeys[i]);\n          this.indicatorStatistics[i] = {\n            max: new this.aggregators[AggregationType.MAX](this.indicatorKeys[i]),\n            min: new this.aggregators[AggregationType.MIN](this.indicatorKeys[i]),\n            total: new this.aggregators[aggRule?.aggregationType ?? AggregationType.SUM](\n              aggRule?.field ?? this.indicatorKeys[i],\n              aggRule?.formatFun\n            )\n          };\n        }\n        //push融合了计算过程\n        this.indicatorStatistics[i].max.push(this.tree[flatRowKey]?.[flatColKey]?.[i].value());\n        this.indicatorStatistics[i].min.push(this.tree[flatRowKey]?.[flatColKey]?.[i].value());\n        this.indicatorStatistics[i].total.push(record);\n      }\n    }\n  }\n  /**\n   * 全量更新排序规则 对数据重新排序 生成行列paths\n   * @param sortRules\n   */\n  updateSortRules(sortRules: SortRules) {\n    this.sorted = false;\n    this.sortRules = sortRules;\n    this.sortKeys();\n    this.rowKeysPath = this.TreeToArr(\n      this.ArrToTree(\n        this.rowKeys,\n        this.rowsIsTotal,\n        this?.totals?.row?.showGrandTotals || this.columns.length === 0,\n        this.rowGrandTotalLabel,\n        this.rowSubTotalLabel\n      )\n    );\n    this.colKeysPath = this.TreeToArr(\n      this.ArrToTree(\n        this.colKeys,\n        this.colsIsTotal,\n        this.totals?.column?.showGrandTotals || this.rows.length === 0,\n        this.colGrandTotalLabel,\n        this.colSubTotalLabel\n      )\n    );\n  }\n  private getAggregatorRule(indicatorKey: string): AggregationRule<AggregationType> | undefined {\n    return this.aggregationRules?.find((value: AggregationRule<AggregationType>, index: number) => {\n      return indicatorKey === value.indicatorKey;\n    });\n  }\n  /**\n   * 根据行列的维度key 获取聚合对象\n   * @param rowKey\n   * @param colKey\n   * @param indicator\n   * @returns\n   */\n  getAggregator(rowKey: string[] | string = [], colKey: string[] | string = [], indicator: string): Aggregator {\n    const indicatorIndex = this.indicatorKeys.indexOf(indicator);\n    let agg;\n    let flatRowKey;\n    let flatColKey;\n    if (typeof rowKey === 'string') {\n      flatRowKey = rowKey;\n    } else {\n      flatRowKey = rowKey.join(this.stringJoinChar);\n    }\n\n    if (typeof colKey === 'string') {\n      flatColKey = colKey;\n    } else {\n      flatColKey = colKey.join(this.stringJoinChar);\n    }\n\n    if (rowKey.length === 0 && colKey.length === 0) {\n      // agg = this.allTotal;\n      // } else if (rowKey.length === 0) {\n      //   // agg = this.tree.total[flatColKey]?.[sortByIndicatorIndex];\n      //   agg = this.colTotals[flatColKey]?.[sortByIndicatorIndex];\n      // } else if (colKey.length === 0) {\n      //   // agg = this.tree[flatRowKey].total?.[sortByIndicatorIndex];\n      //   agg = this.rowTotals[flatRowKey]?.[sortByIndicatorIndex];\n    } else {\n      agg = this.tree[flatRowKey]?.[flatColKey]?.[indicatorIndex];\n    }\n    return agg\n      ? agg\n      : {\n          records: [],\n          key: '',\n          push() {\n            // do nothing\n          },\n          deleteRecord() {\n            // do nothing\n          },\n          updateRecord() {\n            // do nothing\n          },\n          recalculate() {\n            // do nothing\n          },\n          value(): any {\n            return null;\n          },\n          formatValue() {\n            return '';\n          },\n          reset() {\n            // do nothing\n          },\n          clearCacheValue() {\n            // do nothing\n          }\n        };\n  }\n  /**\n   * 根据排序规则 对维度keys排序\n   */\n  sortKeys() {\n    const that = this;\n    if (!this.sorted) {\n      this.sorted = true;\n      // const getValue = function (rowKey: any, colKey: any) {\n      //   return that.getAggregator(rowKey, colKey, '').value();\n      // };\n\n      // switch (this.rowOrder) {\n      //   case 'value_a_to_z':\n      //     this.rowKeys.sort(function (a, b) {\n      //       return naturalSort(getValue(a, []), getValue(b, []));\n      //     });\n      //     break;\n      //   case 'value_z_to_a':\n      //     this.rowKeys.sort(function (a, b) {\n      //       return -naturalSort(getValue(a, []), getValue(b, []));\n      //     });\n      //     break;\n      //   default:\n      this.rowKeys.sort(this.arrSort(this.rows, true));\n      // }\n      // switch (this.colOrder) {\n      //   case 'value_a_to_z':\n      //     this.colKeys.sort(function (a, b) {\n      //       return naturalSort(getValue([], a), getValue([], b));\n      //     });\n      //     break;\n      //   case 'value_z_to_a':\n      //     this.colKeys.sort(function (a, b) {\n      //       return -naturalSort(getValue([], a), getValue([], b));\n      //     });\n      //     break;\n      //   default:\n      const sortfun = this.arrSort(this.columns, false);\n      this.colKeys.sort(sortfun);\n      // }\n    }\n  }\n  /**\n   * 生成排序函数 综合配置的多条排序规则\n   * @param fieldArr 排序维度名称 如行rows 列columns\n   * @returns\n   */\n  arrSort(fieldArr: string[], isRow: boolean) {\n    let field;\n    const that = this;\n    const sortersArr: any[] = function (_this: any) {\n      const results = [];\n      for (let l = 0, len1 = fieldArr.length; l < len1; l++) {\n        field = fieldArr[l];\n        let isHasSortRule = false;\n        if (that.sortRules) {\n          for (let m = 0, len2 = that.sortRules.length; m < len2; m++) {\n            if (that.sortRules[m].sortField === field) {\n              isHasSortRule = true;\n              results.push({\n                field,\n                fieldIndex: l,\n                sortRule: that.sortRules[m],\n                func: that.getSort(that.sortRules[m], isRow)\n              });\n\n              // if (that.sortRules[m].sortByIndicator) {\n              //   isHasSortRule = true;\n              //   results.push({\n              //     field,\n              //     fieldIndex: l,\n              //     sortRule: that.sortRules[m],\n              //     func: that.getSort(that.sortRules[m], field),\n              //   });\n              // }\n            }\n          }\n        }\n        if (!isHasSortRule) {\n          results.push({ field, fieldIndex: l, func: naturalSort });\n        }\n      }\n      return results;\n    }.call(this);\n    return function (a: string[], b: string[]) {\n      let comparison;\n      let sorter;\n      for (let i = 0; i < sortersArr.length; i++) {\n        sorter = sortersArr[i];\n        if (sorter.sortRule?.sortByIndicator) {\n          let aChanged = a;\n          let bChanged = b;\n          if (sorter.fieldIndex < fieldArr.length - 1) {\n            aChanged = a.slice(0, sorter.fieldIndex + 1);\n            aChanged.push(isRow ? that.totals?.row?.subTotalLabel : that.totals?.column?.subTotalLabel);\n            bChanged = b.slice(0, sorter.fieldIndex + 1);\n            bChanged.push(isRow ? that.totals?.row?.subTotalLabel : that.totals?.column?.subTotalLabel);\n          }\n          comparison = sorter.func(aChanged, bChanged, sorter.sortRule?.sortType);\n        } else {\n          comparison = sorter.func(a[sorter.fieldIndex], b[sorter.fieldIndex], sorter.sortRule?.sortType);\n        }\n        if (comparison !== 0) {\n          return comparison * (sorter.sortRule?.sortType === SortType.DESC ? -1 : 1);\n        }\n      }\n      return 0;\n    };\n  }\n  /**\n   * 根据具体排序 获取不同的排序函数\n   * @param sortRule\n   * @returns\n   */\n  getSort(sortRule: SortRule, isSortRow: boolean) {\n    const that = this;\n\n    if ((<SortByIndicatorRule>sortRule).sortByIndicator) {\n      return (a: string[], b: string[], sortType?: SortType) => {\n        /**\n         * 根据rowKey和colKey获取tree上对应的聚合值\n         * @param rowKey\n         * @param colKey\n         * @returns\n         */\n        const getValue = function (rowKey: any, colKey: any) {\n          //如果rowKey提供的不全 如 [地区,省,城市] 只提供了如[华东,山东] 会补全为[华东,山东,小计]\n          if (\n            rowKey.length < that.rows.length &&\n            rowKey[rowKey.length - 1] !== that.rowSubTotalLabel &&\n            rowKey[rowKey.length - 1] !== that.rowGrandTotalLabel\n          ) {\n            rowKey.push(that.rowSubTotalLabel);\n          }\n          if (\n            colKey.length < that.columns.length &&\n            colKey[colKey.length - 1] !== that.colSubTotalLabel &&\n            colKey[colKey.length - 1] !== that.colGrandTotalLabel\n          ) {\n            colKey.push(that.colSubTotalLabel);\n          }\n          return that.getAggregator(rowKey, colKey, (<SortByIndicatorRule>sortRule).sortByIndicator).value();\n        };\n        if (isSortRow) {\n          return naturalSort(\n            getValue(a, (<SortByIndicatorRule>sortRule).query),\n            getValue(b, (<SortByIndicatorRule>sortRule).query),\n            sortType\n          );\n        }\n        return naturalSort(\n          getValue((<SortByIndicatorRule>sortRule).query, a),\n          getValue((<SortByIndicatorRule>sortRule).query, b),\n          sortType\n        );\n      };\n    } else if ((<SortByRule>sortRule).sortBy) {\n      return sortBy((<SortByRule>sortRule).sortBy);\n    }\n    if ((<SortTypeRule>sortRule).sortType) {\n      return typeSort;\n    }\n    if ((<SortFuncRule>sortRule).sortFunc) {\n      return (<SortFuncRule>sortRule).sortFunc;\n    }\n    return naturalSort;\n  }\n  /**\n   * 汇总小计\n   */\n  totalStatistics() {\n    const that = this;\n    if (\n      (that?.totals?.column?.showSubTotals && that?.totals?.column?.subTotalsDimensions?.length >= 1) ||\n      (that?.totals?.row?.showSubTotals && that?.totals?.row?.subTotalsDimensions?.length >= 1) ||\n      that?.totals?.column?.showGrandTotals ||\n      that?.totals?.row?.showGrandTotals ||\n      that.rows.length === 0 ||\n      that.columns.length === 0\n    ) {\n      const rowTotalKeys: string[] = [];\n      /**\n       * 计算每一行的所有列的汇总值\n       * @param flatRowKey\n       * @param flatColKey\n       */\n      const colCompute = (flatRowKey: string, flatColKey: string) => {\n        const colKey = flatColKey.split(this.stringJoinChar);\n        for (let i = 0, len = that.totals?.column?.subTotalsDimensions?.length; i < len; i++) {\n          const dimension = that.totals.column.subTotalsDimensions[i];\n          const dimensionIndex = that.columns.indexOf(dimension);\n          if (dimensionIndex >= 0) {\n            const colTotalKey = colKey.slice(0, dimensionIndex + 1);\n            colTotalKey.push(that.totals?.column?.subTotalLabel ?? '小计');\n            const flatColTotalKey = colTotalKey.join(this.stringJoinChar);\n            if (!this.tree[flatRowKey][flatColTotalKey]) {\n              this.tree[flatRowKey][flatColTotalKey] = [];\n            }\n            for (let i = 0; i < this.indicatorKeys.length; i++) {\n              if (!this.tree[flatRowKey][flatColTotalKey][i]) {\n                const aggRule = this.getAggregatorRule(this.indicatorKeys[i]);\n                this.tree[flatRowKey][flatColTotalKey][i] = new this.aggregators[\n                  aggRule?.aggregationType ?? AggregationType.SUM\n                ](aggRule?.field ?? this.indicatorKeys[i], aggRule?.formatFun);\n              }\n              this.tree[flatRowKey][flatColTotalKey][i].push(that.tree[flatRowKey]?.[flatColKey]?.[i]);\n            }\n          }\n        }\n        if (that.totals?.column?.showGrandTotals || this.rows.length === 0) {\n          const flatColTotalKey = that.colGrandTotalLabel;\n          if (!this.tree[flatRowKey][flatColTotalKey]) {\n            this.tree[flatRowKey][flatColTotalKey] = [];\n          }\n          for (let i = 0; i < this.indicatorKeys.length; i++) {\n            if (!this.tree[flatRowKey][flatColTotalKey][i]) {\n              const aggRule = this.getAggregatorRule(this.indicatorKeys[i]);\n              this.tree[flatRowKey][flatColTotalKey][i] = new this.aggregators[\n                aggRule?.aggregationType ?? AggregationType.SUM\n              ](aggRule?.field ?? this.indicatorKeys[i], aggRule?.formatFun);\n            }\n            this.tree[flatRowKey][flatColTotalKey][i].push(that.tree[flatRowKey]?.[flatColKey]?.[i]);\n          }\n        }\n      };\n      Object.keys(that.tree).forEach(flatRowKey => {\n        const rowKey = flatRowKey.split(this.stringJoinChar);\n        Object.keys(that.tree[flatRowKey]).forEach(flatColKey => {\n          for (let i = 0, len = that.totals?.row?.subTotalsDimensions?.length; i < len; i++) {\n            const dimension = that.totals.row.subTotalsDimensions[i];\n            const dimensionIndex = that.rows.indexOf(dimension);\n            if (dimensionIndex >= 0) {\n              const rowTotalKey = rowKey.slice(0, dimensionIndex + 1);\n              rowTotalKey.push(that.totals?.row?.subTotalLabel ?? '小计');\n              const flatRowTotalKey = rowTotalKey.join(this.stringJoinChar);\n              if (!this.tree[flatRowTotalKey]) {\n                this.tree[flatRowTotalKey] = {};\n                rowTotalKeys.push(flatRowTotalKey);\n              }\n              if (!this.tree[flatRowTotalKey][flatColKey]) {\n                this.tree[flatRowTotalKey][flatColKey] = [];\n                for (let i = 0; i < this.indicatorKeys.length; i++) {\n                  if (!this.tree[flatRowTotalKey][flatColKey][i]) {\n                    const aggRule = this.getAggregatorRule(this.indicatorKeys[i]);\n                    this.tree[flatRowTotalKey][flatColKey][i] = new this.aggregators[\n                      aggRule?.aggregationType ?? AggregationType.SUM\n                    ](aggRule?.field ?? this.indicatorKeys[i], aggRule?.formatFun);\n                  }\n                  this.tree[flatRowTotalKey][flatColKey][i].push(that.tree[flatRowKey]?.[flatColKey]?.[i]);\n                }\n              }\n            }\n            if (that.totals?.row?.showGrandTotals || this.columns.length === 0) {\n              const flatRowTotalKey = that.rowGrandTotalLabel;\n              if (!this.tree[flatRowTotalKey]) {\n                this.tree[flatRowTotalKey] = {};\n                rowTotalKeys.push(flatRowTotalKey);\n              }\n              if (!this.tree[flatRowTotalKey][flatColKey]) {\n                this.tree[flatRowTotalKey][flatColKey] = [];\n              }\n              for (let i = 0; i < this.indicatorKeys.length; i++) {\n                if (!this.tree[flatRowTotalKey][flatColKey][i]) {\n                  const aggRule = this.getAggregatorRule(this.indicatorKeys[i]);\n                  this.tree[flatRowTotalKey][flatColKey][i] = new this.aggregators[\n                    aggRule?.aggregationType ?? AggregationType.SUM\n                  ](aggRule?.field ?? this.indicatorKeys[i], aggRule?.formatFun);\n                }\n                this.tree[flatRowTotalKey][flatColKey][i].push(that.tree[flatRowKey]?.[flatColKey]?.[i]);\n              }\n            }\n            colCompute(flatRowKey, flatColKey);\n          }\n        });\n      });\n      //增加出来的rowTotalKeys 再遍历一次 汇总小计的小计 如 东北小计（row）-办公用品小计（col）所指单元格的值\n      rowTotalKeys.forEach(flatRowKey => {\n        Object.keys(that.tree[flatRowKey]).forEach(flatColKey => {\n          colCompute(flatRowKey, flatColKey);\n        });\n      });\n    }\n  }\n  /**\n   * 将rowKeys和colKeys 转为树形结构\n   * @param arr\n   * @param subTotalFlags 标志小计的维度\n   * @returns\n   */\n  private ArrToTree(\n    arr: string[][],\n    subTotalFlags: boolean[],\n    isGrandTotal: boolean,\n    grandTotalLabel: string,\n    subTotalLabel: string\n  ) {\n    /**\n     *\n     * @param {string} s 父级id\n     * @param {number} n 需转换数字\n     */\n    // const getId = (pId: any, curId: any) => `${pId}$${curId}`;\n    const result: any[] = []; // 结果\n    const concatStr = this.stringJoinChar; // 连接符(随便写，保证key唯一性就OK)\n    const map = new Map(); // 存储根节点 主要提升性能\n    function addList(list: any) {\n      const path: any[] = []; // 路径\n      let node: any; // 当前节点\n      list.forEach((value: any, index: number) => {\n        path.push(value);\n        const flatKey = path.join(concatStr);\n        //id的值可以每次生成一个新的 这里用的path作为id 方便layout对象获取\n        let item: { id: string; children: any[] } = map.get(flatKey); // 当前节点\n        if (!item) {\n          item = {\n            // name: value,\n            id: flatKey, //getId(node?.id ?? '', (node?.children?.length ?? result.length) + 1),\n            children: []\n          };\n          if (subTotalFlags[index]) {\n            let curChild = item.children;\n            for (let i = index; i < list.length - 1; i++) {\n              const totalChild: { id: string; children: any[] } = {\n                id: `${flatKey}${concatStr}${subTotalLabel}`, // getId(item?.id, 1),\n                children: []\n              };\n              curChild.push(totalChild);\n              curChild = totalChild.children;\n            }\n          }\n          map.set(flatKey, item); // 存储路径对应的节点\n          if (node) {\n            //为了确保汇总小计放到最后 使用splice插入到倒数第二个位置。如果小计放前面 直接push就行\n            if (subTotalFlags[index - 1]) {\n              node.children.splice(node.children.length - 1, 0, item);\n            } else {\n              node.children.push(item);\n            }\n          } else {\n            result.push(item);\n          }\n        }\n        node = item; // 更新当前节点\n      });\n    }\n\n    arr.forEach(item => addList(item));\n    //最后将总计的节点加上\n    if (isGrandTotal) {\n      const node: { id: string; children: any[] } = {\n        id: grandTotalLabel, // getId(item?.id, 1),\n        children: []\n      };\n      let curChild = node.children;\n      for (let i = 1; i < subTotalFlags.length; i++) {\n        const totalChild: { id: string; children: any[] } = {\n          id: grandTotalLabel, // getId(item?.id, 1),\n          children: []\n        };\n        curChild.push(totalChild);\n        curChild = totalChild.children;\n      }\n      result.push(node);\n    }\n    return result;\n  }\n  //将树形结构转为二维数组 值为node.id\n  private TreeToArr(tree: any) {\n    const result: any[] = []; // 结果\n    function getPath(node: any, arr: any) {\n      arr.push(node.id);\n      if (node.children.length > 0) {\n        // 存在多个节点就递归\n        node.children?.forEach((childItem: any) => getPath(childItem, [...arr]));\n      } else {\n        result.push(arr);\n      }\n    }\n    tree.forEach((treeNode: any) => getPath(treeNode, []));\n    return result;\n  }\n  private TreeToArr2(tree: any) {\n    const result: any[] = []; // 结果\n    function getPath(node: any, arr: any) {\n      arr.push(arr.length > 0 ? [arr[arr.length - 1], node.value].join(String.fromCharCode(0)) : node.value);\n      if (node.children?.length > 0) {\n        // 存在多个节点就递归\n        node.children?.forEach((childItem: any) => getPath(childItem, [...arr]));\n      } else {\n        result.push(arr);\n      }\n    }\n    tree.forEach((treeNode: any) => getPath(treeNode, []));\n    return result;\n  }\n}\n"]}