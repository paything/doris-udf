{"version":3,"sources":["../src/dataset/flatDataToObject.ts"],"names":[],"mappings":"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","file":"flatDataToObject.js","sourcesContent":["import { isValid } from '@visactor/vutils';\nimport { Env } from '../tools/env';\n\n// if (Env.mode === 'node') {\n//   // eslint-disable-next-line no-global-assign\n//   window = {\n//     performance: {\n//       now: () => -1,\n//     },\n//   } as any;\n// }\n/**\n * 针对聚合好的flat数据转为便于查询的行列树对象，每一个显示的指标值都能从一条数据记录中获得\n */\nexport class FlatDataToObjects {\n  /**\n   * 用户配置\n   */\n  dataConfig: {\n    rows: string[]; //行维度字段数组；\n    columns: string[]; //列维度字段数组；\n    indicators: string[]; //具体展示指标；\n    indicatorsAsCol: boolean;\n    indicatorDimensionKey: string | number;\n  };\n  /**\n   * 明细数据\n   */\n  records: any[];\n  /**\n   * 树形节点，最后的子节点对应到body部分的每个单元格 树结构： 行-列-单元格\n   */\n  tree: Record<string, Record<string, Record<string, any>>> = {};\n  beforeChangedTree: Record<string, Record<string, { record: any; value: string }>> = {};\n  private colFlatKeys = {};\n  private rowFlatKeys = {};\n\n  // //列表头的每列对应的表头键值\n  // colKeys: string[][] = [];\n  // //行表头的每行对应的表头键值\n  // rowKeys: string[][] = [];\n  // /**\n  //  * 对应dataset中的rowKeys，行表头的每行表头键值，包含小计总计\n  //  */\n  // rowKeysPath: string[][];\n  // /**\n  //  * 对应dataset中的colKeys，列表头的每列表头键值，包含小计总计\n  //  */\n  // colKeysPath: string[][];\n\n  stringJoinChar = String.fromCharCode(0);\n  //缓存rows对应每个值是否为汇总字段\n  private rowsIsTotal: boolean[] = [];\n  private colsIsTotal: boolean[] = [];\n  private colGrandTotalLabel: string;\n  private colSubTotalLabel: string;\n  private rowGrandTotalLabel: string;\n  private rowSubTotalLabel: string;\n  constructor(\n    dataConfig: {\n      rows: string[]; //行维度字段数组；\n      columns: string[]; //列维度字段数组；\n      indicators: string[]; //具体展示指标；\n      indicatorsAsCol: boolean;\n      indicatorDimensionKey: string | number;\n    },\n    records?: any[]\n  ) {\n    this.dataConfig = dataConfig;\n    // this.allTotal = new SumAggregator(this.dataConfig.indicators[0]);\n\n    if (records) {\n      //处理数据\n      this.records = records;\n      const t0 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      this.setRecords(records);\n      const t1 = typeof window !== 'undefined' ? window.performance.now() : 0;\n      console.log('processRecords:', t1 - t0);\n    }\n\n    // delete this.rowFlatKeys;\n    // delete this.colFlatKeys;\n  }\n  changeDataConfig(dataConfig: {\n    rows: string[]; //行维度字段数组；\n    columns: string[]; //列维度字段数组；\n    indicators: string[]; //具体展示指标；\n    indicatorsAsCol: boolean;\n    indicatorDimensionKey: string | number;\n  }) {\n    this.dataConfig = dataConfig;\n  }\n  setRecords(records: any[]) {\n    this.processRecords();\n  }\n  /**\n   * 处理数据,遍历所有条目，过滤和派生字段的处理有待优化TODO\n   */\n  processRecords() {\n    for (let i = 0, len = this.records.length; i < len; i++) {\n      const record = this.records[i];\n      this.processRecord(record);\n    }\n  }\n\n  /**\n   * 处理单条数据\n   * @param record\n   * @returns\n   */\n  processRecord(record: any) {\n    const colKey: any[] = [];\n    const rowKey: any[] = [];\n\n    for (let l = 0, len1 = this.dataConfig.rows.length; l < len1; l++) {\n      const rowAttr = this.dataConfig.rows[l];\n      if (\n        // record[rowAttr] !== null &&\n        record[rowAttr] !== undefined &&\n        rowAttr !== this.dataConfig.indicatorDimensionKey\n      ) {\n        rowKey.push(record[rowAttr]);\n      }\n    }\n    for (let n = 0, len2 = this.dataConfig.columns.length; n < len2; n++) {\n      const colAttr = this.dataConfig.columns[n];\n      if (\n        // record[colAttr] !== null &&\n        record[colAttr] !== undefined &&\n        colAttr !== this.dataConfig.indicatorDimensionKey\n      ) {\n        colKey.push(record[colAttr]);\n      }\n    }\n\n    this.dataConfig.indicators?.forEach((indicatorKey: string | number) => {\n      const recordValue: string | number = record[indicatorKey];\n      // const indicatorName = this.dataConfig.indicators[indicatorKey];\n      if (recordValue !== undefined) {\n        if (this.dataConfig.indicatorsAsCol) {\n          colKey.push(indicatorKey);\n        } else {\n          rowKey.push(indicatorKey);\n        }\n      }\n\n      // record[indicatorKey] && (recordValue = record[indicatorKey]);\n\n      // this.allTotal.push(record);\n\n      const flatRowKey = rowKey.join(this.stringJoinChar);\n      const flatColKey = colKey.join(this.stringJoinChar);\n\n      if (rowKey.length !== 0) {\n        if (!this.rowFlatKeys[flatRowKey]) {\n          this.rowFlatKeys[flatRowKey] = 1;\n        }\n      }\n      if (colKey.length !== 0) {\n        if (!this.colFlatKeys[flatColKey]) {\n          this.colFlatKeys[flatColKey] = 1;\n        }\n      }\n\n      if (colKey.length !== 0 || rowKey.length !== 0) {\n        if (!this.tree[flatRowKey]) {\n          this.tree[flatRowKey] = {};\n        }\n        if (recordValue !== undefined) {\n          this.tree[flatRowKey][flatColKey] = { value: recordValue, record };\n          if (this.dataConfig.indicatorsAsCol) {\n            colKey.pop();\n          } else {\n            rowKey.pop();\n          }\n        }\n      }\n    });\n  }\n\n  getTreeNode(\n    rowKey: string[] | string = [],\n    colKey: string[] | string = [],\n    indicator: string,\n    ifChangedValue: boolean = true\n  ): Record<string, any> {\n    let flatRowKey;\n    let flatColKey;\n    if (typeof rowKey === 'string') {\n      flatRowKey = rowKey;\n    } else {\n      //考虑 指标key有可能在数组中间位置或者前面的可能 将其删除再添加到尾部\n      let isHasIndicator = false;\n      rowKey.map((key, i) => {\n        if (key === indicator) {\n          rowKey.splice(i, 1);\n          isHasIndicator = true;\n        }\n      });\n      isHasIndicator && rowKey.push(indicator);\n      flatRowKey = rowKey.join(this.stringJoinChar);\n    }\n\n    if (typeof colKey === 'string') {\n      flatColKey = colKey;\n    } else {\n      //考虑 指标key有可能在数组中间位置或者前面的可能 将其删除再添加到尾部\n      let isHasIndicator = false;\n      colKey.map((key, i) => {\n        if (key === indicator) {\n          colKey.splice(i, 1);\n          isHasIndicator = true;\n        }\n      });\n      isHasIndicator && colKey.push(indicator);\n      flatColKey = colKey.join(this.stringJoinChar);\n    }\n\n    if (ifChangedValue) {\n      return this.tree?.[flatRowKey]?.[flatColKey] ?? undefined;\n    }\n    if (isValid(this.beforeChangedTree[flatRowKey]?.[flatColKey])) {\n      return {\n        value: this.beforeChangedTree[flatRowKey][flatColKey].value,\n        record: this.beforeChangedTree[flatRowKey][flatColKey].record\n      };\n    }\n    return undefined;\n  }\n\n  changeTreeNodeValue(rowKey: string[] = [], colKey: string[] = [], indicator: string, newValue: any) {\n    let flatRowKey;\n    let flatColKey;\n    if (typeof rowKey === 'string') {\n      flatRowKey = rowKey;\n    } else {\n      //考虑 指标key有可能在数组中间位置或者前面的可能 将其删除再添加到尾部\n      let isHasIndicator = false;\n      rowKey.map((key, i) => {\n        if (key === indicator) {\n          rowKey.splice(i, 1);\n          isHasIndicator = true;\n        }\n      });\n      isHasIndicator && rowKey.push(indicator);\n      flatRowKey = rowKey.join(this.stringJoinChar);\n    }\n\n    if (typeof colKey === 'string') {\n      flatColKey = colKey;\n    } else {\n      //考虑 指标key有可能在数组中间位置或者前面的可能 将其删除再添加到尾部\n      let isHasIndicator = false;\n      colKey.map((key, i) => {\n        if (key === indicator) {\n          colKey.splice(i, 1);\n          isHasIndicator = true;\n        }\n      });\n      isHasIndicator && colKey.push(indicator);\n      flatColKey = colKey.join(this.stringJoinChar);\n    }\n    const oldValue = this.tree[flatRowKey]?.[flatColKey]?.value;\n    const oldRecord = Object.assign({}, this.tree[flatRowKey]?.[flatColKey]?.record);\n    if (this.tree[flatRowKey]?.[flatColKey]?.record) {\n      this.tree[flatRowKey][flatColKey].record[indicator] = newValue;\n      this.tree[flatRowKey][flatColKey].value = newValue;\n    } else {\n      if (!this.tree[flatRowKey]) {\n        this.tree[flatRowKey] = {};\n      }\n      // 没有对应数据需要添加进去\n      this.tree[flatRowKey][flatColKey] = {\n        record: this._buildRecord(rowKey, colKey, indicator, newValue),\n        value: newValue\n      };\n    }\n    if (!this.beforeChangedTree[flatRowKey]?.[flatColKey]) {\n      this.beforeChangedTree[flatRowKey] = {};\n      this.beforeChangedTree[flatRowKey][flatColKey] = { record: undefined, value: undefined };\n      this.beforeChangedTree[flatRowKey][flatColKey].record = oldRecord;\n      this.beforeChangedTree[flatRowKey][flatColKey].value = oldValue;\n    }\n  }\n\n  _buildRecord(rowKey: string[] = [], colKey: string[] = [], indicator: string, value: any) {\n    const record = {};\n    const rowDimensions = this.dataConfig.rows;\n    const colDimensions = this.dataConfig.columns;\n    rowDimensions.forEach((dimension, index) => {\n      if (dimension !== this.dataConfig.indicatorDimensionKey) {\n        record[dimension] = rowKey[index];\n      }\n    });\n    colDimensions.forEach((dimension, index) => {\n      if (dimension !== this.dataConfig.indicatorDimensionKey) {\n        record[dimension] = colKey[index];\n      }\n    });\n    record[indicator] = value;\n    this.records.push(record);\n    return record;\n  }\n  addRecords(records: any[]) {\n    for (let i = 0, len = records.length; i < len; i++) {\n      const record = records[i];\n      this.processRecord(record);\n    }\n    this.records.push(records);\n  }\n  changeRecordFieldValue(fieldName: string, oldValue: string | number, value: string | number) {\n    let isIndicatorName = false;\n\n    for (let i = 0; i < this.dataConfig.indicators.length; i++) {\n      if (this.dataConfig.indicators[i] === fieldName) {\n        isIndicatorName = true;\n      }\n    }\n    if (!isIndicatorName) {\n      for (let i = 0, len = this.records.length; i < len; i++) {\n        const record = this.records[i];\n        if (record[fieldName] === oldValue) {\n          record[fieldName] = value;\n        }\n      }\n      this.rowFlatKeys = {};\n      this.colFlatKeys = {};\n      this.tree = {};\n      this.processRecords();\n    }\n  }\n}\n"]}