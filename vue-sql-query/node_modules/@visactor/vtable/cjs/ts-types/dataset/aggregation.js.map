{"version":3,"sources":["../src/ts-types/dataset/aggregation.ts"],"names":[],"mappings":"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","file":"aggregation.js","sourcesContent":["import { isValid } from '@visactor/vutils';\nimport type { SortOrder } from '..';\nimport { AggregationType, SortType } from '..';\nimport type { BaseTableAPI } from '../base-table';\n\nexport const registeredAggregators: {\n  [key: string]: {\n    new (args: {\n      key?: string;\n      field: string | string[];\n      aggregationFun?: any;\n      formatFun?: any;\n      isRecord?: boolean;\n      needSplitPositiveAndNegative?: boolean;\n      calculateFun?: any;\n      dependAggregators?: any;\n      dependIndicatorKeys?: string[];\n    }): Aggregator;\n  };\n} = {};\n\nexport interface IAggregator {\n  records: any[];\n  value: () => any;\n  push: (record: any) => void;\n  deleteRecord: (record: any) => void;\n  updateRecord: (oldRecord: any, newRecord: any) => void;\n  recalculate: () => any;\n  formatValue?: (col?: number, row?: number, table?: BaseTableAPI) => any;\n  formatFun?: () => any;\n  clearCacheValue: () => any;\n  reset: () => void;\n}\nexport abstract class Aggregator implements IAggregator {\n  isAggregator?: boolean = true;\n  isRecord?: boolean = true; //是否需要维护records 将数据源都记录下来\n  records: any[] = [];\n  type?: string;\n  key: string;\n  field?: string | string[];\n  formatFun?: any;\n  _formatedValue?: any;\n\n  constructor(config: { key: string; field: string | string[]; formatFun?: any; isRecord?: boolean }) {\n    this.key = config.key;\n    this.field = config.field;\n    this.formatFun = config.formatFun;\n    this.isRecord = config.isRecord ?? this.isRecord;\n  }\n  abstract push(record: any): void;\n  abstract deleteRecord(record: any): void;\n  abstract updateRecord(oldRecord: any, newRecord: any): void;\n  abstract value(): any;\n  abstract recalculate(): any;\n  clearCacheValue() {\n    this._formatedValue = undefined;\n  }\n  formatValue(col?: number, row?: number, table?: BaseTableAPI) {\n    if (!this._formatedValue) {\n      if (this.formatFun) {\n        this._formatedValue = this.formatFun(this.value(), col, row, table);\n      } else {\n        this._formatedValue = this.value();\n      }\n    }\n    return this._formatedValue;\n  }\n  reset() {\n    this.records = [];\n    this.clearCacheValue();\n  }\n}\nexport class RecordAggregator extends Aggregator {\n  type: string = AggregationType.RECORD;\n  isRecord?: boolean = true;\n  push(record: any): void {\n    if (record && this.isRecord && this.records) {\n      if (record.isAggregator) {\n        this.records.push(...record.records);\n      } else {\n        this.records.push(record);\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      this.clearCacheValue();\n    }\n  }\n  value() {\n    return this.records;\n  }\n  reset() {\n    this.records = [];\n  }\n  recalculate() {\n    // do nothing\n  }\n}\n\nexport class NoneAggregator extends Aggregator {\n  type: string = AggregationType.NONE; //仅获取其中一条数据(最新push的一条) 不做聚合 其fieldValue可以是number或者string类型\n  isRecord?: boolean = true;\n  declare field?: string;\n  fieldValue?: any;\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord) {\n        this.records = [record];\n      }\n      if (this.field) {\n        this.fieldValue = record[this.field];\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      if (this.field && this.records.length) {\n        this.fieldValue = this.records[this.records.length - 1][this.field];\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      if (this.field && this.records.length) {\n        this.fieldValue = this.records[this.records.length - 1][this.field];\n      }\n      this.clearCacheValue();\n    }\n  }\n  value() {\n    return this.fieldValue;\n  }\n  reset() {\n    this.records = [];\n    this.fieldValue = undefined;\n  }\n  recalculate() {\n    // do nothing\n  }\n}\nexport class CustomAggregator extends Aggregator {\n  type: string = AggregationType.CUSTOM;\n  isRecord?: boolean = true;\n  declare field?: string;\n  aggregationFun?: Function;\n  values: (string | number)[] = [];\n  fieldValue?: any;\n  constructor(config: { key: string; field: string; formatFun?: any; isRecord?: boolean; aggregationFun?: Function }) {\n    super(config);\n    this.aggregationFun = config.aggregationFun;\n  }\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        if (record.isAggregator) {\n          this.records.push(...record.records);\n        } else {\n          this.records.push(record);\n        }\n      }\n      if (this.field) {\n        this.values.push(record[this.field]);\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      if (this.field && this.records.length) {\n        this.values = this.records.map(item => item[this.field]);\n      }\n      this.clearCacheValue();\n    }\n  }\n  deleteRecord(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      if (this.field && this.records.length) {\n        this.values = this.records.map(item => item[this.field]);\n      }\n    }\n    this.clearCacheValue();\n  }\n  value() {\n    if (!this.fieldValue) {\n      this.fieldValue = this.aggregationFun?.(this.values, this.records, this.field);\n    }\n    return this.fieldValue;\n  }\n  reset() {\n    this.records = [];\n    this.fieldValue = undefined;\n  }\n  recalculate() {\n    this.fieldValue = undefined;\n    this._formatedValue = undefined;\n    // do nothing\n  }\n}\n/** 透视表计算字段逻辑使用 */\nexport class RecalculateAggregator extends Aggregator {\n  type: string = AggregationType.RECALCULATE;\n  isRecord?: boolean = true;\n  declare field?: string;\n  calculateFun: Function;\n  fieldValue?: any;\n  dependAggregators: Aggregator[];\n  dependIndicatorKeys: string[];\n  constructor(config: {\n    key: string;\n    field: string;\n    formatFun: any;\n    isRecord: boolean;\n    calculateFun: Function;\n    dependAggregators: Aggregator[];\n    dependIndicatorKeys: string[];\n  }) {\n    super(config);\n    this.calculateFun = config.calculateFun;\n    this.dependAggregators = config.dependAggregators;\n    this.dependIndicatorKeys = config.dependIndicatorKeys;\n  }\n  push(record: any): void {\n    if (record && this.isRecord && this.records) {\n      if (record.isAggregator) {\n        this.records.push(...record.records);\n      } else {\n        this.records.push(record);\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      this.clearCacheValue();\n    }\n  }\n  value() {\n    if (!this.fieldValue) {\n      const aggregatorValue = _getDependAggregatorValues(this.dependAggregators, this.dependIndicatorKeys);\n      this.fieldValue = this.calculateFun?.(aggregatorValue, this.records, this.field);\n    }\n    return this.fieldValue;\n  }\n  reset() {\n    this.records = [];\n    this.fieldValue = undefined;\n  }\n  recalculate() {\n    // do nothing\n  }\n}\nexport class SumAggregator extends Aggregator {\n  type: string = AggregationType.SUM;\n  sum = 0;\n  positiveSum = 0;\n  nagetiveSum = 0;\n  declare field?: string;\n  needSplitPositiveAndNegativeForSum?: boolean = false;\n  constructor(config: {\n    key: string;\n    field: string;\n    formatFun?: any;\n    isRecord?: boolean;\n    needSplitPositiveAndNegative?: boolean;\n  }) {\n    super(config);\n    this.needSplitPositiveAndNegativeForSum = config.needSplitPositiveAndNegative ?? false;\n  }\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        if (record.isAggregator) {\n          this.records.push(...record.records);\n        } else {\n          this.records.push(record);\n        }\n      }\n      if (record.isAggregator) {\n        const value = record.value();\n        this.sum += value ?? 0;\n        if (this.needSplitPositiveAndNegativeForSum) {\n          if (value > 0) {\n            this.positiveSum += value;\n          } else if (value < 0) {\n            this.nagetiveSum += value;\n          }\n        }\n      } else if (this.field && !isNaN(parseFloat(record[this.field]))) {\n        const value = parseFloat(record[this.field]);\n        this.sum += value;\n        if (this.needSplitPositiveAndNegativeForSum) {\n          if (value > 0) {\n            this.positiveSum += value;\n          } else if (value < 0) {\n            this.nagetiveSum += value;\n          }\n        }\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      if (record.isAggregator) {\n        const value = record.value();\n        this.sum -= value ?? 0;\n        if (this.needSplitPositiveAndNegativeForSum) {\n          if (value > 0) {\n            this.positiveSum -= value;\n          } else if (value < 0) {\n            this.nagetiveSum -= value;\n          }\n        }\n      } else if (this.field && !isNaN(parseFloat(record[this.field]))) {\n        const value = parseFloat(record[this.field]);\n        this.sum -= value;\n        if (this.needSplitPositiveAndNegativeForSum) {\n          if (value > 0) {\n            this.positiveSum -= value;\n          } else if (value < 0) {\n            this.nagetiveSum -= value;\n          }\n        }\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      if (oldRecord.isAggregator) {\n        const oldValue = oldRecord.value();\n        const newValue = newRecord.value();\n        this.sum += newValue - oldValue;\n        if (this.needSplitPositiveAndNegativeForSum) {\n          if (oldValue > 0) {\n            this.positiveSum -= oldValue;\n          } else if (oldValue < 0) {\n            this.nagetiveSum -= oldValue;\n          }\n          if (newValue > 0) {\n            this.positiveSum += newValue;\n          } else if (newValue < 0) {\n            this.nagetiveSum += newValue;\n          }\n        }\n      } else if (this.field && !isNaN(parseFloat(oldRecord[this.field]))) {\n        const oldValue = parseFloat(oldRecord[this.field]);\n        const newValue = parseFloat(newRecord[this.field]);\n        this.sum += newValue - oldValue;\n        if (this.needSplitPositiveAndNegativeForSum) {\n          if (oldValue > 0) {\n            this.positiveSum -= oldValue;\n          } else if (oldValue < 0) {\n            this.nagetiveSum -= oldValue;\n          }\n          if (newValue > 0) {\n            this.positiveSum += newValue;\n          } else if (newValue < 0) {\n            this.nagetiveSum += newValue;\n          }\n        }\n      }\n      this.clearCacheValue();\n    }\n  }\n  value() {\n    return this.records?.length >= 1 ? this.sum : undefined;\n  }\n  positiveValue() {\n    return this.positiveSum;\n  }\n  negativeValue() {\n    return this.nagetiveSum;\n  }\n  reset() {\n    super.reset();\n    this.records = [];\n    this.sum = 0;\n  }\n  recalculate() {\n    this.sum = 0;\n    this._formatedValue = undefined;\n    if (this.records) {\n      for (let i = 0; i < this.records.length; i++) {\n        const record = this.records[i];\n        if (record.isAggregator) {\n          const value = record.value();\n          this.sum += value ?? 0;\n          if (this.needSplitPositiveAndNegativeForSum) {\n            if (value > 0) {\n              this.positiveSum += value;\n            } else if (value < 0) {\n              this.nagetiveSum += value;\n            }\n          }\n        } else if (this.field && !isNaN(parseFloat(record[this.field]))) {\n          const value = parseFloat(record[this.field]);\n          this.sum += value;\n          if (this.needSplitPositiveAndNegativeForSum) {\n            if (value > 0) {\n              this.positiveSum += value;\n            } else if (value < 0) {\n              this.nagetiveSum += value;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport class CountAggregator extends Aggregator {\n  type: string = AggregationType.COUNT;\n  count = 0;\n  declare field?: string;\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        if (record.isAggregator) {\n          this.records.push(...record.records);\n        } else {\n          this.records.push(record);\n        }\n      }\n      if (record.isAggregator) {\n        this.count += record.value();\n      } else {\n        this.count++;\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      if (record.isAggregator) {\n        this.count -= record.value();\n      } else {\n        this.count--;\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      if (oldRecord.isAggregator) {\n        this.count += newRecord.value() - oldRecord.value();\n      } else {\n        //this.count++;\n      }\n    }\n  }\n  value() {\n    return this.count;\n  }\n  reset() {\n    this.records = [];\n    this.count = 0;\n  }\n  recalculate() {\n    this.count = 0;\n    this._formatedValue = undefined;\n    if (this.records) {\n      for (let i = 0; i < this.records.length; i++) {\n        const record = this.records[i];\n        if (record.isAggregator) {\n          this.count += record.value();\n        } else {\n          this.count++;\n        }\n      }\n    }\n  }\n}\nexport class AvgAggregator extends Aggregator {\n  type: string = AggregationType.AVG;\n  sum = 0;\n  count = 0;\n  declare field?: string;\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        if (record.isAggregator) {\n          this.records.push(...record.records);\n        } else {\n          this.records.push(record);\n        }\n      }\n      if (record.isAggregator && record.type === AggregationType.AVG) {\n        this.sum += record.sum;\n        this.count += record.count;\n      } else if (this.field && !isNaN(parseFloat(record[this.field]))) {\n        this.sum += parseFloat(record[this.field]);\n        this.count++;\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      if (record.isAggregator && record.type === AggregationType.AVG) {\n        this.sum -= record.sum;\n        this.count -= record.count;\n      } else if (this.field && !isNaN(parseFloat(record[this.field]))) {\n        this.sum -= parseFloat(record[this.field]);\n        this.count--;\n      }\n    }\n    this.clearCacheValue();\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      if (oldRecord.isAggregator && oldRecord.type === AggregationType.AVG) {\n        this.sum += newRecord.sum - oldRecord.sum;\n        this.count += newRecord.count - oldRecord.count;\n      } else if (this.field && !isNaN(parseFloat(oldRecord[this.field]))) {\n        this.sum += parseFloat(newRecord[this.field]) - parseFloat(oldRecord[this.field]);\n        // this.count++;\n      }\n      this.clearCacheValue();\n    }\n  }\n  value() {\n    return this.records?.length >= 1 ? this.sum / this.count : undefined;\n  }\n  reset() {\n    this.records = [];\n    this.sum = 0;\n    this.count = 0;\n  }\n  recalculate() {\n    this.sum = 0;\n    this.count = 0;\n    this._formatedValue = undefined;\n    if (this.records) {\n      for (let i = 0; i < this.records.length; i++) {\n        const record = this.records[i];\n        if (record.isAggregator && record.type === AggregationType.AVG) {\n          this.sum += record.sum;\n          this.count += record.count;\n        } else if (this.field && !isNaN(parseFloat(record[this.field]))) {\n          this.sum += parseFloat(record[this.field]);\n          this.count++;\n        }\n      }\n    }\n  }\n}\nexport class MaxAggregator extends Aggregator {\n  type: string = AggregationType.MAX;\n  max: number = Number.MIN_SAFE_INTEGER;\n  declare field?: string;\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        if (record.isAggregator) {\n          this.records.push(...record.records);\n        } else {\n          this.records.push(record);\n        }\n      }\n      if (record.isAggregator) {\n        this.max = record.max > this.max ? record.max : this.max;\n      } else if (typeof record === 'number') {\n        this.max = record > this.max ? record : this.max;\n      } else if (this.field && typeof record[this.field] === 'number') {\n        this.max = record[this.field] > this.max ? record[this.field] : this.max;\n      } else if (this.field && !isNaN(record[this.field])) {\n        this.max = parseFloat(record[this.field]) > this.max ? parseFloat(record[this.field]) : this.max;\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      this.recalculate();\n    }\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      this.recalculate();\n    }\n  }\n  value() {\n    return this.records?.length >= 1 ? this.max : undefined;\n  }\n  reset() {\n    this.records = [];\n    this.max = Number.MIN_SAFE_INTEGER;\n  }\n  recalculate() {\n    this.max = Number.MIN_SAFE_INTEGER;\n    this._formatedValue = undefined;\n    if (this.records) {\n      for (let i = 0; i < this.records.length; i++) {\n        const record = this.records[i];\n        if (record.isAggregator) {\n          this.max = record.max > this.max ? record.max : this.max;\n        } else if (typeof record === 'number') {\n          this.max = record > this.max ? record : this.max;\n        } else if (this.field && typeof record[this.field] === 'number') {\n          this.max = record[this.field] > this.max ? record[this.field] : this.max;\n        } else if (this.field && !isNaN(record[this.field])) {\n          this.max = parseFloat(record[this.field]) > this.max ? parseFloat(record[this.field]) : this.max;\n        }\n      }\n    }\n  }\n}\nexport class MinAggregator extends Aggregator {\n  type: string = AggregationType.MIN;\n  min: number = Number.MAX_SAFE_INTEGER;\n  declare field?: string;\n  push(record: any): void {\n    if (record) {\n      if (this.isRecord && this.records) {\n        if (record.isAggregator) {\n          this.records.push(...record.records);\n        } else {\n          this.records.push(record);\n        }\n      }\n      if (record.isAggregator) {\n        this.min = record.min < this.min ? record.min : this.min;\n      } else if (typeof record === 'number') {\n        this.min = record < this.min ? record : this.min;\n      } else if (this.field && typeof record[this.field] === 'number') {\n        this.min = record[this.field] < this.min ? record[this.field] : this.min;\n      } else if (this.field && !isNaN(record[this.field])) {\n        this.min = parseFloat(record[this.field]) < this.min ? parseFloat(record[this.field]) : this.min;\n      }\n    }\n    this.clearCacheValue();\n  }\n  deleteRecord(record: any) {\n    if (record) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.filter(item => item !== record);\n      }\n      this.recalculate();\n    }\n  }\n  updateRecord(oldRecord: any, newRecord: any): void {\n    if (oldRecord && newRecord) {\n      if (this.isRecord && this.records) {\n        this.records = this.records.map(item => {\n          if (item === oldRecord) {\n            return newRecord;\n          }\n          return item;\n        });\n      }\n      this.recalculate();\n    }\n  }\n  value() {\n    return this.records?.length >= 1 ? this.min : undefined;\n  }\n  reset() {\n    this.records = [];\n    this.min = Number.MAX_SAFE_INTEGER;\n  }\n  recalculate() {\n    this.min = Number.MAX_SAFE_INTEGER;\n    this._formatedValue = undefined;\n    if (this.records) {\n      for (let i = 0; i < this.records.length; i++) {\n        const record = this.records[i];\n        if (record.isAggregator) {\n          this.min = record.min < this.min ? record.min : this.min;\n        } else if (typeof record === 'number') {\n          this.min = record < this.min ? record : this.min;\n        } else if (this.field && typeof record[this.field] === 'number') {\n          this.min = record[this.field] < this.min ? record[this.field] : this.min;\n        } else if (this.field && !isNaN(record[this.field])) {\n          this.min = parseFloat(record[this.field]) < this.min ? parseFloat(record[this.field]) : this.min;\n        }\n      }\n    }\n  }\n}\nexport function indicatorSort(a: any, b: any) {\n  if (a && b) {\n    // 数据健全兼容，用户数据不全时，能够展示.\n    return a.toString().localeCompare(b.toString(), 'zh');\n  }\n  if (a) {\n    return 1;\n  }\n  return -1;\n}\nexport function typeSort(a: any, b: any, sortType: SortType) {\n  if (sortType === SortType.NORMAL || sortType === SortType.normal) {\n    return 0;\n  }\n  const factor = sortType === SortType.DESC || sortType === SortType.desc ? -1 : 1;\n  if (a && b) {\n    // 数据健全兼容，用户数据不全时，能够展示.\n    return a.toString().localeCompare(b.toString(), 'zh') * factor;\n  }\n  if (a) {\n    return 1 * factor;\n  }\n  return -1 * factor;\n}\nexport function naturalSort(as: any, bs: any, sortType: SortType) {\n  if (sortType === SortType.NORMAL || sortType === SortType.normal) {\n    return 0;\n  }\n\n  const rx = /(\\d+)|(\\D+)/g;\n  const rd = /\\d/;\n  const rz = /^0/;\n  let a;\n  let a1;\n  let b;\n  let b1;\n  let nas = 0;\n  let nbs = 0;\n  const factor = sortType === SortType.DESC || sortType === SortType.desc ? -1 : 1;\n  if (bs !== null && as === null) {\n    return -1 * factor;\n  }\n  if (as !== null && bs === null) {\n    return 1 * factor;\n  }\n  if (typeof as === 'number' && isNaN(as)) {\n    return -1 * factor;\n  }\n  if (typeof bs === 'number' && isNaN(bs)) {\n    return 1 * factor;\n  }\n  nas = +as;\n  nbs = +bs;\n  if (nas < nbs) {\n    return -1 * factor;\n  }\n  if (nas > nbs) {\n    return 1 * factor;\n  }\n  if (typeof as === 'number' && typeof bs !== 'number') {\n    return -1 * factor;\n  }\n  if (typeof bs === 'number' && typeof as !== 'number') {\n    return 1 * factor;\n  }\n  if (typeof as === 'number' && typeof bs === 'number') {\n    return 0;\n  }\n  if (isNaN(nbs) && !isNaN(nas)) {\n    return -1 * factor;\n  }\n  if (isNaN(nas) && !isNaN(nbs)) {\n    return 1 * factor;\n  }\n  a = String(as);\n  b = String(bs);\n  if (a === b) {\n    return 0;\n  }\n  if (!(rd.test(a) && rd.test(b))) {\n    return (a > b ? 1 : -1) * factor;\n  }\n  a = a.match(rx);\n  b = b.match(rx);\n  while (a.length && b.length) {\n    a1 = a.shift();\n    b1 = b.shift();\n    if (a1 !== b1) {\n      if (rd.test(a1) && rd.test(b1)) {\n        return (<any>a1.replace(rz, '.0') - <any>b1.replace(rz, '.0')) * factor;\n      }\n      return (a1 > b1 ? 1 : -1) * factor;\n    }\n  }\n  return (a.length - b.length) * factor;\n}\nexport function sortBy(order: string[]) {\n  let x;\n  let i;\n  const mapping: any = {};\n  const lowercase_mapping: any = {};\n  // for (i in order) {\n  for (let i = 0; i < order.length; i++) {\n    x = order[i];\n    mapping[x] = i;\n    if (typeof x === 'string') {\n      lowercase_mapping[x.toLowerCase()] = i;\n    }\n  }\n  return function (a: any, b: any, sortType: SortType) {\n    if (sortType === SortType.NORMAL || sortType === SortType.normal) {\n      return 0;\n    }\n    const factor = sortType === SortType.DESC || sortType === SortType.desc ? -1 : 1;\n    let comparison;\n    if (mapping[a] !== null && mapping[a] !== undefined && mapping[b] !== null && mapping[b] !== undefined) {\n      comparison = mapping[a] - mapping[b];\n    } else if (mapping[a] !== null && mapping[a] !== undefined) {\n      comparison = -1;\n    } else if (mapping[b] !== null && mapping[b] !== undefined) {\n      comparison = 1;\n    } else if (\n      lowercase_mapping[a] !== null &&\n      mapping[a] !== undefined &&\n      lowercase_mapping[b] !== null &&\n      mapping[b] !== undefined\n    ) {\n      comparison = lowercase_mapping[a] - lowercase_mapping[b];\n    } else if (\n      lowercase_mapping[a] === null ||\n      mapping[a] === undefined ||\n      lowercase_mapping[b] === null ||\n      mapping[b] === undefined\n    ) {\n      comparison = 0;\n    } else if (lowercase_mapping[a] !== null && mapping[a] !== undefined) {\n      comparison = -1;\n    } else if (lowercase_mapping[b] !== null && mapping[b] !== undefined) {\n      comparison = 1;\n    }\n    if (isValid(comparison)) {\n      return comparison * factor;\n    }\n\n    return naturalSort(a, b, sortType);\n  };\n}\n\nfunction _getDependAggregatorValues(aggregators: Aggregator[], dependIndicatorKeys: string[]) {\n  const dependAggregatorValues: any = {};\n  for (let m = 0; m < dependIndicatorKeys?.length; m++) {\n    const aggrator = aggregators.find(aggrator => aggrator?.key === dependIndicatorKeys[m]);\n    if (aggrator) {\n      dependAggregatorValues[aggrator.key] = aggrator?.value();\n    }\n  }\n  return dependAggregatorValues;\n}\n"]}