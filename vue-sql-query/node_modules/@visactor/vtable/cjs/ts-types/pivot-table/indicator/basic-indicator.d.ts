import type { ICustomRender } from '../../customElement';
import type { ICustomLayout } from '../../customLayout';
import type { FieldFormat } from '../../table-engine';
import type { ColumnIconOption } from '../../icon';
import type { MenuListItem } from '../../menu';
import type { BaseCellInfo, CellInfo, IDimensionInfo } from '../../common';
import type { IEditor } from '@visactor/vtable-editors';
import type { BaseTableAPI } from '../../base-table';
export interface IBasicHeaderIndicator {
    indicatorKey: string;
    title?: string;
    headerIcon?: (string | ColumnIconOption)[] | ((args: CellInfo) => (string | ColumnIconOption)[]);
    dropDownMenu?: MenuListItem[] | ((args: {
        row: number;
        col: number;
        table: BaseTableAPI;
    }) => MenuListItem[]);
    sort?: boolean;
    showSort?: boolean | ((args: {
        row: number;
        col: number;
        table: BaseTableAPI;
    }) => boolean);
    disableColumnResize?: boolean;
    hide?: boolean | ((args: {
        dimensionPaths: IDimensionInfo[];
        table: BaseTableAPI;
    }) => boolean);
    headerCustomRender?: ICustomRender;
    headerCustomLayout?: ICustomLayout;
    editor?: string | IEditor | ((args: BaseCellInfo & {
        table: BaseTableAPI;
    }) => string | IEditor);
    disableHeaderHover?: boolean;
    disableHeaderSelect?: boolean;
    headerEditor?: string | IEditor | ((args: BaseCellInfo & {
        table: BaseTableAPI;
    }) => string | IEditor);
}
export interface IBasicColumnIndicator {
    width?: string | number;
    minWidth?: number | string;
    maxWidth?: number | string;
    format?: FieldFormat;
    headerFormat?: FieldFormat;
    icon?: string | ColumnIconOption | (string | ColumnIconOption)[] | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);
    customRender?: ICustomRender;
    customLayout?: ICustomLayout;
    disableHover?: boolean;
    disableSelect?: boolean | ((col: number, row: number, table: BaseTableAPI) => boolean);
}
