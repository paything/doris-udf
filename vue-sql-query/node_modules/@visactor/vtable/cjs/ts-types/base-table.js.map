{"version":3,"sources":["../src/ts-types/base-table.ts"],"names":[],"mappings":"","file":"base-table.js","sourcesContent":["import type { IBoundsLike, ITextSize } from '@visactor/vutils';\nimport type {\n  RectProps,\n  MaybePromiseOrUndefined,\n  ICellHeaderPaths,\n  CellInfo,\n  CustomCellStyle,\n  CustomCellStyleArrangement,\n  IDimensionInfo\n} from './common';\nimport type {\n  TableEventListener,\n  TableEventHandlersEventArgumentMap,\n  TableEventHandlersReturnMap,\n  EventListenerId,\n  MousePointerCellEvent\n} from './events';\nimport type { MenuListItem, DropDownMenuEventInfo, DropDownMenuHighlightInfo } from './menu';\nimport type { CellStyle } from './style-define';\nimport type { ColumnIconOption } from './icon';\nimport type {\n  ColumnData,\n  ColumnDefine,\n  ColumnsDefine,\n  HeaderData,\n  IndicatorData,\n  SeriesNumberColumnData\n} from './list-table/layout-map/api';\nexport type { HeaderData } from './list-table/layout-map/api';\nimport type { TableTheme } from '../themes/theme-define';\nimport type { ICustomRender } from './customElement';\nimport type { LayoutObjectId } from './table-engine';\nimport type { Rect } from '../tools/Rect';\nimport type { Scenegraph } from '../scenegraph/scenegraph';\nimport type { StateManager } from '../state/state';\nimport type { EventManager } from '../event/event';\nimport type {\n  CellAddress,\n  CellRange,\n  CellLocation,\n  ColumnTypeOption,\n  DataSourceAPI,\n  FieldData,\n  FieldDef,\n  FieldFormat,\n  FullExtendStyle,\n  HeaderValues,\n  HeightModeDef,\n  HierarchyState,\n  IPivotTableDataConfig,\n  IPagination,\n  ITableThemeDefine,\n  SortState,\n  TableKeyboardOptions,\n  WidthModeDef,\n  IHeaderTreeDefine,\n  IDimension,\n  IIndicator,\n  StickCell,\n  CustomMergeCell,\n  CustomMerge,\n  IColumnDimension,\n  IRowDimension,\n  TableEventOptions,\n  IPivotChartDataConfig,\n  IListTableDataConfig,\n  IRowSeriesNumber,\n  ColumnSeriesNumber,\n  ColumnStyleOption,\n  WidthAdaptiveModeDef,\n  HeightAdaptiveModeDef,\n  ColumnInfo,\n  RowInfo,\n  CellAddressWithBound,\n  Placement,\n  CustomMergeCellFunc\n} from '.';\nimport type { TooltipOptions } from './tooltip';\nimport type { IWrapTextGraphicAttribute } from '../scenegraph/graphic/text';\nimport type { ICustomLayout } from './customLayout';\nimport type { CachedDataSource, DataSource } from '../data';\nimport type { MenuHandler } from '../components/menu/dom/MenuHandler';\nimport type { PivotHeaderLayoutMap } from '../layout/pivot-header-layout';\nimport type { SimpleHeaderLayoutMap } from '../layout';\nimport type { TooltipHandler } from '../components/tooltip/TooltipHandler';\nimport type { BodyHelper } from '../body-helper/body-helper';\nimport type { HeaderHelper } from '../header-helper/header-helper';\nimport type { EventHandler } from '../event/EventHandler';\nimport type { NumberMap } from '../tools/NumberMap';\nimport type { FocusInput } from '../core/FouseInput';\nimport type { ITableLegendOption } from './component/legend';\nimport type { DataSet } from '@visactor/vdataset';\nimport type { Title } from '../components/title/title';\nimport type { ITitle } from './component/title';\nimport type { DiscreteTableLegend } from '../components/legend/discrete-legend/discrete-legend';\nimport type { ContinueTableLegend } from '../components/legend/continue-legend/continue-legend';\nimport type { NumberRangeMap } from '../layout/row-height-map';\nimport type { RowSeriesNumberHelper } from '../core/row-series-number-helper';\nimport type { ReactCustomLayout } from '../components/react/react-custom-layout';\nimport type { ISortedMapItem } from '../data/DataSource';\nimport type { IAnimationAppear, ITableAnimationOption } from './animation/appear';\nimport type { IEmptyTip } from './component/empty-tip';\nimport type { EmptyTip } from '../components/empty-tip/empty-tip';\nimport type { EditManager } from '../edit/edit-manager';\nimport type { TableAnimationManager } from '../core/animation';\nimport type { CustomCellStylePlugin } from '../plugins/custom-cell-style';\nimport type { IVTablePlugin } from '../plugins/interface';\n\nexport interface IBaseTableProtected {\n  element: HTMLElement;\n  // scrollable: Scrollable;\n  handler: EventHandler;\n  focusControl: FocusInput;\n  canvas: HTMLCanvasElement;\n  context: CanvasRenderingContext2D;\n  rowCount: number;\n  colCount: number;\n  frozenColCount: number;\n  unfreezeAllOnExceedsMaxWidth: boolean;\n  allowFrozenColCount: number;\n\n  frozenRowCount: number;\n  rightFrozenColCount: number;\n  bottomFrozenRowCount: number;\n  defaultRowHeight: number | 'auto';\n  /**表头默认行高 可以按逐行设置 如果没有就取defaultRowHeight */\n  defaultHeaderRowHeight: (number | 'auto') | (number | 'auto')[];\n  defaultColWidth: number;\n  defaultHeaderColWidth: (number | 'auto') | (number | 'auto')[];\n  // font?: string;\n  // underlayBackgroundColor?: string;\n  keyboardOptions?: TableKeyboardOptions;\n  eventOptions?: TableEventOptions;\n  rowSeriesNumber?: IRowSeriesNumber;\n  columnSeriesNumber?: ColumnSeriesNumber[];\n  // disableRowHeaderColumnResize?: boolean;\n\n  columnResizeMode?: 'all' | 'none' | 'header' | 'body';\n\n  rowResizeMode?: 'all' | 'none' | 'header' | 'body';\n\n  columnResizeType?: 'column' | 'indicator' | 'all' | 'indicatorGroup';\n\n  rowResizeType?: 'row' | 'indicator' | 'all' | 'indicatorGroup';\n  /** 控制拖拽表头移动位置顺序开关 */\n  dragHeaderMode?: 'all' | 'none' | 'column' | 'row';\n  /** 拖拽表头移动位置 针对冻结部分的规则\n   * \"disabled\"（禁止调整冻结列位置）：不允许其他列的表头移入冻结列，也不允许冻结列移出，冻结列保持不变。\n   * \"adjustFrozenCount\"（根据交互结果调整冻结数量）：允许其他列的表头移入冻结列，及冻结列移出，并根据拖拽的动作调整冻结列的数量。当其他列的表头被拖拽进入冻结列位置时，冻结列数量增加；当其他列的表头被拖拽移出冻结列位置时，冻结列数量减少。\n   * \"fixedFrozenCount\"（可调整冻结列，并维持冻结数量不变）：允许自由拖拽其他列的表头移入或移出冻结列位置，同时保持冻结列的数量不变。\n   */\n  frozenColDragHeaderMode?: 'disabled' | 'adjustFrozenCount' | 'fixedFrozenCount';\n  cachedRecordsRowHeightMap: NumberMap<string | number>; //存储每一条记录对应行的行高，只有当设置为自动换行随内容撑开才会起作用\n  // headerRowHeightsMap: NumberMap<number>; //目前是用来存储了表头各行的高度，从headerRowHeight计算而来，headerRowHeight可以设置为数组的形式\n  _rowHeightsMap: NumberRangeMap; //存储数据条目每行高度\n  _colWidthsMap: NumberMap<string | number>; //存储各列的宽度\n  _colContentWidthsMap: NumberMap<string | number>; //存储各列的内容宽度\n  _colWidthsLimit: {\n    //存储各列的宽度限制\n    [col: number]: {\n      max?: string | number;\n      min?: string | number;\n    };\n  };\n  calcWidthContext: {\n    _: IBaseTableProtected;\n    full: number;\n    // em: number;\n  };\n\n  _rowRangeHeightsMap: Map<string, number>; //存储指定行范围的总高度\n  _colRangeWidthsMap: Map<string, number>; //存储指定列范围的总宽度\n\n  _widthResizedColMap: Set<number | string>; //记录下被手动调整过列宽的列号\n  _heightResizedRowMap: Set<number>; //记录下被手动调整过行高的行号\n\n  bodyHelper: BodyHelper;\n  headerHelper: HeaderHelper;\n  rowSeriesNumberHelper: RowSeriesNumberHelper;\n\n  cellTextOverflows: { [at: string]: string };\n  // headerDescriptions: { [at: string]: string };\n  focusedTable: boolean;\n\n  // scroll: {\n  //   left: number;\n  //   top: number;\n  // };\n  releaseList?: { release: () => void }[] | null;\n  theme: TableTheme;\n  transpose?: boolean; //是否转置\n  // autoRowHeight?: boolean; //是否自动撑开高度 对于设置了autoWrapText的multilineText的列生效\n  pixelRatio?: number;\n  /** 下拉菜单的相关配置。消失时机：显示后点击菜单区域外自动消失*/\n  menu: {\n    /** 代替原来的option.menuType */\n    renderMode?: 'canvas' | 'html';\n    /** 内置下拉菜单的全局设置项 目前只针对基本表格有效 会对每个表头单元格开启默认的下拉菜单功能。代替原来的option.dropDownMenu*/\n    defaultHeaderMenuItems?:\n      | MenuListItem[]\n      | ((args: { row: number; col: number; table: BaseTableAPI }) => MenuListItem[]);\n    /** 右键菜单。代替原来的option.contextmenu */\n    contextMenuItems?:\n      | MenuListItem[]\n      | ((field: FieldDef, row: number, col: number, table?: BaseTableAPI) => MenuListItem[]);\n    /** 设置选中状态的菜单。代替原来的option.dropDownMenuHighlight  */\n    dropDownMenuHighlight?: DropDownMenuHighlightInfo[];\n    parentElement?: HTMLElement;\n  };\n  /** 提示弹框的相关配置。消失时机：显示后鼠标移动到指定区域外或者进入新的单元格后自动消失*/\n  tooltip: {\n    parentElement: HTMLElement;\n    renderMode: 'html' | 'canvas';\n    /** 代替原来hover:isShowTooltip配置 */\n    isShowOverflowTextTooltip: boolean | ((col: number, row: number, table: BaseTableAPI) => boolean);\n    /** 缩略文字提示框 延迟消失时间 */\n    overflowTextTooltipDisappearDelay?: number;\n    /** 弹框是否需要限定在表格区域内 */\n    confine: boolean;\n    position: Placement;\n  };\n\n  dataSourceEventIds?: EventListenerId[];\n  // headerEvents?: EventListenerId[];\n  layoutMap: SimpleHeaderLayoutMap | PivotHeaderLayoutMap;\n  headerValues?: HeaderValues;\n  tooltipHandler: TooltipHandler;\n\n  // headerRowHeight: number[] | number;//移到了BaseTable\n  sortState: SortState | SortState[];\n  multipleSort?: boolean;\n\n  dataSource: DataSource | CachedDataSource;\n  records?: any;\n  allowRangePaste: boolean;\n  //重新思考逻辑：如果为false，行高按设置的rowHeight；如果设置为true，则按lineHeight及是否自动换行综合计算行高 2021.11.19 by：lff\n\n  autoWrapText?: boolean;\n  enableLineBreak?: boolean;\n\n  menuHandler: MenuHandler;\n\n  /**\n   * 计算列宽时 指定最大列宽 可设置boolean或者具体的值 默认为450\n   */\n  limitMaxAutoWidth?: boolean | number;\n\n  /**\n   * 限制列宽最小值。\n   */\n  limitMinWidth?: number;\n\n  limitMinHeight?: number;\n\n  title?: Title;\n  legends?: (DiscreteTableLegend | ContinueTableLegend)[];\n\n  emptyTip?: EmptyTip;\n  //是否开启图表异步渲染\n  renderChartAsync?: boolean;\n  // // 开启图表异步渲染 每批次渐进渲染图表个数\n  // renderChartAsyncBatchCount?: number;\n\n  stick: { changedCells: Map<string, StickCell> };\n\n  customMergeCell?: CustomMergeCellFunc;\n  /**\n   * 'auto':和浏览器滚动行为一致 表格滚动到顶部/底部时 触发浏览器默认行为;\n   *  设置为 'none' 时, 表格滚动到顶部/底部时, 不再触发父容器滚动\n   * */\n  overscrollBehavior?: 'auto' | 'none';\n\n  modifiedViewBoxTransform?: boolean;\n  // react component container\n  bodyDomContainer?: HTMLElement;\n  headerDomContainer?: HTMLElement;\n  frozenBodyDomContainer?: HTMLElement;\n  frozenHeaderDomContainer?: HTMLElement;\n  rightFrozenBodyDomContainer?: HTMLElement;\n  rightFrozenHeaderDomContainer?: HTMLElement;\n  frozenBottomDomContainer?: HTMLElement;\n  bottomDomContainer?: HTMLElement;\n  rightFrozenBottomDomContainer?: HTMLElement;\n\n  // 已使用一行的高度填充所有行\n  useOneRowHeightFillAll?: boolean;\n\n  // 启用树形结构数据内的merge配置\n  enableTreeNodeMerge?: boolean;\n\n  _oldRowCount?: number;\n  _oldColCount?: number;\n}\nexport interface BaseTableConstructorOptions {\n  // /** 指定表格的行数 */\n  // rowCount?: number;\n\n  // /** 指定表格的列数 */\n  // colCount?: number;\n  /**\n   * 当前需要冻结的列数 基本表格生效\n   */\n  frozenColCount?: number;\n  frozenRowCount?: number;\n  rightFrozenColCount?: number;\n  bottomFrozenRowCount?: number;\n  /** 最大冻结宽度，固定值 or 百分比。默认为'80%' */\n  maxFrozenWidth?: number | string;\n  /** 超过最大冻结宽度后是否全部解冻，默认true */\n  unfreezeAllOnExceedsMaxWidth?: boolean;\n\n  // /** 待实现 TODO */\n  // frozenRowCount?: number;\n  /** 可冻结列数，表示前多少列会出现冻结操作按钮 基本表格生效 */\n  allowFrozenColCount?: number;\n  /**\n   * 默认行高. 默认 40\n   */\n  defaultRowHeight?: number | 'auto';\n  /** 列表头默认行高 可以按逐行设置 如果没有就取defaultRowHeight */\n  defaultHeaderRowHeight?: (number | 'auto') | (number | 'auto')[];\n  /**\n   * 默认列宽. 默认 80\n   */\n  defaultColWidth?: number;\n  /** 行表头默认列宽 可以按逐列设置 如果没有就取defaultColWidth */\n  defaultHeaderColWidth?: (number | 'auto') | (number | 'auto')[];\n  /** 快捷键功能设置 */\n  keyboardOptions?: TableKeyboardOptions;\n  excelOptions?: {\n    fillHandle?: boolean | ((args: { selectRanges: CellRange[]; table: BaseTableAPI }) => boolean);\n  };\n  /** 事件触发相关设置 */\n  eventOptions?: TableEventOptions;\n  /**\n   * Canvas container\n   */\n  container?: HTMLElement | null;\n\n  /**\n   * @deprecated\n   * 请使用resize.columnResizeMode\n   * 调整列宽 可操作范围。'all' | 'none' | 'header' | 'body'; 整列间隔线|禁止调整|只能在表头处间隔线|只能在body间隔线\n   */\n  columnResizeMode?: 'all' | 'none' | 'header' | 'body';\n  /**\n   * @deprecated\n   * 请使用resize.rowResizeMode\n   */\n  rowResizeMode?: 'all' | 'none' | 'header' | 'body';\n\n  /**\n   * @deprecated\n   * dragOrder.dragHeaderMode\n   * 控制拖拽表头移动位置顺序开关\n   */\n  dragHeaderMode?: 'all' | 'none' | 'column' | 'row';\n\n  /**\n   * 是否显示固定列图钉 基本表格生效\n   */\n  showFrozenIcon?: boolean;\n\n  padding?:\n    | {\n        top?: number;\n        bottom?: number;\n        left?: number;\n        right?: number;\n      }\n    | number;\n  /** hover交互配置 */\n  hover?: {\n    /** hover交互响应模式：十字交叉 整列 整行 或者单个单元格 */\n    highlightMode?: 'cross' | 'column' | 'row' | 'cell';\n    /** 不响应鼠标hover交互 */\n    disableHover?: boolean;\n    /** 单独设置表头不响应鼠标hover交互 */\n    disableHeaderHover?: boolean;\n    /** 单独设置坐标轴不响应鼠标hover交互 */\n    disableAxisHover?: boolean;\n  };\n  /** 选择单元格交互配置 */\n  select?: {\n    /** 高亮范围模式：十字交叉 整列 整行 或者单个单元格。默认`cell` */\n    highlightMode?: 'cross' | 'column' | 'row' | 'cell';\n    /** 点击表头单元格效果\n     * 'inline': 点击行表头则整行选中，选择列表头则整列选中；\n     * 'cell': 仅仅选择当前点击的表头单元格；\n     * 'body': 不选择表头，点击行表头则选择该行所有 body 单元格，点击列表头则选择该列所有 body 单元格。\n     */\n    headerSelectMode?: 'inline' | 'cell' | 'body';\n    /** 点击表头corner单元格效果\n     * 'inline': 点击corner选择列表头则整列选中；\n     * 'cell': 仅仅选择当前点击的corner表头单元格；\n     * 'body': 点击corner列表头则选择该列所有 body 单元格；\n     * 'all': 点击corner选择整个图表。\n     */\n    cornerHeaderSelectMode?: 'inline' | 'cell' | 'body' | 'all';\n    /** 不响应鼠标select交互 */\n    disableSelect?: boolean | ((col: number, row: number, table: BaseTableAPI) => boolean);\n    /** 单独设置表头不响应鼠标select交互 */\n    disableHeaderSelect?: boolean;\n    /** 点击空白区域是否取消选中 */\n    blankAreaClickDeselect?: boolean;\n    /** 点击外部区域是否取消选中 */\n    outsideClickDeselect?: boolean; //\n    /**  禁止拖拽框选 */\n    disableDragSelect?: boolean;\n    /** 是否在选择多行或多列时高亮范围 */\n    highlightInRange?: boolean;\n    /** 是否将选中的单元格自动滚动到视口内 默认为true */\n    makeSelectCellVisible?: boolean;\n  };\n  /** 下拉菜单的相关配置。消失时机：显示后点击菜单区域外自动消失*/\n  menu?: {\n    /** 代替原来的option.menuType  html目前实现较完整 先默认html渲染方式*/\n    renderMode?: 'canvas' | 'html';\n    /** 内置下拉菜单的全局设置项 目前只针对基本表格有效 会对每个表头单元格开启默认的下拉菜单功能。代替原来的option.dropDownMenu*/\n    defaultHeaderMenuItems?:\n      | MenuListItem[]\n      | ((args: { row: number; col: number; table: BaseTableAPI }) => MenuListItem[]);\n    /** 右键菜单。代替原来的option.contextmenu */\n    contextMenuItems?:\n      | MenuListItem[]\n      | ((field: string, row: number, col: number, table?: BaseTableAPI) => MenuListItem[]);\n    /** 设置选中状态的菜单。代替原来的option.dropDownMenuHighlight  */\n    dropDownMenuHighlight?: DropDownMenuHighlightInfo[];\n    parentElement?: HTMLElement;\n  };\n  /** tooltip相关配置 */\n  tooltip?: {\n    parentElement?: HTMLElement;\n    /** html目前实现较完整 先默认html渲染方式 */\n    renderMode?: 'html'; // 目前暂不支持canvas方案\n    /** 是否显示缩略文字提示框。 代替原来hover:isShowTooltip配置 暂时需要将renderMode配置为html才能显示，canvas的还未开发*/\n    isShowOverflowTextTooltip?: boolean | ((col: number, row: number, table: BaseTableAPI) => boolean);\n    /** 缩略文字提示框 延迟消失时间 */\n    overflowTextTooltipDisappearDelay?: number;\n    /** 是否将 tooltip 框限制在画布区域内，默认开启。针对renderMode:\"html\"有效 */\n    confine?: boolean;\n    position?: Placement;\n  };\n  /**\n   * Theme\n   */\n  theme?: ITableThemeDefine;\n  /** 宽度模式 */\n  widthMode?: 'standard' | 'adaptive' | 'autoWidth';\n  /** 高度模式 */\n  heightMode?: 'standard' | 'adaptive' | 'autoHeight';\n  /** 当列宽度不能占满容器时，是否需要自动拉宽来填充容器的宽度。默认false */\n  autoFillWidth?: boolean;\n  /** 当行高度不能占满容器时，是否需要自动拉高来填充容器的高度。默认false */\n  autoFillHeight?: boolean;\n\n  /** adaptive 模式下宽度的适应策略 **/\n  widthAdaptiveMode?: WidthAdaptiveModeDef;\n  /** adaptive 模式下高度的适应策略 **/\n  heightAdaptiveMode?: HeightAdaptiveModeDef;\n  /** 当配置adaptive模式时，默认true，即在计算每行行高的基础上去等比拉伸行高撑满容器宽度的。如果不需要计算行高用默认行高撑满的话请配置为false */\n  autoHeightInAdaptiveMode?: boolean;\n\n  // /** 行高是否根据内容来计算 */\n  // autoRowHeight?: boolean;\n  /** 设备的像素比 不配的话默认获取window.devicePixelRatio */\n  pixelRatio?: number;\n  /** 自定义渲染 函数形式*/\n  customRender?: ICustomRender;\n  /** 开启自动换行 默认false */\n  autoWrapText?: boolean;\n  /** 是否处理换行符 */\n  enableLineBreak?: boolean;\n  /** 单元格中可显示最大字符数 默认200 */\n  maxCharactersNumber?: number; //\n  // /** toolip最大字符数 */\n  // maxTooltipCharactersNumber?: number;\n  /** 最大可操作条目数 如copy操作可复制出最大数据条目数 */\n  maxOperatableRecordCount?: number;\n  /**\n   * 计算列宽时 指定最大列宽 可设置boolean或者具体的值 默认为450。手动拖拽列宽的话不收这个限制\n   */\n  limitMaxAutoWidth?: boolean | number;\n  /**\n   * 限制列宽最小值。如设置为true 则拖拽改变列宽时限制列宽最小为10px，设置为false则不进行限制。默认为10px\n   */\n  limitMinWidth?: boolean | number;\n  limitMinHeight?: boolean | number;\n\n  // maximum number of data items maintained in table instance\n  maintainedDataCount?: number;\n  // maximum number of columns maintained in table instance\n  maintainedColumnCount?: number;\n\n  legends?: ITableLegendOption | ITableLegendOption[];\n  title?: ITitle;\n  emptyTip?: true | IEmptyTip;\n  /** 是否开启图表异步渲染 */\n  renderChartAsync?: boolean;\n  /** 开启图表异步渲染 每批次渐进渲染图表个数  默认是5个 */\n  renderChartAsyncBatchCount?: number;\n\n  customMergeCell?: CustomMergeCell;\n\n  // #region for nodejs\n  mode?: 'node' | 'browser';\n  modeParams?: any;\n  canvasWidth?: number | 'auto';\n  canvasHeight?: number | 'auto';\n  maxCanvasWidth?: number;\n  maxCanvasHeight?: number;\n\n  // #endregion\n  /**\n   * 'auto':和浏览器滚动行为一致 表格滚动到顶部/底部时 触发浏览器默认行为;\n   *  设置为 'none' 时, 表格滚动到顶部/底部时, 不再触发父容器滚动\n   * */\n  overscrollBehavior?: 'auto' | 'none';\n\n  // resize response time\n  resizeTime?: number;\n\n  canvas?: HTMLCanvasElement;\n  viewBox?: IBoundsLike;\n  chartOption?: any;\n  disableInteraction?: boolean;\n\n  // 渲染时的 spec 改变\n  specFormat?: (\n    spec: any,\n    chartInstance: any,\n    chart: any\n  ) => { needFormatSpec: boolean; spec?: any; updateSpec?: boolean };\n  // chart 单元格 的 spec 生成时的转换\n  specTransformInCell?: (spec: any, col: number, row: number) => any;\n\n  beforeRender?: (stage: any) => void;\n  afterRender?: (stage: any) => void;\n  rowSeriesNumber?: IRowSeriesNumber;\n  // columnSeriesNumber?: ColumnSeriesNumber[];\n  customCellStyle?: CustomCellStyle[];\n  customCellStyleArrangement?: CustomCellStyleArrangement[];\n\n  columnWidthComputeMode?: 'normal' | 'only-header' | 'only-body';\n  clearDOM?: boolean;\n  customConfig?: {\n    /** xTable对于没有配置autoWrapText并且有'\\n'的文本，在计算行高是会当做一行处理，但是在渲染时会解析'\\n'；显示效果就是单元格高度为一行文本高度，只显示第一个'\\n'前的文字，后面显示'...'；multilinesForXTable配置实现和该功能对齐的样式 */\n    multilinesForXTable?: boolean;\n    /** 这里可以配置为false 来走flatDataToObject的数据处理逻辑 而不走dataset的分析 */\n    enableDataAnalysis?: boolean;\n    /** 禁用行高列宽计算取整数逻辑 对齐xTable */\n    _disableColumnAndRowSizeRound?: boolean;\n    imageMargin?: number;\n    // 是否创建react custom container\n    createReactContainer?: boolean;\n    // adaptive 模式下优先缩小迷你图\n    shrinkSparklineFirst?: boolean;\n\n    // 行列移动不更新表格\n    notUpdateInColumnRowMove?: boolean;\n\n    // 表格是否限制内容高度\n    limitContentHeight?: boolean;\n\n    // 图片资源请求时是否使用anonymous模式\n    imageAnonymous?: boolean;\n\n    // 滚动到边界是否继续触发滚动事件\n    scrollEventAlwaysTrigger?: boolean;\n\n    // 开启透视结构缓存\n    enablePivotPathCache?: boolean;\n\n    // 是否禁用内置图表激活\n    disableBuildInChartActive?: boolean;\n  }; // 部分特殊配置，兼容xTable等作用\n\n  animationAppear?: boolean | IAnimationAppear;\n\n  renderOption?: any;\n\n  formatCopyValue?: (value: string) => string;\n  customComputeRowHeight?: (computeArgs: { row: number; table: BaseTableAPI }) => number | 'auto' | undefined;\n  /** 当表格出现抖动情况，请排查是否上层dom容器的宽高是小数引起的。如果不能保证是整数，请配置这个配置项为true */\n  tableSizeAntiJitter?: boolean;\n\n  /**\n   * @deprecated 请使用resize.disableDblclickAutoResizeColWidth\n   */\n  disableDblclickAutoResizeColWidth?: boolean;\n\n  /** resize交互配置 **/\n  resize?: {\n    /**\n     * 调整列宽 可操作范围。'all' | 'none' | 'header' | 'body'; 整列间隔线|禁止调整|只能在表头处间隔线|只能在body间隔线\n     */\n    columnResizeMode?: 'all' | 'none' | 'header' | 'body';\n    rowResizeMode?: 'all' | 'none' | 'header' | 'body';\n    /** 是否禁用双击列边框自动调整列宽 **/\n    disableDblclickAutoResizeColWidth?: boolean;\n  };\n  dragOrder?: {\n    /** 控制拖拽表头移动位置顺序开关 */\n    dragHeaderMode?: 'all' | 'none' | 'column' | 'row';\n    /** 拖拽移动位置结束时进行验证 */\n    validateDragOrderOnEnd?: (source: CellAddress, target: CellAddress) => boolean;\n  };\n  /** 插件配置 */\n  plugins?: IVTablePlugin[];\n}\nexport interface BaseTableAPI {\n  id: string;\n  /** 数据总条目数 */\n  recordsCount: number;\n  /** 表格的行数 */\n  rowCount: number;\n  /** 表格的列数 */\n  colCount: number;\n  /** 表格除去外层frame后的宽度 */\n  tableNoFrameWidth: number;\n  /** 表格除去外层frame后的高度 */\n  tableNoFrameHeight: number;\n  /** 表格的冻结行数 包括表头在内 */\n  frozenRowCount: number;\n  /** 表格的冻结列数 包括表头在内 */\n  frozenColCount: number;\n\n  bottomFrozenRowCount: number;\n  rightFrozenColCount: number;\n  /** 当前表格默认表头行高 */\n  defaultHeaderRowHeight: (number | 'auto') | (number | 'auto')[];\n  /** 当前表格默认行高 */\n  defaultRowHeight: number;\n  /** 当前表格默认列宽 */\n  defaultColWidth: number;\n  /** 当前表格默认表头列宽 */\n  defaultHeaderColWidth: (number | 'auto') | (number | 'auto')[];\n  /** 当前表格快捷键设置 */\n  keyboardOptions: TableKeyboardOptions | null;\n  /** 当前表格事件相关设置 */\n  eventOptions: TableEventOptions | null;\n  /**\n   * 是否显示图钉\n   */\n  showFrozenIcon: boolean;\n  readonly canvas: HTMLCanvasElement;\n  /** 表格可视区域的行数 */\n  readonly visibleRowCount: number;\n  /** 表格可视区域的列数 */\n  readonly visibleColCount: number;\n  /** 表格滚动值left */\n  scrollLeft: number;\n  /** 表格滚动值top */\n  scrollTop: number;\n  /** 用户设置的options 不要修改这个这个 */\n  options: BaseTableConstructorOptions;\n  /** 设置的全局下拉菜单列表项配置 */\n  globalDropDownMenu?: MenuListItem[] | ((args: { row: number; col: number; table: BaseTableAPI }) => MenuListItem[]);\n  /** 设置的全局自定义渲染函数 */\n  customRender?: ICustomRender;\n\n  /** 表格数据管理对象 */\n  dataSource: DataSourceAPI;\n  /** 设置的表格主题 */\n  theme: TableTheme;\n  /** 可允许设置冻结的最大列数 */\n  allowFrozenColCount: number;\n\n  /** 存储内部用到的属性 变量等 */\n  internalProps: IBaseTableProtected;\n  /** 分页信息 */\n  pagination?: IPagination;\n\n  /** 表格偏移像素值 水平方向 */\n  tableX: number;\n  /** 表格偏移像素值 垂直方向 */\n  tableY: number;\n  /** 表格宽度模式 */\n  widthMode: WidthModeDef;\n  /** 表格宽度模式 */\n  heightMode: HeightModeDef;\n  /** 当列宽度不能占满容器时，是否需要自动拉宽来填充容器的宽度。默认false */\n  autoFillWidth: boolean;\n  /** 当行高度不能占满容器时，是否需要自动拉高来填充容器的高度。默认false */\n  autoFillHeight?: boolean;\n\n  /** adaptive 模式下宽度的适应策略 **/\n  widthAdaptiveMode: WidthAdaptiveModeDef;\n  /** adaptive 模式下高度的适应策略 **/\n  heightAdaptiveMode: HeightAdaptiveModeDef;\n\n  isReleased: boolean;\n\n  // rowHeightsMap: NumberMap<number>;\n  rowHeightsMap: NumberRangeMap;\n  colWidthsMap: NumberMap<string | number>;\n\n  on: <TYPE extends keyof TableEventHandlersEventArgumentMap>(\n    type: TYPE,\n    listener: TableEventListener<TYPE> //(event: TableEventHandlersEventArgumentMap[TYPE]) => TableEventHandlersReturnMap[TYPE]\n  ) => EventListenerId;\n  // &(<T extends keyof TableEventHandlersEventArgumentMap>(type: string, listener: AnyListener<T>) => EventListenerId);\n\n  _vDataSet?: DataSet;\n  /** 场景树对象 */\n  scenegraph: Scenegraph;\n  /** 状态管理模块 */\n  stateManager: StateManager;\n  /** 事件管理模块 */\n  eventManager: EventManager;\n  /** 动画管理模块 */\n  animationManager: TableAnimationManager;\n\n  editorManager: EditManager;\n  /** 行表头的层数 */\n  rowHeaderLevelCount: number;\n  /** 列表头的层数 */\n  columnHeaderLevelCount: number;\n\n  canvasWidth?: number;\n  canvasHeight?: number;\n\n  columnWidthComputeMode?: 'normal' | 'only-header' | 'only-body';\n\n  _rowRangeHeightsMap: Map<string, number>;\n  _colRangeWidthsMap: Map<string, number>;\n  canvasSizeSeted?: boolean;\n\n  pixelRatio: number;\n  rotateDegree?: number;\n  /** 获取表格绘制的范围 不包括frame的宽度 */\n  getDrawRange: () => Rect;\n  /** 将鼠标坐标值 转换成表格坐标系中的坐标位置 */\n  _getMouseAbstractPoint: (evt: TouchEvent | MouseEvent | undefined) => { x: number; y: number; inTable: boolean };\n  getElement: () => HTMLElement;\n  getContainer: () => HTMLElement;\n\n  setFrozenColCount: (count: number) => void;\n  _setFrozenColCount: (count: number) => void;\n  _updateSize: () => void;\n\n  render: () => void;\n  throttleInvalidate: () => void;\n  getRowHeight: (row: number) => number;\n  getDefaultRowHeight: (row: number) => number | 'auto';\n  getDefaultColumnWidth: (col: number) => number | 'auto';\n  _setRowHeight: (row: number, height: number, clearCache?: boolean) => void;\n  setRowHeight: (row: number, height: number) => void;\n  getColWidth: (col: number) => number;\n  getColWidthDefined: (col: number) => string | number;\n  // setColWidthDefined: (col: number, width: number) => void;\n  getColWidthDefinedNumber: (col: number) => number;\n  // getColWidthDefine: (col: number) => string | number;\n  _setColWidth: (col: number, width: number | string, clearCache?: boolean, skipCheckFrozen?: boolean) => void;\n  setColWidth: (col: number, width: number) => void;\n  _getColContentWidth: (col: number) => number;\n  _setColContentWidth: (col: number, width: number | string, clearCache?: boolean) => void;\n  getMaxColWidth: (col: number) => number;\n  setMaxColWidth: (col: number, maxwidth: string | number) => void;\n  getMinColWidth: (col: number) => number;\n  setMinColWidth: (col: number, minwidth: string | number) => void;\n  getCellRect: (col: number, row: number) => Rect;\n  getCellRelativeRect: (col: number, row: number) => Rect;\n  getCellsRect: (startCol: number, startRow: number, endCol: number, endRow: number) => Rect;\n  getCellRangeRect: (cellRange: CellRange | CellAddress) => Rect;\n  getCellRangeRelativeRect: (cellRange: CellRange | CellAddress) => Rect;\n  getVisibleCellRangeRelativeRect: (cellRange: CellRange | CellAddress) => Rect;\n  isFrozenCell: (col: number, row: number) => { row: boolean; col: boolean } | null;\n  getRowAt: (absoluteY: number) => { top: number; row: number; bottom: number };\n  getColAt: (absoluteX: number) => { left: number; col: number; right: number };\n  getCellAt: (absoluteX: number, absoluteY: number) => CellAddressWithBound;\n  getCellAtRelativePosition: (absoluteX: number, absoluteY: number) => CellAddressWithBound;\n  _makeVisibleCell: (col: number, row: number) => void;\n  // setFocusCursor(col: number, row: number): void;\n  // focusCell(col: number, row: number): void;\n  getCellOverflowText: (col: number, row: number) => string | null;\n  getColsWidth: (startCol: number, endCol: number) => number;\n  getColsWidths: () => number[];\n  getRowsHeight: (startRow: number, endRow: number) => number;\n\n  release: () => void;\n  addReleaseObj: (releaseObj: { release: () => void }) => void;\n  _getCellStyle: (col: number, row: number) => FullExtendStyle;\n  clearCellStyleCache: () => void;\n\n  getFrozenRowsHeight: () => number;\n  getFrozenColsWidth: () => number;\n  getBottomFrozenRowsHeight: () => number;\n  getRightFrozenColsWidth: () => number;\n  selectCell: (\n    col: number,\n    row: number,\n    isShift?: boolean,\n    isCtrl?: boolean,\n    makeSelectCellVisible?: boolean,\n    skipBodyMerge?: boolean\n  ) => void;\n  selectCells: (cellRanges: CellRange[]) => void;\n  getAllRowsHeight: () => number;\n  getAllColsWidth: () => number;\n\n  off: (id: EventListenerId) => void;\n  getBodyField: (col: number, row: number) => FieldDef | undefined;\n  /**\n   * 根据单元格获取对应的源数据\n   * @param col\n   * @param row\n   * @returns\n   */\n  getRecordByCell: (col: number, row: number) => MaybePromiseOrUndefined;\n  /**\n   * 根据数据源的index 获取显示到表格中的index 行号或者列号（与转置相关）。注：ListTable特有接口\n   * @param recordIndex\n   */\n  getTableIndexByRecordIndex: (recordIndex: number) => number;\n  /**\n   * 根据数据源的field 获取显示到表格中的index 行号或者列号（与转置相关）。注：ListTable特有接口\n   * @param recordIndex\n   */\n  getTableIndexByField: (field: FieldDef) => number;\n  /**\n   * 根据数据源中的index和field获取单元格行列号。注：ListTable特有接口\n   * @param field\n   * @param recordIndex\n   * @returns\n   */\n  getCellAddrByFieldRecord: (field: FieldDef, recordIndex: number) => CellAddress;\n  getRecordShowIndexByCell: (col: number, row: number) => number;\n  getRecordStartRowByRecordIndex: (index: number) => number;\n\n  getHeaderField: (col: number, row: number) => any | undefined;\n\n  _getHeaderCellBySortState: (sortState: SortState) => CellAddress | undefined;\n  getHeaderDefine: (col: number, row: number) => ColumnDefine | IRowSeriesNumber | ColumnSeriesNumber;\n  _getHeaderLayoutMap: (col: number, row: number) => HeaderData | SeriesNumberColumnData;\n  getContext: () => CanvasRenderingContext2D;\n  getCellRange: (col: number, row: number) => CellRange;\n  _resetFrozenColCount: () => void;\n  isCellRangeEqual: (col: number, row: number, targetCol: number, targetRow: number) => boolean;\n  _getLayoutCellId: (col: number, row: number) => LayoutObjectId;\n  _getBodyLayoutMap: (col: number, row: number) => ColumnData | IndicatorData | SeriesNumberColumnData;\n  getBodyColumnDefine: (col: number, row: number) => ColumnDefine | IRowSeriesNumber | ColumnSeriesNumber;\n  getBodyColumnType: (col: number, row: number) => ColumnTypeOption;\n  getCellType: (col: number, row: number) => ColumnTypeOption;\n  fireListeners: <TYPE extends keyof TableEventHandlersEventArgumentMap>(\n    type: TYPE,\n    event: TableEventHandlersEventArgumentMap[TYPE]\n  ) => TableEventHandlersReturnMap[TYPE][];\n\n  //更新分页\n  updatePagination: (cof: IPagination) => void;\n  //hover\n\n  getHeaderDescription: (col: number, row: number) => string | undefined;\n  /** 获取单元格展示值 */\n  getCellValue: (col: number, row: number, skipCustomMerge?: boolean) => string | null;\n  /** 获取单元格展示数据的format前的值 */\n  getCellOriginValue: (col: number, row: number) => any;\n  /** 获取单元格展示数据源最原始值 */\n  getCellRawValue: (col: number, row: number) => FieldData;\n  /** 获取单元格展示数据的format前的record源数据 */\n  getCellOriginRecord: (col: number, row: number) => MaybePromiseOrUndefined;\n  /** 获取单元格展示源数据 */\n  getCellRawRecord: (col: number, row: number) => MaybePromiseOrUndefined;\n\n  _dropDownMenuIsHighlight: (col: number, row: number, index: number) => boolean;\n  // bindEvents(): void;\n  refreshRowColCount: () => void;\n  // getFieldData: (field: FieldDef | FieldFormat | undefined, col: number, row: number) => FieldData;\n  _hasField: (field: FieldDef, col: number, row: number) => boolean;\n  getCellHeaderPaths: (col: number, row: number) => ICellHeaderPaths;\n  getCellLocation: (col: number, row: number) => CellLocation;\n  // isHitIcon(col: number, row: number, x: number, y: number, iconType: IconFuncTypeEnum): boolean;\n  getCellIcons: (col: number, row: number) => ColumnIconOption[];\n\n  getMenuInfo: (col: number, row: number, type: string) => DropDownMenuEventInfo;\n  /**\n   * 获取某个单元格的样式 共业务方调用\n   * @param col\n   * @param row\n   */\n  getCellStyle: (col: number, row: number) => CellStyle; //  计算后style\n\n  getHierarchyState: (col: number, row: number) => HierarchyState | null;\n\n  _canDragHeaderPosition: (col: number, row: number) => boolean;\n\n  isHeader: (col: number, row: number) => boolean;\n\n  isColumnHeader: (col: number, row: number) => boolean;\n\n  isCornerHeader: (col: number, row: number) => boolean;\n\n  isRowHeader: (col: number, row: number) => boolean;\n\n  getCopyValue: () => string;\n\n  getSelectedCellInfos: () => CellInfo[][];\n  getSelectedCellRanges: () => CellRange[];\n  getCellInfo: (col: number, row: number) => Omit<MousePointerCellEvent, 'target'>;\n\n  showTooltip: (col: number, row: number, tooltipOptions?: TooltipOptions) => void;\n\n  measureText: (\n    text: string,\n    font: { fontSize: number; fontWeight?: string | number; fontFamily: string }\n  ) => ITextSize;\n\n  _canResizeColumn: (col: number, row: number) => boolean;\n  _canResizeRow: (col: number, row: number) => boolean;\n\n  getCustomRender: (col: number, row: number) => ICustomRender;\n  getCustomLayout: (col: number, row: number) => ICustomLayout;\n  isListTable: () => boolean;\n  isPivotTable: (() => boolean) & (() => boolean);\n  isPivotChart: (() => boolean) & (() => boolean);\n  _clearColRangeWidthsMap: (col?: number) => void;\n  _clearRowRangeHeightsMap: (row?: number) => void;\n  clearRowHeightCache: () => void;\n  clearColWidthCache: () => void;\n  toggleHierarchyState: (col: number, row: number) => void;\n\n  resize: () => void;\n  /** 直接设置canvas的宽高 不根据容器宽高来决定表格的尺寸 */\n  setCanvasSize: (width: number, height: number) => void;\n  getMergeCellRect: (col: number, row: number) => Rect;\n\n  getTargetColAt: (absoluteX: number) => ColumnInfo | null;\n  getTargetRowAt: (absoluteY: number) => RowInfo | null;\n  getTargetColAtConsiderRightFrozen: (absoluteX: number, isConsider: boolean) => ColumnInfo | null;\n  getTargetRowAtConsiderBottomFrozen: (absoluteY: number, isConsider: boolean) => RowInfo | null;\n  renderWithRecreateCells: () => void;\n  //#endregion  tableAPI\n\n  _adjustColWidth: (col: number, orgWidth: number) => number;\n  _colWidthDefineToPxWidth: (width: string | number) => number;\n  isFrozenColumn: (col: number, row?: number) => boolean;\n  isLeftFrozenColumn: (col: number, row?: number) => boolean;\n  isRightFrozenColumn: (col: number, row?: number) => boolean;\n  isFrozenRow: (col: number, row?: number) => boolean;\n  isTopFrozenRow: (col: number, row?: number) => boolean;\n  isBottomFrozenRow: (col: number, row?: number) => boolean;\n\n  hasCustomMerge: () => boolean;\n  getCustomMerge: (col: number, row: number) => undefined | (Omit<CustomMerge, 'style'> & { style?: FullExtendStyle });\n  /** 获取表格body部分的显示单元格范围 */\n  getBodyVisibleCellRange: () => { rowStart: number; colStart: number; rowEnd: number; colEnd: number };\n  /** 获取表格body部分的显示列号范围 */\n  getBodyVisibleColRange: () => { colStart: number; colEnd: number };\n  /** 获取表格body部分的显示行号范围 */\n  getBodyVisibleRowRange: () => { rowStart: number; rowEnd: number };\n\n  _hasCustomRenderOrLayout: () => boolean;\n  /** 根据表格单元格的行列号 获取在body部分的列索引及行索引 */\n  getBodyIndexByTableIndex: (col: number, row: number) => CellAddress;\n  /** 根据body部分的列索引及行索引，获取单元格的行列号 */\n  getTableIndexByBodyIndex: (col: number, row: number) => CellAddress;\n  /**\n   * 滚动到具体某个单元格位置\n   * @param cellAddr 要滚动到的单元格位置\n   */\n  scrollToCell: (cellAddr: { col?: number; row?: number }, animationOption?: ITableAnimationOption | boolean) => void;\n  scrollToRow: (row: number, animationOption?: ITableAnimationOption | boolean) => void;\n  scrollToCol: (col: number, animationOption?: ITableAnimationOption | boolean) => void;\n  registerCustomCellStyle: (customStyleId: string, customStyle: ColumnStyleOption | undefined | null) => void;\n  arrangeCustomCellStyle: (cellPos: { col?: number; row?: number; range?: CellRange }, customStyleId: string) => void;\n  /** 是否有列是自动计算列宽 */\n  checkHasColumnAutoWidth: () => boolean;\n  _moveHeaderPosition: (\n    source: CellAddress,\n    target: CellAddress\n  ) => {\n    sourceIndex: number;\n    targetIndex: any;\n    sourceSize: any;\n    targetSize: any;\n    moveType: 'column' | 'row';\n  };\n  changeRecordOrder: (source: number, target: number) => void;\n  isSeriesNumber: (col: number, row?: number) => boolean;\n  isHasSeriesNumber: () => boolean;\n  leftRowSeriesNumberCount: number;\n  isAutoRowHeight: (row?: number) => boolean;\n\n  reactCustomLayout?: ReactCustomLayout;\n  checkReactCustomLayout: (removeAllContainer: () => void) => void;\n  setSortedIndexMap: (field: FieldDef, filedMap: ISortedMapItem) => void;\n\n  exportImg: () => string;\n  exportCellImg: (\n    col: number,\n    row: number,\n    options?: { disableBackground?: boolean; disableBorder?: boolean }\n  ) => string;\n  exportCellRangeImg: (cellRange: CellRange) => string;\n  exportCanvas: () => HTMLCanvasElement;\n  setPixelRatio: (pixelRatio: number) => void;\n\n  bodyDomContainer?: HTMLElement;\n  headerDomContainer?: HTMLElement;\n  frozenBodyDomContainer?: HTMLElement;\n  frozenHeaderDomContainer?: HTMLElement;\n  rightFrozenBodyDomContainer?: HTMLElement;\n  rightFrozenHeaderDomContainer?: HTMLElement;\n  frozenBottomDomContainer?: HTMLElement;\n  bottomDomContainer?: HTMLElement;\n  rightFrozenBottomDomContainer?: HTMLElement;\n\n  showMoverLine: (col: number, row: number) => void;\n  hideMoverLine: (col: number, row: number) => void;\n  /** 关闭表格的滚动 */\n  disableScroll: () => void;\n  /** 开启表格的滚动 */\n  enableScroll: () => void;\n\n  customCellStylePlugin?: CustomCellStylePlugin;\n  headerStyleCache: Map<string, any>;\n  bodyBottomStyleCache: Map<string, any>;\n  bodyStyleCache: Map<string, any>;\n  bodyMergeTitleCache: Map<string, any>;\n  isSeriesNumberInBody: (col: number, row: number) => boolean;\n  getGroupTitleLevel: (col: number, row: number) => number | undefined;\n  _getMaxFrozenWidth: () => number;\n  _getComputedFrozenColCount: (frozenColCount: number) => number;\n}\nexport interface ListTableProtected extends IBaseTableProtected {\n  /** 表格数据 */\n  records: any[] | null;\n  dataConfig?: IListTableDataConfig;\n  columns: ColumnsDefine;\n  layoutMap: SimpleHeaderLayoutMap;\n  columnWidthConfig?: {\n    key: string;\n    width: number;\n  }[];\n}\n\nexport interface PivotTableProtected extends IBaseTableProtected {\n  /** 表格数据 */\n  records: any[] | undefined;\n  recordsIsTwoDimensionalArray?: boolean;\n  layoutMap: PivotHeaderLayoutMap;\n  dataConfig?: IPivotTableDataConfig;\n\n  /** 列表头树型结构 */\n  columnTree?: IHeaderTreeDefine[];\n  /** 行表头树型结构 */\n  rowTree?: IHeaderTreeDefine[];\n  /** 定义行上各个维度具体配置项和样式定义 */\n  rows?: (IRowDimension | string)[]; // (string | IDimension)[]; 后续支持数据分析的透视表 支持string配置\n  /** 定义列上各个维度具体配置项和样式定义 */\n  columns?: (IColumnDimension | string)[]; // (string | IDimension)[];\n  /** 定义指标具体配置项和样式定义 包含表头和body的定义*/\n  indicators?: (IIndicator | string)[]; // (string | IIndicator)[];\n\n  columnWidthConfig?: {\n    dimensions: IDimensionInfo[];\n    width: number;\n  }[];\n  columnWidthConfigForRowHeader?: {\n    dimensions: IDimensionInfo[];\n    width: number;\n  }[];\n}\nexport interface PivotChartProtected extends IBaseTableProtected {\n  /** 表格数据 */\n  records: any[] | Record<string, any[]>;\n  layoutMap: PivotHeaderLayoutMap;\n  dataConfig?: IPivotChartDataConfig;\n  columnTree?: IHeaderTreeDefine[];\n  /** 行表头维度结构 */\n  rowTree?: IHeaderTreeDefine[];\n  /** 定义行上各个维度具体配置项和样式定义 */\n  rows?: (IRowDimension | string)[]; // (string | IDimension)[]; 后续支持数据分析的透视表 支持string配置\n  /** 定义列上各个维度具体配置项和样式定义 */\n  columns?: (IColumnDimension | string)[]; // (string | IDimension)[];\n  /** 定义指标具体配置项和样式定义 包含表头和body的定义*/\n  indicators?: (IIndicator | string)[]; // (string | IIndicator)[];\n}\n"]}