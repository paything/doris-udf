{"version":3,"sources":["../src/ts-types/table-engine.ts"],"names":[],"mappings":";;;AAklBA,IAAY,SAKX;AALD,WAAY,SAAS;IACnB,wBAAW,CAAA;IACX,8BAAiB,CAAA;IACjB,0BAAa,CAAA;IACb,4BAAe,CAAA;AACjB,CAAC,EALW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAKpB;AAED,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,uCAAqB,CAAA;IACrB,+BAAa,CAAA;IACb,qCAAmB,CAAA;AACrB,CAAC,EALW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAKzB","file":"table-engine.js","sourcesContent":["import type { RectProps, MaybePromiseOrUndefined, IDimensionInfo, SortOrder, BaseCellInfo, CellInfo } from './common';\nimport type { ColumnIconOption, SvgIcon } from './icon';\nexport type { HeaderData } from './list-table/layout-map/api';\nexport type LayoutObjectId = number | string;\nimport type { Rect } from '../tools/Rect';\nimport type { BaseTableAPI, BaseTableConstructorOptions, ListTableProtected, PivotTableProtected } from './base-table';\nimport type {\n  Aggregation,\n  AggregationType,\n  CustomAggregation,\n  FilterRules,\n  IPivotTableDataConfig,\n  SortType\n} from './new-data-set';\nimport type { Either } from '../tools/helper';\nimport type {\n  IChartIndicator,\n  IColumnDimension,\n  ICornerDefine,\n  IDimension,\n  IIndicator,\n  IRowDimension,\n  ITitleDefine\n} from './pivot-table';\n\nimport type { ColumnDefine, ColumnsDefine } from './list-table';\nimport type { ICellAxisOption, ITableAxisOption } from './component/axis';\n\nimport type { IEditor } from '@visactor/vtable-editors';\nimport type { ITextStyleOption } from '../body-helper/style';\nimport type { CachedDataSource, DataSource } from '../data';\nimport type { EditManager } from '../edit/edit-manager';\nimport type { ICustomRender } from './customElement';\nimport type { ICustomLayout } from './customLayout';\nimport type { ColorPropertyDefine, StylePropertyFunctionArg } from './style-define';\nimport type { TableTheme } from '../themes/theme-define';\n\nexport interface CellAddress {\n  col: number;\n  row: number;\n}\nexport interface CellAddressWithBound {\n  col: number;\n  row: number;\n  rect?: RectProps;\n  x?: number;\n  y?: number;\n}\nexport interface CellRange {\n  start: CellAddress;\n  end: CellAddress;\n  isCustom?: boolean;\n}\n\nexport type FieldGetter = (record: any, col?: number, row?: number, table?: BaseTableAPI) => any;\nexport type FieldSetter = (record: any, value: any) => void;\nexport interface FieldAssessor {\n  get: FieldGetter;\n  set: FieldSetter;\n}\n\nexport type FieldDef = string | number | string[];\nexport type FieldKeyDef = string | number;\nexport type FieldFormat = FieldGetter | FieldAssessor;\n\nexport type FieldData = MaybePromiseOrUndefined;\n\nexport type WidthModeDef = 'standard' | 'adaptive' | 'autoWidth';\nexport type HeightModeDef = 'standard' | 'adaptive' | 'autoHeight';\nexport type WidthAdaptiveModeDef = 'only-body' | 'all';\nexport type HeightAdaptiveModeDef = 'only-body' | 'all';\nexport type ShowColumnRowType = 'column' | 'row' | 'none' | 'all';\n/** 单元格所处表格哪部分 */\nexport type CellLocation = 'body' | 'rowHeader' | 'columnHeader' | 'cornerHeader';\nexport type CellPivotRole = 'normal' | 'sub-total' | 'grand-total' | undefined;\nexport type CellSubLocation =\n  | 'body'\n  | 'rowHeader'\n  | 'columnHeader'\n  | 'cornerHeader'\n  | 'bottomFrozen'\n  | 'rightFrozen'\n  | 'rightTopCorner'\n  | 'leftBottomCorner'\n  | 'rightBottomCorner'\n  | 'rowSeriesNumber'\n  | 'colSeriesNumber';\n\nexport interface SelectAllOnCtrlAOption {\n  disableHeaderSelect?: boolean;\n  disableRowSeriesNumberSelect?: boolean;\n}\n\nexport interface TableKeyboardOptions {\n  /** tab键 默认为true。开启tab键移动选中单元格，如果当前是在编辑单元格 则移动到下一个单元格也是编辑状态 */\n  moveFocusCellOnTab?: boolean;\n  /** enter键 默认true 如果选中单元格按下enter键进入单元格编辑*/\n  editCellOnEnter?: boolean;\n  /** enter键 默认fasle 按下enter键选择下一个单元格。和editCellOnEnter互斥，同设置为true优先级高于editCellOnEnter */\n  moveFocusCellOnEnter?: boolean;\n  /** 默认不开启即false。开启这个配置的话，如果当前是在编辑中的单元格，方向键可以移动到下个单元格并进入编辑状态，而不是编辑文本内字符串的光标移动。上下左右方向键切换选中单元格不受该配置影响，*/\n  moveEditCellOnArrowKeys?: boolean;\n  /** 开启快捷键全选 默认：false */\n  selectAllOnCtrlA?: boolean | SelectAllOnCtrlAOption;\n  /** 快捷键复制  默认：false*/\n  copySelected?: boolean; //这个copy是和浏览器的快捷键一致的\n  /** 快捷键粘贴，默认：false 。粘贴内容到指定位置（即粘贴前要有选中的单元格）；支持批量粘贴；粘贴生效仅针对配置了编辑 editor 的单元格；*/\n  pasteValueToCell?: boolean; //paste是和浏览器的快捷键一致的\n  /** 方向键是否可以更改选中单元格位置，默认：true */\n  moveSelectedCellOnArrowKeys?: boolean;\n  /** 是否启用ctrl多选框 */\n  ctrlMultiSelect?: boolean;\n}\nexport interface TableEventOptions {\n  /** 是否阻止右键的默认行为， 默认为true。*/\n  preventDefaultContextMenu?: boolean;\n}\n\nexport interface IRowSeriesNumber {\n  width?: number | 'auto';\n  // align?: 'left' | 'right';\n  // span?: number | 'dependOnNear';\n  title?: string;\n  // field?: FieldDef;\n  format?: (col?: number, row?: number, table?: BaseTableAPI) => any;\n  cellType?: 'text' | 'link' | 'image' | 'video' | 'checkbox' | 'radio';\n  style?: ITextStyleOption | ((styleArg: StylePropertyFunctionArg) => ITextStyleOption);\n  headerStyle?: ITextStyleOption | ((styleArg: StylePropertyFunctionArg) => ITextStyleOption);\n  headerIcon?: string | ColumnIconOption | (string | ColumnIconOption)[];\n  icon?:\n    | string\n    | ColumnIconOption\n    | (string | ColumnIconOption)[]\n    | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);\n  // /** 选中整行或者全选时 是否包括序号部分 */\n  // selectRangeInclude?: boolean;\n  /** 是否可拖拽顺序 */\n  dragOrder?: boolean;\n  /** 是否禁止列宽调整 */\n  disableColumnResize?: boolean;\n\n  /** 是否开启树形结构复选框 */\n  enableTreeCheckbox?: boolean;\n  customLayout?: ICustomLayout;\n  headerCustomLayout?: ICustomLayout;\n}\n\nexport interface ColumnSeriesNumber {\n  enable: boolean;\n  align?: 'top' | 'bottom';\n  span?: number | 'dependOnNear';\n  title?: string;\n  field?: FieldDef;\n  format?: (col?: number, row?: number, table?: BaseTableAPI) => any;\n  cellType?: 'text' | 'link' | 'image' | 'video' | 'checkbox';\n  style?: ITextStyleOption | ((styleArg: StylePropertyFunctionArg) => ITextStyleOption);\n  headerStyle?: ITextStyleOption | ((styleArg: StylePropertyFunctionArg) => ITextStyleOption);\n  icon?:\n    | string\n    | ColumnIconOption\n    | (string | ColumnIconOption)[]\n    | ((args: CellInfo) => undefined | string | ColumnIconOption | (string | ColumnIconOption)[]);\n  /** 选中整行或者全选时 是否包括序号部分 */\n  selectRangeInclude?: boolean;\n  /** 是否可拖拽顺序 */\n  dragOrder?: boolean;\n  /** 是否显示调换顺序的图标 */\n  showDragOrderIcon?: boolean;\n}\nexport interface DataSourceAPI {\n  clearCurrentIndexedData: () => void;\n  length: number;\n  get: (index: number) => MaybePromiseOrUndefined;\n  getField: <F extends FieldDef>(index: number, field: F, col: number, row: number, table: BaseTableAPI) => FieldData;\n  hasField: (index: number, field: FieldDef) => boolean;\n  sort: (rules: Array<SortState>) => void;\n  clearSortedMap: () => void;\n  updatePagination: (pagination: IPagination) => void;\n  getIndexKey: (index: number) => number | number[];\n  /** 数据是否为树形结构 且可以展开收起 */\n  hierarchyExpandLevel: number;\n\n  getGroupLength?: () => number;\n}\n\nexport interface SortState {\n  /** 排序依据字段 */\n  field: FieldDef;\n  /** 排序规则 */\n  order: SortOrder;\n  orderFn?: (a: any, b: any, order: string) => -1 | 0 | 1;\n}\nexport interface PivotSortState {\n  col: number;\n  row: number;\n  order: SortType;\n}\n\n/**\n * 分页配置\n */\nexport interface IPagination {\n  /** 数据总条数 透视表中这个数据会自动加上 不需用户传入*/\n  totalCount?: number;\n  /** 每页显示数据条数  */\n  perPageCount: number;\n  /** 当前页码 */\n  currentPage?: number;\n}\nexport type HeaderValues = Map<any, any>;\nexport interface ListTableConstructorOptions extends BaseTableConstructorOptions {\n  /**\n   * 数据集合\n   */\n  records?: any[];\n  /**\n   * 传入用户实例化的数据对象\n   */\n  dataSource?: CachedDataSource | DataSource;\n  /**\n   * 是否显示表头\n   */\n  showHeader?: boolean;\n  /**\n   * Simple header property\n   */\n  columns?: ColumnsDefine; //请不要再这个上面修改配置,这里相当于是一个原始值备份，有一个内部专用的protectspace.columns\n  /**\n   *@deprecated 已废弃 请使用columns\n   */\n  header?: ColumnsDefine;\n\n  transpose?: boolean; //是否转置\n  /**\n   * 展示为tree的列 层级缩进值\n   */\n  hierarchyIndent?: number;\n  /** 展开层数 默认为1只显示根节点*/\n  hierarchyExpandLevel?: number;\n  /** 同层级的结点是否按文字对齐 如没有收起展开图标的节点和有图标的节点文字对齐 默认false */\n  hierarchyTextStartAlignment?: boolean;\n  /** 表头树形展示模式(设置成 'grid-tree' 则支持展开和折叠) */\n  headerHierarchyType?: 'grid-tree';\n  /** 表头默认展开层级(headerHierarchyType 为 'grid-tree' 时有效) */\n  headerExpandLevel?: number;\n  /** 分页配置 */\n  pagination?: IPagination;\n\n  /**\n   * 排序状态\n   */\n  sortState?: SortState | SortState[];\n  multipleSort?: boolean;\n\n  /** 全局设置表头编辑器 */\n  headerEditor?: string | IEditor | ((args: BaseCellInfo & { table: BaseTableAPI }) => string | IEditor);\n  /** 全局设置编辑器 */\n  editor?: string | IEditor | ((args: BaseCellInfo & { table: BaseTableAPI }) => string | IEditor);\n  /** 编辑触发时机 双击事件  单击事件 api手动开启编辑 或者 鼠标按下新值即可开启编辑。默认为双击'doubleclick' */\n  editCellTrigger?: 'doubleclick' | 'click' | 'api' | 'keydown' | ('doubleclick' | 'click' | 'api' | 'keydown')[];\n  /**\n   * @deprecated\n   * dragOrder.frozenColDragHeaderMode\n   */\n  frozenColDragHeaderMode?: 'disabled' | 'adjustFrozenCount' | 'fixedFrozenCount';\n\n  dragOrder?: BaseTableConstructorOptions['dragOrder'] & {\n    /** 拖拽表头移动位置 针对冻结部分的规则  默认为fixedFrozenCount\n     * \"disabled\"（禁止调整冻结列位置）：不允许其他列的表头移入冻结列，也不允许冻结列移出，冻结列保持不变。\n     * \"adjustFrozenCount\"（根据交互结果调整冻结数量）：允许其他列的表头移入冻结列，及冻结列移出，并根据拖拽的动作调整冻结列的数量。当其他列的表头被拖拽进入冻结列位置时，冻结列数量增加；当其他列的表头被拖拽移出冻结列位置时，冻结列数量减少。\n     * \"fixedFrozenCount\"（可调整冻结列，并维持冻结数量不变）：允许自由拖拽其他列的表头移入或移出冻结列位置，同时保持冻结列的数量不变。\n     */\n    frozenColDragHeaderMode?: 'disabled' | 'adjustFrozenCount' | 'fixedFrozenCount';\n  };\n  aggregation?:\n    | Aggregation\n    | CustomAggregation\n    | (Aggregation | CustomAggregation)[]\n    | ((args: {\n        col: number;\n        field: string;\n      }) => Aggregation | CustomAggregation | (Aggregation | CustomAggregation)[] | null);\n  /** 数据为空时显示聚合结果 */\n  showAggregationWhenEmpty?: boolean;\n  enableTreeNodeMerge?: boolean;\n  groupBy?: GroupByOption;\n  groupTitleCustomLayout?: ICustomLayout;\n  groupTitleFieldFormat?: (record: any, col?: number, row?: number, table?: BaseTableAPI) => string;\n  enableTreeStickCell?: boolean;\n\n  columnWidthConfig?: { key: string; width: number }[];\n}\n\nexport type GroupByOption = string | string[] | GroupConfig | GroupConfig[];\n\nexport type GroupConfig = {\n  key: string;\n  sort?: SortOrder;\n};\n\nexport interface ListTableAPI extends BaseTableAPI {\n  transpose: boolean;\n  options: ListTableConstructorOptions;\n  editorManager: EditManager;\n  sortState: SortState[] | SortState | null;\n  // /** 数据分析相关配置  */\n  // dataConfig?: IListTableDataConfig;\n  internalProps: ListTableProtected;\n  isListTable: () => true;\n  isPivotTable: () => false;\n  /** 设置单元格的value值，注意对应的是源数据的原始值，vtable实例records会做对应修改 */\n  changeCellValue: (col: number, row: number, value: string | number | null, workOnEditableCell?: boolean) => void;\n  /**\n   * 批量更新多个单元格的数据\n   * @param col 粘贴数据的起始列号\n   * @param row 粘贴数据的起始行号\n   * @param values 多个单元格的数据数组\n   * @param workOnEditableCell 是否仅更改可编辑单元格\n   */\n  changeCellValues: (col: number, row: number, values: (string | number)[][], workOnEditableCell?: boolean) => void;\n  getFieldData: (field: FieldDef | FieldFormat | undefined, col: number, row: number) => FieldData;\n  //#region 编辑器相关demo\n  /** 获取单元格配置的编辑器 */\n  getEditor: (col: number, row: number) => IEditor;\n  /**\n   * 开启单元格编辑\n   * @param col\n   * @param row\n   * @param value 如果想要改变显示到编辑框中的值 可以value来设置改变\n   * @returns\n   */\n  startEditCell: (col?: number, row?: number, value?: string | number) => void;\n  /** 结束编辑 */\n  completeEditCell: () => void;\n  //#endregion\n  addRecord: (record: any, recordIndex?: number) => void;\n  addRecords: (records: any[], recordIndex?: number) => void;\n  deleteRecords: (recordIndexs: number[]) => void;\n  updateRecords: (records: any[], recordIndexs: (number | number[])[]) => void;\n  updateFilterRules: (filterRules: FilterRules) => void;\n  getAggregateValuesByField: (field: string | number) => {\n    col: number;\n    aggregateValue: { aggregationType: AggregationType; value: number | string }[];\n  }[];\n  /**\n   * 根据数据的索引获取应该显示在body的第几行  参数和返回值的索引均从0开始\n   * @param  {number} index The record index.\n   */\n  getBodyRowIndexByRecordIndex: (index: number | number[]) => number;\n\n  _parseColumnWidthConfig: (columnWidthConfig: { key: string; width: number }[]) => void;\n  _hasHierarchyTreeHeader: () => boolean;\n}\nexport interface PivotTableConstructorOptions extends BaseTableConstructorOptions {\n  /**\n   * 数据集合\n   */\n  records?: any[];\n  /**\n   * @deprecated 请使用resize.columnResizeType\n   */\n  columnResizeType?: 'column' | 'indicator' | 'all' | 'indicatorGroup';\n  /**\n   * @deprecated 请使用resize.rowResizeType\n   */\n  rowResizeType?: 'row' | 'indicator' | 'all' | 'indicatorGroup';\n  /** 设置排序状态，只对应按钮展示效果 无数据排序逻辑 */\n  pivotSortState?: {\n    dimensions: IDimensionInfo[];\n    order: SortOrder;\n  }[];\n  columnWidthConfig?: {\n    dimensions: IDimensionInfo[];\n    width: number;\n  }[];\n  columnWidthConfigForRowHeader?: {\n    dimensions: IDimensionInfo[];\n    width: number;\n  }[];\n\n  //#region layout中挪到外层的属性\n  /**层级维度结构显示形式 */\n  rowHierarchyType?: 'grid' | 'tree' | 'grid-tree';\n  columnHierarchyType?: 'grid' | 'grid-tree';\n  /**展开层数 */\n  rowExpandLevel?: number;\n  /**展开层数 */\n  columnExpandLevel?: number;\n  /**子层级维度缩进距离 */\n  rowHierarchyIndent?: number;\n  /** 同层级的结点是否按文字对齐 如没有收起展开图标的节点和有图标的节点文字对齐 默认false */\n  rowHierarchyTextStartAlignment?: boolean;\n  /** 列表头维度结构 */\n  columnTree?: IHeaderTreeDefine[];\n  /** 行表头维度结构 */\n  rowTree?: IHeaderTreeDefine[];\n  /** 定义各个维度和各个指标的具体配置项和样式定义 rows 和 dimension 代替掉 */\n  // dimensions?: IDimension[];\n\n  /** 定义行上各个维度具体配置项和样式定义 */\n  rows?: (IRowDimension | string)[]; // (string | IDimension)[]; 后续支持数据分析的透视表 支持string配置\n  /** 定义列上各个维度具体配置项和样式定义 */\n  columns?: (IColumnDimension | string)[]; // (string | IDimension)[];\n  /** 定义指标具体配置项和样式定义 包含表头和body的定义*/\n  indicators?: (IIndicator | string)[]; // (string | IIndicator)[];\n\n  /** 指标以列展示 ———有数据分析的透视表才需要配置这个 */\n  indicatorsAsCol?: boolean;\n  /** 指标在具体维度展示的层级顺序，从0开始 ———有数据分析的透视表才需要配置这个 */\n  indicatorIndex?: number;\n  /** 是否隐藏指标名称 */\n  hideIndicatorName?: boolean; //\n  /** 指标维度key 注意非具体指标key 数据分析的透视表才需要配置这个 */\n  // indicatorDimensionKey?: string;\n  /** 角头单元格配置项和样式定义 */\n  corner?: ICornerDefine;\n  /**\n   * boolean 是否显示列维度值表头\n   */\n  showColumnHeader?: boolean;\n  /**\n   * boolean 是否显示行维度值表头\n   */\n  showRowHeader?: boolean;\n  /**\n   * 列表头增加一行来显示维度名称 可以自定义或者显示dimension.title组合名\n   */\n  columnHeaderTitle?: ITitleDefine;\n  /**\n   * 行表头的增加一列来显示维度名称 可以自定义或者显示dimension.title组合名\n   */\n  rowHeaderTitle?: ITitleDefine;\n  //#endregion\n  /** 数据分析相关配置 */\n  dataConfig?: IPivotTableDataConfig;\n\n  /** 指标标题 用于显示到角头的值*/\n  indicatorTitle?: string;\n  /** 分页配置 */\n  pagination?: IPagination;\n\n  extensionRows?: IExtensionRowDefine[];\n  editor?: string | IEditor | ((args: BaseCellInfo & { table: BaseTableAPI }) => string | IEditor);\n  /** 全局设置表头编辑器 */\n  headerEditor?: string | IEditor | ((args: BaseCellInfo & { table: BaseTableAPI }) => string | IEditor);\n\n  /** 编辑触发时机 双击事件  单击事件 api手动开启编辑 或者 鼠标按下新值即可开启编辑。默认为双击'doubleclick' */\n  editCellTrigger?: 'doubleclick' | 'click' | 'api' | 'keydown' | ('doubleclick' | 'click' | 'api' | 'keydown')[];\n  /** 是否需要补充指标节点到对应的自定义表头中如rowTree或者columnTree. 默认为true */\n  supplementIndicatorNodes?: boolean;\n  /** 如果配置了rowTree 或者 columnTree 且是非规则的树结构，即树的同一层存在不同维度的维度值时，为了去匹配对应的数据，需要开启该配置 */\n  parseCustomTreeToMatchRecords?: boolean;\n\n  resize?: {\n    /**\n     * 调整列宽的生效范围：'column' | 'indicator' | 'all' | 'indicatorGroup'，单列|按指标|所有列|属于同一维度值的多个指标\n     */\n    columnResizeType?: 'column' | 'indicator' | 'all' | 'indicatorGroup';\n    rowResizeType?: 'row' | 'indicator' | 'all' | 'indicatorGroup';\n  } & BaseTableConstructorOptions['resize'];\n}\nexport interface PivotChartConstructorOptions extends BaseTableConstructorOptions {\n  /**\n   * 数据集合, 平坦数据集合。另外一种特殊方式是传入分组后的数据，分组依据为指标\n   */\n  records?: any[] | Record<string, any[]>;\n  /**\n   * @deprecated 请使用resize.columnResizeType\n   */\n  columnResizeType?: 'column' | 'indicator' | 'all' | 'indicatorGroup';\n  /**\n   * @deprecated 请使用resize.rowResizeType\n   */\n  rowResizeType?: 'row' | 'indicator' | 'all' | 'indicatorGroup';\n  /** 列表头维度结构 */\n  columnTree?: IHeaderTreeDefine[];\n  /** 行表头维度结构 */\n  rowTree?: IHeaderTreeDefine[];\n  /** 定义各个维度和各个指标的具体配置项和样式定义 rows 和 dimension 代替掉 */\n  // dimensions?: IDimension[];\n\n  /** 定义行上各个维度具体配置项和样式定义 */\n  rows?: (IRowDimension | string)[]; // (string | IDimension)[]; 后续支持数据分析的透视表 支持string配置\n  /** 定义列上各个维度具体配置项和样式定义 */\n  columns?: (IColumnDimension | string)[]; // (string | IDimension)[];\n  /** 定义指标具体配置项和样式定义 包含表头和body的定义*/\n  indicators?: (IChartIndicator | string)[]; // (string | IIndicator)[];\n\n  /** 指标以列展示 ———有数据分析的透视表才需要配置这个 */\n  indicatorsAsCol?: boolean;\n  /** 是否隐藏指标名称 */\n  hideIndicatorName?: boolean; //\n  /** 角头单元格配置项和样式定义 */\n  corner?: ICornerDefine;\n  /**\n   * boolean 是否显示列维度值表头\n   */\n  showColumnHeader?: boolean;\n  /**\n   * boolean 是否显示行维度值表头\n   */\n  showRowHeader?: boolean;\n  /**\n   * 列表头增加一行来显示维度名称 可以自定义或者显示dimension.title组合名\n   */\n  columnHeaderTitle?: ITitleDefine;\n  /**\n   * 行表头的增加一列来显示维度名称 可以自定义或者显示dimension.title组合名\n   */\n  rowHeaderTitle?: ITitleDefine;\n  /** 指标标题 用于显示到角头的值*/\n  indicatorTitle?: string;\n\n  axes?: ITableAxisOption[];\n\n  resize?: {\n    /**\n     * 调整列宽的生效范围：'column' | 'indicator' | 'all' | 'indicatorGroup'，单列|按指标|所有列|属于同一维度值的多个指标\n     */\n    columnResizeType?: 'column' | 'indicator' | 'all' | 'indicatorGroup';\n    rowResizeType?: 'row' | 'indicator' | 'all' | 'indicatorGroup';\n  } & BaseTableConstructorOptions['resize'];\n}\nexport interface PivotTableAPI extends BaseTableAPI {\n  internalProps: PivotTableProtected;\n  records?: any;\n  options: PivotTableConstructorOptions;\n  editorManager: EditManager;\n  // internalProps: PivotTableProtected;\n  pivotSortState: {\n    dimensions: IDimensionInfo[];\n    order: SortOrder;\n  }[];\n  isListTable: () => false;\n  isPivotTable: () => true;\n  getPivotSortState: (col: number, row: number) => SortOrder;\n  toggleHierarchyState: (col: number, row: number) => void;\n  /** 设置单元格的value值，注意对应的是源数据的原始值，vtable实例records会做对应修改 */\n  changeCellValue: (col: number, row: number, value: string | number | null, workOnEditableCell: boolean) => void;\n  /**\n   * 批量更新多个单元格的数据\n   * @param col 粘贴数据的起始列号\n   * @param row 粘贴数据的起始行号\n   * @param values 多个单元格的数据数组\n   */\n  changeCellValues: (col: number, row: number, values: (string | number)[][], workOnEditableCell: boolean) => void;\n  _parseColumnWidthConfig: (columnWidthConfig: { dimensions: IDimensionInfo[]; width: string | number }[]) => void;\n  _parseColumnWidthConfigForRowHeader: (\n    columnWidthConfig: { dimensions: IDimensionInfo[]; width: string | number }[]\n  ) => void;\n}\nexport interface PivotChartAPI extends BaseTableAPI {\n  records?: any | Record<string, any[]>;\n  options: PivotChartConstructorOptions;\n  // internalProps: PivotTableProtected;\n  isListTable: () => false;\n  isPivotTable: () => true;\n}\nexport type SetPasteValueTestData = CellAddress & {\n  table: BaseTableAPI;\n  record: any;\n  value: string;\n\n  oldValue: any;\n};\n\nexport interface InlineAPI {\n  width: (arg: { ctx: CanvasRenderingContext2D }) => number;\n  font: () => string | null;\n  color: () => string | null;\n  canDraw: () => boolean;\n  onReady: (callback: Function) => void;\n\n  draw: (opt: any) => void;\n  canBreak: () => boolean;\n}\n\nexport interface CellContext {\n  readonly col: number;\n  readonly row: number;\n  /**format之后的值 */\n  readonly value: FieldData;\n  /**原始值 */\n  readonly dataValue: FieldData;\n  showIcon?: SvgIcon;\n  getContext: () => CanvasRenderingContext2D;\n  toCurrentContext: () => CellContext;\n  getDrawRect: () => RectProps | null;\n  getRect: () => RectProps;\n  setRectFilter: (rectFilter: (base: RectProps) => RectProps) => void;\n  updateRect: (rect: Rect | RectProps) => void;\n  updateDrawRect: (rect: Rect | RectProps) => void;\n}\n\nexport enum Placement {\n  top = 'top',\n  bottom = 'bottom',\n  left = 'left',\n  right = 'right'\n}\n\nexport enum HierarchyState {\n  expand = 'expand',\n  collapse = 'collapse',\n  none = 'none',\n  loading = 'loading'\n}\nexport type IHeaderTreeDefine = Either<IDimensionHeaderNode, IIndicatorHeaderNode>;\nexport interface IIndicatorHeaderNode {\n  /**\n   * 指标的key值 对应数据集的字段名\n   */\n  indicatorKey: string | number;\n  /**\n   * 指标名称 如：“销售额”，“例如”， 对应到单元格显示的值。可不填，不填的话 从indicators的对应配置中取值显示\n   */\n  value?: string;\n  /** 维度成员下的子维度树结构 */\n  children?: IHeaderTreeDefine[] | null;\n  //跨单元格合并显示该维度值，默认是1。如果表头层数最大是5，那么最末级剩下多大就合并多大层数的单元格\n  levelSpan?: number;\n  /** 隐藏该指标。 但内部聚合逻辑是正常执行的 */\n  hide?: boolean;\n}\nexport interface IDimensionHeaderNode {\n  /**\n   * 维度的唯一标识，对应数据集的字段名称\n   */\n  dimensionKey: string | number;\n  /** 维度成员值 */\n  value: string;\n  /** 维度成员下的子维度树结构 */\n  children?: IHeaderTreeDefine[] | true;\n  /** 折叠状态 TODO */\n  hierarchyState?: HierarchyState;\n  /** 是否为虚拟节点 在基于records数据做分析时忽略该维度字段 */\n  virtual?: boolean;\n  /** 跨单元格合并显示该维度值，默认是1。如果表头层数最大是5，那么最末级剩下多大就合并多大层数的单元格 */\n  levelSpan?: number;\n}\n\nexport interface IExtensionRowDefine {\n  rows: (IRowDimension | string)[];\n  rowTree: IHeaderTreeDefine[] | ((args: { dimensionKey: string | number; value: string }[]) => IHeaderTreeDefine[]);\n}\n\nexport type StickCell = { col: number; row: number; dx: number; dy: number };\n\nexport type CustomMergeCell = CustomMergeCellFunc | CustomMergeCellArray;\n\nexport type CustomMergeCellFunc = (col: number, row: number, table: BaseTableAPI) => undefined | CustomMerge;\nexport type CustomMergeCellArray = CustomMerge[];\nexport type CustomMerge = {\n  range: CellRange;\n  text?: string;\n  style?: ITextStyleOption;\n  customLayout?: ICustomLayout;\n  customRender?: ICustomRender;\n};\n\nexport type ColumnInfo = { col: number; left: number; right: number; width: number };\nexport type RowInfo = { row: number; top: number; bottom: number; height: number };\n"]}