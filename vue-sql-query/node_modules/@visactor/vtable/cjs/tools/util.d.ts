import type { SortOrder } from '../ts-types';
export declare const judgeType: (value: any) => "function" | "string" | "object" | "array" | "number" | "regExp" | "boolean" | "symbol" | "date" | "undefined" | "null" | "error" | "document" | "global";
export declare const isIt: (v: any, type: string) => boolean;
export declare const isObject: (v: any) => boolean;
export declare const isFunction: (v: any) => boolean;
export declare const isArray: (v: any) => boolean;
export declare const isString: (v: any) => boolean;
export declare const isNumber: (v: any) => boolean;
export declare const isRegExp: (v: any) => boolean;
export declare const isBoolean: (v: any) => boolean;
export declare const isSymbol: (v: any) => boolean;
export declare const isDate: (v: any) => boolean;
export declare const isUndefined: (v: any) => boolean;
export declare const isNull: (v: any) => boolean;
export declare const isError: (v: any) => boolean;
export declare const isDocument: (v: any) => boolean;
export declare const isGlobal: (v: any) => boolean;
export declare function merge(target: any, ...sources: any[]): any;
export declare function ingoreNoneValueMerge(target: any, ...sources: any[]): any;
export declare function convertInternal(value: unknown): string;
export declare function transpose(matrix: Array<Array<any>>): any[];
export declare function debounce(fn: Function, delay: number, immediate?: boolean): (this: any, ...args: any[]) => any;
export declare function throttle(func: Function, delay: number): (this: any, ...args: any[]) => void;
export declare function throttle2(func: Function, delay: number): (this: any, ...args: any[]) => void;
export declare function changeColor(color: string, ratio: number, isDarker: boolean): string;
export declare function toFixed(n: number, fixed?: number): number;
export declare function validToString(v: any): any;
export declare function isMobile(): RegExpMatchArray;
export declare function defaultOrderFn(v1: any, v2: any, order: SortOrder): -1 | 0 | 1;
export declare function getValueByPath(obj: any, paths: string[]): any;
export declare function inBound({ x, y }: {
    x: number;
    y: number;
}, { left, top, width, height }: {
    left: number;
    top: number;
    width: number;
    height: number;
}): boolean;
export declare const isArrEqual: (arr1: Array<any>, arr2: Array<any>) => boolean;
export declare function hashCode(input: string): string;
export declare function toBoolean(val: unknown): boolean;
export declare function isAllDigits(str: string): boolean;
export declare function deduplication(array: number[]): number[];
export declare function isDivSelected(div: HTMLDivElement): boolean;
export declare function traverseObject(obj: any, childrenProperty: string, callback: Function): void;
