{"version":3,"sources":["../src/tools/get-data-path/create-dataset.ts"],"names":[],"mappings":"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","file":"create-dataset.js","sourcesContent":["import { Dataset } from '../../dataset/dataset';\nimport { supplementIndicatorNodesForCustomTree } from '../../layout/layout-helper';\nimport type { ITreeLayoutHeadNode } from '../../layout/tree-helper';\nimport { DimensionTree } from '../../layout/tree-helper';\nimport type {\n  AggregationRule,\n  AggregationRules,\n  CollectValueBy,\n  IIndicator,\n  PivotChartConstructorOptions,\n  IPivotChartDataConfig\n} from '../../ts-types';\nimport { AggregationType } from '../../ts-types';\nimport type { IChartColumnIndicator } from '../../ts-types/pivot-table/indicator/chart-indicator';\n\nexport function createDataset(options: PivotChartConstructorOptions) {\n  const layoutNodeId = { seqId: 0 };\n  const dataConfig: IPivotChartDataConfig = { isPivotChart: true };\n  let columnDimensionTree;\n  let rowDimensionTree;\n  let columnTree;\n  let rowTree;\n  if (options.columnTree) {\n    if (options.indicatorsAsCol !== false) {\n      columnTree = supplementIndicatorNodesForCustomTree(options.columnTree, options.indicators);\n    }\n    columnDimensionTree = new DimensionTree((options.columnTree as ITreeLayoutHeadNode[]) ?? [], layoutNodeId);\n  }\n  if (options.rowTree) {\n    if (options.indicatorsAsCol === false) {\n      rowTree = supplementIndicatorNodesForCustomTree(options.rowTree, options.indicators);\n    }\n    rowDimensionTree = new DimensionTree((options.rowTree as ITreeLayoutHeadNode[]) ?? [], layoutNodeId);\n  }\n  const rowKeys = rowDimensionTree.dimensionKeys?.count\n    ? rowDimensionTree.dimensionKeys.valueArr()\n    : options.rows?.reduce((keys, rowObj) => {\n        if (typeof rowObj === 'string') {\n          keys.push(rowObj);\n        } else {\n          keys.push(rowObj.dimensionKey);\n        }\n        return keys;\n      }, []) ?? [];\n  const columnKeys = columnDimensionTree.dimensionKeys?.count\n    ? columnDimensionTree.dimensionKeys.valueArr()\n    : options.columns?.reduce((keys, columnObj) => {\n        if (typeof columnObj === 'string') {\n          keys.push(columnObj);\n        } else {\n          keys.push(columnObj.dimensionKey);\n        }\n        return keys;\n      }, []) ?? [];\n  const indicatorKeys =\n    options.indicators?.reduce((keys, indicatorObj) => {\n      if (typeof indicatorObj === 'string') {\n        keys.push(indicatorObj);\n      } else {\n        keys.push(indicatorObj.indicatorKey);\n      }\n      return keys;\n    }, []) ?? [];\n\n  dataConfig.collectValuesBy = _generateCollectValuesConfig(options, columnKeys, rowKeys);\n  dataConfig.aggregationRules = _generateAggregationRules(options);\n\n  const dataset = new Dataset(\n    dataConfig,\n    // null,\n    rowKeys,\n    columnKeys,\n    indicatorKeys,\n    options.indicators,\n    options.indicatorsAsCol ?? true,\n    options.records,\n    undefined,\n    undefined,\n    columnTree || options.columnTree,\n    rowTree || options.rowTree,\n    true\n  );\n\n  return { dataset, columnDimensionTree, rowDimensionTree, layoutNodeId };\n}\n\nfunction _generateCollectValuesConfig(\n  option: PivotChartConstructorOptions,\n  columnKeys: string[],\n  rowKeys: string[]\n): Record<string, CollectValueBy> {\n  const collectValuesBy: Record<string, CollectValueBy> = {};\n\n  for (let i = 0, len = option.indicators?.length; i < len; i++) {\n    if (typeof option.indicators[i] !== 'string' && (option.indicators[i] as IChartColumnIndicator).chartSpec) {\n      if (option.indicatorsAsCol === false) {\n        const indicatorDefine = option.indicators[i] as IIndicator;\n        // 收集指标值的范围\n        collectValuesBy[indicatorDefine.indicatorKey] = {\n          by: rowKeys,\n          range: true,\n          // 判断是否需要匹配维度值相同的进行求和计算\n          sumBy:\n            (indicatorDefine as IChartColumnIndicator).chartSpec?.stack !== false &&\n            columnKeys.concat((indicatorDefine as IChartColumnIndicator).chartSpec?.xField)\n        };\n        if ((indicatorDefine as IChartColumnIndicator).chartSpec.series) {\n          (indicatorDefine as IChartColumnIndicator).chartSpec.series.forEach((chartSeries: any) => {\n            const xField = typeof chartSeries.xField === 'string' ? chartSeries.xField : chartSeries.xField[0];\n            collectValuesBy[xField] = {\n              by: columnKeys,\n              type: chartSeries.direction !== 'horizontal' ? 'xField' : undefined,\n              range: chartSeries.direction === 'horizontal',\n              sortBy:\n                chartSeries.direction !== 'horizontal'\n                  ? chartSeries?.data?.fields?.[xField]?.domain ??\n                    (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[xField]?.domain\n                  : undefined\n            };\n\n            const yField = chartSeries.yField;\n            collectValuesBy[yField] = {\n              by: rowKeys,\n              range: chartSeries.direction !== 'horizontal', // direction默认为'vertical'\n              sumBy: chartSeries.stack !== false && columnKeys.concat(chartSeries?.xField), // 逻辑严谨的话 这个concat的值也需要结合 chartSeries.direction来判断是xField还是yField\n              sortBy:\n                chartSeries.direction === 'horizontal'\n                  ? chartSeries?.data?.fields?.[yField]?.domain ??\n                    (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[yField]?.domain\n                  : undefined\n            };\n          });\n        } else {\n          const xField =\n            typeof (indicatorDefine as IChartColumnIndicator).chartSpec.xField === 'string'\n              ? (indicatorDefine as IChartColumnIndicator).chartSpec.xField\n              : (indicatorDefine as IChartColumnIndicator).chartSpec.xField[0];\n          collectValuesBy[xField] = {\n            by: columnKeys,\n            type:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.direction !== 'horizontal' ? 'xField' : undefined,\n            range: (indicatorDefine as IChartColumnIndicator).chartSpec.direction === 'horizontal',\n            sortBy:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.direction !== 'horizontal'\n                ? (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[xField]?.domain\n                : undefined\n          };\n          //下面这个收集的值 应该是和收集的 collectValuesBy[indicatorDefine.indicatorKey] 相同\n          const yField = (indicatorDefine as IChartColumnIndicator).chartSpec.yField;\n          collectValuesBy[yField] = {\n            by: rowKeys,\n            range: (option.indicators[i] as IChartColumnIndicator).chartSpec.direction !== 'horizontal', // direction默认为'vertical'\n            sumBy:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.stack !== false &&\n              columnKeys.concat((indicatorDefine as IChartColumnIndicator).chartSpec?.xField), // 逻辑严谨的话 这个concat的值也需要结合 chartSeries.direction来判断是xField还是yField\n            sortBy:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.direction === 'horizontal'\n                ? (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[yField]?.domain\n                : undefined\n          };\n        }\n      } else {\n        const indicatorDefine = option.indicators[i] as IIndicator;\n        // 收集指标值的范围\n        collectValuesBy[indicatorDefine.indicatorKey] = {\n          by: columnKeys,\n          range: true,\n          // 判断是否需要匹配维度值相同的进行求和计算\n          sumBy:\n            (indicatorDefine as IChartColumnIndicator).chartSpec?.stack !== false &&\n            rowKeys.concat((indicatorDefine as IChartColumnIndicator).chartSpec?.yField)\n        };\n        if ((indicatorDefine as IChartColumnIndicator).chartSpec.series) {\n          (indicatorDefine as IChartColumnIndicator).chartSpec.series.forEach((chartSeries: any) => {\n            const yField = typeof chartSeries.yField === 'string' ? chartSeries.yField : chartSeries.yField[0];\n            collectValuesBy[yField] = {\n              by: rowKeys,\n              type: chartSeries.direction === 'horizontal' ? 'yField' : undefined,\n              range: chartSeries.direction !== 'horizontal',\n              sortBy:\n                chartSeries.direction === 'horizontal'\n                  ? chartSeries?.data?.fields?.[yField]?.domain ??\n                    (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[yField]?.domain\n                  : undefined\n            };\n\n            const xField = chartSeries.xField;\n            collectValuesBy[xField] = {\n              by: columnKeys,\n              range: chartSeries.direction === 'horizontal', // direction默认为'vertical'\n              sumBy: chartSeries.stack !== false && rowKeys.concat(chartSeries?.yField),\n              sortBy:\n                chartSeries.direction !== 'horizontal'\n                  ? chartSeries?.data?.fields?.[xField]?.domain ??\n                    (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[xField]?.domain\n                  : undefined\n            };\n          });\n        } else {\n          const yField =\n            typeof (indicatorDefine as IChartColumnIndicator).chartSpec.yField === 'string'\n              ? (indicatorDefine as IChartColumnIndicator).chartSpec.yField\n              : (indicatorDefine as IChartColumnIndicator).chartSpec.yField[0];\n          collectValuesBy[yField] = {\n            by: rowKeys,\n            type:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.direction === 'horizontal' ? 'yField' : undefined,\n            range: (indicatorDefine as IChartColumnIndicator).chartSpec.direction !== 'horizontal',\n            sortBy:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.direction === 'horizontal'\n                ? (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[yField]?.domain\n                : undefined\n          };\n          //下面这个收集的值 应该是和收集的 collectValuesBy[indicatorDefine.indicatorKey] 相同\n          const xField = (indicatorDefine as IChartColumnIndicator).chartSpec.xField;\n          collectValuesBy[xField] = {\n            by: columnKeys,\n            range: (option.indicators[i] as IChartColumnIndicator).chartSpec.direction === 'horizontal', // direction默认为'vertical'\n            sumBy:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.stack !== false &&\n              rowKeys.concat((indicatorDefine as IChartColumnIndicator).chartSpec?.yField),\n            sortBy:\n              (indicatorDefine as IChartColumnIndicator).chartSpec.direction !== 'horizontal'\n                ? (indicatorDefine as IChartColumnIndicator).chartSpec?.data?.fields?.[xField]?.domain\n                : undefined\n          };\n        }\n      }\n    }\n  }\n\n  return collectValuesBy;\n}\n\nfunction _generateAggregationRules(options: PivotChartConstructorOptions) {\n  const aggregationRules: AggregationRules = [];\n  // indicatorFromChartSpec = true;\n  options.indicators?.forEach((indicator: IIndicator | string) => {\n    if (typeof indicator === 'string') {\n      aggregationRules.push({\n        indicatorKey: indicator, //field转为指标key\n        field: indicator, //指标依据字段\n        aggregationType: AggregationType.RECORD //计算类型\n      } as AggregationRule<AggregationType.RECORD>);\n    } else {\n      if ((indicator as IChartColumnIndicator).chartSpec?.series) {\n        // 如果chartSpec配置了组合图 series 则需要考虑 series中存在的多个指标\n        const fields: string[] = [];\n        (indicator as IChartColumnIndicator).chartSpec?.series.forEach((seriesSpec: any) => {\n          const seriesField = options.indicatorsAsCol === false ? seriesSpec.yField : seriesSpec.xField;\n          if (fields.indexOf(seriesField) === -1) {\n            fields.push(seriesField);\n          }\n        });\n        aggregationRules.push({\n          indicatorKey: indicator.indicatorKey, //field转为指标key\n          field: fields, //指标依据字段\n          aggregationType: AggregationType.RECORD //计算类型\n        });\n      } else {\n        const field =\n          options.indicatorsAsCol === false\n            ? (indicator as IChartColumnIndicator).chartSpec.yField\n            : (indicator as IChartColumnIndicator).chartSpec.xField;\n        aggregationRules.push({\n          indicatorKey: indicator.indicatorKey, //field转为指标key\n          field: field ?? indicator.indicatorKey, //指标依据字段\n          aggregationType: AggregationType.RECORD //计算类型\n        });\n      }\n    }\n  });\n\n  return aggregationRules;\n}\n"]}