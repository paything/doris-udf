{"version":3,"sources":["../src/tools/Rect.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAG1C,MAAa,IAAI;IAEf,YAAY,IAAY,EAAE,GAAW,EAAE,KAAa,EAAE,MAAc;QAClE,IAAI,CAAC,MAAM,GAAG,IAAI,eAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,GAAG,KAAK,EAAE,GAAG,GAAG,MAAM,CAAC,CAAC;IACzD,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,IAAY,EAAE,GAAW,EAAE,KAAa,EAAE,MAAc;QACpE,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IACxB,CAAC;IACD,IAAI,IAAI,CAAC,IAAY;QACnB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC;IACxB,CAAC;IACD,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IACxB,CAAC;IACD,IAAI,GAAG,CAAC,GAAW;QACjB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC;IACvB,CAAC;IACD,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IACxB,CAAC;IACD,IAAI,KAAK,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC;IACzB,CAAC;IACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IACxB,CAAC;IACD,IAAI,MAAM,CAAC,MAAc;QACvB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC;IAC1B,CAAC;IACD,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IACD,IAAI,KAAK,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC;IAC1C,CAAC;IACD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IAC9B,CAAC;IACD,IAAI,MAAM,CAAC,MAAc;QACvB,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC;IAC3C,CAAC;IAED,UAAU,CAAC,MAAc;QACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC;IACD,SAAS,CAAC,MAAc;QACtB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACnC,CAAC;IACD,IAAI;QACF,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;IACD,QAAQ,CAAC,OAAa;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IACD,OAAO,CAAC,CAAS,EAAE,CAAS;QAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC;CACF;AA/DD,oBA+DC","file":"Rect.js","sourcesContent":["import { Bounds } from '@visactor/vutils';\nimport type { RectProps } from '../ts-types';\n\nexport class Rect implements RectProps {\n  bounds: Bounds;\n  constructor(left: number, top: number, width: number, height: number) {\n    this.bounds = new Bounds();\n    this.bounds.set(left, top, left + width, top + height);\n  }\n\n  static bounds(left: number, top: number, right: number, bottom: number): Rect {\n    return new Rect(left, top, Math.round(right - left), Math.round(bottom - top));\n  }\n\n  get left(): number {\n    return this.bounds.x1;\n  }\n  set left(left: number) {\n    this.bounds.x1 = left;\n  }\n  get top(): number {\n    return this.bounds.y1;\n  }\n  set top(top: number) {\n    this.bounds.y1 = top;\n  }\n  get right(): number {\n    return this.bounds.x2;\n  }\n  set right(right: number) {\n    this.bounds.x2 = right;\n  }\n  get bottom(): number {\n    return this.bounds.y2;\n  }\n  set bottom(bottom: number) {\n    this.bounds.y2 = bottom;\n  }\n  get width(): number {\n    return this.bounds.width();\n  }\n  set width(width: number) {\n    this.bounds.x2 = this.bounds.x1 + width;\n  }\n  get height(): number {\n    return this.bounds.height();\n  }\n  set height(height: number) {\n    this.bounds.y2 = this.bounds.y1 + height;\n  }\n\n  offsetLeft(offset: number): void {\n    this.bounds.translate(offset, 0);\n  }\n  offsetTop(offset: number): void {\n    this.bounds.translate(0, offset);\n  }\n  copy(): Rect {\n    return new Rect(this.left, this.top, this.width, this.height);\n  }\n  contains(another: Rect): boolean {\n    return this.bounds.encloses(another.bounds);\n  }\n  inPoint(x: number, y: number): boolean {\n    return this.bounds.contains(x, y);\n  }\n}\n"]}