{"version":3,"sources":["../src/tools/calc.ts"],"names":[],"mappings":";;;AAMA,6CAA6D;AAC7D,qCAAiC;AAEjC,MAAM,UAAU,GAAG,CAAC,CAAC;AACrB,MAAM,SAAS,GAAG,CAAC,CAAC;AACpB,MAAM,aAAa,GAAG,CAAC,CAAC;AACxB,MAAM,WAAW,GAAG,CAAC,CAAC;AAEtB,MAAM,cAAc,GAAG,EAAE,CAAC;AAC1B,MAAM,2BAA2B,GAAG,EAAE,CAAC;AACvC,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAsC5B,MAAM,UAAU,GAAG,IAAI,CAAC;AACxB,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,KAAK,GAAG,IAAI,CAAC;AACnB,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,OAAO,GAAG,IAAI,CAAC;AACrB,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,MAAM,eAAe,GAAG,IAAI,CAAC;AAC7B,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,SAAS,aAAa,CAAC,EAAU;IAC/B,OAAO,EAAE,IAAI,eAAe,IAAI,EAAE,IAAI,eAAe,CAAC;AACxD,CAAC;AACD,SAAS,aAAa,CAAC,EAAU;IAC/B,OAAO,EAAE,IAAI,aAAa,IAAI,EAAE,IAAI,aAAa,CAAC;AACpD,CAAC;AACD,SAAS,QAAQ,CAAC,EAAU;IAC1B,OAAO,aAAa,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC;AAChD,CAAC;AACD,SAAS,YAAY,CAAC,EAAU;IAC9B,OAAO,EAAE,KAAK,UAAU,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,SAAS,IAAI,EAAE,KAAK,eAAe,IAAI,EAAE,KAAK,KAAK,CAAC;AAC7G,CAAC;AACD,SAAS,OAAO,CAAC,EAAU;IACzB,OAAO,EAAE,IAAI,OAAO,IAAI,EAAE,IAAI,OAAO,CAAC;AACxC,CAAC;AACD,SAAS,KAAK,CAAC,EAAU;IACvB,OAAO,EAAE,KAAK,SAAS,CAAC;AAC1B,CAAC;AACD,SAAS,MAAM,CAAC,EAAU;IACxB,OAAO,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,OAAO,CAAC;AACxC,CAAC;AAED,SAAS,WAAW,CAAC,IAAY;IAC/B,OAAO,IAAI,KAAK,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAC;AAChD,CAAC;AAQD,SAAS,QAAQ,CAAC,IAAY;IAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAEhD,MAAM,MAAM,GAAY,EAAE,CAAC;IAC3B,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;IACvB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;QACxC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;YAC1B,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;SAC7C;aAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;SAChD;aAAM,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;YACjC,KAAK,GAAG,SAAS,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;SACrC;aAAM,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;YACnC,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;SACpC;aAAM,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;SAE5B;aAAM;YACL,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;SACzB;KACF;IAED,SAAS,SAAS,CAAC,IAAe,EAAE,KAAa;QAC/C,IAAI,KAAK,GAAG,GAAG,EAAE;YACf,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,OAAO,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,EAAE;gBAC5B,OAAO,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aACtC;SACF;QACD,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;QAClD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,SAAS,QAAQ,CAAC,GAAW,EAAE,KAAa;QAC1C,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,OAAO,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;YAC3B,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,OAAO,CAAC,EAAE,CAAC,EAAE;gBACf,GAAG,IAAI,CAAC,CAAC;aACV;iBAAM,IAAI,CAAC,KAAK,GAAG,EAAE;gBACpB,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;oBACzB,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;iBACzB;gBACD,GAAG,IAAI,CAAC,CAAC;aACV;iBAAM,IAAI,MAAM,CAAC,EAAE,CAAC,EAAE;gBACrB,OAAO,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;aACrC;iBAAM;gBACL,MAAM;aACP;SACF;QACD,IAAI,GAAG,KAAK,GAAG,EAAE;YACf,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;SACzB;QACD,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;QAC3D,OAAO,KAAK,CAAC;IACf,CAAC;IACD,SAAS,SAAS,CAAC,GAAW,EAAE,IAAY,EAAE,KAAa;QACzD,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,OAAO,KAAK,GAAG,GAAG,EAAE,KAAK,EAAE,EAAE;YAC3B,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;YACrB,MAAM,EAAE,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,MAAM,CAAC,EAAE,CAAC,EAAE;gBACd,IAAI,IAAI,CAAC,CAAC;aACX;iBAAM;gBACL,MAAM;aACP;SACF;QACD,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAC/D,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,GAAG;IACjB,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,CAAC;CACP,CAAC;AAEF,SAAS,GAAG,CAAC,MAAe,EAAE,IAAY;IACxC,SAAS,kBAAkB,CAAC,KAAyB;QACnD,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,EAAU,CAAC;QAClC,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,EAAa,CAAC;QAClC,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,EAAU,CAAC;QAEjC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,aAAa,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC5F,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;SACzB;QACD,OAAO;YACL,QAAQ,EAAE,2BAA2B;YACrC,IAAI;YACJ,EAAE;YACF,KAAK;SACN,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,GAAuB,EAAE,CAAC;IAErC,OAAO,MAAM,CAAC,MAAM,EAAE;QACpB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,EAAW,CAAC;QACtC,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,EAAE;YACpD,IAAI,IAAI,GAAG,CAAC,CAAC;YACb,MAAM,UAAU,GAAG,cAAK,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE;gBAC7C,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,CAAC,KAAK,KAAK,GAAG,EAAE;oBAC5C,IAAI,EAAE,CAAC;iBACR;qBAAM,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,CAAC,KAAK,KAAK,GAAG,EAAE;oBACnD,IAAI,CAAC,IAAI,EAAE;wBACT,OAAO,IAAI,CAAC;qBACb;oBACD,IAAI,EAAE,CAAC;iBACR;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;YACH,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;gBACrB,MAAM,WAAW,CAAC,IAAI,CAAC,CAAC;aACzB;YAED,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,UAAU,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,KAAK,EAAE,CAAC;SAChB;aAAM,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE;YACvC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;gBACrB,MAAM,QAAQ,GAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAa,CAAC,KAAK,CAAC;gBAC5D,IAAI,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE;oBACnD,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;iBACvC;aACF;YACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACnB;aAAM,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;YACnC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;YACnC,KAAK,CAAC,IAAI,CAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,KAAK,EAAE,GAAG;gBACV,IAAI;aACL,CAAC,CAAC;SACJ;aAAM,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;YACrC,KAAK,CAAC,IAAI,CAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,KAAK,EAAE,KAAK,CAAC,KAAK;aACnB,CAAC,CAAC;SACJ;KACF;IACD,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;KACvC;IACD,OAAO,KAAK,CAAC,CAAC,CAAS,CAAC;AAC1B,CAAC;AAED,SAAS,KAAK,CAAC,OAAe;IAC5B,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;IACjC,OAAO,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AAC9B,CAAC;AAED,SAAS,QAAQ,CAAC,IAAU,EAAE,OAAoB;IAChD,IAAI,IAAI,CAAC,QAAQ,KAAK,2BAA2B,EAAE;QACjD,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAE5C,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE;YACrB,KAAK,GAAG;gBACN,OAAO,IAAI,GAAG,KAAK,CAAC;YACtB,KAAK,GAAG;gBACN,OAAO,IAAI,GAAG,KAAK,CAAC;YACtB,KAAK,GAAG;gBACN,OAAO,IAAI,GAAG,KAAK,CAAC;YACtB,KAAK,GAAG;gBACN,OAAO,IAAI,GAAG,KAAK,CAAC;YACtB;gBAEE,MAAM,IAAI,KAAK,CAAC,iCAAiC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;SACrE;KACF;SAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,cAAc,EAAE;QAC3C,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,GAAG;gBACN,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;YAG3C,KAAK,IAAI;gBACP,OAAO,IAAI,CAAC,KAAK,CAAC;YACpB;gBACE,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SAC7D;KACF;SAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,gBAAgB,EAAE;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;IACD,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;AACjC,CAAC;AAED,SAAS,YAAY,CAAC,KAAa,EAAE,OAAoB;IACvD,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IACzB,OAAO,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAChC,CAAC;AAOD,SAAgB,IAAI,CAAC,KAAsB,EAAE,OAAoB;IAC/D,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;KAC5C;IACD,OAAO,KAAK,GAAG,CAAC,CAAC;AACnB,CAAC;AALD,oBAKC;AAID,SAAgB,kBAAkB,CAAC,CAAM;IACvC,IAAI,IAAA,cAAK,EAAC,CAAC,CAAC,EAAE;QACZ,OAAO,KAAK,CAAC;KACd;IACD,IAAI,IAAA,iBAAQ,EAAC,CAAC,CAAC,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACnB,CAAC;AATD,gDASC;AAED,SAAgB,SAAS,CAAC,CAAM;IAC9B,IAAI,CAAC,IAAA,iBAAQ,EAAC,CAAC,CAAC,EAAE;QAChB,OAAO,KAAK,CAAC;KACd;IACD,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACpB,OAAO,KAAK,CAAC;KACd;IACD,OAAO,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;AARD,8BAQC","file":"calc.js","sourcesContent":["/* Adapted from cheetah-grid by yosuke ota\n *url:https://github.com/future-architect/cheetah-grid/blob/master/packages/cheetah-grid/src/js/internal/calc.ts\n *License: https://github.com/future-architect/cheetah-grid/blob/master/LICENSE\n * @license\n */\n\nimport { isNil, isNumber, isString } from '@visactor/vutils';\nimport { array } from './helper';\n\nconst TYPE_PAREN = 0;\nconst TYPE_UNIT = 1;\nconst TYPE_OPERATOR = 2;\nconst TYPE_NUMBER = 3;\n\nconst NODE_TYPE_UNIT = 10;\nconst NODE_TYPE_BINARY_EXPRESSION = 11;\nconst NODE_TYPE_NUMBER = 12;\n\ntype Ops = '-' | '+' | '*' | '/';\ntype ParenToken = {\n  value: '(' | ')';\n  type: typeof TYPE_PAREN;\n};\ntype UnitToken = {\n  unit: string;\n  value: number;\n  type: typeof TYPE_UNIT;\n};\ntype OpToken = {\n  value: Ops;\n  type: typeof TYPE_OPERATOR;\n};\ntype NumToken = {\n  value: number;\n  type: typeof TYPE_NUMBER;\n};\ntype Token = ParenToken | UnitToken | OpToken | NumToken;\ntype UnitNode = {\n  nodeType: typeof NODE_TYPE_UNIT;\n  unit: string;\n  value: number;\n};\ntype BinaryNode = {\n  nodeType: typeof NODE_TYPE_BINARY_EXPRESSION;\n  left: Node;\n  op: OpToken;\n  right: Node;\n};\ntype NumNode = {\n  nodeType: typeof NODE_TYPE_NUMBER;\n  value: number;\n};\ntype Node = UnitNode | BinaryNode | NumNode;\n\nconst TABULATION = 0x09;\nconst CARRIAGE_RETURN = 0x0d;\nconst LINE_FEED = 0x0a;\nconst FORM_FEED = 0x0c;\nconst SPACE = 0x20;\nconst PERCENT = 0x25;\nconst FULL_STOP = 0x2e;\nconst DIGIT_0 = 0x30;\nconst DIGIT_9 = 0x39;\nconst LATIN_CAPITAL_A = 0x41;\nconst LATIN_CAPITAL_Z = 0x5a;\nconst LATIN_SMALL_A = 0x61;\nconst LATIN_SMALL_Z = 0x7a;\nfunction isUpperLetter(cp: number): boolean {\n  return cp >= LATIN_CAPITAL_A && cp <= LATIN_CAPITAL_Z;\n}\nfunction isLowerLetter(cp: number): boolean {\n  return cp >= LATIN_SMALL_A && cp <= LATIN_SMALL_Z;\n}\nfunction isLetter(cp: number): boolean {\n  return isLowerLetter(cp) || isUpperLetter(cp);\n}\nfunction isWhitespace(cp: number): boolean {\n  return cp === TABULATION || cp === LINE_FEED || cp === FORM_FEED || cp === CARRIAGE_RETURN || cp === SPACE;\n}\nfunction isDigit(cp: number): boolean {\n  return cp >= DIGIT_0 && cp <= DIGIT_9;\n}\nfunction isDot(cp: number): boolean {\n  return cp === FULL_STOP;\n}\nfunction isUnit(cp: number): boolean {\n  return isLetter(cp) || cp === PERCENT;\n}\n\nfunction createError(calc: string): Error {\n  return new Error(`calc parse error: ${calc}`);\n}\n\n/**\n * tokenize\n * @param {string} calc calc expression\n * @returns {Array} tokens\n * @private\n */\nfunction tokenize(calc: string): Token[] {\n  const exp = calc.replace(/calc\\(/g, '(').trim();\n\n  const tokens: Token[] = [];\n  const len = exp.length;\n  for (let index = 0; index < len; index++) {\n    const c = exp[index];\n    const cp = c.charCodeAt(0);\n    if (c === '(' || c === ')') {\n      tokens.push({ value: c, type: TYPE_PAREN });\n    } else if (c === '*' || c === '/') {\n      tokens.push({ value: c, type: TYPE_OPERATOR });\n    } else if (c === '+' || c === '-') {\n      index = parseSign(c, index + 1) - 1;\n    } else if (isDigit(cp) || isDot(cp)) {\n      index = parseNum(c, index + 1) - 1;\n    } else if (isWhitespace(cp)) {\n      // skip\n    } else {\n      throw createError(calc);\n    }\n  }\n\n  function parseSign(sign: '+' | '-', start: number): number {\n    if (start < len) {\n      const c = exp[start];\n      const cp = c.charCodeAt(0);\n      if (isDigit(cp) || isDot(cp)) {\n        return parseNum(sign + c, start + 1);\n      }\n    }\n    tokens.push({ value: sign, type: TYPE_OPERATOR });\n    return start;\n  }\n  function parseNum(num: string, start: number): number {\n    let index = start;\n    for (; index < len; index++) {\n      const c = exp[index];\n      const cp = c.charCodeAt(0);\n      if (isDigit(cp)) {\n        num += c;\n      } else if (c === '.') {\n        if (num.indexOf('.') >= 0) {\n          throw createError(calc);\n        }\n        num += c;\n      } else if (isUnit(cp)) {\n        return parseUnit(num, c, index + 1);\n      } else {\n        break;\n      }\n    }\n    if (num === '.') {\n      throw createError(calc);\n    }\n    tokens.push({ value: parseFloat(num), type: TYPE_NUMBER });\n    return index;\n  }\n  function parseUnit(num: string, unit: string, start: number): number {\n    let index = start;\n    for (; index < len; index++) {\n      const c = exp[index];\n      const cp = c.charCodeAt(0);\n      if (isUnit(cp)) {\n        unit += c;\n      } else {\n        break;\n      }\n    }\n    tokens.push({ value: parseFloat(num), unit, type: TYPE_UNIT });\n    return index;\n  }\n  return tokens;\n}\n\nconst PRECEDENCE = {\n  '*': 3,\n  '/': 3,\n  '+': 2,\n  '-': 2\n};\n\nfunction lex(tokens: Token[], calc: string): Node {\n  function buildBinaryExpNode(stack: (Node | OpToken)[]): BinaryNode {\n    const right = stack.pop() as Node;\n    const op = stack.pop() as OpToken;\n    const left = stack.pop() as Node;\n\n    if (!left || !left.nodeType || !op || op.type !== TYPE_OPERATOR || !right || !right.nodeType) {\n      throw createError(calc);\n    }\n    return {\n      nodeType: NODE_TYPE_BINARY_EXPRESSION,\n      left,\n      op,\n      right\n    };\n  }\n\n  const stack: (Node | OpToken)[] = [];\n\n  while (tokens.length) {\n    const token = tokens.shift() as Token;\n    if (token.type === TYPE_PAREN && token.value === '(') {\n      let deep = 0;\n      const closeIndex = array.findIndex(tokens, t => {\n        if (t.type === TYPE_PAREN && t.value === '(') {\n          deep++;\n        } else if (t.type === TYPE_PAREN && t.value === ')') {\n          if (!deep) {\n            return true;\n          }\n          deep--;\n        }\n        return false;\n      });\n      if (closeIndex === -1) {\n        throw createError(calc);\n      }\n\n      stack.push(lex(tokens.splice(0, closeIndex), calc));\n      tokens.shift();\n    } else if (token.type === TYPE_OPERATOR) {\n      if (stack.length >= 3) {\n        const beforeOp = (stack[stack.length - 2] as OpToken).value;\n        if (PRECEDENCE[token.value] <= PRECEDENCE[beforeOp]) {\n          stack.push(buildBinaryExpNode(stack));\n        }\n      }\n      stack.push(token);\n    } else if (token.type === TYPE_UNIT) {\n      const { value: num, unit } = token;\n      stack.push({\n        nodeType: NODE_TYPE_UNIT,\n        value: num,\n        unit\n      });\n    } else if (token.type === TYPE_NUMBER) {\n      stack.push({\n        nodeType: NODE_TYPE_NUMBER,\n        value: token.value\n      });\n    }\n  }\n  while (stack.length > 1) {\n    stack.push(buildBinaryExpNode(stack));\n  }\n  return stack[0] as Node;\n}\n\nfunction parse(calcStr: string): Node {\n  const tokens = tokenize(calcStr);\n  return lex(tokens, calcStr);\n}\n\nfunction calcNode(node: Node, context: CalcContext): number {\n  if (node.nodeType === NODE_TYPE_BINARY_EXPRESSION) {\n    const left = calcNode(node.left, context);\n    const right = calcNode(node.right, context);\n\n    switch (node.op.value) {\n      case '+':\n        return left + right;\n      case '-':\n        return left - right;\n      case '*':\n        return left * right;\n      case '/':\n        return left / right;\n      default:\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        throw new Error(`calc error. unknown operator: ${node.op.value}`);\n    }\n  } else if (node.nodeType === NODE_TYPE_UNIT) {\n    switch (node.unit) {\n      case '%':\n        return (node.value * context.full) / 100;\n      // case 'em':\n      //   return node.value * context.em;\n      case 'px':\n        return node.value;\n      default:\n        throw new Error(`calc error. unknown unit: ${node.unit}`);\n    }\n  } else if (node.nodeType === NODE_TYPE_NUMBER) {\n    return node.value;\n  }\n  throw new Error('calc error.');\n}\n\nfunction toPxInternal(value: string, context: CalcContext): number {\n  const ast = parse(value);\n  return calcNode(ast, context);\n}\n\ntype CalcContext = {\n  full: number;\n  // em: number;\n};\n\nexport function toPx(value: string | number, context: CalcContext): number {\n  if (typeof value === 'string') {\n    return toPxInternal(value.trim(), context);\n  }\n  return value - 0;\n}\n\nexport type IPercent = `${number}%`;\n\nexport function couldBeValidNumber(v: any) {\n  if (isNil(v)) {\n    return false;\n  }\n  if (isNumber(v)) {\n    return true;\n  }\n  // eslint-disable-next-line no-self-compare\n  return +v === +v;\n}\n\nexport function isPercent(v: any): v is IPercent {\n  if (!isString(v)) {\n    return false;\n  }\n  if (!v.endsWith('%')) {\n    return false;\n  }\n  return couldBeValidNumber(v.substring(0, v.length - 1));\n}\n"]}