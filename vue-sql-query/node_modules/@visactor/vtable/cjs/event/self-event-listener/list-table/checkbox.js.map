{"version":3,"sources":["../src/event/self-event-listener/list-table/checkbox.ts"],"names":[],"mappings":"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","file":"checkbox.js","sourcesContent":["import { isArray, isNumber } from '@visactor/vutils';\nimport type { BaseTableAPI } from '../../../ts-types/base-table';\nimport { setCellCheckboxStateByAttribute } from '../../../state/checkbox/checkbox';\nimport { HierarchyState } from '../../../ts-types';\nimport type { CachedDataSource } from '../../../data';\n\nexport function bindGroupTitleCheckboxChange(table: BaseTableAPI) {\n  table.on('checkbox_state_change', args => {\n    const { col, row, checked, field } = args;\n\n    if (field !== '_vtable_rowSeries_number' || table.internalProps.rowSeriesNumber?.enableTreeCheckbox !== true) {\n      return;\n    }\n\n    if (table.isHeader(col, row)) {\n      return;\n    }\n    const record = table.getCellOriginRecord(col, row);\n    const indexedData = (table.dataSource as any).currentPagerIndexedData as (number | number[])[];\n    const titleShowIndex = table.getRecordShowIndexByCell(col, row);\n    let titleIndex = indexedData[titleShowIndex];\n    if (isNumber(titleIndex)) {\n      titleIndex = [titleIndex];\n    }\n\n    if (record.vtableMerge || record.children?.length) {\n      // 1. group title\n      if (checked) {\n        // 1.1 group title check\n        // 1.1.1 check all children\n        if (getHierarchyState(table, col, row) === HierarchyState.collapse) {\n          updateChildrenCheckboxState(true, titleIndex, table);\n        } else {\n          setAllChildrenCheckboxState(true, titleShowIndex, titleIndex, indexedData, table);\n        }\n        // 1.1.2 update group title state\n        updateGroupTitleCheckboxState(titleShowIndex, titleIndex, indexedData, table);\n      } else {\n        // 1.2 group title uncheck\n        // 1.2.1 uncheck all children\n        if (getHierarchyState(table, col, row) === HierarchyState.collapse) {\n          updateChildrenCheckboxState(false, titleIndex, table);\n        } else {\n          setAllChildrenCheckboxState(false, titleShowIndex, titleIndex, indexedData, table);\n        }\n        // 1.2.2 update group title state\n        updateGroupTitleCheckboxState(titleShowIndex, titleIndex, indexedData, table);\n\n        // 1.2.3 update header checkbox state\n        const oldHeaderCheckedState = table.stateManager.headerCheckedState._vtable_rowSeries_number;\n        const newHeaderCheckedState = table.stateManager.updateHeaderCheckedState('_vtable_rowSeries_number', col, row);\n        if (oldHeaderCheckedState !== newHeaderCheckedState) {\n          table.scenegraph.updateHeaderCheckboxCellState(col, row, newHeaderCheckedState);\n        }\n      }\n    } else {\n      // 2. group content, reset group title state\n      updateGroupTitleCheckboxState(titleShowIndex, titleIndex, indexedData, table);\n    }\n  });\n}\n\n// update visible children checkbox state\nfunction setAllChildrenCheckboxState(\n  state: boolean,\n  titleShowIndex: number,\n  titleIndex: number[],\n  indexedData: (number | number[])[],\n  table: BaseTableAPI\n) {\n  let i = titleShowIndex + 1;\n  while (isArray(indexedData[i]) && (indexedData[i] as number[])?.length > titleIndex.length) {\n    const row = table.columnHeaderLevelCount + i;\n    table.stateManager.setCheckedState(0, row, '_vtable_rowSeries_number', state);\n    setCellCheckboxStateByAttribute(0, row, state, table);\n    i++;\n  }\n}\n\nfunction updateGroupTitleCheckboxState(\n  titleShowIndex: number,\n  titleIndex: number[],\n  indexedData: (number | number[])[],\n  table: BaseTableAPI\n) {\n  let parentLength = titleIndex.length - 1;\n  if (parentLength > 0) {\n    let i = titleShowIndex - 1;\n    while (parentLength > 0 && i >= 0) {\n      if (\n        (isArray(indexedData[i]) && (indexedData[i] as number[])?.length === parentLength) ||\n        (parentLength === 1 && isNumber(indexedData[i]))\n      ) {\n        const row = table.columnHeaderLevelCount + i;\n        // check all children\n        updateParentCheckboxState(0, row, indexedData[i], table);\n        // table.stateManager.setCheckedState(0, row, '_vtable_rowSeries_number', 'indeterminate');\n        // setCellCheckboxStateByAttribute(0, row, 'indeterminate', table);\n\n        parentLength--;\n      }\n      i--;\n    }\n  }\n}\n\nfunction updateParentCheckboxState(col: number, row: number, currentIndex: number | number[], table: BaseTableAPI) {\n  const { checkedState } = table.stateManager;\n  const key = currentIndex.toString();\n  const currentIndexLength = isArray(currentIndex) ? currentIndex.length : 1;\n  let start = false;\n  const result: (boolean | string)[] = [];\n\n  const keys = Array.from(checkedState.keys()).sort((a: string, b: string) => {\n    // number or number[]\n    const aArr = (a as string).split(',');\n    const bArr = (b as string).split(',');\n    const maxLength = Math.max(aArr.length, bArr.length);\n\n    // judge from first to last\n    for (let i = 0; i < maxLength; i++) {\n      const a = Number(aArr[i]) ?? 0;\n      const b = Number(bArr[i]) ?? 0;\n      if (a !== b) {\n        return a - b;\n      }\n    }\n    return 0;\n  });\n  const stateArr = keys.map(key => checkedState.get(key));\n\n  stateArr.forEach((state, i) => {\n    const index = keys[i] as string;\n    const value = state;\n    if (start) {\n      const indexData = index.split(',');\n      if (indexData.length === currentIndexLength) {\n        start = false;\n      } else {\n        result.push(value._vtable_rowSeries_number);\n      }\n    }\n    if (index === key) {\n      start = true;\n    }\n  });\n\n  if (result.length === 0) {\n    return;\n  }\n\n  const allChecked = result.every(item => !!item);\n  const allUnChecked = result.every(item => !item);\n\n  if (allChecked) {\n    table.stateManager.setCheckedState(col, row, '_vtable_rowSeries_number', true);\n    setCellCheckboxStateByAttribute(col, row, true, table);\n  } else if (allUnChecked) {\n    table.stateManager.setCheckedState(col, row, '_vtable_rowSeries_number', false);\n    setCellCheckboxStateByAttribute(col, row, false, table);\n  } else {\n    table.stateManager.setCheckedState(col, row, '_vtable_rowSeries_number', 'indeterminate');\n    setCellCheckboxStateByAttribute(col, row, 'indeterminate', table);\n  }\n}\n\n// update invisible children checkbox state(collapsed)\nfunction updateChildrenCheckboxState(parentState: boolean, currentIndex: number | number[], table: BaseTableAPI) {\n  const { checkedState } = table.stateManager;\n  const key = currentIndex.toString();\n  const currentIndexLength = isArray(currentIndex) ? currentIndex.length : 1;\n  let start = false;\n\n  const keys = Array.from(checkedState.keys()).sort((a: string, b: string) => {\n    // number or number[]\n    const aArr = (a as string).split(',');\n    const bArr = (b as string).split(',');\n    const maxLength = Math.max(aArr.length, bArr.length);\n\n    // judge from first to last\n    for (let i = 0; i < maxLength; i++) {\n      const a = Number(aArr[i]) ?? 0;\n      const b = Number(bArr[i]) ?? 0;\n      if (a !== b) {\n        return a - b;\n      }\n    }\n    return 0;\n  });\n  const stateArr = keys.map(key => checkedState.get(key));\n\n  stateArr.forEach((state, i) => {\n    const index = keys[i] as string;\n    const value = state;\n\n    if (start) {\n      const indexData = index.split(',');\n      if (indexData.length === currentIndexLength) {\n        start = false;\n      } else {\n        value._vtable_rowSeries_number = parentState;\n      }\n    }\n    if (index === key) {\n      start = true;\n    }\n  });\n}\n\nexport function bindHeaderCheckboxChange(table: BaseTableAPI) {\n  table.on('checkbox_state_change', args => {\n    const { col, row, checked, field } = args;\n    if (table.isHeader(col, row)) {\n      //点击的表头部分的checkbox 需要同时处理表头和body单元格的状态\n      table.stateManager.setHeaderCheckedState(field as string | number, checked);\n      const cellType = table.getCellType(col, row);\n      if (cellType === 'checkbox') {\n        table.scenegraph.updateCheckboxCellState(col, row, checked);\n      }\n    } else {\n      //点击的是body单元格的checkbox  处理本单元格的状态维护 同时需要检查表头是否改变状态\n      table.stateManager.setCheckedState(col, row, field as string | number, checked);\n      const cellType = table.getCellType(col, row);\n      if (cellType === 'checkbox') {\n        const oldHeaderCheckedState = table.stateManager.headerCheckedState[field as string | number];\n        const newHeaderCheckedState = table.stateManager.updateHeaderCheckedState(field as string | number, col, row);\n        if (oldHeaderCheckedState !== newHeaderCheckedState) {\n          table.scenegraph.updateHeaderCheckboxCellState(col, row, newHeaderCheckedState);\n        }\n      }\n    }\n  });\n}\n\n// get hierarchy state by row\nfunction getHierarchyState(table: BaseTableAPI, col: number, row: number) {\n  const index = table.getRecordShowIndexByCell(col, row);\n  return (table.dataSource as CachedDataSource).getHierarchyState(index);\n}\n"]}