"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.bindIconClickEvent = void 0;

const TABLE_EVENT_TYPE_1 = require("../../../core/TABLE_EVENT_TYPE"), ts_types_1 = require("../../../ts-types"), drill_1 = require("../../drill");

function bindIconClickEvent(table) {
    table.on(TABLE_EVENT_TYPE_1.TABLE_EVENT_TYPE.ICON_CLICK, (iconInfo => {
        var _a;
        const {col: col, row: row, x: x, y: y, funcType: funcType, icon: icon, event: event} = iconInfo, {stateManager: stateManager} = table;
        if (funcType === ts_types_1.IconFuncTypeEnum.dropDown) stateManager.triggerDropDownMenu(col, row, x, y, event); else if (funcType === ts_types_1.IconFuncTypeEnum.sort) stateManager.triggerSort(col, row, icon, event); else if (funcType === ts_types_1.IconFuncTypeEnum.frozen) stateManager.triggerFreeze(col, row, icon); else if (funcType === ts_types_1.IconFuncTypeEnum.drillDown) (0, 
        drill_1.drillClick)(table); else if (funcType === ts_types_1.IconFuncTypeEnum.collapse || funcType === ts_types_1.IconFuncTypeEnum.expand) {
            const isHasSelected = !!(null === (_a = stateManager.select.ranges) || void 0 === _a ? void 0 : _a.length);
            stateManager.updateSelectPos(-1, -1), stateManager.endSelectCells(!0, isHasSelected), 
            table.toggleHierarchyState(col, row);
        }
    }));
}

exports.bindIconClickEvent = bindIconClickEvent;
//# sourceMappingURL=icon.js.map
