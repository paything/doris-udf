{"version":3,"sources":["../src/event/util.ts"],"names":[],"mappings":";;;AAGA,6CAA2C;AAiB3C,SAAgB,mBAAmB,CAAC,CAAwB;IAC1D,MAAM,UAAU,GAAe;QAC7B,WAAW,EAAE;YAGX,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;YACf,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC;SAChB;KAMF,CAAC;IACF,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IAC3C,IAAI,UAAU,EAAE;QACd,UAAU,CAAC,SAAS,GAAG;YACrB,GAAG,EAAE,UAAU,CAAC,GAAG;YACnB,GAAG,EAAE,UAAU,CAAC,GAAG;YACnB,KAAK,EAAE,CAAC;YACR,UAAU;YACV,SAAS,EAAE,gBAAgB,CAAC,UAAU,CAAC;YACvC,MAAM,EAAE,CAAC,CAAC,MAAM;SACjB,CAAC;KACH;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AA1BD,kDA0BC;AAED,SAAgB,aAAa,CAAC,MAAW;IACvC,OAAO,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;QAC9B,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE;YAC1B,OAAO,MAAM,CAAC;SACf;QACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;KACxB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AARD,sCAQC;AAED,SAAS,gBAAgB,CAAC,SAAgB;IACxC,IACE,IAAA,gBAAO,EAAC,SAAS,CAAC,aAAa,CAAC;QAChC,IAAA,gBAAO,EAAC,SAAS,CAAC,aAAa,CAAC;QAChC,IAAA,gBAAO,EAAC,SAAS,CAAC,WAAW,CAAC;QAC9B,IAAA,gBAAO,EAAC,SAAS,CAAC,WAAW,CAAC,EAC9B;QACA,OAAO;YACL,QAAQ,EAAE,SAAS,CAAC,aAAa;YACjC,MAAM,EAAE,SAAS,CAAC,WAAW;YAC7B,QAAQ,EAAE,SAAS,CAAC,aAAa;YACjC,MAAM,EAAE,SAAS,CAAC,WAAW;SAC9B,CAAC;KACH;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAEY,QAAA,WAAW,GAAG,qBAAqB,CAAC","file":"util.js","sourcesContent":["import type { FederatedPointerEvent, IEventTarget } from './../vrender';\nimport type { Group } from '../scenegraph/graphic/group';\nimport type { MergeCellInfo } from '../ts-types';\nimport { isValid } from '@visactor/vutils';\n\nexport interface SceneEvent {\n  abstractPos: {\n    x: number;\n    y: number;\n  };\n  eventArgs?: {\n    col: number;\n    row: number;\n    event: FederatedPointerEvent;\n    targetCell: Group;\n    mergeInfo?: MergeCellInfo;\n    target: IEventTarget;\n  };\n}\n\nexport function getCellEventArgsSet(e: FederatedPointerEvent): SceneEvent {\n  const tableEvent: SceneEvent = {\n    abstractPos: {\n      // x: e.x,\n      // y: e.y,\n      x: e.viewport.x,\n      y: e.viewport.y\n    }\n    // eventArgs: {\n    //   col: (e.target as any).col,\n    //   row: (e.target as any).row,\n    //   event: e,\n    // },\n  };\n  const targetCell = getTargetCell(e.target);\n  if (targetCell) {\n    tableEvent.eventArgs = {\n      col: targetCell.col,\n      row: targetCell.row,\n      event: e,\n      targetCell,\n      mergeInfo: getMergeCellInfo(targetCell),\n      target: e.target\n    };\n  }\n  return tableEvent;\n}\n\nexport function getTargetCell(target: any) {\n  while (target && target.parent) {\n    if (target.role === 'cell') {\n      return target;\n    }\n    target = target.parent;\n  }\n  return null;\n}\n\nfunction getMergeCellInfo(cellGroup: Group): MergeCellInfo | undefined {\n  if (\n    isValid(cellGroup.mergeStartCol) &&\n    isValid(cellGroup.mergeStartRow) &&\n    isValid(cellGroup.mergeEndCol) &&\n    isValid(cellGroup.mergeEndRow)\n  ) {\n    return {\n      colStart: cellGroup.mergeStartCol,\n      colEnd: cellGroup.mergeEndCol,\n      rowStart: cellGroup.mergeStartRow,\n      rowEnd: cellGroup.mergeEndRow\n    };\n  }\n  return undefined;\n}\n\nexport const regIndexReg = /radio-\\d+-\\d+-(\\d+)/;\n"]}