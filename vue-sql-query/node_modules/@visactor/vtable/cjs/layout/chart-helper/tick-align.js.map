{"version":3,"sources":["../src/layout/chart-helper/tick-align.ts"],"names":[],"mappings":";;;AAAA,gDAA6C;AAE7C,uDAAkD;AAGlD,SAAgB,0BAA0B,CACxC,WAAyC,EACzC,GAAW,EACX,GAAW,EACX,KAAa,EACb,QAA6C,EAC7C,MAA4B;IAE5B,MAAM,2BAA2B,GAAG,iBAAO,CAAC,WAAW,CAAC,6BAA6B,CAAgC,CAAC;IACtH,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAA,+BAAa,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAEpG,MAAM,EAAE,KAAK,EAAE,GAAG,2BAA2B,CAC3C,WAAW,CAAC,GAAG,EACf,WAAW,CAAC,GAAG,EACf,UAAU,EACV,WAAW,EACX,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,KAAK;QACzC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,iBAAiB;QACnE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,kBAAkB,CACxE,CAAC;IAEF,OAAO,KAAK,CAAC;AACf,CAAC;AAtBD,gEAsBC;AAED,SAAgB,mBAAmB,CACjC,WAAqB,EACrB,WAAyC,EACzC,KAAmC,EACnC,cAAsB;IAEtB,OAAO,cAAc,KAAK,CAAC,IAAI,WAAW;QACxC,CAAC,CAAC,GAAG,EAAE;YACH,MAAM,QAAQ,GAAa,WAAW,CAAC,GAAG,CAAC,CAAC,KAAa,EAAE,EAAE;gBAC3D,MAAM,OAAO,GAAG,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;gBAChF,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC;gBAE3D,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;YAEtC,CAAC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC;QAClB,CAAC;QACH,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC;AAlBD,kDAkBC","file":"tick-align.js","sourcesContent":["import { Factory } from '../../core/factory';\nimport type { PivotHeaderLayoutMap } from '../pivot-header-layout';\nimport { getAxisOption } from './get-axis-config';\nimport type { GetAxisDomainRangeAndLabels } from './get-axis-domain';\n\nexport function getZeroAlignTickAlignTicks(\n  targetRange: { min: number; max: number },\n  col: number,\n  row: number,\n  index: number,\n  position: 'top' | 'bottom' | 'left' | 'right',\n  layout: PivotHeaderLayoutMap\n) {\n  const getAxisDomainRangeAndLabels = Factory.getFunction('getAxisDomainRangeAndLabels') as GetAxisDomainRangeAndLabels;\n  const { axisOption, isZeroAlign } = getAxisOption(col, row, index === 0 ? 'right' : 'left', layout);\n\n  const { ticks } = getAxisDomainRangeAndLabels(\n    targetRange.min,\n    targetRange.max,\n    axisOption,\n    isZeroAlign,\n    position === 'bottom' || position === 'top'\n      ? layout._table.getColWidth(col) || layout._table.tableNoFrameWidth\n      : layout._table.getRowHeight(row) || layout._table.tableNoFrameHeight // avoid 0, 0 causes NaN\n  );\n\n  return ticks;\n}\n\nexport function getTickModeFunction(\n  targetTicks: number[],\n  targetRange: { min: number; max: number },\n  range: { min: number; max: number },\n  indicatorIndex: number\n) {\n  return indicatorIndex !== 0 && targetTicks\n    ? () => {\n        const newTicks: number[] = targetTicks.map((value: number) => {\n          const percent = (value - targetRange.min) / (targetRange.max - targetRange.min);\n          const tick = (range.max - range.min) * percent + range.min;\n          // TO BE FIXED: 保留2位有效数字，避免出现过长的数字\n          return Math.round(tick * 100) / 100;\n          // return tick;\n        });\n        return newTicks;\n      }\n    : undefined;\n}\n"]}