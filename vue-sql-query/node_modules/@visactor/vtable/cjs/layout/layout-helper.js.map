{"version":3,"sources":["../src/layout/layout-helper.ts"],"names":[],"mappings":"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","file":"layout-helper.js","sourcesContent":["import { isArray, isString } from '@visactor/vutils';\nimport type { PivotTable } from '../PivotTable';\nimport { AggregationType } from '../ts-types';\nimport type { BaseTableAPI } from '../ts-types/base-table';\nimport type {\n  Aggregation,\n  IHeaderTreeDefine,\n  IIndicator,\n  ListTableConstructorOptions,\n  PivotTableConstructorOptions\n} from '../ts-types';\nimport type { ColumnData } from '../ts-types/list-table/layout-map/api';\nimport type { IChartColumnIndicator } from '../ts-types/pivot-table/indicator/chart-indicator';\nimport type { SimpleHeaderLayoutMap } from './simple-header-layout';\nimport type { IImageDimension } from '../ts-types/pivot-table/dimension/image-dimension';\nimport type { IImageColumnIndicator, IImageHeaderIndicator } from '../ts-types/pivot-table/indicator/image-indicator';\nimport type { IImageColumnBodyDefine, IImageHeaderDefine } from '../ts-types/list-table/define/image-define';\nimport type { ITreeLayoutHeadNode, LayouTreeNode } from './tree-helper';\nimport { deleteTreeHideNode, DimensionTree } from './tree-helper';\nimport type { ISparklineColumnIndicator } from '../ts-types/pivot-table/indicator/sparkline-indicator';\n\nexport function checkHasAggregation(layoutMap: SimpleHeaderLayoutMap) {\n  const columnObjects = layoutMap.columnObjects;\n  for (let i = 0; i < columnObjects.length; i++) {\n    const column = columnObjects[i];\n    if ((column as ColumnData)?.aggregation) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function checkHasAggregationOnTop(layoutMap: SimpleHeaderLayoutMap) {\n  const columnObjects = layoutMap.columnObjects;\n  let count = 0;\n  for (let i = 0; i < columnObjects.length; i++) {\n    const column = columnObjects[i];\n    if ((column as ColumnData)?.aggregation) {\n      if (Array.isArray((column as ColumnData)?.aggregation)) {\n        count = Math.max(\n          count,\n          ((column as ColumnData).aggregation as Array<Aggregation>).filter(item => item.showOnTop).length\n        );\n      } else if (((column as ColumnData).aggregation as Aggregation).showOnTop) {\n        count = Math.max(count, 1);\n      }\n    }\n  }\n  return count;\n}\n\nexport function checkHasAggregationOnBottom(layoutMap: SimpleHeaderLayoutMap) {\n  const columnObjects = layoutMap.columnObjects;\n  let count = 0;\n  for (let i = 0; i < columnObjects.length; i++) {\n    const column = columnObjects[i];\n    if ((column as ColumnData)?.aggregation) {\n      if (Array.isArray((column as ColumnData)?.aggregation)) {\n        count = Math.max(\n          count,\n          ((column as ColumnData).aggregation as Array<Aggregation>).filter(item => !item.showOnTop).length\n        );\n      } else if (!((column as ColumnData).aggregation as Aggregation).showOnTop) {\n        count = Math.max(count, 1);\n      }\n    }\n  }\n  return count;\n}\n\nexport function checkHasTreeDefine(layoutMap: SimpleHeaderLayoutMap) {\n  if (layoutMap._table.options.groupBy) {\n    return true;\n  }\n  const { columns } = layoutMap._table.options as ListTableConstructorOptions;\n  if (isArray(columns) && columns.length > 0) {\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n      if (isString(column)) {\n        continue;\n      }\n      if (column.tree) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function hasAutoImageColumn(table: BaseTableAPI) {\n  const { columns, rows, indicators } = table.options as PivotTableConstructorOptions;\n  if (table.isPivotTable()) {\n    // pivot table\n    if (isArray(columns) && columns.length > 0) {\n      for (let i = 0; i < columns.length; i++) {\n        const column = columns[i];\n        if (isString(column)) {\n          continue;\n        }\n        if (\n          (column.headerType === 'image' || column.headerType === 'video' || typeof column.headerType === 'function') &&\n          (column as IImageDimension).imageAutoSizing\n        ) {\n          return true;\n        }\n      }\n    }\n    if (isArray(rows) && rows.length > 0) {\n      for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        if (isString(row)) {\n          continue;\n        }\n        if (\n          (row.headerType === 'image' || row.headerType === 'video' || typeof row.headerType === 'function') &&\n          (row as IImageDimension).imageAutoSizing\n        ) {\n          return true;\n        }\n      }\n    }\n    if (isArray(indicators) && indicators.length > 0) {\n      for (let i = 0; i < indicators.length; i++) {\n        const indicator = indicators[i];\n        if (isString(indicator)) {\n          continue;\n        }\n        if (\n          ((indicator.cellType === 'image' ||\n            indicator.cellType === 'video' ||\n            typeof indicator.cellType === 'function') &&\n            (indicator as IImageColumnIndicator).imageAutoSizing) ||\n          ((indicator.headerType === 'image' ||\n            indicator.headerType === 'video' ||\n            typeof indicator.headerType === 'function') &&\n            (indicator as IImageHeaderIndicator).imageAutoSizing)\n        ) {\n          return true;\n        }\n      }\n    }\n  } else {\n    // list table\n    if (isArray(columns) && columns.length > 0) {\n      for (let i = 0; i < columns.length; i++) {\n        const column = columns[i] as unknown as ListTableConstructorOptions['columns'][0];\n        if (\n          ((column.cellType === 'image' || column.cellType === 'video' || typeof column.cellType === 'function') &&\n            (column as IImageColumnBodyDefine).imageAutoSizing) ||\n          ((column.headerType === 'image' ||\n            column.headerType === 'video' ||\n            typeof column.headerType === 'function') &&\n            (column as IImageHeaderDefine).imageAutoSizing)\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nexport function parseColKeyRowKeyForPivotTable(table: PivotTable, options: PivotTableConstructorOptions) {\n  let columnDimensionTree;\n  let rowDimensionTree;\n  // let isNeedResetColumnDimensionTree = true;\n  // let isNeedResetRowDimensionTree = true;\n  if (options.columnTree) {\n    if (table.options.indicatorsAsCol !== false && table.options.supplementIndicatorNodes !== false) {\n      table.internalProps.columnTree = supplementIndicatorNodesForCustomTree(\n        table.internalProps.columnTree,\n        options.indicators\n      );\n    }\n    columnDimensionTree = new DimensionTree(\n      (table.internalProps.columnTree as ITreeLayoutHeadNode[]) ?? [],\n      table.layoutNodeId,\n      table.options.columnHierarchyType,\n      table.options.columnHierarchyType !== 'grid' ? table.options.columnExpandLevel ?? 1 : undefined\n    );\n\n    // if (\n    //   table.options.supplementIndicatorNodes !== false &&\n    //   table.options.indicatorsAsCol !== false &&\n    //   !columnDimensionTree.dimensionKeys.contain(IndicatorDimensionKeyPlaceholder) &&\n    //   options.indicators?.length >= 1\n    // ) {\n    //   isNeedResetColumnDimensionTree = true;\n    // } else {\n    //   isNeedResetColumnDimensionTree = false;\n    // }\n    // } else {\n    //   if (options.indicatorsAsCol !== false) {\n    //     table.internalProps.columnTree = supplementIndicatorNodesForCustomTree([], options.indicators);\n    //   }\n  }\n  if (options.rowTree) {\n    if (table.options.indicatorsAsCol === false && table.options.supplementIndicatorNodes !== false) {\n      table.internalProps.rowTree = supplementIndicatorNodesForCustomTree(\n        table.internalProps.rowTree,\n        options.indicators\n      );\n    }\n    rowDimensionTree = new DimensionTree(\n      (table.internalProps.rowTree as ITreeLayoutHeadNode[]) ?? [],\n      table.layoutNodeId,\n      table.options.rowHierarchyType,\n      table.options.rowHierarchyType !== 'grid' ? table.options.rowExpandLevel ?? 1 : undefined\n    );\n    // if (\n    //   table.options.supplementIndicatorNodes !== false &&\n    //   table.options.indicatorsAsCol === false &&\n    //   !rowDimensionTree.dimensionKeys.contain(IndicatorDimensionKeyPlaceholder) &&\n    //   options.indicators?.length >= 1\n    // ) {\n    //   isNeedResetRowDimensionTree = true;\n    // } else {\n    //   isNeedResetRowDimensionTree = false;\n    // }\n    // } else {\n    //   if (options.indicatorsAsCol === false) {\n    //     table.internalProps.rowTree = supplementIndicatorNodesForCustomTree([], options.indicators);\n    //   }\n  }\n  const rowKeys = rowDimensionTree?.dimensionKeys?.count\n    ? rowDimensionTree.dimensionKeys.valueArr()\n    : options.rows?.reduce((keys: string[], rowObj) => {\n        if (typeof rowObj === 'string') {\n          keys.push(rowObj);\n        } else {\n          keys.push(rowObj.dimensionKey);\n        }\n        return keys;\n      }, []) ?? [];\n  const columnKeys = columnDimensionTree?.dimensionKeys?.count\n    ? columnDimensionTree.dimensionKeys.valueArr()\n    : options.columns?.reduce((keys: string[], columnObj) => {\n        if (typeof columnObj === 'string') {\n          keys.push(columnObj);\n        } else {\n          keys.push(columnObj.dimensionKey);\n        }\n        return keys;\n      }, []) ?? [];\n  const indicatorKeys =\n    options.indicators?.reduce((keys: string[], indicatorObj) => {\n      if (typeof indicatorObj === 'string') {\n        keys.push(indicatorObj);\n      } else {\n        keys.push(indicatorObj.indicatorKey);\n        if (\n          (indicatorObj as IChartColumnIndicator).chartSpec ||\n          (indicatorObj as ISparklineColumnIndicator).sparklineSpec\n        ) {\n          if (table.internalProps.dataConfig?.aggregationRules) {\n            if (\n              !table.internalProps.dataConfig.aggregationRules.find(aggregation => {\n                return aggregation.indicatorKey === indicatorObj.indicatorKey;\n              })\n            ) {\n              table.internalProps.dataConfig.aggregationRules.push({\n                field: indicatorObj.indicatorKey,\n                indicatorKey: indicatorObj.indicatorKey,\n                aggregationType: AggregationType.NONE\n              });\n            }\n          } else if (table.internalProps.dataConfig) {\n            table.internalProps.dataConfig.aggregationRules = [\n              {\n                field: indicatorObj.indicatorKey,\n                indicatorKey: indicatorObj.indicatorKey,\n                aggregationType: AggregationType.NONE\n              }\n            ];\n          } else {\n            table.internalProps.dataConfig = {\n              aggregationRules: [\n                {\n                  field: indicatorObj.indicatorKey,\n                  indicatorKey: indicatorObj.indicatorKey,\n                  aggregationType: AggregationType.NONE\n                }\n              ]\n            };\n          }\n        }\n      }\n      return keys;\n    }, []) ?? [];\n  if (options.rowHierarchyType !== 'grid' && (options.extensionRows?.length ?? 0) >= 1) {\n    options.extensionRows?.forEach(extensionRow => {\n      const extension_rowKeys: string[] = [];\n      extensionRow.rows.forEach(row => {\n        if (typeof row === 'string') {\n          extension_rowKeys.push(row);\n        } else {\n          extension_rowKeys.push(row.dimensionKey);\n        }\n      });\n      rowKeys.push(...extension_rowKeys);\n    });\n  }\n  return {\n    rowKeys,\n    columnKeys,\n    indicatorKeys,\n    // isNeedResetColumnDimensionTree,\n    // isNeedResetRowDimensionTree,\n    columnDimensionTree,\n    rowDimensionTree\n  };\n}\n\nexport function supplementIndicatorNodesForCustomTree(\n  customTree: IHeaderTreeDefine[],\n  indicators: (string | IIndicator)[]\n) {\n  const checkNode = (nodes: IHeaderTreeDefine[], isHasIndicator: boolean) => {\n    nodes.forEach((node: IHeaderTreeDefine) => {\n      if (\n        !node.indicatorKey &&\n        !isHasIndicator &&\n        (!(node.children as IHeaderTreeDefine[])?.length || !node.children)\n      ) {\n        node.children = indicators?.map((indicator: IIndicator | string): { indicatorKey: string; value: string } => {\n          if (typeof indicator === 'string') {\n            return { indicatorKey: indicator, value: indicator };\n          }\n          return { indicatorKey: indicator.indicatorKey, value: indicator.title ?? indicator.indicatorKey };\n        });\n      } else if (node.children && Array.isArray(node.children)) {\n        checkNode(node.children, isHasIndicator || !!node.indicatorKey);\n      }\n    });\n  };\n  if (customTree?.length) {\n    checkNode(customTree, false);\n  } else {\n    customTree = indicators?.map((indicator: IIndicator | string): { indicatorKey: string; value: string } => {\n      if (typeof indicator === 'string') {\n        return { indicatorKey: indicator, value: indicator };\n      }\n      return { indicatorKey: indicator.indicatorKey, value: indicator.title ?? indicator.indicatorKey };\n    });\n  }\n  return customTree;\n}\n\nexport function deleteHideIndicatorNode(\n  treeNodeChildren: LayouTreeNode[],\n  indicators: (string | IIndicator)[],\n  hasHideNode: boolean,\n  table: PivotTable\n) {\n  const hasHideSettingIndicators: IIndicator[] = [];\n  for (let i = 0; i < indicators?.length; i++) {\n    const indicator = indicators[i];\n    if ((indicator as IIndicator)?.hide) {\n      hasHideSettingIndicators.push(indicator as IIndicator);\n    }\n  }\n  if (hasHideSettingIndicators.length || hasHideNode) {\n    deleteTreeHideNode(treeNodeChildren, [], hasHideSettingIndicators, hasHideNode, table);\n  }\n}\n"]}