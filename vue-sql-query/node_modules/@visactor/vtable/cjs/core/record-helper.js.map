{"version":3,"sources":["../src/core/record-helper.ts"],"names":[],"mappings":";;;AAGA,8EAAyE;AACzE,gFAA2E;AAC3E,4CAA4C;AAC5C,wCAA+C;AAE/C,yDAAsD;AAUtD,SAAgB,wBAAwB,CACtC,GAAW,EACX,GAAW,EACX,KAA6B,EAC7B,kBAA2B,EAC3B,YAAqB,EACrB,KAAgB;IAEhB,IAAI,CAAC,kBAAkB,IAAI,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,kBAAkB,KAAK,KAAK,EAAE;QAC7F,MAAM,WAAW,GAAG,KAAK,CAAC,wBAAwB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC7D,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClE,MAAM,iBAAiB,GAAG,KAAK,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC1D,MAAM,QAAQ,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACpD,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAC5B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,KAAe,CAAC,CAAC;SAC5E;aAAM;YACL,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;SAC/E;QACD,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAE3C,MAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,oBAAoB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACjF,IAAI,WAAW,EAAE;YACf,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CAAA,EAAE,CAAC,EAAE,EAAE;oBAC5C,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;iBAC9B;aACF;iBAAM;gBACL,WAAW,CAAC,WAAW,EAAE,CAAC;aAC3B;YACD,MAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAC5E,KAAK,CAAC,KAAK,CAAC,GAAG,EACf,KAAK,CAAC,KAAK,CAAC,GAAG,EACf,KAAK,CAAC,GAAG,CAAC,GAAG,EACb,KAAK,CAAC,GAAG,CAAC,GAAG,CACd,CAAC;YACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/C,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjF,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAC9D,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBAC9D,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;qBAChD;iBACF;aACF;SACF;QAID,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC9D,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;gBAC9D,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAChD;SACF;QACD,IAAI,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,eAAe,EAAE,IAAI,KAAK,CAAC,iBAAiB,CAAC,EAAE;YACjH,IAAI,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,KAAK,CAAC,EAAE;gBAEtD,KAAK,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;aACzC;SACF;aAAM,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC5D,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACxC,MAAM,QAAQ,GAAG,IAAA,mCAAe,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YAC3E,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACzB,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,GAAG,QAAQ,CAAC,CAAC;aAC3D;SACF;QACD,IACE,KAAK,CAAC,UAAU,KAAK,UAAU;YAC/B,CAAC,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,gBAAgB,EAAE,IAAI,KAAK,CAAC,kBAAkB,CAAC,EAC9E;YACA,IAAI,KAAK,CAAC,aAAa,CAAC,oBAAoB,CAAC,IAAI,KAAK,CAAC,EAAE;gBACvD,KAAK,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;aAC1C;SACF;aAAM,IAAI,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC3F,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;YAC1C,MAAM,SAAS,GAAG,IAAA,qCAAgB,EAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;YACtE,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,GAAG,SAAS,CAAC,CAAC;SAC9D;QACD,MAAM,YAAY,GAAG,KAAK,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACxD,IAAI,QAAQ,KAAK,YAAY,IAAI,YAAY,EAAE;YAC7C,KAAK,CAAC,aAAa,CAAC,mCAAgB,CAAC,iBAAiB,EAAE;gBACtD,GAAG;gBACH,GAAG;gBACH,QAAQ,EAAE,iBAAiB;gBAC3B,YAAY,EAAE,QAAQ;gBACtB,YAAY;aACb,CAAC,CAAC;SACJ;QACD,KAAK,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;KACpC;AACH,CAAC;AAxFD,4DAwFC;AASD,SAAgB,yBAAyB,CACvC,QAAgB,EAChB,QAAgB,EAChB,MAA6B,EAC7B,kBAA2B,EAC3B,YAAqB,EACrB,KAAgB;;IAEhB,IAAI,WAAW,GAAG,QAAQ,CAAC;IAC3B,IAAI,WAAW,GAAG,QAAQ,CAAC;IAG3B,MAAM,kBAAkB,GAA0B,EAAE,CAAC;IACrD,MAAM,SAAS,GAA0B,EAAE,CAAC;IAC5C,IAAI,cAA2C,CAAC;IAEhD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;YACrC,MAAM;SACP;QACD,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,YAAY,GAAwB,EAAE,CAAC;QAC7C,MAAM,YAAY,GAAwB,EAAE,CAAC;QAC7C,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACtC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;gBACrC,MAAM;aACP;YACD,cAAc,GAAG,iBAAiB,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAK,EAAE,cAAc,CAAC,CAAC;YACtF,MAAM,iBAAiB,GAAG,KAAK,CAAC,eAAe,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;YAC5E,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACrC,MAAM,QAAQ,GAAG,KAAK,CAAC,kBAAkB,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;YACtE,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC7B;KACF;IAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;YACrC,MAAM;SACP;QACD,WAAW,GAAG,QAAQ,GAAG,CAAC,CAAC;QAC3B,MAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,kBAAkB,GAAG,QAAQ,CAAC;QAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;gBACrC,MAAM;aACP;YACD,kBAAkB,GAAG,QAAQ,GAAG,CAAC,CAAC;YAClC,IAAI,WAAW,GAAG,KAAK,CAAC;YACxB,IAAI,kBAAkB,KAAK,KAAK,EAAE;gBAChC,WAAW,GAAG,IAAI,CAAC;aACpB;iBAAM;gBACL,IAAI,KAAK,CAAC,iBAAiB,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,EAAE;oBACvD,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;oBAC3D,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjC,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC3B,MAAM,mBAAmB,GAAG,MAAA,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,aAAa,uDAAG,KAAK,EAAE,QAAQ,CAAC,mCAAI,IAAI,CAAC;oBAC7E,IAAI,IAAA,kBAAS,EAAC,mBAAmB,CAAC,EAAE;wBAElC,WAAW,GAAG,IAAI,CAAC;qBACpB;yBAAM;wBACL,WAAW;4BACT,mBAAmB,KAAK,IAAI;gCAC5B,mBAAmB,KAAK,eAAe;gCACvC,mBAAmB,KAAK,iBAAiB,CAAC;qBAC7C;iBACF;aACF;YAED,IAAI,WAAW,EAAE;gBACf,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,wBAAwB,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;gBAC/E,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;gBAGpF,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjC,IAAI,KAAK,CAAC,QAAQ,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,EAAE;oBAC9C,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAe,CAAC,CAAC;iBAC9F;qBAAM;oBACL,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;iBACjG;gBACD,MAAM,YAAY,GAAG,KAAK,CAAC,kBAAkB,CAAC,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC,CAAC;gBAC1E,IAAI,QAAQ,KAAK,YAAY,IAAI,YAAY,EAAE;oBAC7C,KAAK,CAAC,aAAa,CAAC,mCAAgB,CAAC,iBAAiB,EAAE;wBACtD,GAAG,EAAE,QAAQ,GAAG,CAAC;wBACjB,GAAG,EAAE,QAAQ,GAAG,CAAC;wBACjB,QAAQ,EAAE,iBAAiB;wBAC3B,YAAY,EAAE,QAAQ;wBACtB,YAAY;qBACb,CAAC,CAAC;iBACJ;aACF;SACF;QACD,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;KACzD;IAGD,MAAM,UAAU,GAAG,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAC1D,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAG3D,MAAM,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,yBAAyB,CACzE,UAAU,CAAC,KAAK,CAAC,GAAG,EACpB,UAAU,CAAC,KAAK,CAAC,GAAG,EACpB,KAAK,CAAC,GAAG,CAAC,GAAG,EACb,KAAK,CAAC,GAAG,CAAC,GAAG,CACd,CAAC;IAEF,IAAI,WAAW,EAAE;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CAAA,EAAE,CAAC,EAAE,EAAE;YAC5C,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;SAC9B;QAED,IAAI,cAAc,KAAK,QAAQ,EAAE;YAC/B,MAAM,eAAe,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAC5E,UAAU,CAAC,KAAK,CAAC,GAAG,EACpB,UAAU,CAAC,KAAK,CAAC,GAAG,EACpB,KAAK,CAAC,GAAG,CAAC,GAAG,EACb,KAAK,CAAC,GAAG,CAAC,GAAG,CACd,CAAC;YACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/C,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACjF,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAC9D,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;wBAC9D,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;qBAChD;iBACF;aACF;SACF;KACF;IAED,IAAI,cAAc,KAAK,OAAO,EAAE;QAC7B,KAAK,CAAC,UAA+B,CAAC,qBAAqB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;KACtE;IAED,IAAI,cAAc,KAAK,MAAM,IAAI,cAAc,KAAK,OAAO,EAAE;QAC1D,KAAK,CAAC,UAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QACjD,WAAW,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAElD,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;QACpC,OAAO;KACR;IAED,KAAK,IAAI,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QACnE,KAAK,IAAI,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACnE,KAAK,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SAChD;KACF;IACD,IAAI,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,eAAe,EAAE,IAAI,KAAK,CAAC,iBAAiB,CAAC,EAAE;QACjH,IAAI,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,KAAK,CAAC,EAAE;YAEtD,KAAK,CAAC,UAAU,CAAC,oBAAoB,EAAE,CAAC;SACzC;KACF;SAAM;QACL,KAAK,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACvD,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACtD,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACzC,MAAM,QAAQ,GAAG,IAAA,mCAAe,EAAC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBAC5E,IAAI,QAAQ,KAAK,QAAQ,EAAE;oBACzB,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,GAAG,QAAQ,CAAC,CAAC;iBAC5D;aACF;SACF;KACF;IACD,IACE,KAAK,CAAC,UAAU,KAAK,UAAU;QAC/B,CAAC,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,gBAAgB,EAAE,IAAI,KAAK,CAAC,kBAAkB,CAAC,EAC9E;QACA,KAAK,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;KAC1C;SAAM,IAAI,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;QAC1C,MAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,KAAK,IAAI,IAAI,GAAG,QAAQ,EAAE,IAAI,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACvD,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAEjC,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC3C,MAAM,SAAS,GAAG,IAAA,qCAAgB,EAAC,IAAI,EAAE,CAAC,EAAE,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;gBACvE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC;aACrC;SACF;QACD,KAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAClD;IAED,KAAK,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;AACrC,CAAC;AA9LD,8DA8LC;AAGD,SAAS,iBAAiB,CACxB,GAAW,EACX,GAAW,EACX,KAAgB,EAChB,iBAA6C;IAE7C,IAAI,iBAAiB,KAAK,OAAO,EAAE;QACjC,OAAO,iBAAiB,CAAC;KAC1B;IACD,IAAI,iBAAiB,KAAK,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;QAC1D,OAAO,iBAAiB,CAAC;KAC1B;IACD,IAAI,cAAc,GAAmB,QAAQ,CAAC;IAC9C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;QACzB,cAAc,GAAG,OAAO,CAAC;KAC1B;SAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,IAAK,KAAK,CAAC,UAAkB,CAAC,cAAc,EAAE;QAChF,MAAM,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,KAAK,KAAM,KAAK,CAAC,UAAkB,CAAC,cAAc,EAAE;YACtD,cAAc,GAAG,MAAM,CAAC;SACzB;KACF;IACD,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,SAAgB,WAAW,CAAC,KAAgB;IAC1C,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;IAChC,SAAS,GAAG,CAAC,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAE7E,IAAI,SAAS,EAAE;QACb,SAAS,GAAI,SAAyB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;;YAChD,IAAI,CAAC,OAAO,GAAG,MAAA,KAAK,CAAC,4BAA4B,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,mCAAI,qBAAc,CAAC;YAE3F,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAClC;AACH,CAAC;AAbD,kCAaC;AASD,SAAgB,kBAAkB,CAAC,MAAW,EAAE,WAA8B,EAAE,KAAgB;;IAC9F,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;QACzB,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,kBAAkB,mDAAG,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;QACnF,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;QAGtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACrC;SAAM,IAAK,KAAK,CAAC,UAA+B,CAAC,gBAAgB,KAAK,MAAM,EAAE;QAC7E,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,iBAAiB,mDAAG,CAAC,MAAM,CAAC,EAAE,WAAW,CAAC,CAAC;QAClF,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;QAGtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACrC;SAAM,IAAI,KAAK,CAAC,SAAS,EAAE;QAC1B,KAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC5C,WAAW,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACrC;SAAM;QACL,WAAW,GAAG,WAAqB,CAAC;QACpC,IAAI,WAAW,KAAK,SAAS,IAAI,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE;YAC5E,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC;SAC7C;QACD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;QAC/F,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAChD,MAAM,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC;QACnC,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAuB,KAAK,CAAC,EAAE;YACxD,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;YACpC,OAAO;SACR;QACD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;QACtE,IAAI,KAAK,CAAC,UAAU,EAAE;YACpB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC;YACvD,MAAM,UAAU,GAAG,YAAY,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;YACrD,MAAM,QAAQ,GAAG,UAAU,GAAG,YAAY,CAAC;YAC3C,IAAI,WAAW,GAAG,QAAQ,EAAE;gBAE1B,IAAI,WAAW,GAAG,QAAQ,GAAG,YAAY,EAAE;oBAEzC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;oBAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;iBACrC;qBAAM;oBAEL,MAAM,MAAM,GAAG,WAAW,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC,GAAG,WAAW,CAAC;oBACrE,IAAI,WAAW,GAAG,WAAW,KAAK,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE;wBAE/D,MAAM,UAAU,GAAG,EAAE,CAAC;wBACtB,KAAK,IAAI,GAAG,GAAG,MAAM,EAAE,GAAG,GAAG,WAAW,EAAE,GAAG,EAAE,EAAE;4BAC/C,IAAI,KAAK,CAAC,SAAS,EAAE;gCACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;6BACvC;iCAAM;gCACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;6BAClC;yBACF;wBACD,KAAK,CAAC,SAAS;4BACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC;4BAChD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;qBACpD;yBAAM;wBAEL,MAAM,OAAO,GAAG,EAAE,CAAC;wBACnB,KAAK,IAAI,GAAG,GAAG,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;4BACrE,IAAI,KAAK,CAAC,SAAS,EAAE;gCACnB,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;6BACpC;iCAAM;gCACL,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;6BAC/B;yBACF;wBACD,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;qBAC7G;iBACF;aACF;SACF;aAAM;YACL,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,KAAK,IAAI,GAAG,GAAG,WAAW,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,WAAW,GAAG,CAAC,EAAE,GAAG,EAAE,EAAE;gBACpF,IAAI,KAAK,CAAC,SAAS,EAAE;oBACnB,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBACpC;qBAAM;oBACL,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAC/B;aACF;YACD,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,MAAM,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAAC;YACnF,MAAM,sBAAsB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,2BAA2B,CAAC;YACzF,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,mBAAmB,EAAE,GAAG,EAAE,EAAE;gBAC1E,IAAI,KAAK,CAAC,SAAS,EAAE;oBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBACvC;qBAAM;oBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAClC;aACF;YACD,KACE,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,sBAAsB,EACtF,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,EACzD,GAAG,EAAE,EACL;gBACA,IAAI,KAAK,CAAC,SAAS,EAAE;oBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBACvC;qBAAM;oBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAClC;aACF;YACD,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;SAC7G;KACF;AAEH,CAAC;AAnHD,gDAmHC;AASD,SAAgB,mBAAmB,CAAC,OAAc,EAAE,WAA8B,EAAE,KAAgB;;IAClG,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;QACzB,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,kBAAkB,mDAAG,OAAO,EAAE,WAAW,CAAC,CAAC;QAClF,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;QAGtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACrC;SAAM,IAAK,KAAK,CAAC,UAA+B,CAAC,gBAAgB,KAAK,MAAM,EAAE;QAC7E,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,iBAAiB,mDAAG,OAAO,EAAE,WAAW,CAAC,CAAC;QACjF,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;QAGtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACrC;SAAM,IAAI,KAAK,CAAC,SAAS,EAAE;QAC1B,KAAK,CAAC,UAAU,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC9C,WAAW,CAAC,KAAK,CAAC,CAAC;QACnB,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAE3B,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;KACrC;SAAM;QACL,WAAW,GAAG,WAAqB,CAAC;QACpC,IAAI,WAAW,KAAK,SAAS,IAAI,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE;YAC5E,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC;SAC7C;aAAM,IAAI,WAAW,GAAG,CAAC,EAAE;YAC1B,WAAW,GAAG,CAAC,CAAC;SACjB;QACD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;QAC/F,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAClD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;QACtE,KAAK,CAAC,kBAAkB,EAAE,CAAC;QAC3B,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,uBAAuB,KAAK,CAAC,EAAE;YACxD,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;YACpC,OAAO;SACR;QACD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;QACtE,IAAI,KAAK,CAAC,UAAU,EAAE;YACpB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC;YACvD,MAAM,UAAU,GAAG,YAAY,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;YACrD,MAAM,QAAQ,GAAG,UAAU,GAAG,YAAY,CAAC;YAC3C,IAAI,WAAW,GAAG,QAAQ,EAAE;gBAE1B,IAAI,WAAW,GAAG,QAAQ,GAAG,YAAY,EAAE;oBAEzC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;oBAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;iBACrC;qBAAM;oBAGL,MAAM,MAAM,GAAG,WAAW,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC,GAAG,WAAW,CAAC;oBACrE,IAAI,WAAW,GAAG,WAAW,KAAK,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE;wBAE/D,MAAM,UAAU,GAAG,EAAE,CAAC;wBACtB,KAAK,IAAI,GAAG,GAAG,MAAM,EAAE,GAAG,GAAG,WAAW,EAAE,GAAG,EAAE,EAAE;4BAC/C,IAAI,KAAK,CAAC,SAAS,EAAE;gCACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;6BACvC;iCAAM;gCACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;6BAClC;yBACF;wBACD,KAAK,CAAC,SAAS;4BACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC;4BAChD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;qBACpD;yBAAM;wBAEL,MAAM,OAAO,GAAG,EAAE,CAAC;wBACnB,KACE,IAAI,GAAG,GAAG,MAAM,EAChB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACnF,GAAG,EAAE,EACL;4BACA,IAAI,KAAK,CAAC,SAAS,EAAE;gCACnB,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;6BACpC;iCAAM;gCACL,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;6BAC/B;yBACF;wBACD,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;qBAC7G;iBACF;aACF;SACF;aAAM;YACL,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,KACE,IAAI,GAAG,GAAG,WAAW,GAAG,WAAW,EACnC,GAAG,GAAG,WAAW,GAAG,WAAW,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAC/E,GAAG,EAAE,EACL;gBACA,IAAI,KAAK,CAAC,SAAS,EAAE;oBACnB,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBACpC;qBAAM;oBACL,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAC/B;aACF;YACD,MAAM,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAAC;YACnF,MAAM,sBAAsB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,2BAA2B,CAAC;YACzF,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,mBAAmB,EAAE,GAAG,EAAE,EAAE;gBAC1E,IAAI,KAAK,CAAC,SAAS,EAAE;oBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBACvC;qBAAM;oBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAClC;aACF;YACD,KACE,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,sBAAsB,EACtF,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,EACzD,GAAG,EAAE,EACL;gBACA,IAAI,KAAK,CAAC,SAAS,EAAE;oBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iBACvC;qBAAM;oBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAClC;aACF;YACD,KAAK,CAAC,SAAS;gBACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC;gBACrD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;SACzD;KACF;AAEH,CAAC;AAhID,kDAgIC;AAMD,SAAgB,sBAAsB,CAAC,YAAmC,EAAE,KAAgB;;IAC1F,IAAI,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,IAAG,CAAC,EAAE;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;YACzB,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,qBAAqB,mDAAG,YAAY,CAAC,CAAC;YAC7E,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;YAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;YAEtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;SACrC;aAAM,IAAK,KAAK,CAAC,UAA+B,CAAC,gBAAgB,KAAK,MAAM,EAAE;YAC7E,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,oBAAoB,mDAAG,YAAY,CAAC,CAAC;YAC5E,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;YAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;YAEtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;SACrC;aAAM,IAAI,KAAK,CAAC,SAAS,EAAE;YAC1B,KAAK,CAAC,UAAU,CAAC,sBAAsB,CAAC,YAAwB,CAAC,CAAC;YAClE,WAAW,CAAC,KAAK,CAAC,CAAC;YACnB,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAE3B,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;SACrC;aAAM;YACL,MAAM,mBAAmB,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,YAAwB,CAAC,CAAC;YACrF,IAAI,mBAAmB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,OAAO;aACR;YACD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;YACtE,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;YACtE,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACvE,MAAM,cAAc,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,KAAK,CAAC,UAAU,EAAE;gBACpB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC;gBACvD,MAAM,UAAU,GAAG,YAAY,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;gBACrD,MAAM,QAAQ,GAAG,UAAU,GAAG,YAAY,CAAC;gBAC3C,IAAI,cAAc,GAAG,QAAQ,EAAE;oBAE7B,IAAI,cAAc,GAAG,QAAQ,GAAG,YAAY,EAAE;wBAE5C,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;wBAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;qBACrC;yBAAM;wBACL,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;wBAC/F,MAAM,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAAC;wBAEnF,MAAM,SAAS,GACb,cAAc;4BACd,CAAC,QAAQ,GAAG,YAAY,CAAC;4BACzB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;4BAC5E,mBAAmB,CAAC;wBAEtB,MAAM,UAAU,GAAG,EAAE,CAAC;wBACtB,MAAM,OAAO,GAAG,EAAE,CAAC;wBAEnB,KAAK,IAAI,GAAG,GAAG,SAAS,EAAE,GAAG,GAAG,WAAW,EAAE,GAAG,EAAE,EAAE;4BAClD,IAAI,KAAK,CAAC,SAAS,EAAE;gCACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;6BACvC;iCAAM;gCACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;6BAClC;yBACF;wBAED,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,mBAAmB,EAAE,GAAG,EAAE,EAAE;4BAC1E,IAAI,KAAK,CAAC,SAAS,EAAE;gCACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;6BACvC;iCAAM;gCACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;6BAClC;yBACF;wBAED,IAAI,WAAW,GAAG,WAAW,EAAE;4BAE7B,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,EAAE,GAAG,EAAE,EAAE;gCACpD,IAAI,KAAK,CAAC,SAAS,EAAE;oCACnB,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;iCACpC;qCAAM;oCACL,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iCAC/B;6BACF;yBACF;wBACD,MAAA,KAAK,CAAC,iBAAiB,0CAAE,UAAU,EAAE,CAAC;wBACtC,KAAK,CAAC,SAAS;4BACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,CAAC;4BACrD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;wBACxD,MAAA,KAAK,CAAC,iBAAiB,0CAAE,mBAAmB,EAAE,CAAC;qBAChD;iBACF;aACF;iBAAM;gBACL,MAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;gBAC/F,MAAM,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAAC;gBACnF,MAAM,sBAAsB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,2BAA2B,CAAC;gBACzF,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAChE,MAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;oBAChD,MAAM,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,mBAAmB,CAAC;oBAC/D,IAAI,KAAK,CAAC,SAAS,EAAE;wBACnB,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;qBACvC;yBAAM;wBACL,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;qBACvC;iBACF;gBACD,MAAM,UAAU,GAAG,EAAE,CAAC;gBACtB,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,mBAAmB,EAAE,GAAG,EAAE,EAAE;oBAC1E,IAAI,KAAK,CAAC,SAAS,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;qBACvC;yBAAM;wBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;qBAClC;iBACF;gBACD,KACE,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,sBAAsB,EACtF,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,EACzD,GAAG,EAAE,EACL;oBACA,IAAI,KAAK,CAAC,SAAS,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;qBACvC;yBAAM;wBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;qBAClC;iBACF;gBAED,MAAA,KAAK,CAAC,iBAAiB,0CAAE,UAAU,EAAE,CAAC;gBACtC,KAAK,CAAC,SAAS;oBACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,CAAC;oBACrD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;gBACxD,MAAA,KAAK,CAAC,iBAAiB,0CAAE,mBAAmB,EAAE,CAAC;aAChD;SACF;KAEF;AACH,CAAC;AAtID,wDAsIC;AAOD,SAAgB,sBAAsB,CAAC,OAAc,EAAE,YAAmC,EAAE,KAAgB;;IAC1G,IAAI,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,IAAG,CAAC,EAAE;QAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE;YACzB,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,qBAAqB,mDAAG,OAAO,EAAE,YAAwB,CAAC,CAAC;YAClG,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;YAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;YAEtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;SACrC;aAAM,IAAK,KAAK,CAAC,UAA+B,CAAC,gBAAgB,KAAK,MAAM,EAAE;YAC7E,MAAA,MAAC,KAAK,CAAC,UAA+B,EAAC,oBAAoB,mDAAG,OAAO,EAAE,YAAwB,CAAC,CAAC;YACjG,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAC3B,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;YAClD,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;YAEtC,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;SACrC;aAAM,IAAI,KAAK,CAAC,SAAS,EAAE;YAC1B,KAAK,CAAC,UAAU,CAAC,sBAAsB,CAAC,OAAO,EAAE,YAAwB,CAAC,CAAC;YAC3E,WAAW,CAAC,KAAK,CAAC,CAAC;YACnB,KAAK,CAAC,kBAAkB,EAAE,CAAC;YAE3B,KAAK,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC9B,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;SACrC;aAAM;YACL,MAAM,kBAAkB,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACjF,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnC,OAAO;aACR;YACD,MAAM,YAAY,GAAG,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC,CAAC;YAChG,MAAM,oBAAoB,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAChE,IAAI,KAAK,CAAC,UAAU,EAAE;gBACpB,MAAM,EAAE,YAAY,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC;gBACvD,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;gBAC/F,MAAM,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAAC;gBACnF,MAAM,UAAU,GAAG,YAAY,GAAG,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC;gBACrD,MAAM,QAAQ,GAAG,UAAU,GAAG,YAAY,CAAC;gBAC3C,MAAM,UAAU,GAAG,EAAE,CAAC;gBACtB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAChE,MAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;oBAChD,IAAI,WAAW,GAAG,QAAQ,IAAI,WAAW,IAAI,QAAQ,GAAG,YAAY,EAAE;wBACpE,MAAM,MAAM,GACV,WAAW;4BACX,CAAC,QAAQ,GAAG,YAAY,CAAC;4BACzB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;4BAC5E,mBAAmB,CAAC;wBACtB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACzB;iBACF;gBACD,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;oBAC1B,MAAM,cAAc,GAAG,EAAE,CAAC;oBAC1B,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;wBACtD,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;wBACpC,IAAI,KAAK,CAAC,SAAS,EAAE;4BACnB,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;yBACjD;6BAAM;4BACL,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;yBACjD;qBACF;oBACD,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,mBAAmB,EAAE,GAAG,EAAE,EAAE;wBAC1E,IAAI,KAAK,CAAC,SAAS,EAAE;4BACnB,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;yBAC3C;6BAAM;4BACL,cAAc,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;yBACtC;qBACF;oBACD,KAAK,CAAC,SAAS;wBACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC;wBACpD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,cAAc,CAAC,CAAC;iBACxD;aACF;iBAAM;gBACL,MAAM,UAAU,GAAG,EAAE,CAAC;gBACtB,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,CAAC;gBAC/F,MAAM,mBAAmB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,CAAC;gBACnF,MAAM,sBAAsB,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,2BAA2B,CAAC;gBACzF,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAChE,MAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;oBAChD,MAAM,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,mBAAmB,CAAC;oBAC/D,IAAI,KAAK,CAAC,SAAS,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;qBAC1C;yBAAM;wBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;qBAC1C;iBACF;gBACD,KAAK,IAAI,GAAG,GAAG,WAAW,EAAE,GAAG,GAAG,WAAW,GAAG,mBAAmB,EAAE,GAAG,EAAE,EAAE;oBAC1E,IAAI,KAAK,CAAC,SAAS,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;qBACvC;yBAAM;wBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;qBAClC;iBACF;gBACD,KACE,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,sBAAsB,EACtF,GAAG,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,EACzD,GAAG,EAAE,EACL;oBACA,IAAI,KAAK,CAAC,SAAS,EAAE;wBACnB,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;qBACvC;yBAAM;wBACL,UAAU,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;qBAClC;iBACF;gBACD,KAAK,CAAC,SAAS;oBACb,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC;oBAChD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;aACpD;SACF;KAEF;AACH,CAAC;AA9GD,wDA8GC","file":"record-helper.js","sourcesContent":["/* eslint-disable max-depth */\nimport type { ListTable } from '../ListTable';\nimport type { CachedDataSource } from '../data';\nimport { computeColWidth } from '../scenegraph/layout/compute-col-width';\nimport { computeRowHeight } from '../scenegraph/layout/compute-row-height';\nimport { isPromise } from '../tools/helper';\nimport { defaultOrderFn } from '../tools/util';\nimport type { SortState } from '../ts-types';\nimport { TABLE_EVENT_TYPE } from './TABLE_EVENT_TYPE';\n\n/**\n * 更改单元格数据 会触发change_cell_value事件\n * @param col\n * @param row\n * @param value 更改后的值\n * @param workOnEditableCell 限制只能更改配置了编辑器的单元格值。快捷键paste这里配置的true，限制只能修改可编辑单元格值\n * @param triggerEvent 是否在值发生改变的时候触发change_cell_value事件\n */\nexport function listTableChangeCellValue(\n  col: number,\n  row: number,\n  value: string | number | null,\n  workOnEditableCell: boolean,\n  triggerEvent: boolean,\n  table: ListTable\n) {\n  if ((workOnEditableCell && table.isHasEditorDefine(col, row)) || workOnEditableCell === false) {\n    const recordIndex = table.getRecordShowIndexByCell(col, row);\n    const { field } = table.internalProps.layoutMap.getBody(col, row);\n    const beforeChangeValue = table.getCellRawValue(col, row);\n    const oldValue = table.getCellOriginValue(col, row);\n    if (table.isHeader(col, row)) {\n      table.internalProps.layoutMap.updateColumnTitle(col, row, value as string);\n    } else {\n      table.dataSource.changeFieldValue(value, recordIndex, field, col, row, table);\n    }\n    const range = table.getCellRange(col, row);\n    //改变单元格的值后 聚合值做重新计算\n    const aggregators = table.internalProps.layoutMap.getAggregatorsByCell(col, row);\n    if (aggregators) {\n      if (Array.isArray(aggregators)) {\n        for (let i = 0; i < aggregators?.length; i++) {\n          aggregators[i].recalculate();\n        }\n      } else {\n        aggregators.recalculate();\n      }\n      const aggregatorCells = table.internalProps.layoutMap.getAggregatorCellAddress(\n        range.start.col,\n        range.start.row,\n        range.end.col,\n        range.end.row\n      );\n      for (let i = 0; i < aggregatorCells.length; i++) {\n        const range = table.getCellRange(aggregatorCells[i].col, aggregatorCells[i].row);\n        for (let sCol = range.start.col; sCol <= range.end.col; sCol++) {\n          for (let sRow = range.start.row; sRow <= range.end.row; sRow++) {\n            table.scenegraph.updateCellContent(sCol, sRow);\n          }\n        }\n      }\n    }\n\n    // const cell_value = table.getCellValue(col, row);\n\n    for (let sCol = range.start.col; sCol <= range.end.col; sCol++) {\n      for (let sRow = range.start.row; sRow <= range.end.row; sRow++) {\n        table.scenegraph.updateCellContent(sCol, sRow);\n      }\n    }\n    if (table.widthMode === 'adaptive' || (table.autoFillWidth && table.getAllColsWidth() <= table.tableNoFrameWidth)) {\n      if (table.internalProps._widthResizedColMap.size === 0) {\n        //如果没有手动调整过行高列宽 则重新计算一遍并重新分配\n        table.scenegraph.recalculateColWidths();\n      }\n    } else if (!table.internalProps._widthResizedColMap.has(col)) {\n      const oldWidth = table.getColWidth(col);\n      const newWidth = computeColWidth(col, 0, table.rowCount - 1, table, false);\n      if (newWidth !== oldWidth) {\n        table.scenegraph.updateColWidth(col, newWidth - oldWidth);\n      }\n    }\n    if (\n      table.heightMode === 'adaptive' ||\n      (table.autoFillHeight && table.getAllRowsHeight() <= table.tableNoFrameHeight)\n    ) {\n      if (table.internalProps._heightResizedRowMap.size === 0) {\n        table.scenegraph.recalculateRowHeights();\n      }\n    } else if (table.isAutoRowHeight(row) && !table.internalProps._heightResizedRowMap.has(row)) {\n      const oldHeight = table.getRowHeight(row);\n      const newHeight = computeRowHeight(row, 0, table.colCount - 1, table);\n      table.scenegraph.updateRowHeight(row, newHeight - oldHeight);\n    }\n    const changedValue = table.getCellOriginValue(col, row);\n    if (oldValue !== changedValue && triggerEvent) {\n      table.fireListeners(TABLE_EVENT_TYPE.CHANGE_CELL_VALUE, {\n        col,\n        row,\n        rawValue: beforeChangeValue,\n        currentValue: oldValue,\n        changedValue\n      });\n    }\n    table.scenegraph.updateNextFrame();\n  }\n}\n/**\n * 批量更新多个单元格的数据\n * @param col 粘贴数据的起始列号\n * @param row 粘贴数据的起始行号\n * @param values 多个单元格的数据数组\n * @param workOnEditableCell 是否仅更改可编辑单元格\n * @param triggerEvent 是否在值发生改变的时候触发change_cell_value事件\n */\nexport function listTableChangeCellValues(\n  startCol: number,\n  startRow: number,\n  values: (string | number)[][],\n  workOnEditableCell: boolean,\n  triggerEvent: boolean,\n  table: ListTable\n) {\n  let pasteColEnd = startCol;\n  let pasteRowEnd = startRow;\n  // const rowCount = values.length;\n  //#region 提前组织好未更改前的数据\n  const beforeChangeValues: (string | number)[][] = [];\n  const oldValues: (string | number)[][] = [];\n  let cellUpdateType: 'normal' | 'sort' | 'group';\n\n  for (let i = 0; i < values.length; i++) {\n    if (startRow + i > table.rowCount - 1) {\n      break;\n    }\n    const rowValues = values[i];\n    const rawRowValues: (string | number)[] = [];\n    const oldRowValues: (string | number)[] = [];\n    beforeChangeValues.push(rawRowValues);\n    oldValues.push(oldRowValues);\n    for (let j = 0; j < rowValues.length; j++) {\n      if (startCol + j > table.colCount - 1) {\n        break;\n      }\n      cellUpdateType = getCellUpdateType(startCol + j, startRow + i, table, cellUpdateType);\n      const beforeChangeValue = table.getCellRawValue(startCol + j, startRow + i);\n      rawRowValues.push(beforeChangeValue);\n      const oldValue = table.getCellOriginValue(startCol + j, startRow + i);\n      oldRowValues.push(oldValue);\n    }\n  }\n  //#endregion\n  for (let i = 0; i < values.length; i++) {\n    if (startRow + i > table.rowCount - 1) {\n      break;\n    }\n    pasteRowEnd = startRow + i;\n    const rowValues = values[i];\n    let thisRowPasteColEnd = startCol;\n    for (let j = 0; j < rowValues.length; j++) {\n      if (startCol + j > table.colCount - 1) {\n        break;\n      }\n      thisRowPasteColEnd = startCol + j;\n      let isCanChange = false;\n      if (workOnEditableCell === false) {\n        isCanChange = true;\n      } else {\n        if (table.isHasEditorDefine(startCol + j, startRow + i)) {\n          const editor = table.getEditor(startCol + j, startRow + i);\n          const oldValue = oldValues[i][j];\n          const value = rowValues[j];\n          const maybePromiseOrValue = editor?.validateValue?.(value, oldValue) ?? true;\n          if (isPromise(maybePromiseOrValue)) {\n            //TODO 处理promise的情况\n            isCanChange = true;\n          } else {\n            isCanChange =\n              maybePromiseOrValue === true ||\n              maybePromiseOrValue === 'validate-exit' ||\n              maybePromiseOrValue === 'invalidate-exit';\n          }\n        }\n      }\n      // if ((workOnEditableCell && table.isHasEditorDefine(startCol + j, startRow + i)) || workOnEditableCell === false) {\n      if (isCanChange) {\n        const value = rowValues[j];\n        const recordIndex = table.getRecordShowIndexByCell(startCol + j, startRow + i);\n        const { field } = table.internalProps.layoutMap.getBody(startCol + j, startRow + i);\n        // const beforeChangeValue = table.getCellRawValue(startCol + j, startRow + i);\n        // const oldValue = table.getCellOriginValue(startCol + j, startRow + i);\n        const beforeChangeValue = beforeChangeValues[i][j];\n        const oldValue = oldValues[i][j];\n        if (table.isHeader(startCol + j, startRow + i)) {\n          table.internalProps.layoutMap.updateColumnTitle(startCol + j, startRow + i, value as string);\n        } else {\n          table.dataSource.changeFieldValue(value, recordIndex, field, startCol + j, startRow + i, table);\n        }\n        const changedValue = table.getCellOriginValue(startCol + j, startRow + i);\n        if (oldValue !== changedValue && triggerEvent) {\n          table.fireListeners(TABLE_EVENT_TYPE.CHANGE_CELL_VALUE, {\n            col: startCol + j,\n            row: startRow + i,\n            rawValue: beforeChangeValue,\n            currentValue: oldValue,\n            changedValue\n          });\n        }\n      }\n    }\n    pasteColEnd = Math.max(pasteColEnd, thisRowPasteColEnd);\n  }\n\n  // const cell_value = table.getCellValue(col, row);\n  const startRange = table.getCellRange(startCol, startRow);\n  const range = table.getCellRange(pasteColEnd, pasteRowEnd);\n\n  //改变单元格的值后 聚合值做重新计算\n  const aggregators = table.internalProps.layoutMap.getAggregatorsByCellRange(\n    startRange.start.col,\n    startRange.start.row,\n    range.end.col,\n    range.end.row\n  );\n\n  if (aggregators) {\n    for (let i = 0; i < aggregators?.length; i++) {\n      aggregators[i].recalculate();\n    }\n\n    if (cellUpdateType === 'normal') {\n      const aggregatorCells = table.internalProps.layoutMap.getAggregatorCellAddress(\n        startRange.start.col,\n        startRange.start.row,\n        range.end.col,\n        range.end.row\n      );\n      for (let i = 0; i < aggregatorCells.length; i++) {\n        const range = table.getCellRange(aggregatorCells[i].col, aggregatorCells[i].row);\n        for (let sCol = range.start.col; sCol <= range.end.col; sCol++) {\n          for (let sRow = range.start.row; sRow <= range.end.row; sRow++) {\n            table.scenegraph.updateCellContent(sCol, sRow);\n          }\n        }\n      }\n    }\n  }\n\n  if (cellUpdateType === 'group') {\n    (table.dataSource as CachedDataSource).updateRecordsForGroup([], []);\n  }\n\n  if (cellUpdateType === 'sort' || cellUpdateType === 'group') {\n    (table.dataSource as any).sortedIndexMap.clear();\n    sortRecords(table);\n    table.refreshRowColCount();\n    table.internalProps.layoutMap.clearCellRangeMap();\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n    return;\n  }\n\n  for (let sCol = startRange.start.col; sCol <= range.end.col; sCol++) {\n    for (let sRow = startRange.start.row; sRow <= range.end.row; sRow++) {\n      table.scenegraph.updateCellContent(sCol, sRow);\n    }\n  }\n  if (table.widthMode === 'adaptive' || (table.autoFillWidth && table.getAllColsWidth() <= table.tableNoFrameWidth)) {\n    if (table.internalProps._widthResizedColMap.size === 0) {\n      //如果没有手动调整过行高列宽 则重新计算一遍并重新分配\n      table.scenegraph.recalculateColWidths();\n    }\n  } else {\n    for (let sCol = startCol; sCol <= range.end.col; sCol++) {\n      if (!table.internalProps._widthResizedColMap.has(sCol)) {\n        const oldWidth = table.getColWidth(sCol);\n        const newWidth = computeColWidth(sCol, 0, table.rowCount - 1, table, false);\n        if (newWidth !== oldWidth) {\n          table.scenegraph.updateColWidth(sCol, newWidth - oldWidth);\n        }\n      }\n    }\n  }\n  if (\n    table.heightMode === 'adaptive' ||\n    (table.autoFillHeight && table.getAllRowsHeight() <= table.tableNoFrameHeight)\n  ) {\n    table.scenegraph.recalculateRowHeights();\n  } else if (table.isAutoRowHeight(startRow)) {\n    const rows: number[] = [];\n    const deltaYs: number[] = [];\n    for (let sRow = startRow; sRow <= range.end.row; sRow++) {\n      if (table.rowHeightsMap.get(sRow)) {\n        // 已经计算过行高的才走更新逻辑\n        const oldHeight = table.getRowHeight(sRow);\n        const newHeight = computeRowHeight(sRow, 0, table.colCount - 1, table);\n        rows.push(sRow);\n        deltaYs.push(newHeight - oldHeight);\n      }\n    }\n    table.scenegraph.updateRowsHeight(rows, deltaYs);\n  }\n\n  table.scenegraph.updateNextFrame();\n}\n\ntype CellUpdateType = 'normal' | 'sort' | 'group';\nfunction getCellUpdateType(\n  col: number,\n  row: number,\n  table: ListTable,\n  oldCellUpdateType: CellUpdateType | undefined\n): CellUpdateType {\n  if (oldCellUpdateType === 'group') {\n    return oldCellUpdateType;\n  }\n  if (oldCellUpdateType === 'sort' && !table.options.groupBy) {\n    return oldCellUpdateType;\n  }\n  let cellUpdateType: CellUpdateType = 'normal';\n  if (table.options.groupBy) {\n    cellUpdateType = 'group';\n  } else if (!table.isHeader(col, row) && (table.dataSource as any).lastOrderField) {\n    const field = table.getBodyField(col, row);\n    if (field === (table.dataSource as any).lastOrderField) {\n      cellUpdateType = 'sort';\n    }\n  }\n  return cellUpdateType;\n}\n\nexport function sortRecords(table: ListTable) {\n  let sortState = table.sortState;\n  sortState = !sortState || Array.isArray(sortState) ? sortState : [sortState];\n\n  if (sortState) {\n    sortState = (sortState as SortState[]).map(item => {\n      item.orderFn = table._getSortFuncFromHeaderOption(undefined, item.field) ?? defaultOrderFn;\n      //const hd = table.internalProps.layoutMap.headerObjects.find((col: any) => col && col.field === item.field);\n      return item;\n    });\n\n    table.dataSource.sort(sortState);\n  }\n}\n\n/**\n * 添加数据 单条数据\n * @param record 数据\n * @param recordIndex 向数据源中要插入的位置，从0开始。不设置recordIndex的话 默认追加到最后。\n * 如果设置了排序规则recordIndex无效，会自动适应排序逻辑确定插入顺序。\n * recordIndex 可以通过接口getRecordShowIndexByCell获取\n */\nexport function listTableAddRecord(record: any, recordIndex: number | number[], table: ListTable) {\n  if (table.options.groupBy) {\n    (table.dataSource as CachedDataSource).addRecordsForGroup?.([record], recordIndex);\n    table.refreshRowColCount();\n    table.internalProps.layoutMap.clearCellRangeMap();\n    table.sortState && sortRecords(table);\n\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n  } else if ((table.dataSource as CachedDataSource).rowHierarchyType === 'tree') {\n    (table.dataSource as CachedDataSource).addRecordsForTree?.([record], recordIndex);\n    table.refreshRowColCount();\n    table.internalProps.layoutMap.clearCellRangeMap();\n    table.sortState && sortRecords(table);\n\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n  } else if (table.sortState) {\n    table.dataSource.addRecordForSorted(record);\n    sortRecords(table);\n    table.refreshRowColCount();\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n  } else {\n    recordIndex = recordIndex as number;\n    if (recordIndex === undefined || recordIndex > table.dataSource.sourceLength) {\n      recordIndex = table.dataSource.sourceLength;\n    }\n    const headerCount = table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount;\n    table.dataSource.addRecord(record, recordIndex);\n    const oldRowCount = table.rowCount;\n    table.refreshRowColCount();\n    if (table.scenegraph.proxy.totalActualBodyRowCount === 0) {\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n      return;\n    }\n    const newRowCount = table.transpose ? table.colCount : table.rowCount;\n    if (table.pagination) {\n      const { perPageCount, currentPage } = table.pagination;\n      const startIndex = perPageCount * (currentPage || 0);\n      const endIndex = startIndex + perPageCount;\n      if (recordIndex < endIndex) {\n        //插入当前页或者前面的数据才需要更新 如果是插入的是当前页后面的数据不需要更新场景树\n        if (recordIndex < endIndex - perPageCount) {\n          // 如果是当页之前的数据 则整个场景树都更新\n          table.scenegraph.clearCells();\n          table.scenegraph.createSceneGraph();\n        } else {\n          //如果是插入当前页数据\n          const rowNum = recordIndex - (endIndex - perPageCount) + headerCount;\n          if (oldRowCount - headerCount === table.pagination.perPageCount) {\n            //如果当页数据是满的 则更新插入的部分行\n            const updateRows = [];\n            for (let row = rowNum; row < newRowCount; row++) {\n              if (table.transpose) {\n                updateRows.push({ col: row, row: 0 });\n              } else {\n                updateRows.push({ col: 0, row });\n              }\n            }\n            table.transpose\n              ? table.scenegraph.updateCol([], [], updateRows)\n              : table.scenegraph.updateRow([], [], updateRows);\n          } else {\n            //如果当页数据不是满的 则插入新数据\n            const addRows = [];\n            for (let row = rowNum; row < Math.min(newRowCount, rowNum + 1); row++) {\n              if (table.transpose) {\n                addRows.push({ col: row, row: 0 });\n              } else {\n                addRows.push({ col: 0, row });\n              }\n            }\n            table.transpose ? table.scenegraph.updateCol([], addRows, []) : table.scenegraph.updateRow([], addRows, []);\n          }\n        }\n      }\n    } else {\n      const addRows = [];\n      for (let row = recordIndex + headerCount; row < recordIndex + headerCount + 1; row++) {\n        if (table.transpose) {\n          addRows.push({ col: row, row: 0 });\n        } else {\n          addRows.push({ col: 0, row });\n        }\n      }\n      const updateRows = [];\n      const topAggregationCount = table.internalProps.layoutMap.hasAggregationOnTopCount;\n      const bottomAggregationCount = table.internalProps.layoutMap.hasAggregationOnBottomCount;\n      for (let row = headerCount; row < headerCount + topAggregationCount; row++) {\n        if (table.transpose) {\n          updateRows.push({ col: row, row: 0 });\n        } else {\n          updateRows.push({ col: 0, row });\n        }\n      }\n      for (\n        let row = (table.transpose ? table.colCount : table.rowCount) - bottomAggregationCount;\n        row < (table.transpose ? table.colCount : table.rowCount);\n        row++\n      ) {\n        if (table.transpose) {\n          updateRows.push({ col: row, row: 0 });\n        } else {\n          updateRows.push({ col: 0, row });\n        }\n      }\n      table.transpose ? table.scenegraph.updateCol([], addRows, []) : table.scenegraph.updateRow([], addRows, []);\n    }\n  }\n  // table.fireListeners(TABLE_EVENT_TYPE.ADD_RECORD, { row });\n}\n\n/**\n * 添加数据 支持多条数据\n * @param records 多条数据\n * @param recordIndex 向数据源中要插入的位置，从0开始。不设置recordIndex的话 默认追加到最后。\n * 如果设置了排序规则recordIndex无效，会自动适应排序逻辑确定插入顺序。\n * recordIndex 可以通过接口getRecordShowIndexByCell获取\n */\nexport function listTableAddRecords(records: any[], recordIndex: number | number[], table: ListTable) {\n  if (table.options.groupBy) {\n    (table.dataSource as CachedDataSource).addRecordsForGroup?.(records, recordIndex);\n    table.refreshRowColCount();\n    table.internalProps.layoutMap.clearCellRangeMap();\n    table.sortState && sortRecords(table);\n\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n  } else if ((table.dataSource as CachedDataSource).rowHierarchyType === 'tree') {\n    (table.dataSource as CachedDataSource).addRecordsForTree?.(records, recordIndex);\n    table.refreshRowColCount();\n    table.internalProps.layoutMap.clearCellRangeMap();\n    table.sortState && sortRecords(table);\n\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n  } else if (table.sortState) {\n    table.dataSource.addRecordsForSorted(records);\n    sortRecords(table);\n    table.refreshRowColCount();\n    // 更新整个场景树\n    table.scenegraph.clearCells();\n    table.scenegraph.createSceneGraph();\n  } else {\n    recordIndex = recordIndex as number;\n    if (recordIndex === undefined || recordIndex > table.dataSource.sourceLength) {\n      recordIndex = table.dataSource.sourceLength;\n    } else if (recordIndex < 0) {\n      recordIndex = 0;\n    }\n    const headerCount = table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount;\n    table.dataSource.addRecords(records, recordIndex);\n    const oldRowCount = table.transpose ? table.colCount : table.rowCount;\n    table.refreshRowColCount();\n    if (table.scenegraph.proxy.totalActualBodyRowCount === 0) {\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n      return;\n    }\n    const newRowCount = table.transpose ? table.colCount : table.rowCount;\n    if (table.pagination) {\n      const { perPageCount, currentPage } = table.pagination;\n      const startIndex = perPageCount * (currentPage || 0);\n      const endIndex = startIndex + perPageCount;\n      if (recordIndex < endIndex) {\n        //插入当前页或者前面的数据才需要更新 如果是插入的是当前页后面的数据不需要更新场景树\n        if (recordIndex < endIndex - perPageCount) {\n          // 如果是当页之前的数据 则整个场景树都更新\n          table.scenegraph.clearCells();\n          table.scenegraph.createSceneGraph();\n        } else {\n          //如果是插入当前页数据\n\n          const rowNum = recordIndex - (endIndex - perPageCount) + headerCount;\n          if (oldRowCount - headerCount === table.pagination.perPageCount) {\n            //如果当页数据是满的 则更新插入的部分行\n            const updateRows = [];\n            for (let row = rowNum; row < newRowCount; row++) {\n              if (table.transpose) {\n                updateRows.push({ col: row, row: 0 });\n              } else {\n                updateRows.push({ col: 0, row });\n              }\n            }\n            table.transpose\n              ? table.scenegraph.updateCol([], [], updateRows)\n              : table.scenegraph.updateRow([], [], updateRows);\n          } else {\n            //如果当页数据不是满的 则插入新数据\n            const addRows = [];\n            for (\n              let row = rowNum;\n              row < Math.min(newRowCount, rowNum + (Array.isArray(records) ? records.length : 1));\n              row++\n            ) {\n              if (table.transpose) {\n                addRows.push({ col: row, row: 0 });\n              } else {\n                addRows.push({ col: 0, row });\n              }\n            }\n            table.transpose ? table.scenegraph.updateCol([], addRows, []) : table.scenegraph.updateRow([], addRows, []);\n          }\n        }\n      }\n    } else {\n      const addRows = [];\n      for (\n        let row = recordIndex + headerCount;\n        row < recordIndex + headerCount + (Array.isArray(records) ? records.length : 1);\n        row++\n      ) {\n        if (table.transpose) {\n          addRows.push({ col: row, row: 0 });\n        } else {\n          addRows.push({ col: 0, row });\n        }\n      }\n      const topAggregationCount = table.internalProps.layoutMap.hasAggregationOnTopCount;\n      const bottomAggregationCount = table.internalProps.layoutMap.hasAggregationOnBottomCount;\n      const updateRows = [];\n      for (let row = headerCount; row < headerCount + topAggregationCount; row++) {\n        if (table.transpose) {\n          updateRows.push({ col: row, row: 0 });\n        } else {\n          updateRows.push({ col: 0, row });\n        }\n      }\n      for (\n        let row = (table.transpose ? table.colCount : table.rowCount) - bottomAggregationCount;\n        row < (table.transpose ? table.colCount : table.rowCount);\n        row++\n      ) {\n        if (table.transpose) {\n          updateRows.push({ col: row, row: 0 });\n        } else {\n          updateRows.push({ col: 0, row });\n        }\n      }\n      table.transpose\n        ? table.scenegraph.updateCol([], addRows, updateRows)\n        : table.scenegraph.updateRow([], addRows, updateRows);\n    }\n  }\n  // table.fireListeners(TABLE_EVENT_TYPE.ADD_RECORD, { row });\n}\n\n/**\n * 删除数据 支持多条数据\n * @param recordIndexs 要删除数据的索引（显示在body中的索引，即要修改的是body部分的第几行数据）\n */\nexport function listTableDeleteRecords(recordIndexs: number[] | number[][], table: ListTable) {\n  if (recordIndexs?.length > 0) {\n    if (table.options.groupBy) {\n      (table.dataSource as CachedDataSource).deleteRecordsForGroup?.(recordIndexs);\n      table.refreshRowColCount();\n      table.internalProps.layoutMap.clearCellRangeMap();\n      table.sortState && sortRecords(table);\n      // 更新整个场景树\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n    } else if ((table.dataSource as CachedDataSource).rowHierarchyType === 'tree') {\n      (table.dataSource as CachedDataSource).deleteRecordsForTree?.(recordIndexs);\n      table.refreshRowColCount();\n      table.internalProps.layoutMap.clearCellRangeMap();\n      table.sortState && sortRecords(table);\n      // 更新整个场景树\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n    } else if (table.sortState) {\n      table.dataSource.deleteRecordsForSorted(recordIndexs as number[]);\n      sortRecords(table);\n      table.refreshRowColCount();\n      // 更新整个场景树\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n    } else {\n      const deletedRecordIndexs = table.dataSource.deleteRecords(recordIndexs as number[]);\n      if (deletedRecordIndexs.length === 0) {\n        return;\n      }\n      const oldRowCount = table.transpose ? table.colCount : table.rowCount;\n      table.refreshRowColCount();\n      const newRowCount = table.transpose ? table.colCount : table.rowCount;\n      const recordIndexsMinToMax = deletedRecordIndexs.sort((a, b) => a - b);\n      const minRecordIndex = recordIndexsMinToMax[0];\n      if (table.pagination) {\n        const { perPageCount, currentPage } = table.pagination;\n        const startIndex = perPageCount * (currentPage || 0);\n        const endIndex = startIndex + perPageCount;\n        if (minRecordIndex < endIndex) {\n          //删除当前页或者前面的数据才需要更新 如果是删除的是当前页后面的数据不需要更新场景树\n          if (minRecordIndex < endIndex - perPageCount) {\n            // 如果删除包含当页之前的数据 则整个场景树都更新\n            table.scenegraph.clearCells();\n            table.scenegraph.createSceneGraph();\n          } else {\n            const headerCount = table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount;\n            const topAggregationCount = table.internalProps.layoutMap.hasAggregationOnTopCount;\n            //如果是仅删除当前页数据\n            const minRowNum =\n              minRecordIndex -\n              (endIndex - perPageCount) +\n              (table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount) +\n              topAggregationCount;\n            //如果当页数据是满的 则更新影响的部分行\n            const updateRows = [];\n            const delRows = [];\n\n            for (let row = minRowNum; row < newRowCount; row++) {\n              if (table.transpose) {\n                updateRows.push({ col: row, row: 0 });\n              } else {\n                updateRows.push({ col: 0, row });\n              }\n            }\n\n            for (let row = headerCount; row < headerCount + topAggregationCount; row++) {\n              if (table.transpose) {\n                updateRows.push({ col: row, row: 0 });\n              } else {\n                updateRows.push({ col: 0, row });\n              }\n            }\n\n            if (newRowCount < oldRowCount) {\n              //如果如果删除后不满 需要有删除数据\n              for (let row = newRowCount; row < oldRowCount; row++) {\n                if (table.transpose) {\n                  delRows.push({ col: row, row: 0 });\n                } else {\n                  delRows.push({ col: 0, row });\n                }\n              }\n            }\n            table.reactCustomLayout?.clearCache();\n            table.transpose\n              ? table.scenegraph.updateCol(delRows, [], updateRows)\n              : table.scenegraph.updateRow(delRows, [], updateRows);\n            table.reactCustomLayout?.updateAllCustomCell();\n          }\n        }\n      } else {\n        const delRows = [];\n        const headerCount = table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount;\n        const topAggregationCount = table.internalProps.layoutMap.hasAggregationOnTopCount;\n        const bottomAggregationCount = table.internalProps.layoutMap.hasAggregationOnBottomCount;\n        for (let index = 0; index < recordIndexsMinToMax.length; index++) {\n          const recordIndex = recordIndexsMinToMax[index];\n          const rowNum = recordIndex + headerCount + topAggregationCount;\n          if (table.transpose) {\n            delRows.push({ col: rowNum, row: 0 });\n          } else {\n            delRows.push({ col: 0, row: rowNum });\n          }\n        }\n        const updateRows = [];\n        for (let row = headerCount; row < headerCount + topAggregationCount; row++) {\n          if (table.transpose) {\n            updateRows.push({ col: row, row: 0 });\n          } else {\n            updateRows.push({ col: 0, row });\n          }\n        }\n        for (\n          let row = (table.transpose ? table.colCount : table.rowCount) - bottomAggregationCount;\n          row < (table.transpose ? table.colCount : table.rowCount);\n          row++\n        ) {\n          if (table.transpose) {\n            updateRows.push({ col: row, row: 0 });\n          } else {\n            updateRows.push({ col: 0, row });\n          }\n        }\n\n        table.reactCustomLayout?.clearCache();\n        table.transpose\n          ? table.scenegraph.updateCol(delRows, [], updateRows)\n          : table.scenegraph.updateRow(delRows, [], updateRows);\n        table.reactCustomLayout?.updateAllCustomCell();\n      }\n    }\n    // table.fireListeners(TABLE_EVENT_TYPE.ADD_RECORD, { row });\n  }\n}\n\n/**\n * 修改数据 支持多条数据\n * @param records 修改数据条目\n * @param recordIndexs 对应修改数据的索引（显示在body中的索引，即要修改的是body部分的第几行数据）\n */\nexport function listTableUpdateRecords(records: any[], recordIndexs: (number | number[])[], table: ListTable) {\n  if (recordIndexs?.length > 0) {\n    if (table.options.groupBy) {\n      (table.dataSource as CachedDataSource).updateRecordsForGroup?.(records, recordIndexs as number[]);\n      table.refreshRowColCount();\n      table.internalProps.layoutMap.clearCellRangeMap();\n      table.sortState && sortRecords(table);\n      // 更新整个场景树\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n    } else if ((table.dataSource as CachedDataSource).rowHierarchyType === 'tree') {\n      (table.dataSource as CachedDataSource).updateRecordsForTree?.(records, recordIndexs as number[]);\n      table.refreshRowColCount();\n      table.internalProps.layoutMap.clearCellRangeMap();\n      table.sortState && sortRecords(table);\n      // 更新整个场景树\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n    } else if (table.sortState) {\n      table.dataSource.updateRecordsForSorted(records, recordIndexs as number[]);\n      sortRecords(table);\n      table.refreshRowColCount();\n      // 更新整个场景树\n      table.scenegraph.clearCells();\n      table.scenegraph.createSceneGraph();\n    } else {\n      const updateRecordIndexs = table.dataSource.updateRecords(records, recordIndexs);\n      if (updateRecordIndexs.length === 0) {\n        return;\n      }\n      const bodyRowIndex = updateRecordIndexs.map(index => table.getBodyRowIndexByRecordIndex(index));\n      const recordIndexsMinToMax = bodyRowIndex.sort((a, b) => a - b);\n      if (table.pagination) {\n        const { perPageCount, currentPage } = table.pagination;\n        const headerCount = table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount;\n        const topAggregationCount = table.internalProps.layoutMap.hasAggregationOnTopCount;\n        const startIndex = perPageCount * (currentPage || 0);\n        const endIndex = startIndex + perPageCount;\n        const updateRows = [];\n        for (let index = 0; index < recordIndexsMinToMax.length; index++) {\n          const recordIndex = recordIndexsMinToMax[index];\n          if (recordIndex < endIndex && recordIndex >= endIndex - perPageCount) {\n            const rowNum =\n              recordIndex -\n              (endIndex - perPageCount) +\n              (table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount) +\n              topAggregationCount;\n            updateRows.push(rowNum);\n          }\n        }\n        if (updateRows.length >= 1) {\n          const updateRowCells = [];\n          for (let index = 0; index < updateRows.length; index++) {\n            const updateRow = updateRows[index];\n            if (table.transpose) {\n              updateRowCells.push({ col: updateRow, row: 0 });\n            } else {\n              updateRowCells.push({ col: 0, row: updateRow });\n            }\n          }\n          for (let row = headerCount; row < headerCount + topAggregationCount; row++) {\n            if (table.transpose) {\n              updateRowCells.push({ col: row, row: 0 });\n            } else {\n              updateRowCells.push({ col: 0, row });\n            }\n          }\n          table.transpose\n            ? table.scenegraph.updateCol([], [], updateRowCells)\n            : table.scenegraph.updateRow([], [], updateRowCells);\n        }\n      } else {\n        const updateRows = [];\n        const headerCount = table.transpose ? table.rowHeaderLevelCount : table.columnHeaderLevelCount;\n        const topAggregationCount = table.internalProps.layoutMap.hasAggregationOnTopCount;\n        const bottomAggregationCount = table.internalProps.layoutMap.hasAggregationOnBottomCount;\n        for (let index = 0; index < recordIndexsMinToMax.length; index++) {\n          const recordIndex = recordIndexsMinToMax[index];\n          const rowNum = recordIndex + headerCount + topAggregationCount;\n          if (table.transpose) {\n            updateRows.push({ col: rowNum, row: 0 });\n          } else {\n            updateRows.push({ col: 0, row: rowNum });\n          }\n        }\n        for (let row = headerCount; row < headerCount + topAggregationCount; row++) {\n          if (table.transpose) {\n            updateRows.push({ col: row, row: 0 });\n          } else {\n            updateRows.push({ col: 0, row });\n          }\n        }\n        for (\n          let row = (table.transpose ? table.colCount : table.rowCount) - bottomAggregationCount;\n          row < (table.transpose ? table.colCount : table.rowCount);\n          row++\n        ) {\n          if (table.transpose) {\n            updateRows.push({ col: row, row: 0 });\n          } else {\n            updateRows.push({ col: 0, row });\n          }\n        }\n        table.transpose\n          ? table.scenegraph.updateCol([], [], updateRows)\n          : table.scenegraph.updateRow([], [], updateRows);\n      }\n    }\n    // table.fireListeners(TABLE_EVENT_TYPE.ADD_RECORD, { row });\n  }\n}\n"]}