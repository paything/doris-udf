{"version":3,"sources":["../src/state/hover/is-cell-hover.ts"],"names":[],"mappings":"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","file":"is-cell-hover.js","sourcesContent":["import type { StateManager } from '../state';\nimport type { Group } from '../../scenegraph/graphic/group';\nimport { getProp } from '../../scenegraph/utils/get-prop';\nimport type { BaseTableAPI } from '../../ts-types/base-table';\nimport type { ColumnDefine } from '../../ts-types';\nimport { HighlightScope } from '../../ts-types';\nimport { isValid } from '@visactor/vutils';\nimport { getCellMergeRange } from '../../tools/merge-range';\n\nexport function getCellHoverColor(cellGroup: Group, table: BaseTableAPI): string | undefined {\n  let colorKey;\n  if (\n    cellGroup.role === 'cell' &&\n    isValid(cellGroup.mergeStartCol) &&\n    isValid(cellGroup.mergeStartRow) &&\n    isValid(cellGroup.mergeEndCol) &&\n    isValid(cellGroup.mergeEndRow)\n  ) {\n    const { colStart, colEnd, rowStart, rowEnd } = getCellMergeRange(cellGroup, table.scenegraph);\n    for (let col = colStart; col <= colEnd; col++) {\n      for (let row = rowStart; row <= rowEnd; row++) {\n        const key = isCellHover(table.stateManager, col, row, cellGroup);\n        if (key && (!colorKey || key === 'cellBgColor')) {\n          colorKey = key;\n        }\n      }\n    }\n  } else if (cellGroup.role === 'cell') {\n    colorKey = isCellHover(table.stateManager, cellGroup.col, cellGroup.row, cellGroup);\n  }\n\n  if (!colorKey) {\n    return undefined;\n  }\n\n  let hoverStyle;\n  const layout = table.internalProps.layoutMap;\n  if (layout.isCornerHeader(cellGroup.col, cellGroup.row)) {\n    hoverStyle = table.theme.cornerHeaderStyle?.hover || table.theme.headerStyle?.hover;\n  } else if (layout.isColumnHeader(cellGroup.col, cellGroup.row)) {\n    hoverStyle = table.theme.headerStyle?.hover;\n  } else if (layout.isRowHeader(cellGroup.col, cellGroup.row)) {\n    hoverStyle = table.theme.rowHeaderStyle?.hover;\n  } else if (layout.isBottomFrozenRow(cellGroup.col, cellGroup.row)) {\n    hoverStyle =\n      table.theme.bottomFrozenStyle?.hover ||\n      (table.isListTable() ? table.theme.bodyStyle?.hover : table.theme.headerStyle?.hover);\n  } else if (layout.isRightFrozenColumn(cellGroup.col, cellGroup.row)) {\n    hoverStyle =\n      table.theme.rightFrozenStyle?.hover ||\n      (table.isListTable() ? table.theme.bodyStyle?.hover : table.theme.rowHeaderStyle?.hover);\n  } else if (!table.isHeader(cellGroup.col, cellGroup.row)) {\n    hoverStyle = table.theme.bodyStyle?.hover;\n  }\n  const fillColor = getProp(colorKey, hoverStyle, cellGroup.col, cellGroup.row, table);\n  return fillColor;\n}\n\nexport function isCellHover(state: StateManager, col: number, row: number, cellGroup: Group): string | undefined {\n  const { highlightScope, disableHeader, cellPos } = state.hover;\n  const table = state.table;\n\n  const isHeader = table.isHeader(col, row);\n  if (isHeader && disableHeader) {\n    return undefined;\n  }\n\n  let hoverMode;\n  if (highlightScope === HighlightScope.single && cellPos.col === col && cellPos.row === row) {\n    hoverMode = 'cellBgColor';\n  } else if (highlightScope === HighlightScope.column && cellPos.col === col) {\n    if (cellPos.col === col && cellPos.row === row) {\n      hoverMode = 'cellBgColor';\n    } else {\n      hoverMode = 'inlineColumnBgColor';\n    }\n  } else if (highlightScope === HighlightScope.row && cellPos.row === row) {\n    if (cellPos.col === col && cellPos.row === row) {\n      hoverMode = 'cellBgColor';\n    } else {\n      hoverMode = 'inlineRowBgColor';\n    }\n  } else if (highlightScope === HighlightScope.cross) {\n    if (cellPos.col === col && cellPos.row === row) {\n      hoverMode = 'cellBgColor';\n    } else if (cellPos.col === col) {\n      hoverMode = 'inlineColumnBgColor';\n    } else if (cellPos.row === row) {\n      hoverMode = 'inlineRowBgColor';\n    }\n  }\n\n  if (hoverMode) {\n    let cellDisable;\n    if (isHeader) {\n      const define = table.getHeaderDefine(col, row);\n      cellDisable = (define as ColumnDefine)?.disableHeaderHover;\n\n      if (cellGroup.firstChild && cellGroup.firstChild.name === 'axis' && table.options.hover?.disableAxisHover) {\n        cellDisable = true;\n      }\n    } else {\n      const define = table.getBodyColumnDefine(col, row);\n      cellDisable = (define as ColumnDefine)?.disableHover;\n    }\n\n    if (cellDisable) {\n      hoverMode = undefined;\n    }\n  }\n\n  return hoverMode;\n}\n"]}