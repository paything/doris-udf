{"version":3,"sources":["../src/state/resize/update-resize-column.ts"],"names":[],"mappings":";;;AAMA,SAAgB,kBAAkB,CAAC,QAAgB,EAAE,QAAgB,EAAE,KAAmB;IACxF,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/B,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC/B,IAAI,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;IAEjH,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;QACvB,OAAO;KACR;IASD,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAEnE,IAAI,KAAK,GAAG,UAAU,CAAC;IACvB,KAAK,IAAI,KAAK,CAAC;IACf,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACpE,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IACpE,IAAI,KAAK,GAAG,QAAQ,IAAI,KAAK,GAAG,QAAQ,EAAE;QACxC,IAAI,UAAU,KAAK,QAAQ,IAAI,UAAU,KAAK,QAAQ,EAAE;YACtD,OAAO;SACR;aAAM,IAAI,UAAU,GAAG,QAAQ,GAAG,QAAQ,GAAG,UAAU,EAAE;YACxD,KAAK,GAAG,QAAQ,GAAG,UAAU,CAAC;SAC/B;aAAM;YACL,KAAK,GAAG,QAAQ,GAAG,UAAU,CAAC;SAC/B;KACF;IAGD,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACxE,IAAI,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,EAAE;QACvD,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC;QACpD,KAAK,GAAG,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KACrE;IACD,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;QAC7F,MAAM,kBAAkB,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAC/E,MAAM,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAChF,MAAM,gBAAgB,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QAChF,IAAI,aAAa,GAAG,kBAAkB,CAAC;QACvC,aAAa,IAAI,KAAK,CAAC;QACvB,IAAI,aAAa,GAAG,gBAAgB,IAAI,aAAa,GAAG,gBAAgB,EAAE;YACxE,IAAI,kBAAkB,KAAK,gBAAgB,IAAI,kBAAkB,KAAK,gBAAgB,EAAE;gBACtF,OAAO;aACR;iBAAM,IAAI,kBAAkB,GAAG,gBAAgB,GAAG,gBAAgB,GAAG,kBAAkB,EAAE;gBACxF,KAAK,GAAG,gBAAgB,GAAG,kBAAkB,CAAC;aAC/C;iBAAM;gBACL,KAAK,GAAG,gBAAgB,GAAG,kBAAkB,CAAC;aAC/C;SACF;QACD,IAAI,aAAa,GAAG,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,EAAE;YACnE,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC;SACjE;KACF;IACD,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAEzB,IACE,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB;QACxD,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB,EAChF;QACA,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACxC;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,KAAK,WAAW,EAAE;QACrE,2BAA2B,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAC3C;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,KAAK,gBAAgB,EAAE;QAC1E,gCAAgC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAChD;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,gBAAgB,KAAK,KAAK,EAAE;QAC/D,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACrC;SAAM;QAEL,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACxC;IAaD,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,QAAQ,CAAC;IAGhC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;IACrH,IACE,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc;QACnD,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,EAAE;QAC3B,CAAE,KAAK,CAAC,KAAmB,CAAC,SAAS,EACrC;QACA,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,qBAAqB,CACpD,KAAK,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,EAC9B,KAAK,CAAC,YAAY,CAAC,aAAa,CACjC,CAAC;KACH;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE;QAC7C,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;KACxF;IACD,IACE,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB;QAChF,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,EAAE;QAC3B,CAAE,KAAK,CAAC,KAAmB,CAAC,SAAS,EACrC;QACA,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;KACrH;SAAM,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,mBAAmB,EAAE;QAClD,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,0BAA0B,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;KACrH;IAGD,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC;AAC3C,CAAC;AAlHD,gDAkHC;AAED,SAAS,wBAAwB,CAAC,KAAa,EAAE,KAAmB;IAClE,IAAI,KAAK,CAAC,KAAK,CAAC,SAAS,KAAK,UAAU,IAAI,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,EAAE;QAM7F,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACrE,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QAE1E,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC1E,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;KAC/E;SAAM;QACL,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACrE,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KAC3E;AACH,CAAC;AAED,SAAS,qBAAqB,CAAC,KAAa,EAAE,KAAmB;IAE/D,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,SAAiC,CAAC;IAC3E,KAAK,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,EAAE,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE,EAAE;QAE9G,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE;YACrG,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC3E,IAAK,UAA4B,aAA5B,UAAU,uBAAV,UAAU,CAAoB,mBAAmB,EAAE;gBACtD,SAAS;aACV;SACF;QAED,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAClD,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACxD;AACH,CAAC;AAED,SAAS,2BAA2B,CAAC,KAAa,EAAE,KAAmB;IACrE,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,SAAiC,CAAC;IAC3E,IAAI,kBAAkB,CAAC;IACvB,IAAI,kBAAkB,CAAC;IACvB,IAAI,oBAAoB,CAAC;IACzB,IAAI,MAAM,CAAC,eAAe,EAAE;QAC1B,kBAAkB,GAAG,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;KACzG;SAAM;QACL,MAAM,WAAW,GAAG,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,GAAG,CAAC,CAAC,CAAC;QAC9G,MAAM,UAAU,GAAG,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrF,kBAAkB,GAAG,UAAU,CAAC,YAAY,CAAC;QAC7C,oBAAoB,GAAG,UAAU,CAAC,KAAK,CAAC;KACzC;IACD,KAAK,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE,EAAE;QACnH,MAAM,YAAY,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QACrF,IAAI,MAAM,CAAC,eAAe,IAAI,YAAY,KAAK,kBAAkB,EAAE;YACjE,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAClD,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SACxD;aAAM,IAAI,CAAC,MAAM,CAAC,eAAe,EAAE;YAClC,MAAM,WAAW,GAAG,MAAM,CAAC,kBAAkB,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,GAAG,CAAC,CAAC,CAAC;YAC3F,MAAM,UAAU,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACtF,IAAI,UAAU,IAAI,kBAAkB,KAAK,UAAU,CAAC,YAAY,IAAI,oBAAoB,KAAK,UAAU,CAAC,KAAK,EAAE;gBAC7G,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBAClD,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACxD;SACF;KACF;AACH,CAAC;AAED,SAAS,gCAAgC,CAAC,KAAa,EAAE,KAAmB;IAE1E,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,SAAiC,CAAC;IAE3E,MAAM,WAAW,GAAG,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1G,MAAM,IAAI,GAAG,MAAM,CAAC,+BAA+B,CACjD,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CACpE,CAAC;IAET,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC;IAChE,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAE9E,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACjE,MAAM,KAAK,GAAG,KAAK,CAAC;IACpB,KAAK,IAAI,GAAG,GAAG,QAAQ,EAAE,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,EAAE;QAE7C,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE;YACrG,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC3E,IAAK,UAA4B,aAA5B,UAAU,uBAAV,UAAU,CAAoB,mBAAmB,EAAE;gBACtD,SAAS;aACV;SACF;QACD,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAG/C,IAAI,UAAU,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC,GAAG,KAAK,CAAC;QACrD,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,GAAG,EAAE;YACtC,UAAU,GAAG,GAAG,CAAC;SAClB;aAAM,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,IAAI,CAAC,GAAG,EAAE;YAC/C,UAAU,GAAG,CAAC,GAAG,CAAC;SACnB;QACD,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QACvD,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;KACxD;AACH,CAAC","file":"update-resize-column.js","sourcesContent":["import type { ListTable } from '../../ListTable';\nimport type { PivotHeaderLayoutMap } from '../../layout/pivot-header-layout';\nimport type { IndicatorData } from '../../ts-types/list-table/layout-map/api';\nimport type { StateManager } from '../state';\n\n// columnResizeType?: 'column' | 'indicator' | 'all' | 'indicatorGroup';\nexport function updateResizeColumn(xInTable: number, yInTable: number, state: StateManager) {\n  xInTable = Math.ceil(xInTable);\n  yInTable = Math.ceil(yInTable);\n  let detaX = state.columnResize.isRightFrozen ? state.columnResize.x - xInTable : xInTable - state.columnResize.x;\n  // table.getColWidth会使用Math.round，因此这里直接跳过小于1px的修改\n  if (Math.abs(detaX) < 1) {\n    return;\n  }\n\n  // 检查minWidth/maxWidth\n  // getColWidth会进行Math.round，所以先从colWidthsMap获取：\n  // 如果是数值，直接使用；如果不是，则通过getColWidth获取像素值\n  // let widthCache = (state.table as any).colWidthsMap.get(state.columnResize.col);\n  // if (typeof widthCache === 'number') {\n  //   widthCache = widthCache;\n  // } else {\n  const widthCache = state.table.getColWidth(state.columnResize.col);\n  // }\n  let width = widthCache;\n  width += detaX;\n  const minWidth = state.table.getMinColWidth(state.columnResize.col);\n  const maxWidth = state.table.getMaxColWidth(state.columnResize.col);\n  if (width < minWidth || width > maxWidth) {\n    if (widthCache === minWidth || widthCache === maxWidth) {\n      return;\n    } else if (widthCache - minWidth > maxWidth - widthCache) {\n      detaX = maxWidth - widthCache;\n    } else {\n      detaX = minWidth - widthCache;\n    }\n  }\n\n  // limitMinWidth限制\n  let afterSize = state.table.getColWidth(state.columnResize.col) + detaX;\n  if (afterSize < state.table.internalProps.limitMinWidth) {\n    afterSize = state.table.internalProps.limitMinWidth;\n    detaX = afterSize - state.table.getColWidth(state.columnResize.col);\n  }\n  if (state.table.widthMode === 'adaptive' && state.columnResize.col < state.table.colCount - 1) {\n    const rightColWidthCache = state.table.getColWidth(state.columnResize.col + 1);\n    const rightColMinWidth = state.table.getMinColWidth(state.columnResize.col + 1);\n    const rightColMaxWidth = state.table.getMaxColWidth(state.columnResize.col + 1);\n    let rightColWidth = rightColWidthCache;\n    rightColWidth -= detaX;\n    if (rightColWidth < rightColMinWidth || rightColWidth > rightColMaxWidth) {\n      if (rightColWidthCache === rightColMinWidth || rightColWidthCache === rightColMaxWidth) {\n        return;\n      } else if (rightColWidthCache - rightColMinWidth > rightColMaxWidth - rightColWidthCache) {\n        detaX = rightColMaxWidth - rightColWidthCache;\n      } else {\n        detaX = rightColMinWidth - rightColWidthCache;\n      }\n    }\n    if (rightColWidth - detaX < state.table.internalProps.limitMinWidth) {\n      detaX = rightColWidth - state.table.internalProps.limitMinWidth;\n    }\n  }\n  detaX = Math.ceil(detaX);\n\n  if (\n    state.columnResize.col < state.table.rowHeaderLevelCount ||\n    state.columnResize.col >= state.table.colCount - state.table.rightFrozenColCount\n  ) {\n    updateResizeColForColumn(detaX, state);\n  } else if (state.table.internalProps.columnResizeType === 'indicator') {\n    updateResizeColForIndicator(detaX, state);\n  } else if (state.table.internalProps.columnResizeType === 'indicatorGroup') {\n    updateResizeColForIndicatorGroup(detaX, state);\n  } else if (state.table.internalProps.columnResizeType === 'all') {\n    updateResizeColForAll(detaX, state);\n  } else {\n    // state.table.internalProps.columnResizeType === 'column'\n    updateResizeColForColumn(detaX, state);\n  }\n\n  // if (state.table.widthMode === 'adaptive' && state.columnResize.col < state.table.colCount - 1) {\n  //   // in adaptive mode, the right column width can not be negative\n  //   const rightColWidth = state.table.getColWidth(state.columnResize.col + 1);\n  //   if (rightColWidth - detaX < 0) {\n  //     detaX = rightColWidth;\n  //   }\n  //   state.table.scenegraph.updateColWidth(state.columnResize.col, detaX);\n  //   state.table.scenegraph.updateColWidth(state.columnResize.col + 1, -detaX);\n  // } else {\n  //   state.table.scenegraph.updateColWidth(state.columnResize.col, detaX);\n  // }\n  state.columnResize.x = xInTable;\n\n  // update resize column component\n  state.table.scenegraph.component.updateResizeCol(state.columnResize.col, yInTable, state.columnResize.isRightFrozen);\n  if (\n    state.columnResize.col < state.table.frozenColCount &&\n    !state.table.isPivotTable() &&\n    !(state.table as ListTable).transpose\n  ) {\n    state.table.scenegraph.component.setFrozenColumnShadow(\n      state.table.frozenColCount - 1,\n      state.columnResize.isRightFrozen\n    );\n  } else if (state.table.options.frozenColCount) {\n    state.table.scenegraph.component.setFrozenColumnShadow(state.table.frozenColCount - 1);\n  }\n  if (\n    state.columnResize.col >= state.table.colCount - state.table.rightFrozenColCount &&\n    !state.table.isPivotTable() &&\n    !(state.table as ListTable).transpose\n  ) {\n    state.table.scenegraph.component.setRightFrozenColumnShadow(state.table.colCount - state.table.rightFrozenColCount);\n  } else if (state.table.options.rightFrozenColCount) {\n    state.table.scenegraph.component.setRightFrozenColumnShadow(state.table.colCount - state.table.rightFrozenColCount);\n  }\n\n  // stage rerender\n  state.table.scenegraph.updateNextFrame();\n}\n\nfunction updateResizeColForColumn(detaX: number, state: StateManager) {\n  if (state.table.widthMode === 'adaptive' && state.columnResize.col < state.table.colCount - 1) {\n    // in adaptive mode, the right column width can not be negative\n    // const rightColWidth = state.table.getColWidth(state.columnResize.col + 1);\n    // if (rightColWidth - detaX < 0) {\n    //   detaX = rightColWidth;\n    // }\n    state.table.scenegraph.updateColWidth(state.columnResize.col, detaX);\n    state.table.scenegraph.updateColWidth(state.columnResize.col + 1, -detaX);\n\n    state.table.internalProps._widthResizedColMap.add(state.columnResize.col);\n    state.table.internalProps._widthResizedColMap.add(state.columnResize.col + 1);\n  } else {\n    state.table.scenegraph.updateColWidth(state.columnResize.col, detaX);\n    state.table.internalProps._widthResizedColMap.add(state.columnResize.col);\n  }\n}\n\nfunction updateResizeColForAll(detaX: number, state: StateManager) {\n  // 全列调整\n  const layout = state.table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  for (let col = state.table.frozenColCount; col < state.table.colCount - state.table.rightFrozenColCount; col++) {\n    // 是否禁止调整列宽disableColumnResize 对应canResizeColumn的逻辑判断\n    if (!(state.table.internalProps.transpose || (state.table.isPivotTable() && !layout.indicatorsAsCol))) {\n      const cellDefine = layout.getBody(col, state.table.columnHeaderLevelCount);\n      if ((cellDefine as IndicatorData)?.disableColumnResize) {\n        continue;\n      }\n    }\n    // state.table.setColWidth(col, afterSize);\n    state.table.scenegraph.updateColWidth(col, detaX);\n    state.table.internalProps._widthResizedColMap.add(col);\n  }\n}\n\nfunction updateResizeColForIndicator(detaX: number, state: StateManager) {\n  const layout = state.table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  let resizeIndicatorKey;\n  let resizeDimensionKey;\n  let resizeDimensionValue;\n  if (layout.indicatorsAsCol) {\n    resizeIndicatorKey = layout.getIndicatorKey(state.columnResize.col, state.table.columnHeaderLevelCount);\n  } else {\n    const headerPaths = layout.getCellHeaderPaths(state.columnResize.col, state.table.columnHeaderLevelCount - 1);\n    const headerPath = headerPaths.colHeaderPaths[headerPaths.colHeaderPaths.length - 1];\n    resizeDimensionKey = headerPath.dimensionKey;\n    resizeDimensionValue = headerPath.value;\n  }\n  for (let col = state.table.rowHeaderLevelCount; col < state.table.colCount - state.table.rightFrozenColCount; col++) {\n    const indicatorKey = layout.getIndicatorKey(col, state.table.columnHeaderLevelCount);\n    if (layout.indicatorsAsCol && indicatorKey === resizeIndicatorKey) {\n      state.table.scenegraph.updateColWidth(col, detaX);\n      state.table.internalProps._widthResizedColMap.add(col);\n    } else if (!layout.indicatorsAsCol) {\n      const headerPaths = layout.getCellHeaderPaths(col, state.table.columnHeaderLevelCount - 1);\n      const headerPath = headerPaths?.colHeaderPaths[headerPaths.colHeaderPaths.length - 1];\n      if (headerPath && resizeDimensionKey === headerPath.dimensionKey && resizeDimensionValue === headerPath.value) {\n        state.table.scenegraph.updateColWidth(col, detaX);\n        state.table.internalProps._widthResizedColMap.add(col);\n      }\n    }\n  }\n}\n\nfunction updateResizeColForIndicatorGroup(detaX: number, state: StateManager) {\n  // not support for PivotChart temply\n  const layout = state.table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  //通过getCellHeaderPaths接口获取列表头最后一层指标维度的path\n  const headerPaths = layout.getCellHeaderPaths(state.columnResize.col, state.table.columnHeaderLevelCount);\n  const node = layout.getHeadNodeByRowOrColDimensions(\n    headerPaths.colHeaderPaths.slice(0, headerPaths.colHeaderPaths.length - 1)\n  ) as any;\n  // 计算宽度受影响列的起止\n  const startCol = node.startInTotal + state.table.frozenColCount;\n  const endCol = node.startInTotal + state.table.frozenColCount + node.size - 1;\n  // 计算当前受影响列的总宽度 后面会利用这个计算比例\n  const totalColWidth = state.table.getColsWidth(startCol, endCol);\n  const moveX = detaX; // 纠正moveX 用于指标列均分该值\n  for (let col = startCol; col <= endCol; col++) {\n    // 是否禁止调整列宽disableColumnResize 对应canResizeColumn的逻辑判断\n    if (!(state.table.internalProps.transpose || (state.table.isPivotTable() && !layout.indicatorsAsCol))) {\n      const cellDefine = layout.getBody(col, state.table.columnHeaderLevelCount);\n      if ((cellDefine as IndicatorData)?.disableColumnResize) {\n        continue;\n      }\n    }\n    const prevWidth = state.table.getColWidth(col);\n\n    // deltaWidth <0.5 & >=-0.5 在updateRowWidth函数中会被Math.round处理为0，导致高度更新失效\n    let deltaWidth = (prevWidth / totalColWidth) * moveX;\n    if (deltaWidth > 0 && deltaWidth < 0.5) {\n      deltaWidth = 0.5;\n    } else if (deltaWidth < 0 && deltaWidth >= -0.5) {\n      deltaWidth = -0.5;\n    }\n    state.table.scenegraph.updateColWidth(col, deltaWidth);\n    state.table.internalProps._widthResizedColMap.add(col);\n  }\n}\n"]}