{"version":3,"sources":["../src/state/resize/update-resize-row.ts"],"names":[],"mappings":"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","file":"update-resize-row.js","sourcesContent":["import type { ListTable } from '../../ListTable';\nimport type { PivotHeaderLayoutMap } from '../../layout/pivot-header-layout';\nimport type { IndicatorData } from '../../ts-types/list-table/layout-map/api';\nimport type { StateManager } from '../state';\n\n// rowResizeType?: 'row' | 'indicator' | 'all' | 'indicatorGroup';\nexport function updateResizeRow(xInTable: number, yInTable: number, state: StateManager) {\n  xInTable = Math.ceil(xInTable);\n  yInTable = Math.ceil(yInTable);\n  let detaY = state.rowResize.isBottomFrozen ? state.rowResize.y - yInTable : yInTable - state.rowResize.y;\n  // table.getColWidth会使用Math.round，因此这里直接跳过小于1px的修改\n  if (Math.abs(detaY) < 1) {\n    return;\n  }\n\n  const heightCache = state.table.getRowHeight(state.rowResize.row);\n  let height = heightCache;\n  height += detaY;\n\n  // limitMinHeight限制\n  let afterSize = state.table.getRowHeight(state.rowResize.row) + detaY;\n  if (afterSize < state.table.internalProps.limitMinHeight) {\n    afterSize = state.table.internalProps.limitMinHeight;\n    detaY = afterSize - state.table.getRowHeight(state.rowResize.row);\n  }\n  if (state.table.heightMode === 'adaptive' && state.rowResize.row < state.table.rowCount - 1) {\n    const bottomRowHeightCache = state.table.getRowHeight(state.rowResize.row + 1);\n    let bottomRowHeight = bottomRowHeightCache;\n    bottomRowHeight -= detaY;\n    if (bottomRowHeight - detaY < state.table.internalProps.limitMinHeight) {\n      detaY = bottomRowHeight - state.table.internalProps.limitMinHeight;\n    }\n  }\n  detaY = Math.ceil(detaY);\n\n  if (\n    state.rowResize.row < state.table.columnHeaderLevelCount ||\n    state.rowResize.row >= state.table.rowCount - state.table.bottomFrozenRowCount\n  ) {\n    updateResizeColForRow(detaY, state);\n  } else if (state.table.internalProps.rowResizeType === 'indicator') {\n    updateResizeColForIndicator(detaY, state);\n  } else if (state.table.internalProps.rowResizeType === 'indicatorGroup') {\n    updateResizeColForIndicatorGroup(detaY, state);\n  } else if (state.table.internalProps.rowResizeType === 'all') {\n    updateResizeColForAll(detaY, state);\n  } else {\n    updateResizeColForRow(detaY, state);\n  }\n\n  state.rowResize.y = yInTable;\n\n  // update resize row component\n  state.table.scenegraph.component.updateResizeRow(state.rowResize.row, xInTable, state.rowResize.isBottomFrozen);\n\n  // stage rerender\n  state.table.scenegraph.updateNextFrame();\n}\n\nfunction updateResizeColForRow(detaY: number, state: StateManager) {\n  if (state.table.heightMode === 'adaptive' && state.rowResize.row < state.table.rowCount - 1) {\n    state.table.scenegraph.updateRowHeight(state.rowResize.row, detaY);\n    state.table.scenegraph.updateRowHeight(state.rowResize.row + 1, -detaY);\n\n    state.table.internalProps._heightResizedRowMap.add(state.rowResize.row);\n    state.table.internalProps._heightResizedRowMap.add(state.rowResize.row + 1);\n  } else {\n    state.table.scenegraph.updateRowHeight(state.rowResize.row, detaY);\n    state.table.internalProps._heightResizedRowMap.add(state.rowResize.row);\n  }\n}\n\nfunction updateResizeColForAll(detaY: number, state: StateManager) {\n  // 全列调整\n  // const layout = state.table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  for (let row = state.table.frozenRowCount; row < state.table.rowCount - state.table.bottomFrozenRowCount; row++) {\n    // // 是否禁止调整列宽disableRowResize 对应canResizeRow的逻辑判断\n    // if (!(state.table.internalProps.transpose || (state.table.isPivotTable() && !layout.indicatorsAsCol))) {\n    //   const cellDefine = layout.getBody(row, state.table.rowHeaderLevelCount);\n    //   if ((cellDefine as IndicatorData)?.disableRowResize) {\n    //     continue;\n    //   }\n    // }\n    state.table.scenegraph.updateRowHeight(row, detaY);\n    state.table.internalProps._heightResizedRowMap.add(row);\n  }\n}\n\nfunction updateResizeColForIndicator(detaY: number, state: StateManager) {\n  const layout = state.table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  let resizeIndicatorKey;\n  let resizeDimensionKey;\n  let resizeDimensionValue;\n  if (!layout.indicatorsAsCol) {\n    resizeIndicatorKey = layout.getIndicatorKey(state.table.rowHeaderLevelCount, state.rowResize.row);\n  } else {\n    const headerPaths = layout.getCellHeaderPaths(state.table.rowHeaderLevelCount - 1, state.rowResize.row);\n    const headerPath = headerPaths.rowHeaderPaths?.[headerPaths.rowHeaderPaths.length - 1];\n    resizeDimensionKey = headerPath?.dimensionKey;\n    resizeDimensionValue = headerPath?.value;\n  }\n  for (\n    let row = state.table.columnHeaderLevelCount;\n    row < state.table.rowCount - state.table.bottomFrozenRowCount;\n    row++\n  ) {\n    const indicatorKey = layout.getIndicatorKey(state.table.rowHeaderLevelCount, row);\n    if (!layout.indicatorsAsCol && indicatorKey === resizeIndicatorKey) {\n      state.table.scenegraph.updateRowHeight(row, detaY);\n      state.table.internalProps._heightResizedRowMap.add(row);\n    } else if (layout.indicatorsAsCol) {\n      const headerPaths = layout.getCellHeaderPaths(state.table.rowHeaderLevelCount - 1, row);\n      const headerPath = headerPaths?.rowHeaderPaths?.[headerPaths.rowHeaderPaths.length - 1];\n      if (headerPath && resizeDimensionKey === headerPath.dimensionKey && resizeDimensionValue === headerPath.value) {\n        state.table.scenegraph.updateRowHeight(row, detaY);\n        state.table.internalProps._heightResizedRowMap.add(row);\n      }\n    }\n  }\n}\n\nfunction updateResizeColForIndicatorGroup(detaY: number, state: StateManager) {\n  // not support for PivotChart temply\n  const layout = state.table.internalProps.layoutMap as PivotHeaderLayoutMap;\n  //通过getCellHeaderPaths接口获取列表头最后一层指标维度的path\n  const headerPaths = layout.getCellHeaderPaths(state.table.rowHeaderLevelCount, state.rowResize.row);\n  const node = layout.getHeadNodeByRowOrColDimensions(\n    headerPaths.rowHeaderPaths.slice(0, headerPaths.rowHeaderPaths.length - 1)\n  ) as any;\n  // 计算宽度受影响列的起止\n  const startRow = node.startInTotal + state.table.frozenRowCount;\n  const endRow = node.startInTotal + state.table.frozenRowCount + node.size - 1;\n  // 计算当前受影响列的总宽度 后面会利用这个计算比例\n  const totalRowHeight = state.table.getRowsHeight(startRow, endRow);\n  const moveY = detaY; // 纠正moveX 用于指标列均分该值\n  for (let row = startRow; row <= endRow; row++) {\n    // 是否禁止调整列宽disableRowResize 对应canResizeRow的逻辑判断\n    // if (!(state.table.internalProps.transpose || (state.table.isPivotTable() && !layout.indicatorsAsCol))) {\n    //   const cellDefine = layout.getBody(state.table.columnHeaderLevelCount, row);\n    //   // if ((cellDefine as IndicatorData)?.disableRowResize) {\n    //   //   continue;\n    //   // }\n    // }\n    const prevHeight = state.table.getRowHeight(row);\n\n    // deltaHeight <0.5 & >=-0.5 在updateRowHeight函数中会被Math.round处理为0，导致高度更新失效\n    let deltaHeight = (prevHeight / totalRowHeight) * moveY;\n    if (deltaHeight > 0 && deltaHeight < 0.5) {\n      deltaHeight = 0.5;\n    } else if (deltaHeight < 0 && deltaHeight >= -0.5) {\n      deltaHeight = -0.51;\n    }\n    state.table.scenegraph.updateRowHeight(row, deltaHeight);\n    state.table.internalProps._heightResizedRowMap.add(row);\n  }\n}\n"]}