{"version":3,"sources":["../src/animate/Ticker/manual-ticker.ts"],"names":[],"mappings":";;;AACA,qDAAiD;AACjD,mEAA4D;AAG5D,MAAa,YAAa,SAAQ,8BAAa;IAU7C,IAAI,IAAI,CAAC,CAAa;QACpB,CAAC,GAAG,QAAQ,CAAC;QACb,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IACD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAMS,gBAAgB;QACxB,MAAM,OAAO,GAAiB,IAAI,yCAAiB,EAAE,CAAC;QACtD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;QAGtB,IAAI,IAAI,CAAC,aAAa,EAAE;YACtB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;SAC9B;QACD,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,IAAY;QACjB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,OAAqB,EAAE,EAAE;YACxF,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS;QACP,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAhDD,oCAgDC","file":"manual-ticker.js","sourcesContent":["import type { ITicker, ITickHandler, ITimeline } from '../../interface/animate';\nimport { DefaultTicker } from './default-ticker';\nimport { ManualTickHandler } from './manual-ticker-handler';\nimport type { STATUS, TickerMode } from './type';\n\nexport class ManualTicker extends DefaultTicker implements ITicker {\n  protected declare interval: number;\n  protected declare tickerHandler: ITickHandler;\n  protected declare _mode: TickerMode;\n  protected declare status: STATUS;\n  protected declare lastFrameTime: number;\n  protected declare tickCounts: number;\n  protected declare timelines: ITimeline[];\n  declare autoStop: boolean;\n\n  set mode(m: TickerMode) {\n    m = 'manual';\n    this.setupTickHandler();\n  }\n  get mode(): TickerMode {\n    return this._mode;\n  }\n\n  protected initHandler(): ITickHandler | null {\n    this.mode = 'manual';\n    return null;\n  }\n\n  /**\n   * 设置tickHandler\n   * @returns 返回true表示设置成功，false表示设置失败\n   */\n  protected setupTickHandler(): boolean {\n    const handler: ITickHandler = new ManualTickHandler();\n    this._mode = 'manual';\n\n    // 销毁上一个tickerHandler\n    if (this.tickerHandler) {\n      this.tickerHandler.release();\n    }\n    this.tickerHandler = handler;\n    return true;\n  }\n\n  tickAt(time: number) {\n    this.tickerHandler.tick(time - Math.max(this.lastFrameTime, 0), (handler: ITickHandler) => {\n      this.handleTick(handler, { once: true });\n    });\n  }\n\n  ifCanStop(): boolean {\n    return false;\n  }\n}\n"]}