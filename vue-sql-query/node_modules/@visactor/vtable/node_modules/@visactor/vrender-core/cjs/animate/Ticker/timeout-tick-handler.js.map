{"version":3,"sources":["../src/animate/Ticker/timeout-tick-handler.ts"],"names":[],"mappings":";;;AAEA,MAAa,kBAAkB;IAG7B,MAAM,CAAC,SAAS;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS;QACP,OAAO,kBAAkB,CAAC,SAAS,EAAE,CAAC;IACxC,CAAC;IAED,IAAI,CAAC,QAAgB,EAAE,EAAmC;QACxD,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;YAC7B,EAAE,CAAC,IAAI,CAAC,CAAC;QACX,CAAC,EAAE,QAAQ,CAAsB,CAAC;IACpC,CAAC;IAED,OAAO;QACL,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;YACpB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;SACnB;IACH,CAAC;IACD,OAAO;QACL,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC;IACpB,CAAC;CACF;AA1BD,gDA0BC","file":"timeout-tick-handler.js","sourcesContent":["import type { ITickHandler } from '../../interface/animate';\n\nexport class TimeOutTickHandler implements ITickHandler {\n  protected timerId: number;\n\n  static Avaliable(): boolean {\n    return true;\n  }\n\n  avaliable(): boolean {\n    return TimeOutTickHandler.Avaliable();\n  }\n\n  tick(interval: number, cb: (handler: ITickHandler) => void): void {\n    this.timerId = setTimeout(() => {\n      cb(this);\n    }, interval) as unknown as number;\n  }\n\n  release() {\n    if (this.timerId > 0) {\n      clearTimeout(this.timerId);\n      this.timerId = -1;\n    }\n  }\n  getTime() {\n    return Date.now();\n  }\n}\n"]}