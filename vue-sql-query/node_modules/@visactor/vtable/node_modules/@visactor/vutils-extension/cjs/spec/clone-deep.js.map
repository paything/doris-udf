{"version":3,"sources":["../src/spec/clone-deep.ts"],"names":[],"mappings":";;;AAAA,6CAA0G;AAC1G,iDAAgD;AAMhD,SAAgB,aAAa,CAAC,IAAS,EAAE,cAAwB,CAAC,MAAM,CAAC;IACvE,MAAM,KAAK,GAAG,IAAI,CAAC;IAEnB,IAAI,MAAM,CAAC;IACX,IAAI,CAAC,IAAA,gBAAO,EAAC,KAAK,CAAC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAChD,OAAO,KAAK,CAAC;KACd;IAGD,IAAI,IAAA,qBAAU,EAAC,KAAK,CAAC,IAAI,IAAA,sBAAa,EAAC,KAAK,CAAC,EAAE;QAC7C,OAAO,KAAK,CAAC;KACd;IAED,MAAM,KAAK,GAAG,IAAA,gBAAO,EAAC,KAAK,CAAC,CAAC;IAC7B,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAE5B,IAAI,KAAK,EAAE;QACT,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;KAC5B;SAEI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAClC,MAAM,GAAG,EAAE,CAAC;KACb;SAEI,IAAI,IAAA,kBAAS,EAAC,KAAK,CAAC,IAAI,IAAA,iBAAQ,EAAC,KAAK,CAAC,IAAI,IAAA,iBAAQ,EAAC,KAAK,CAAC,EAAE;QAC/D,MAAM,GAAG,KAAK,CAAC;KAChB;SAAM,IAAI,IAAA,eAAM,EAAC,KAAK,CAAC,EAAE;QACxB,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;KAC3B;SAEI;QACH,MAAM,GAAG,SAAS,CAAC;KACpB;IAKD,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAE7D,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;IACf,IAAI,MAAM,EAAE;QACV,OAAO,EAAE,KAAK,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,MAAM,EAAE;YACxC,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACzC,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE;gBACzC,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;aACxB;iBAAM;gBACL,MAAM,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;aACpD;SACF;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AArDD,sCAqDC","file":"clone-deep.js","sourcesContent":["import { isArray, isBoolean, isDate, isNumber, isString, isValid, isHTMLElement } from '@visactor/vutils';\nimport { isDataView } from '@visactor/vdataset';\n\n/**\n * 深拷贝 spec，为避免循环引用，DataView 维持原有引用\n * @param spec 原spec\n */\nexport function cloneDeepSpec(spec: any, excludeKeys: string[] = ['data']) {\n  const value = spec;\n\n  let result;\n  if (!isValid(value) || typeof value !== 'object') {\n    return value;\n  }\n\n  // 判断是不是不能深拷贝的对象\n  if (isDataView(value) || isHTMLElement(value)) {\n    return value;\n  }\n\n  const isArr = isArray(value);\n  const length = value.length;\n  // 不考虑特殊数组的额外处理\n  if (isArr) {\n    result = new Array(length);\n  }\n  // 不考虑 buffer / arguments 类型的处理以及 prototype 的额外处理\n  else if (typeof value === 'object') {\n    result = {};\n  }\n  // 不建议使用作为 Boolean / Number / String 作为构造器\n  else if (isBoolean(value) || isNumber(value) || isString(value)) {\n    result = value;\n  } else if (isDate(value)) {\n    result = new Date(+value);\n  }\n  // 不考虑 ArrayBuffer / DataView / TypedArray / map / set / regexp / symbol 类型\n  else {\n    result = undefined;\n  }\n\n  // 不考虑 map / set / TypedArray 类型的赋值\n\n  // 不考虑对象的 symbol 属性\n  const props = isArr ? undefined : Object.keys(Object(value));\n\n  let index = -1;\n  if (result) {\n    while (++index < (props || value).length) {\n      const key = props ? props[index] : index;\n      const subValue = value[key];\n      if (excludeKeys?.includes(key.toString())) {\n        result[key] = subValue;\n      } else {\n        result[key] = cloneDeepSpec(subValue, excludeKeys);\n      }\n    }\n  }\n\n  return result;\n}\n"]}