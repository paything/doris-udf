{"version":3,"sources":["../src/data-view.ts"],"names":[],"mappings":"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","file":"data-view.js","sourcesContent":["import { cloneDeep, EventEmitter, merge, isNil } from '@visactor/vutils';\nimport type { DataSet } from './data-set';\nimport type { ITransformOptions } from './transform';\nimport type { DATAVIEW_TYPE } from './constants';\nimport { getUUID } from './utils/uuid';\nimport type { IParserOptions } from './parser';\nimport { fields } from './transform/fields';\nexport interface IDataViewOptions {\n  name?: string | number; // dataview 名称\n  history?: boolean; // 是否启用 historyData 字段存储全部历史变化数据，默认false 不存储\n  diffKeys?: string[]; //  用于指定该数据视图监听的 `states` 状态量的。默认监听所有状态量（也就是任何状态量变更都会导致数据视图重新计算），如果指定为空数组 []，则不监听任何状态量，如果指定为非空数组，则只监听数组元素对应的状态量变更。\n  fields?: IFields;\n}\n\nexport interface IFieldsMeta {\n  type?: 'ordinal' | 'linear';\n  domain?: any[];\n  sortIndex?: number;\n  sortReverse?: boolean;\n  [key: string]: unknown;\n}\n\nexport interface IFields {\n  [key: string]: IFieldsMeta;\n}\n\nexport const DataViewDiffRank = '_data-view-diff-rank';\n\n/**\n * 数据视图\n * @public\n */\nexport class DataView {\n  isDataView: boolean = true;\n\n  type: DATAVIEW_TYPE;\n\n  name: string | number;\n\n  target: any = new EventEmitter();\n\n  /**\n   * 当前parser\n   */\n  parseOption: IParserOptions = null;\n\n  /**\n   * 已应用的 transform\n   */\n  transformsArr: Array<ITransformOptions> = [];\n\n  /**\n   * 是否正在运行 parse 和 transform\n   */\n  isRunning: boolean = false;\n\n  /**\n   * 原始数据\n   */\n  rawData: any = {};\n\n  history: boolean = false;\n  /**\n   * 中间态数据，默认 history false 不存储\n   */\n  historyData: any[];\n\n  /**\n   * parser后的数据\n   */\n  parserData: any = {};\n\n  /**\n   * 最终数据\n   */\n  latestData: any = {};\n\n  /**\n   * 数据维度信息\n   */\n  protected _fields: IFields = null;\n\n  // diff用数据id\n  private _diffData: boolean;\n  private _diffKeys: string[];\n  _diffMap: Map<string, any>;\n  _diffRank: number;\n\n  // tag\n\n  latestDataAUD: {\n    add: any;\n    update: any;\n    del: any;\n  };\n\n  constructor(public dataSet: DataSet, public options?: IDataViewOptions) {\n    let name;\n    if (options?.name) {\n      name = options.name;\n    } else {\n      name = getUUID('dataview');\n    }\n    this.name = name;\n\n    if (options?.history) {\n      this.history = options.history;\n      this.historyData = [];\n    }\n\n    this.dataSet.setDataView(name, this);\n    this.setFields(options?.fields);\n  }\n\n  /**\n   * 解析数据\n   * todo: parse instanceof DataView\n   * todo: parse ['dataview1', 'dataview2']\n   * @param data\n   * @param options\n   * @returns\n   */\n  parse(data: any, options?: IParserOptions, emit: boolean = false): DataView {\n    this.isRunning = true;\n    if (emit) {\n      this.target.emit('beforeParse', []);\n    }\n    options && (this.parseOption = options);\n    const cloneData = this.cloneParseData(data, options);\n    if (options?.type) {\n      // 默认bytejson\n      const parserFn = this.dataSet.getParser(options.type) ?? this.dataSet.getParser('bytejson');\n\n      const parserData = parserFn(cloneData, options.options, this);\n\n      this.rawData = cloneData;\n      this.parserData = parserData;\n\n      if (this.history) {\n        this.historyData.push(cloneData, parserData);\n      }\n\n      this.latestData = parserData;\n    } else {\n      this.parserData = cloneData;\n      this.rawData = cloneData;\n\n      if (this.history) {\n        this.historyData.push(cloneData);\n      }\n      this.latestData = cloneData;\n    }\n\n    this.isRunning = false;\n    if (emit) {\n      this.target.emit('afterParse', []);\n    }\n    return this;\n  }\n  /**\n   *  执行数据处理数据\n   * @param options\n   */\n  transform(options: ITransformOptions, execute: boolean = true): DataView {\n    this.isRunning = true;\n    if (options && options.type) {\n      // special transform\n      let pushOption = true;\n      if (options.type === 'fields') {\n        this._fields = options.options.fields;\n        // make sure only one fields\n        const index = this.transformsArr.findIndex(_op => _op.type === options.type);\n        if (index >= 0) {\n          pushOption = false;\n          this.transformsArr[index].options.fields = this._fields;\n        }\n      }\n      pushOption && this.transformsArr.push(options);\n      if (execute) {\n        const lastTag = this.isLastTransform(options);\n\n        this.executeTransform(options);\n        if (lastTag) {\n          this.diffLastData();\n        }\n      }\n    }\n    // 每次新增transform都要进行一次排序\n    this.sortTransform();\n    this.isRunning = false;\n    return this;\n  }\n  private isLastTransform(options: ITransformOptions) {\n    return this.transformsArr[this.transformsArr.length - 1] === options;\n  }\n\n  sortTransform() {\n    if (this.transformsArr.length >= 2) {\n      this.transformsArr.sort((a, b) => (a.level ?? 0) - (b.level ?? 0));\n    }\n  }\n\n  private executeTransform(\n    options: ITransformOptions,\n    opt: { pushHistory: boolean; emitMessage: boolean } = {\n      pushHistory: true,\n      emitMessage: true\n    }\n  ) {\n    const { pushHistory, emitMessage } = opt;\n    const transformFn = this.dataSet.getTransform(options.type);\n    const transformData = transformFn(this.latestData, options.options);\n\n    if (this.history && pushHistory !== false) {\n      this.historyData.push(transformData);\n    }\n\n    this.latestData = transformData;\n    emitMessage !== false && this.target.emit('change', []);\n  }\n\n  private resetTransformData() {\n    this.latestData = this.parserData;\n    if (this.history) {\n      this.historyData.length = 0;\n      this.historyData.push(this.rawData, this.parserData);\n    }\n  }\n\n  reRunAllTransform = (\n    opt: { pushHistory: boolean; emitMessage: boolean } = {\n      pushHistory: true,\n      emitMessage: true\n    }\n  ) => {\n    this.isRunning = true;\n    this.resetTransformData();\n    this.transformsArr.forEach(t => {\n      this.executeTransform(t, { pushHistory: opt.pushHistory, emitMessage: false });\n      if (this.isLastTransform(t)) {\n        this.diffLastData();\n      }\n    });\n    this.isRunning = false;\n\n    opt.emitMessage !== false && this.target.emit('change', []);\n    return this;\n  };\n\n  enableDiff(keys: string[]) {\n    this._diffData = true;\n    this._diffKeys = keys;\n\n    this._diffMap = new Map();\n    this._diffRank = 0;\n  }\n\n  disableDiff() {\n    this._diffData = false;\n    this._diffMap = null;\n    this._diffRank = null;\n  }\n\n  resetDiff() {\n    this._diffMap = new Map();\n    this._diffRank = 0;\n  }\n\n  protected diffLastData() {\n    if (!this._diffData) {\n      return;\n    }\n    if (!this.latestData.forEach) {\n      return;\n    }\n    if (!this._diffKeys?.length) {\n      return;\n    }\n    const next = this._diffRank + 1;\n    if (this._diffRank === 0) {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      this.latestData.forEach((d: Object) => {\n        d[DataViewDiffRank] = next;\n        this._diffMap.set(\n          this._diffKeys.reduce((pre, k) => pre + d[k], ''),\n          d\n        );\n      });\n      this.latestDataAUD = {\n        add: Array.from(this.latestData),\n        del: [],\n        update: []\n      };\n    } else {\n      this.latestDataAUD = {\n        add: [],\n        del: [],\n        update: []\n      };\n      let tempKey;\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      this.latestData.forEach((d: Object) => {\n        d[DataViewDiffRank] = next;\n        tempKey = this._diffKeys.reduce((pre, k) => pre + d[k], '');\n        if (this._diffMap.get(tempKey)) {\n          this.latestDataAUD.update.push(d);\n        } else {\n          this.latestDataAUD.add.push(d);\n        }\n        this._diffMap.set(tempKey, d);\n      });\n      this._diffMap.forEach((v, k) => {\n        if (v[DataViewDiffRank] < next) {\n          this.latestDataAUD.del.push(v);\n          this._diffMap.delete(k);\n        }\n      });\n    }\n    this._diffRank = next;\n  }\n\n  private cloneParseData(data: any, options?: IParserOptions) {\n    let clone = false;\n    if (!(data instanceof DataView) && options?.clone === true) {\n      clone = true;\n    }\n    return clone ? cloneDeep(data) : data;\n  }\n\n  parseNewData(data: any, options?: IParserOptions) {\n    this.parse(data, options || this.parseOption);\n    this.reRunAllTransform();\n  }\n\n  updateRawData(data: any, options?: IParserOptions) {\n    const cloneData = this.cloneParseData(data, options);\n    this.rawData = cloneData;\n    this.parserData = cloneData;\n    this.latestData = cloneData;\n    this.reRunAllTransform();\n  }\n\n  // updateParseData(data: any) {\n  //   // this.parse(data, this.parseOption);\n  //   this.parserData = data;\n  //   this.reRunAllTransform();\n  // }\n  // AddParseData(data: any) {\n  //   this.parse(data, this.parseOption);\n  //   this.reRunAllTransform();\n  // }\n  // RemParseData(data: any) {\n  //   this.parse(data, this.parseOption);\n  //   this.reRunAllTransform();\n  // }\n\n  markRunning = () => {\n    this.isRunning = true;\n    this.target.emit('markRunning', []);\n  };\n\n  getFields() {\n    if (this._fields) {\n      return this._fields;\n    }\n    if (this.parseOption?.type === 'dataview' && this.rawData.length === 1 && this.rawData[0].getFields) {\n      return this.rawData[0].getFields();\n    }\n    return null;\n  }\n\n  setFields(f: IFields, foreMerge: boolean = false) {\n    if (f && foreMerge) {\n      this._fields = merge({}, this._fields, f);\n    } else {\n      this._fields = f;\n    }\n\n    const fieldsOption = this.transformsArr.find(_op => _op.type === 'fields');\n    if (!isNil(this._fields) && isNil(fieldsOption)) {\n      // add\n      this.dataSet.registerTransform('fields', fields);\n      this.transform(\n        {\n          type: 'fields',\n          options: {\n            fields: this._fields\n          }\n        },\n        false\n      );\n    } else if (fieldsOption) {\n      // update\n      fieldsOption.options.fields = this._fields;\n    }\n  }\n\n  destroy() {\n    this.dataSet.removeDataView(this.name);\n    this._diffMap = null;\n    this._diffRank = null;\n    this.latestData = null;\n    this.rawData = null;\n    this.parserData = null;\n    this.transformsArr = null;\n    this.target = null;\n  }\n}\n\nexport function isDataView(obj: any): obj is DataView {\n  return obj instanceof DataView;\n}\n"]}