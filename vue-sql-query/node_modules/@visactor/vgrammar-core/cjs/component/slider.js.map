{"version":3,"sources":["../src/component/slider.ts"],"names":[],"mappings":"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","file":"slider.js","sourcesContent":["import { isNil, merge, mixin } from '@visactor/vutils';\nimport type { IGraphic } from '@visactor/vrender-core';\nimport type { SliderAttributes } from '@visactor/vrender-components';\n// eslint-disable-next-line no-duplicate-imports\nimport { Slider as SliderComponent } from '@visactor/vrender-components';\nimport type {\n  BaseSingleEncodeSpec,\n  IElement,\n  IGroupMark,\n  ITheme,\n  IView,\n  MarkFunctionType,\n  Nil,\n  RecursivePartial,\n  StateEncodeSpec\n} from '../types';\nimport { ComponentEnum } from '../graph/enums';\nimport type { ISlider, SliderSpec } from '../types/component';\nimport { Component } from '../view/component';\nimport { invokeEncoder } from '../graph/mark/encode';\nimport { invokeFunctionType } from '../parse/util';\nimport { Factory } from '../core/factory';\nimport { SliderFilter } from '../interactions/slider-filter';\nimport { Filter, FilterMixin } from '../interactions/filter';\n\nexport const generateSliderAttributes = (\n  min: number,\n  max: number,\n  theme?: ITheme,\n  addition?: RecursivePartial<SliderAttributes>\n): SliderAttributes => {\n  const sliderTheme = theme?.components?.slider;\n  return merge({}, sliderTheme, { min, max, value: [min, max] }, addition ?? {});\n};\n\nexport class Slider extends Component implements ISlider {\n  static readonly componentType: string = ComponentEnum.slider;\n  protected declare spec: SliderSpec;\n\n  constructor(view: IView, group?: IGroupMark) {\n    super(view, ComponentEnum.slider, group);\n    this.spec.componentType = ComponentEnum.slider;\n  }\n\n  protected parseAddition(spec: SliderSpec) {\n    super.parseAddition(spec);\n    this.min(spec.min);\n    this.max(spec.max);\n    return this;\n  }\n\n  min(min: MarkFunctionType<number> | Nil) {\n    return this.setFunctionSpec(min, 'min');\n  }\n\n  max(max: MarkFunctionType<number> | Nil) {\n    return this.setFunctionSpec(max, 'max');\n  }\n\n  setStartEndValue(start?: number, end?: number) {\n    const slider = this.getGroupGraphicItem() as unknown as SliderComponent;\n    slider.setValue([start, end]);\n    return this;\n  }\n\n  protected _updateComponentEncoders() {\n    const encoders = Object.assign({ update: {} }, this.spec.encode);\n    const componentEncoders: StateEncodeSpec = Object.keys(encoders).reduce((res, state) => {\n      const encoder = encoders[state];\n      if (encoder) {\n        res[state] = {\n          callback: (datum: any, element: IElement, parameters: any) => {\n            const min = !isNil(this.spec.min) ? invokeFunctionType(this.spec.min, parameters, datum, element) : 0;\n            const max = !isNil(this.spec.max) ? invokeFunctionType(this.spec.max, parameters, datum, element) : 1;\n            const theme = this.spec.skipTheme ? null : this.view.getCurrentTheme();\n            const addition = invokeEncoder(encoder as BaseSingleEncodeSpec, datum, element, parameters);\n            return generateSliderAttributes(min, max, theme, addition);\n          }\n        };\n      }\n      return res;\n    }, {});\n    this._encoders = componentEncoders;\n  }\n}\n\nexport const registerSlider = () => {\n  Factory.registerGraphicComponent(\n    ComponentEnum.slider,\n    (attrs: SliderAttributes) => new SliderComponent(attrs) as unknown as IGraphic\n  );\n\n  Factory.registerComponent(ComponentEnum.slider, Slider);\n\n  mixin(Filter, FilterMixin);\n  Factory.registerInteraction(SliderFilter.type, SliderFilter);\n};\n"]}