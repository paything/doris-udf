{"version":3,"sources":["../src/parse/coordinate.ts"],"names":[],"mappings":"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","file":"coordinate.js","sourcesContent":["import { isNil } from '@visactor/vutils';\nimport type {\n  CoordinateType,\n  CoordinateTransform,\n  IPolarCoordinate,\n  ICartesianCoordinate\n} from '@visactor/vgrammar-coordinate';\n// eslint-disable-next-line no-duplicate-imports\nimport { CartesianCoordinate, PolarCoordinate } from '@visactor/vgrammar-coordinate';\nimport type { IGrammarBase, IView } from '../types';\nimport type { CoordinateSpec } from '../types/coordinate';\nimport { invokeFunctionType, parseFunctionType } from './util';\n\nexport function createCoordinate(type: CoordinateType) {\n  switch (type) {\n    case 'cartesian':\n      return new CartesianCoordinate();\n    case 'polar':\n      return new PolarCoordinate();\n    default:\n      return new CartesianCoordinate();\n  }\n}\n\nexport function parseCoordinate(spec: CoordinateSpec, view: IView) {\n  const parsedKeys = ['start', 'end', 'origin', 'translate', 'rotate', 'scale', 'transpose'];\n  let dependencies: IGrammarBase[] = [];\n  parsedKeys.forEach(key => {\n    dependencies = dependencies.concat(parseFunctionType(spec[key], view));\n  });\n  return dependencies;\n}\n\nexport function configureCoordinate(\n  spec: CoordinateSpec,\n  coordinate: IPolarCoordinate | ICartesianCoordinate,\n  parameters: any\n) {\n  !isNil(spec.start) &&\n    (coordinate as ICartesianCoordinate).start(invokeFunctionType(spec.start, parameters) ?? [0, 0]);\n  !isNil(spec.end) && (coordinate as ICartesianCoordinate).end(invokeFunctionType(spec.end, parameters) ?? [0, 0]);\n  !isNil(spec.origin) && (coordinate as IPolarCoordinate).origin(invokeFunctionType(spec.origin, parameters) ?? [0, 0]);\n\n  const transforms: CoordinateTransform[] = [];\n  if (!isNil(spec.translate)) {\n    const translate = invokeFunctionType(spec.translate, parameters);\n    transforms.push({ type: 'translate', offset: { x: translate?.[0] ?? 0, y: translate?.[1] ?? 0 } });\n  }\n  if (!isNil(spec.rotate)) {\n    const rotate = invokeFunctionType(spec.rotate, parameters);\n    transforms.push({ type: 'rotate', angle: rotate ?? 0 });\n  }\n  if (!isNil(spec.scale)) {\n    const scale = invokeFunctionType(spec.scale, parameters);\n    transforms.push({ type: 'scale', scale: { x: scale?.[0] ?? 1, y: scale?.[1] ?? 1 } });\n  }\n  if (!isNil(spec.transpose)) {\n    const transpose = invokeFunctionType(spec.transpose, parameters);\n    if (transpose) {\n      transforms.push({ type: 'transpose' });\n    }\n  }\n  coordinate.applyTransforms(transforms);\n}\n"]}