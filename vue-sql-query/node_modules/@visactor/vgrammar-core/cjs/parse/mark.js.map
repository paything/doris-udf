{"version":3,"sources":["../src/parse/mark.ts"],"names":[],"mappings":";;;AAAA,6CAAyC;AAEzC,iCAAsD;AAEtD,SAAgB,aAAa,CAAC,MAAW;IACvC,OAAO,CAAC,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAA,CAAC;AACzB,CAAC;AAFD,sCAEC;AAED,SAAgB,aAAa,CAAC,MAAW;IACvC,OAAO,CAAC,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,CAAA,CAAC;AACzB,CAAC;AAFD,sCAEC;AAED,SAAgB,eAAe,CAAC,OAAgD,EAAE,IAAW;IAC3F,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,EAAE,CAAC;KACX;IACD,IAAI,YAAY,GAAmB,EAAE,CAAC;IACtC,IAAI,OAAO,CAAC,KAAK,EAAE;QACjB,IAAI,IAAA,gBAAS,EAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC5B,YAAY,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAChC;aAAM;YACL,YAAY,GAAG,IAAA,cAAK,EAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAiB,CAAC,CAAC;SACxE;KACF;IACD,OAAO,YAAY,CAAC,MAAM,CAAC,IAAA,wBAAiB,EAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;AAC/D,CAAC;AAbD,0CAaC","file":"mark.js","sourcesContent":["import { array } from '@visactor/vutils';\nimport type { IGrammarBase, IView, MarkFunctionType, ScaleEncodeType, FieldEncodeType } from '../types';\nimport { isGrammar, parseFunctionType } from './util';\n\nexport function isScaleEncode(encode: any): encode is ScaleEncodeType {\n  return !!encode?.scale;\n}\n\nexport function isFieldEncode(encode: any): encode is FieldEncodeType {\n  return !!encode?.field;\n}\n\nexport function parseEncodeType(encoder: MarkFunctionType<any> | ScaleEncodeType, view: IView): IGrammarBase[] {\n  if (!encoder) {\n    return [];\n  }\n  let dependencies: IGrammarBase[] = [];\n  if (encoder.scale) {\n    if (isGrammar(encoder.scale)) {\n      dependencies = [encoder.scale];\n    } else {\n      dependencies = array(view.getScaleById(encoder.scale) as IGrammarBase);\n    }\n  }\n  return dependencies.concat(parseFunctionType(encoder, view));\n}\n"]}