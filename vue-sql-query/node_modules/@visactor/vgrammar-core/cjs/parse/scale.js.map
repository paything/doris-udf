{"version":3,"sources":["../src/parse/scale.ts"],"names":[],"mappings":"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","file":"scale.js","sourcesContent":["import {\n  isArray,\n  isFunction,\n  isNil,\n  isNumber,\n  isString,\n  isValidNumber,\n  maxInArray,\n  minInArray\n} from '@visactor/vutils';\nimport type {\n  IBaseScale,\n  IBandLikeScale,\n  ILinearScale,\n  IPowScale,\n  ILogScale,\n  ISymlogScale,\n  IContinuousScale,\n  IContinuesScaleTicks,\n  IQuantizeScale,\n  IQuantileScale\n} from '@visactor/vscale';\n// eslint-disable-next-line no-duplicate-imports\nimport {\n  LinearScale,\n  BandScale,\n  OrdinalScale,\n  PointScale,\n  isContinuous,\n  TimeScale,\n  ThresholdScale,\n  SqrtScale,\n  SymlogScale,\n  QuantizeScale,\n  QuantileScale,\n  PowScale,\n  LogScale,\n  isDiscretizing,\n  IdentityScale\n} from '@visactor/vscale';\nimport type { IView } from '../types/view';\nimport type { IGrammarBase } from '../types/grammar';\nimport type {\n  BandScaleSpec,\n  BaseBandScaleSpec,\n  LinearScaleSpec,\n  OrdinalScaleSpec,\n  PointScaleSpec,\n  ScaleFunctionType,\n  ScaleData,\n  MultiScaleData,\n  ScaleSpec,\n  ScaleConfigureSpec,\n  ScaleCoordinate,\n  PowScaleSpec,\n  ContinuousScaleSpec,\n  ScaleTicksSpec,\n  ScaleDomainSpec,\n  LogScaleSpec,\n  SqrtScaleSpec,\n  SymlogScaleSpec,\n  QuantizeScaleSpec,\n  TimeScaleSpec,\n  GrammarScaleType\n} from '../types/scale';\nimport { getGrammarOutput, invokeFunctionType, parseFunctionType } from './util';\nimport { field as getFieldAccessor } from '@visactor/vgrammar-util';\n\nexport function createScale(type: GrammarScaleType): IBaseScale {\n  switch (type) {\n    case 'band':\n      return new BandScale();\n    case 'linear':\n      return new LinearScale();\n    case 'log':\n      return new LogScale();\n    case 'ordinal':\n      return new OrdinalScale();\n    case 'point':\n      return new PointScale();\n    case 'pow':\n      return new PowScale();\n    case 'quantile':\n      return new QuantileScale();\n    case 'quantize':\n      return new QuantizeScale();\n    case 'sqrt':\n      return new SqrtScale();\n    case 'symlog':\n      return new SymlogScale();\n    case 'threshold':\n      return new ThresholdScale();\n    case 'time':\n      return new TimeScale();\n    case 'utc':\n      return new TimeScale(true);\n    case 'identity':\n      return new IdentityScale();\n  }\n  return new LinearScale();\n}\n\nfunction isScaleDataType(spec: ScaleData | any): spec is ScaleData {\n  return !isNil(spec?.data);\n}\n\nfunction parseScaleDataType(spec: ScaleData, view: IView): IGrammarBase[] {\n  if (isString(spec.data)) {\n    const data = view.getGrammarById(spec.data as string);\n    return data ? [data] : [];\n  } else if ((spec.data as IGrammarBase)?.grammarType === 'data') {\n    return [spec.data as IGrammarBase];\n  }\n  return [];\n}\n\nfunction isMultiScaleDataType(spec: MultiScaleData | any): spec is MultiScaleData {\n  return !isNil(spec?.datas);\n}\n\nfunction parseMultiScaleDataType(spec: MultiScaleData, view: IView): IGrammarBase[] {\n  if (spec && spec.datas && spec.datas.length) {\n    const res: IGrammarBase[] = [];\n    spec.datas.forEach(data => {\n      const gramarBase = parseScaleDataType(data, view);\n\n      if (gramarBase.length) {\n        res.push(gramarBase[0]);\n      }\n    });\n\n    return res;\n  }\n\n  return [];\n}\n\nfunction isScaleCoordinateType(spec: ScaleCoordinate | any): spec is ScaleCoordinate {\n  return !isNil(spec?.coordinate);\n}\n\nfunction parseScaleCoordinateType(spec: ScaleCoordinate, view: IView): IGrammarBase[] {\n  if (isString(spec.coordinate)) {\n    const coordinate = view.getCoordinateById(spec.coordinate as string);\n    return coordinate ? [coordinate] : [];\n  } else if ((spec.coordinate as IGrammarBase)?.grammarType === 'coordinate') {\n    return [spec.coordinate as IGrammarBase];\n  }\n  return [];\n}\n\nfunction parseLinearScale(spec: Omit<LinearScaleSpec, 'type'>, view: IView) {\n  let dependencies: IGrammarBase[] = [];\n  dependencies = dependencies.concat(parseFunctionType(spec.nice, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.niceMin, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.niceMax, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.min, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.max, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.zero, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.roundRange, view));\n  return dependencies;\n}\n\nfunction parsePowScale(spec: PowScaleSpec, view: IView) {\n  const dependencies = parseLinearScale(spec, view);\n  return dependencies.concat(parseFunctionType(spec.exponent, view));\n}\n\nfunction parseSymlogScale(spec: SymlogScaleSpec, view: IView) {\n  const dependencies = parseLinearScale(spec, view);\n  return dependencies.concat(parseFunctionType(spec.constant, view));\n}\n\nfunction parseLogScale(spec: Omit<LogScaleSpec, 'type'>, view: IView) {\n  let dependencies: IGrammarBase[] = [];\n  dependencies = dependencies.concat(parseFunctionType(spec.nice, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.min, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.max, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.zero, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.roundRange, view));\n  return dependencies;\n}\n\nfunction parseQuantizeScale(spec: QuantizeScaleSpec, view: IView) {\n  let dependencies: IGrammarBase[] = [];\n  dependencies = dependencies.concat(parseFunctionType(spec.nice, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.niceMin, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.niceMax, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.min, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.max, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.zero, view));\n  return dependencies;\n}\n\nfunction parseOrdinalScale(spec: OrdinalScaleSpec, view: IView) {\n  return [] as IGrammarBase[];\n}\n\nfunction parseBaseBandScale(spec: BaseBandScaleSpec, view: IView) {\n  let dependencies: IGrammarBase[] = [];\n  dependencies = dependencies.concat(parseFunctionType(spec.round, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.padding, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.paddingInner, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.paddingOuter, view));\n  dependencies = dependencies.concat(parseFunctionType(spec.align, view));\n  return dependencies;\n}\n\nfunction parseBandScale(spec: BandScaleSpec, view: IView) {\n  const dependencies = parseBaseBandScale(spec, view);\n  return dependencies.concat(parseFunctionType(spec.paddingInner, view));\n}\n\nfunction parsePointScale(spec: PointScaleSpec, view: IView) {\n  return parseBaseBandScale(spec, view);\n}\n\nexport function parseScaleDomainRange(domain: ScaleFunctionType<any> | ScaleData | MultiScaleData, view: IView) {\n  if (isScaleDataType(domain)) {\n    return parseScaleDataType(domain, view);\n  }\n\n  if (isMultiScaleDataType(domain)) {\n    return parseMultiScaleDataType(domain, view);\n  }\n\n  if (isScaleCoordinateType(domain)) {\n    return parseScaleCoordinateType(domain, view);\n  }\n  return parseFunctionType(domain, view);\n}\n\nexport function parseScaleConfig(type: GrammarScaleType, config: ScaleConfigureSpec, view: IView): IGrammarBase[] {\n  if (isNil(config)) {\n    return [];\n  }\n  const deps: IGrammarBase[] = parseFunctionType(config.unknown, view);\n  switch (type) {\n    case 'linear':\n    case 'sqrt':\n      return deps.concat(parseLinearScale(config as LinearScaleSpec, view));\n    case 'ordinal':\n      return deps.concat(parseOrdinalScale(config as OrdinalScaleSpec, view));\n    case 'band':\n      return deps.concat(parseBandScale(config as BandScaleSpec, view));\n    case 'point':\n      return deps.concat(parsePointScale(config as PointScaleSpec, view));\n    case 'pow':\n      return deps.concat(parsePowScale(config as PowScaleSpec, view));\n    case 'log':\n    case 'time':\n    case 'utc':\n      return deps.concat(parseLogScale(config as LogScaleSpec, view));\n    case 'symlog':\n      return deps.concat(parseSymlogScale(config as SymlogScaleSpec, view));\n    case 'quantize':\n      return deps.concat(parseQuantizeScale(config as QuantizeScaleSpec, view));\n  }\n  return deps;\n}\n\nfunction configureScaleNice(spec: Pick<ScaleTicksSpec, 'nice'>, scale: IContinuesScaleTicks, parameters: any) {\n  const nice = invokeFunctionType(spec.nice, parameters, scale);\n  if (nice === true) {\n    scale.nice();\n  } else if (isValidNumber(nice)) {\n    scale.nice(nice as number);\n  }\n}\nfunction configureScaleNiceMinMax(\n  spec: Pick<ScaleTicksSpec, 'niceMin' | 'niceMax'>,\n  scale: IContinuesScaleTicks,\n  parameters: any\n) {\n  const niceMax = invokeFunctionType(spec.niceMax, parameters, scale);\n  if (niceMax === true) {\n    scale.niceMax();\n  } else if (isValidNumber(niceMax)) {\n    scale.niceMax(niceMax as number);\n  }\n  const niceMin = invokeFunctionType(spec.niceMin, parameters, scale);\n  if (niceMin === true) {\n    scale.niceMin();\n  } else if (isValidNumber(niceMin)) {\n    scale.niceMin(niceMin as number);\n  }\n}\n\nfunction configureScaleDomain(spec: ScaleDomainSpec, scale: IBaseScale, parameters: any) {\n  const min = invokeFunctionType(spec.min, parameters, scale);\n  const max = invokeFunctionType(spec.max, parameters, scale);\n  const zero = invokeFunctionType(spec.zero, parameters, scale);\n  const hasValidMin = isValidNumber(min);\n  const hasValidmax = isValidNumber(max);\n  const prevDomain = scale.domain();\n\n  if (prevDomain.length === 2 && (hasValidMin || hasValidmax || zero)) {\n    let newMin = Math.min(prevDomain[0], prevDomain[prevDomain.length - 1]);\n    let newMax = Math.max(prevDomain[0], prevDomain[prevDomain.length - 1]);\n\n    if (zero && newMin > 0) {\n      newMin = 0;\n    } else if (hasValidMin) {\n      newMin = Math.min(newMin, min);\n    }\n\n    if (zero && newMax < 0) {\n      newMax = 0;\n    } else if (hasValidmax) {\n      newMax = Math.max(newMax, max);\n    }\n\n    scale.domain([newMin, newMax], true);\n  }\n}\n\nfunction configureContinuousScale(spec: Omit<ContinuousScaleSpec, 'type'>, scale: IContinuousScale, parameters: any) {\n  const rangeRound = invokeFunctionType(spec.roundRange, parameters, scale);\n\n  if (rangeRound) {\n    scale.rangeRound(scale.range(), true);\n  }\n\n  const { interpolate, clamp } = invokeFunctionType(spec.config, parameters, scale) ?? {};\n\n  if (interpolate) {\n    scale.interpolate(interpolate, true);\n  }\n\n  if (!isNil(clamp)) {\n    if (isFunction(clamp)) {\n      scale.clamp(true, clamp, true);\n    } else {\n      scale.clamp(clamp, undefined, true);\n    }\n  }\n\n  const tickCount = invokeFunctionType(spec.tickCount, parameters, scale);\n  if (tickCount) {\n    // tickCount may change the domain of scale, so need to call here\n    scale.tickData(tickCount);\n  }\n}\n\nfunction configureLinearScale(spec: Omit<LinearScaleSpec, 'type'>, scale: ILinearScale, parameters: any) {\n  configureScaleNice(spec, scale, parameters);\n  configureScaleNiceMinMax(spec, scale, parameters);\n  configureScaleDomain(spec, scale, parameters);\n  configureContinuousScale(spec, scale, parameters);\n}\n\nfunction configurePowScale(spec: PowScaleSpec, scale: IPowScale, parameters: any) {\n  configureLinearScale(spec, scale, parameters);\n\n  const exponent = invokeFunctionType(spec.exponent, parameters, scale);\n  if (exponent > 0) {\n    scale.exponent(exponent as number);\n  }\n}\n\nfunction configureLogScale(spec: LogScaleSpec, scale: ILogScale, parameters: any) {\n  configureScaleNice(spec, scale, parameters);\n  configureScaleDomain(spec, scale, parameters);\n\n  const base = invokeFunctionType(spec.base, parameters, scale);\n  if (base > 0) {\n    scale.base(base as number);\n  }\n  configureContinuousScale(spec, scale, parameters);\n}\n\nfunction configureSqrtScale(spec: SqrtScaleSpec, scale: ILinearScale, parameters: any) {\n  configureLinearScale(spec, scale, parameters);\n}\n\nfunction configureTimeScale(spec: Omit<TimeScaleSpec, 'type'>, scale: ILinearScale, parameters: any) {\n  configureScaleNice(spec, scale, parameters);\n  configureScaleDomain(spec, scale, parameters);\n  configureContinuousScale(spec, scale, parameters);\n}\n\nfunction configureSymlogScale(spec: SymlogScaleSpec, scale: ISymlogScale, parameters: any) {\n  configureLinearScale(spec, scale, parameters);\n\n  const constant = invokeFunctionType(spec.constant, parameters, scale);\n  if (isValidNumber(constant)) {\n    scale.constant(constant as number);\n  }\n}\n\nfunction configureQuantizeScale(spec: QuantizeScaleSpec, scale: IQuantizeScale, parameters: any) {\n  configureScaleNice(spec, scale, parameters);\n  configureScaleNiceMinMax(spec, scale, parameters);\n  configureScaleDomain(spec, scale, parameters);\n}\n\nfunction configureBaseBandScale(spec: BaseBandScaleSpec, scale: IBandLikeScale, parameters: any) {\n  spec.round && scale.round(invokeFunctionType(spec.round, parameters, scale), true);\n  spec.padding && scale.padding(invokeFunctionType(spec.padding, parameters, scale), true);\n  spec.paddingInner && scale.paddingInner(invokeFunctionType(spec.paddingInner, parameters, scale), true);\n  spec.paddingOuter && scale.paddingOuter(invokeFunctionType(spec.paddingOuter, parameters, scale), true);\n  spec.align && scale.align(invokeFunctionType(spec.align, parameters, scale), true);\n}\n\nfunction configureBandScale(spec: BandScaleSpec, scale: IBandLikeScale, parameters: any) {\n  return configureBaseBandScale(spec, scale, parameters);\n}\n\nfunction configurePointScale(spec: PointScaleSpec, scale: IBandLikeScale, parameters: any) {\n  return configureBaseBandScale(spec, scale, parameters);\n}\n\nfunction parseFieldData(spec: ScaleData, parameters: any) {\n  const field = spec.field;\n  const refData = getGrammarOutput(spec.data, parameters) as any[];\n  const fieldData: any[] = [];\n\n  if (isArray(field)) {\n    field.forEach(entry => {\n      const getter = getFieldAccessor(entry);\n\n      refData &&\n        refData.forEach(datum => {\n          fieldData.push(getter(datum));\n        });\n    });\n  } else {\n    const getter = getFieldAccessor(field);\n\n    refData &&\n      refData.forEach(datum => {\n        fieldData.push(getter(datum));\n      });\n  }\n\n  return fieldData;\n}\nfunction parseMultiFieldData(spec: MultiScaleData, parameters: any) {\n  let fieldData: any[] = [];\n\n  spec.datas.forEach(entry => {\n    fieldData = fieldData.concat(parseFieldData(entry, parameters));\n  });\n\n  return fieldData;\n}\n\nfunction parseScaleDataTypeValue(\n  fieldData: any[],\n  scale: IBaseScale,\n  sort?: (datumA: any, datumB: any) => number,\n  filterNumber?: boolean\n) {\n  if (sort) {\n    fieldData.sort(sort);\n  }\n\n  if (!isContinuous(scale.type)) {\n    return fieldData;\n  }\n\n  if (filterNumber) {\n    fieldData.filter(entry => isNumber(entry));\n  }\n  return [minInArray(fieldData), maxInArray(fieldData)];\n}\n\nexport function configureScale(spec: ScaleSpec, scale: IBaseScale, parameters: any) {\n  if (isScaleDataType(spec.domain)) {\n    scale.domain(parseScaleDataTypeValue(parseFieldData(spec.domain, parameters), scale, spec.domain.sort, true), true);\n  } else if (isMultiScaleDataType(spec.domain)) {\n    scale.domain(\n      parseScaleDataTypeValue(parseMultiFieldData(spec.domain, parameters), scale, spec.domain.sort, true),\n      true\n    );\n  } else {\n    scale.domain(invokeFunctionType(spec.domain, parameters, scale), true);\n  }\n\n  if (spec.type !== 'identity') {\n    if (isScaleDataType(spec.range)) {\n      scale.range(parseScaleDataTypeValue(parseFieldData(spec.range, parameters), scale), true);\n    } else if (isMultiScaleDataType(spec.range)) {\n      scale.range(parseScaleDataTypeValue(parseMultiFieldData(spec.range, parameters), scale), true);\n    } else if (isScaleCoordinateType(spec.range)) {\n      const coord = getGrammarOutput(spec.range.coordinate, parameters);\n\n      if (!isDiscretizing(scale.type) && coord) {\n        scale.range(coord.getRangeByDimension(spec.range.dimension, spec.range.isSubshaft, spec.range.reversed));\n      }\n    } else {\n      scale.range(invokeFunctionType(spec.range, parameters, scale), true);\n    }\n  }\n  if (!isNil(spec.unknown)) {\n    scale.unknown(invokeFunctionType(spec.unknown, parameters, scale));\n  }\n\n  switch (spec.type) {\n    case 'linear':\n      configureLinearScale(spec, scale as ILinearScale, parameters);\n      (scale as ILinearScale).rescale();\n      break;\n    case 'band':\n      configureBandScale(spec, scale as IBandLikeScale, parameters);\n      (scale as IBandLikeScale).rescale();\n      break;\n    case 'point':\n      configurePointScale(spec, scale as IBandLikeScale, parameters);\n      (scale as IBandLikeScale).rescale();\n      break;\n    case 'pow':\n      configurePowScale(spec, scale as IPowScale, parameters);\n      (scale as IContinuousScale).rescale();\n      break;\n    case 'log':\n      configureLogScale(spec, scale as ILogScale, parameters);\n      (scale as IContinuousScale).rescale();\n      break;\n    case 'sqrt':\n      configureSqrtScale(spec, scale as ILinearScale, parameters);\n      (scale as IContinuousScale).rescale();\n      break;\n    case 'symlog':\n      configureSymlogScale(spec, scale as ISymlogScale, parameters);\n      (scale as IContinuousScale).rescale();\n      break;\n    case 'time':\n    case 'utc':\n      configureTimeScale(spec, scale as ILinearScale, parameters);\n      (scale as IContinuousScale).rescale();\n      break;\n    case 'quantize':\n      configureQuantizeScale(spec, scale as IQuantizeScale, parameters);\n      (scale as IQuantizeScale).rescale();\n      break;\n    case 'quantile':\n      (scale as IQuantileScale).rescale();\n      break;\n  }\n}\n"]}