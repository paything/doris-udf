{"version":3,"sources":["../src/parse/util.ts"],"names":[],"mappings":";;;AAAA,6CAA6E;AAe7E,SAAgB,cAAc,CAAC,UAAiD,EAAE,IAAW;IAC3F,MAAM,YAAY,GAAuB,IAAA,cAAK,EAAC,UAAU,CAAC,CAAC;IAC3D,OAAO,YAAY,CAAC,MAAM,CAAC,CAAC,IAAoB,EAAE,GAA0B,EAAE,EAAE;QAC9E,MAAM,GAAG,GAAG,CAAC,IAAA,iBAAQ,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAiB,CAAC;QAEvF,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAChB;QACD,OAAO,IAAI,CAAC;IACd,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAVD,wCAUC;AAED,SAAS,qBAAqB,CAAC,MAAW;IACxC,OAAO,CAAC,IAAA,mBAAU,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAA0B,aAA1B,MAAM,uBAAN,MAAM,CAAsB,MAAM,CAAA,CAAC;AACtE,CAAC;AAED,SAAS,oBAAoB,CAC3B,MAAW;IAEX,OAAO,CAAC,IAAA,mBAAU,EAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAsC,aAAtC,MAAM,uBAAN,MAAM,CAAkC,QAAQ,CAAA,CAAC;AACpF,CAAC;AAED,SAAgB,iBAAiB,CAC/B,IAA4C,EAC5C,IAAW;IAEX,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,EAAE;QACf,OAAO,EAAE,CAAC;KACX;IACD,IAAI,qBAAqB,CAAC,IAAI,CAAC,EAAE;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,IAAA,iBAAQ,EAAC,MAAM,CAAC,EAAE;YACpB,OAAO,IAAA,cAAK,EAAe,IAAI,CAAC,cAAc,CAAC,MAAgB,CAAiB,CAAC,CAAC;SACnF;aAAM,IAAI,CAAC,MAAuB,aAAvB,MAAM,uBAAN,MAAM,CAAmB,WAAW,MAAK,QAAQ,EAAE;YAC7D,OAAO,CAAC,MAAsB,CAAC,CAAC;SACjC;KACF;SAAM,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE;QACrC,OAAO,cAAc,CAAE,IAAoC,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;KAC/E;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAlBD,8CAkBC;AAED,SAAgB,cAAc,CAC5B,IAAS;IAET,OAAO,IAAA,mBAAU,EAAC,IAAI,CAAC,KAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,CAAA,IAAI,CAAC,CAAC,CAAC,IAAoC,aAApC,IAAI,uBAAJ,IAAI,CAAkC,QAAQ,CAAA,CAAC;AAC/F,CAAC;AAJD,wCAIC;AAED,SAAgB,kBAAkB,CAChC,IAA4C,EAC5C,UAAe,EACf,sBAA2C,EAC3C,OAAwB;IAExB,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,EAAE;QACf,OAAO,IAAS,CAAC;KAClB;IAED,IAAI,IAAA,mBAAU,EAAC,IAAI,CAAC,EAAE;QACpB,IAAI,OAAO,EAAE;YACX,OAAQ,IAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;SACnF;QACD,OAAQ,IAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,EAAE,UAAU,CAAC,CAAC;KAC1E;SAAM,IAAK,IAAwB,CAAC,MAAM,EAAE;QAC3C,MAAM,MAAM,GAAI,IAAwB,CAAC,MAAM,CAAC;QAChD,IAAI,IAAA,iBAAQ,EAAC,MAAM,CAAC,EAAE;YACpB,OAAO,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,MAAgB,CAAC,CAAC;SACvC;QACD,OAAQ,MAAuB,CAAC,MAAM,EAAE,CAAC;KAC1C;SAAM,IAAK,IAAoC,CAAC,QAAQ,EAAE;QACzD,IAAI,OAAO,EAAE;YACX,OAAQ,IAAoC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;SAC/G;QACD,OAAQ,IAAoC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,sBAAsB,EAAE,UAAU,CAAC,CAAC;KACtG;IACD,OAAO,IAAS,CAAC;AACnB,CAAC;AA5BD,gDA4BC;AAED,SAAgB,2BAA2B,CAAI,IAA8B,EAAE,UAAe;IAC5F,IAAI,IAAA,cAAK,EAAC,IAAI,CAAC,EAAE;QACf,OAAO,IAAS,CAAC;KAClB;IAED,IAAI,IAAA,mBAAU,EAAC,IAAI,CAAC,EAAE;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KACpC;SAAM,IAAK,IAAwB,CAAC,MAAM,EAAE;QAC3C,MAAM,MAAM,GAAI,IAAwB,CAAC,MAAM,CAAC;QAChD,IAAI,IAAA,iBAAQ,EAAC,MAAM,CAAC,EAAE;YACpB,OAAO,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,MAAgB,CAAC,CAAC;SACvC;QACD,OAAQ,MAAuB,CAAC,MAAM,EAAE,CAAC;KAC1C;SAAM,IAAK,IAAgD,CAAC,QAAQ,EAAE;QACrE,OAAQ,IAAgD,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;KAC1F;IACD,OAAO,IAAS,CAAC;AACnB,CAAC;AAjBD,kEAiBC;AAED,SAAgB,gBAAgB,CAAC,OAA8B,EAAE,UAAe;IAC9E,OAAO,IAAA,iBAAS,EAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACrE,CAAC;AAFD,4CAEC;AAKD,SAAgB,QAAQ,CAAC,GAAQ;IAC/B,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC7C,CAAC;AAFD,4BAEC;AAEM,MAAM,SAAS,GAAG,CAAC,EAAO,EAAsB,EAAE;IACvD,OAAO,EAAE,IAAI,CAAC,IAAA,cAAK,EAAC,EAAE,CAAC,WAAW,CAAC,CAAC;AACtC,CAAC,CAAC;AAFW,QAAA,SAAS,aAEpB;AAEK,MAAM,UAAU,GAAG,CAAI,KAAwD,EAAE,EAAE;IACxF,IAAI,IAAA,mBAAU,EAAC,KAAK,CAAC,EAAE;QACrB,OAAO,KAAsC,CAAC;KAC/C;IACD,OAAO,CAAC,KAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,KAAwB,CAAC,CAAC;AACvD,CAAC,CAAC;AALW,QAAA,UAAU,cAKrB;AAEK,MAAM,UAAU,GAAG,CAAC,KAAU,EAAiB,EAAE;IACtD,IAAI,IAAA,iBAAQ,EAAC,KAAK,CAAC,IAAI,cAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;QACpD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AALW,QAAA,UAAU,cAKrB","file":"util.js","sourcesContent":["import { isString, isFunction, isNil, array, Color } from '@visactor/vutils';\nimport type { IElement } from '../types/element';\nimport type {\n  FunctionCallback,\n  SignalDependency,\n  SignalReference,\n  IView,\n  GenericFunctionType,\n  SignalFunction,\n  ParameterFunctionType,\n  ParameterCallback,\n  Nil\n} from '../types';\nimport type { IGrammarBase } from '../types/grammar';\n\nexport function parseReference(dependency: SignalDependency | SignalDependency[], view: IView): IGrammarBase[] {\n  const dependencies: SignalDependency[] = array(dependency);\n  return dependencies.reduce((refs: IGrammarBase[], dep: string | IGrammarBase) => {\n    const ref = (isString(dep) ? view.getGrammarById(dep as string) : dep) as IGrammarBase;\n\n    if (ref) {\n      refs.push(ref);\n    }\n    return refs;\n  }, []);\n}\n\nfunction isSignalReferenceType(signal: any): signal is SignalReference {\n  return !isFunction(signal) && !!(signal as SignalReference)?.signal;\n}\n\nfunction isSignalFunctionType<Callback extends FunctionCallback<T>, T>(\n  signal: any\n): signal is SignalFunction<Callback, T> {\n  return !isFunction(signal) && !!(signal as SignalFunction<Callback, T>)?.callback;\n}\n\nexport function parseFunctionType<Callback extends FunctionCallback<T>, T>(\n  spec: GenericFunctionType<Callback, T> | Nil,\n  view: IView\n): IGrammarBase[] {\n  if (isNil(spec)) {\n    return [];\n  }\n  if (isSignalReferenceType(spec)) {\n    const signal = spec.signal;\n    if (isString(signal)) {\n      return array<IGrammarBase>(view.getGrammarById(signal as string) as IGrammarBase);\n    } else if ((signal as IGrammarBase)?.grammarType === 'signal') {\n      return [signal as IGrammarBase];\n    }\n  } else if (isSignalFunctionType(spec)) {\n    return parseReference((spec as SignalFunction<Callback, T>).dependency, view);\n  }\n  return [];\n}\n\nexport function isFunctionType<Callback extends FunctionCallback<T>, T>(\n  spec: any\n): spec is Callback | SignalReference | SignalFunction<Callback, T> {\n  return isFunction(spec) || spec?.signal || !!(spec as SignalFunction<Callback, T>)?.callback;\n}\n\nexport function invokeFunctionType<Callback extends FunctionCallback<T>, T>(\n  spec: GenericFunctionType<Callback, T> | Nil,\n  parameters: any,\n  datumOrGrammarInstance?: any | IGrammarBase,\n  element?: IElement | any\n): T {\n  if (isNil(spec)) {\n    return spec as T;\n  }\n\n  if (isFunction(spec)) {\n    if (element) {\n      return (spec as Callback).call(null, datumOrGrammarInstance, element, parameters);\n    }\n    return (spec as Callback).call(null, datumOrGrammarInstance, parameters);\n  } else if ((spec as SignalReference).signal) {\n    const signal = (spec as SignalReference).signal;\n    if (isString(signal)) {\n      return parameters?.[signal as string];\n    }\n    return (signal as IGrammarBase).output();\n  } else if ((spec as SignalFunction<Callback, T>).callback) {\n    if (element) {\n      return (spec as SignalFunction<Callback, T>).callback.call(null, datumOrGrammarInstance, element, parameters);\n    }\n    return (spec as SignalFunction<Callback, T>).callback.call(null, datumOrGrammarInstance, parameters);\n  }\n  return spec as T;\n}\n\nexport function invokeParameterFunctionType<T>(spec: ParameterFunctionType<T>, parameters: any): T {\n  if (isNil(spec)) {\n    return spec as T;\n  }\n\n  if (isFunction(spec)) {\n    return spec.call(null, parameters);\n  } else if ((spec as SignalReference).signal) {\n    const signal = (spec as SignalReference).signal;\n    if (isString(signal)) {\n      return parameters?.[signal as string];\n    }\n    return (signal as IGrammarBase).output();\n  } else if ((spec as SignalFunction<ParameterCallback<T>, T>).callback) {\n    return (spec as SignalFunction<ParameterCallback<T>, T>).callback.call(null, parameters);\n  }\n  return spec as T;\n}\n\nexport function getGrammarOutput(grammar: IGrammarBase | string, parameters: any) {\n  return isGrammar(grammar) ? grammar.output() : parameters[grammar];\n}\n\n/**\n * 判断是否是依赖signal\n */\nexport function isSignal(obj: any) {\n  return obj && (obj.signal || obj.callback);\n}\n\nexport const isGrammar = (el: any): el is IGrammarBase => {\n  return el && !isNil(el.grammarType);\n};\n\nexport const parseField = <T>(field: ((datum: T) => symbol | string) | string | symbol) => {\n  if (isFunction(field)) {\n    return field as (datum: T) => symbol | string;\n  }\n  return (datum: T) => datum[field as string | symbol];\n};\n\nexport const parseColor = (color: any): string | null => {\n  if (isString(color) && Color.parseColorString(color)) {\n    return color;\n  }\n  return null;\n};\n"]}