{"version":3,"sources":["../src/parse/option.ts"],"names":[],"mappings":";;;AAAA,6CAAwD;AAExD,iCAAmC;AAE5B,MAAM,gBAAgB,GAAG,CAAC,KAAyB,EAAE,MAAW,EAAE,EAAE;IACzE,IAAI,IAAA,gBAAS,EAAC,KAAK,CAAC,EAAE;QACpB,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC;KACvB;SAAM,IAAI,KAAK,IAAI,IAAA,iBAAQ,EAAM,KAAK,CAAC,EAAE;QACxC,IAAI,IAAA,mBAAU,EAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;YAC9B,OAAO,CAAC,KAAU,EAAE,EAAE;gBACpB,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACvC,CAAC,CAAC;SACH;QAED,IAAI,IAAA,mBAAU,EAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC3B,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SAC5B;QAED,OAAO,KAAK,CAAC;KACd;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAlBW,QAAA,gBAAgB,oBAkB3B;AAEK,MAAM,YAAY,GAAG,CAAC,OAAuE,EAAE,MAAW,EAAE,EAAE;IACnH,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,OAAO,CAAC;KAChB;IAED,IAAI,IAAA,iBAAQ,EAAC,OAAO,CAAC,EAAE;QACrB,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAE5B,GAAG,CAAC,GAAG,CAAC,GAAG,IAAA,wBAAgB,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAE5C,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;KACR;IAED,OAAQ,OAAqC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,wBAAgB,EAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;AAChG,CAAC,CAAC;AAhBW,QAAA,YAAY,gBAgBvB","file":"option.js","sourcesContent":["import { isFunction, isObject } from '@visactor/vutils';\nimport type { IGrammarBase } from '../types';\nimport { isGrammar } from './util';\n\nexport const parseOptionValue = (value: IGrammarBase | any, params: any) => {\n  if (isGrammar(value)) {\n    return value.output();\n  } else if (value && isObject<any>(value)) {\n    if (isFunction(value.callback)) {\n      return (datum: any) => {\n        return value.callback(datum, params);\n      };\n    }\n\n    if (isFunction(value.value)) {\n      return value.value(params);\n    }\n\n    return value;\n  }\n\n  return value;\n};\n\nexport const parseOptions = (options: Record<string, IGrammarBase | any> | Array<IGrammarBase | any>, params: any) => {\n  if (!options) {\n    return options;\n  }\n\n  if (isObject(options)) {\n    return Object.keys(options).reduce((res, key) => {\n      const option = options[key];\n\n      res[key] = parseOptionValue(option, params);\n\n      return res;\n    }, {});\n  }\n\n  return (options as Array<IGrammarBase | any>).map(option => parseOptionValue(option, params));\n};\n"]}