{"version":3,"sources":["../src/interactions/element-active-by-legend.ts"],"names":[],"mappings":"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","file":"element-active-by-legend.js","sourcesContent":["import { InteractionStateEnum } from '../graph/enums';\nimport type { ElementActiveByLegendOptions, IElement, IGlyphElement, IMark, IView, InteractionEvent } from '../types';\nimport { BaseInteraction } from './base';\nimport { LegendEvent } from '@visactor/vrender-components';\nimport { isNil } from '@visactor/vutils';\nimport { generateFilterValue } from './utils';\n\nexport class ElementActiveByLegend extends BaseInteraction<ElementActiveByLegendOptions> {\n  static type: string = 'element-active-by-legend';\n  type: string = ElementActiveByLegend.type;\n\n  static defaultOptions: ElementActiveByLegendOptions = {\n    state: InteractionStateEnum.active,\n    filterType: 'groupKey'\n  };\n  options: ElementActiveByLegendOptions;\n  protected _marks?: IMark[];\n\n  constructor(view: IView, options?: ElementActiveByLegendOptions) {\n    super(view, options);\n    this.options = Object.assign({}, ElementActiveByLegend.defaultOptions, options);\n\n    this._marks = view.getMarksBySelector(this.options.selector);\n  }\n\n  protected getEvents() {\n    return [\n      {\n        type: LegendEvent.legendItemHover,\n        handler: this.handleStart\n      },\n      {\n        type: LegendEvent.legendItemUnHover,\n        handler: this.handleReset\n      }\n    ];\n  }\n\n  getStartState(): string {\n    return this.options.state;\n  }\n\n  start(element: IElement | IGlyphElement | string) {\n    const itemKey = element;\n\n    if (isNil(itemKey)) {\n      return;\n    }\n\n    const filterValue = generateFilterValue(this.options);\n\n    this._marks.forEach(mark => {\n      mark.elements.forEach(el => {\n        const isActive = filterValue(el) === itemKey;\n\n        if (isActive) {\n          el.addState(this.options.state);\n        } else {\n          el.removeState(this.options.state);\n        }\n      });\n    });\n  }\n\n  resetAll() {\n    this._marks.forEach(mark => {\n      mark.elements.forEach(el => {\n        el.removeState(this.options.state);\n      });\n    });\n  }\n\n  reset(element?: InteractionEvent['element']) {\n    if (element) {\n      if (this._marks && this._marks.includes(element.mark)) {\n        element.removeState(this.options.state);\n      }\n    } else {\n      this.resetAll();\n    }\n  }\n\n  handleStart = (e: InteractionEvent) => {\n    this.start(e.detail?.data?.id);\n  };\n\n  handleReset = (e: InteractionEvent) => {\n    this.resetAll();\n  };\n}\n"]}