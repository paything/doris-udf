{"version":3,"sources":["../src/interactions/utils.ts"],"names":[],"mappings":";;;AAAA,6CAA6D;AAGtD,MAAM,mBAAmB,GAAG,CAAC,OAA6B,EAAE,EAAE;IACnE,IAAI,OAAO,CAAC,WAAW,EAAE;QACvB,OAAO,CAAC,EAAY,EAAE,EAAE;;YACtB,OAAO,MAAA,EAAE,CAAC,QAAQ,EAAE,0CAAG,OAAO,CAAC,WAAW,CAAC,CAAC;QAC9C,CAAC,CAAC;KACH;IAED,OAAO,CAAC,EAAY,EAAE,EAAE;QACtB,OAAO,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAChC,CAAC,CAAC;AACJ,CAAC,CAAC;AAVW,QAAA,mBAAmB,uBAU9B;AAEK,MAAM,iBAAiB,GAAG,CAAC,KAAc,EAAE,MAAgB,EAA2B,EAAE;IAC7F,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,GAAG,GAAG,EAAE,CAAC;IAEf,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnB,MAAM,QAAQ,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,CAAa,CAAC;QACtD,MAAM,MAAM,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC;QAE3C,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QAED,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE;gBAC1B,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACf,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;iBACjB;gBAED,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AA3BW,QAAA,iBAAiB,qBA2B5B;AAEK,MAAM,uBAAuB,GAAG,CAAC,UAA+D,EAAE,EAAE;IACzG,MAAM,eAAe,GAAG,IAAA,cAAK,EAAC,UAAU,CAAC,CAAC;IAC1C,MAAM,SAAS,GAAoC,EAAE,CAAC;IACtD,MAAM,UAAU,GAAgB,EAAE,CAAC;IAEnC,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAC5B,IAAI,GAAG,KAAK,OAAO,EAAE;YACnB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACxB;aAAM,IAAI,IAAA,iBAAQ,EAAC,GAAG,CAAC,IAAI,GAAG,KAAK,MAAM,EAAE;YAC1C,IAAK,GAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACrC,UAAU,CAAC,IAAI,CAAE,GAAc,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAc,CAAC,CAAC;gBAEnE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxB;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,GAAgB,CAAC,CAAC;gBAElC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACxB;SACF;aAAM,IAAI,IAAA,iBAAQ,EAAC,GAAG,CAAC,EAAE;YACxB,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC3B;IACH,CAAC,CAAC,CAAC;IAEH,OAAO;QACL,UAAU;QACV,SAAS;KACV,CAAC;AACJ,CAAC,CAAC;AA3BW,QAAA,uBAAuB,2BA2BlC","file":"utils.js","sourcesContent":["import { array, isNumber, isString } from '@visactor/vutils';\nimport type { ElementFilterOptions, ElementSelectTriggerOff, EventType, IElement, IMark, MarkSpec } from '../types';\n\nexport const generateFilterValue = (options: ElementFilterOptions) => {\n  if (options.filterField) {\n    return (el: IElement) => {\n      return el.getDatum()?.[options.filterField];\n    };\n  }\n\n  return (el: IElement) => {\n    return el[options.filterType];\n  };\n};\n\nexport const groupMarksByState = (marks: IMark[], states: string[]): Record<string, IMark[]> => {\n  if (!states || !marks) {\n    return null;\n  }\n\n  const res = {};\n\n  marks.forEach(mark => {\n    const markSpec = (mark && mark.getSpec()) as MarkSpec;\n    const encode = markSpec && markSpec.encode;\n\n    if (!encode) {\n      return;\n    }\n\n    states.forEach(state => {\n      if (state && encode[state]) {\n        if (!res[state]) {\n          res[state] = [];\n        }\n\n        res[state].push(mark);\n      }\n    });\n  });\n\n  return res;\n};\n\nexport const parseTriggerOffOfSelect = (triggerOff: ElementSelectTriggerOff | ElementSelectTriggerOff[]) => {\n  const triggerOffArray = array(triggerOff);\n  const resetType: ('view' | 'self' | 'timeout')[] = [];\n  const eventNames: EventType[] = [];\n\n  triggerOffArray.forEach(off => {\n    if (off === 'empty') {\n      resetType.push('view');\n    } else if (isString(off) && off !== 'none') {\n      if ((off as string).includes('view:')) {\n        eventNames.push((off as string).replace('view:', '') as EventType);\n\n        resetType.push('view');\n      } else {\n        eventNames.push(off as EventType);\n\n        resetType.push('self');\n      }\n    } else if (isNumber(off)) {\n      resetType.push('timeout');\n    }\n  });\n\n  return {\n    eventNames,\n    resetType\n  };\n};\n"]}