"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.BrushFilter = void 0;

const brush_base_1 = require("./brush-base"), vutils_1 = require("@visactor/vutils"), enums_1 = require("../graph/enums");

class BrushFilter extends brush_base_1.BrushBase {
    constructor(view, option) {
        super(view, Object.assign({}, BrushFilter.defaultOptions, option)), this.type = BrushFilter.type, 
        this.handleBrushUpdate = event => {
            const elements = [];
            let filterValue = [];
            this._marks.forEach((mark => {
                mark.elements.forEach((el => {
                    this.isBrushContainGraphicItem(event.detail.operateMask, el.getGraphicItem()) && (elements.push(el), 
                    filterValue = filterValue.concat((0, vutils_1.array)(el.getDatum())));
                }));
            })), this._data && (filterValue = Array.from(new Set(filterValue)), this._filterValue && filterValue.length === this._filterValue.length && !filterValue.some((datum => !this._filterValue.includes(datum))) || (this._filterValue = filterValue, 
            this.handleFilter())), this._dispatchEvent(event, elements);
        }, this._data = (0, vutils_1.isString)(this.options.target.data) ? view.getDataById(this.options.target.data) : this.options.target.data;
    }
    getEvents() {
        if (!this._data) return [];
        const transform = this.options.target.transform;
        return this._filterData(this._data, null, enums_1.DataFilterRank.brush, null, void 0, ((data, filterValue) => {
            const nextData = filterValue || data;
            return transform ? transform(data, filterValue) : nextData;
        })), super.getEvents();
    }
}

exports.BrushFilter = BrushFilter, BrushFilter.type = "brush-filter", BrushFilter.defaultOptions = {};
//# sourceMappingURL=brush-filter.js.map