{"version":3,"sources":["../src/interactions/element-highlight-by-graphic-name.ts"],"names":[],"mappings":"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","file":"element-highlight-by-graphic-name.js","sourcesContent":["import type { ElementHighlightByGraphicNameOptions, IElement, IGlyphElement, IView, InteractionEvent } from '../types';\nimport { isNil } from '@visactor/vutils';\nimport { ElementHighlight } from './element-highlight';\n\nexport class ElementHighlightByGraphicName extends ElementHighlight {\n  static type: string = 'element-highlight-by-graphic-name';\n  type: string = ElementHighlightByGraphicName.type;\n\n  options: ElementHighlightByGraphicNameOptions;\n\n  constructor(view: IView, options?: ElementHighlightByGraphicNameOptions) {\n    super(view, options);\n    this.options = Object.assign({}, ElementHighlightByGraphicName.defaultOptions, options);\n    this._marks = view.getMarksBySelector(this.options.selector);\n  }\n\n  protected _filterByName(e: InteractionEvent) {\n    const name = e?.target?.name;\n    return !!name;\n  }\n\n  protected _parseTargetKey(e: InteractionEvent, element: IElement | IGlyphElement) {\n    return e.target.name;\n  }\n\n  start(itemKey: IElement | IGlyphElement | string) {\n    if (isNil(itemKey)) {\n      return;\n    }\n\n    this._marks.forEach(mark => {\n      mark.elements.forEach(el => {\n        const isHighlight = el.getGraphicItem()?.name === itemKey;\n        if (isHighlight) {\n          el.updateStates({\n            [this.options.blurState]: false,\n            [this.options.highlightState]: true\n          });\n        } else {\n          el.updateStates({\n            [this.options.blurState]: true,\n            [this.options.highlightState]: false\n          });\n        }\n      });\n    });\n  }\n\n  reset() {\n    const states = [this.options.blurState, this.options.highlightState];\n    this._marks.forEach(mark => {\n      mark.elements.forEach(el => {\n        el.removeState(states);\n      });\n    });\n  }\n\n  handleStart = (e: InteractionEvent) => {\n    if (e && e.element && this._marks.includes(e.element.mark)) {\n      const shouldStart = this.options.shouldStart ? this.options.shouldStart(e) : this._filterByName(e);\n      if (shouldStart) {\n        const itemKey = this._parseTargetKey(e, e.element);\n        this.start(itemKey);\n      }\n    }\n  };\n\n  handleReset = (e: InteractionEvent) => {\n    if (e && e.element && this._marks.includes(e.element.mark)) {\n      this.reset();\n    }\n  };\n}\n"]}