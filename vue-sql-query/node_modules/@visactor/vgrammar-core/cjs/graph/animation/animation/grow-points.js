"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.growPointsYOut = exports.growPointsYIn = exports.growPointsXOut = exports.growPointsXIn = exports.growPointsOut = exports.growPointsIn = void 0;

const vutils_1 = require("@visactor/vutils"), getCenterPoints = (element, options, animationParameters) => {
    const points = element.getGraphicAttribute("points", !1), center = {
        x: 0,
        y: 0
    };
    return points.forEach((point => {
        center.x += point.x, center.y += point.y;
    })), center.x /= points.length, center.y /= points.length, options && options.center && ((0, 
    vutils_1.isValidNumber)(options.center.x) && (center.x = options.center.x), (0, 
    vutils_1.isValidNumber)(options.center.y) && (center.y = options.center.y)), "area" === element.mark.markType && (center.x1 = center.x, 
    center.y1 = center.y), points.map((point => Object.assign({}, point, center)));
}, growPointsIn = (element, options, animationParameters) => ({
    from: {
        points: getCenterPoints(element, options)
    },
    to: {
        points: element.getGraphicAttribute("points", !1)
    }
});

exports.growPointsIn = growPointsIn;

const growPointsOut = (element, options, animationParameters) => ({
    from: {
        points: element.getGraphicAttribute("points", !0)
    },
    to: {
        points: getCenterPoints(element, options)
    }
});

exports.growPointsOut = growPointsOut;

const changePointsX = (element, options, animationParameters) => element.getGraphicAttribute("points", !1).map((point => {
    var _a;
    if (options && "negative" === options.orient) {
        let groupRight = animationParameters.width;
        return animationParameters.group && (groupRight = null !== (_a = animationParameters.groupWidth) && void 0 !== _a ? _a : animationParameters.group.getBounds().width(), 
        animationParameters.groupWidth = groupRight), Object.assign(Object.assign({}, point), {
            x: groupRight,
            y: point.y,
            x1: groupRight,
            y1: point.y1,
            defined: !1 !== point.defined
        });
    }
    return Object.assign(Object.assign({}, point), {
        x: 0,
        y: point.y,
        x1: 0,
        y1: point.y1,
        defined: !1 !== point.defined
    });
})), growPointsXIn = (element, options, animationParameters) => ({
    from: {
        points: changePointsX(element, options, animationParameters)
    },
    to: {
        points: element.getGraphicAttribute("points", !1)
    }
});

exports.growPointsXIn = growPointsXIn;

const growPointsXOut = (element, options, animationParameters) => ({
    from: {
        points: element.getGraphicAttribute("points", !0)
    },
    to: {
        points: changePointsX(element, options, animationParameters)
    }
});

exports.growPointsXOut = growPointsXOut;

const changePointsY = (element, options, animationParameters) => element.getGraphicAttribute("points", !1).map((point => {
    var _a;
    if (options && "negative" === options.orient) {
        let groupBottom = animationParameters.height;
        return animationParameters.group && (groupBottom = null !== (_a = animationParameters.groupHeight) && void 0 !== _a ? _a : animationParameters.group.getBounds().height(), 
        animationParameters.groupHeight = groupBottom), Object.assign(Object.assign({}, point), {
            x: point.x,
            y: groupBottom,
            x1: point.x1,
            y1: groupBottom,
            defined: !1 !== point.defined
        });
    }
    return Object.assign(Object.assign({}, point), {
        x: point.x,
        y: 0,
        x1: point.x1,
        y1: 0,
        defined: !1 !== point.defined
    });
})), growPointsYIn = (element, options, animationParameters) => ({
    from: {
        points: changePointsY(element, options, animationParameters)
    },
    to: {
        points: element.getGraphicAttribute("points", !1)
    }
});

exports.growPointsYIn = growPointsYIn;

const growPointsYOut = (element, options, animationParameters) => ({
    from: {
        points: element.getGraphicAttribute("points", !0)
    },
    to: {
        points: changePointsY(element, options, animationParameters)
    }
});

exports.growPointsYOut = growPointsYOut;
//# sourceMappingURL=grow-points.js.map
