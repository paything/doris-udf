{"version":3,"sources":["../src/graph/animation/animation/grow-cartesian.ts"],"names":[],"mappings":"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","file":"grow-cartesian.js","sourcesContent":["import { isNil, isNumber, isValid } from '@visactor/vutils';\nimport type { IGrowCartesianAnimationOptions, IAnimationParameters, IElement, TypeAnimation } from '../../../types';\n\n// grow center\nexport const growCenterIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  switch (options?.direction) {\n    case 'x': {\n      const x = element.getFinalAnimationAttribute('x');\n      const x1 = element.getFinalAnimationAttribute('x1');\n      const width = element.getFinalAnimationAttribute('width');\n\n      return {\n        from: isValid(width)\n          ? {\n              x: x + width / 2,\n              x1: undefined,\n              width: 0\n            }\n          : {\n              x: (x + x1) / 2,\n              x1: (x + x1) / 2,\n              width: undefined\n            },\n        to: { x, x1, width }\n      };\n    }\n    case 'y': {\n      const y = element.getFinalAnimationAttribute('y');\n      const y1 = element.getFinalAnimationAttribute('y1');\n      const height = element.getFinalAnimationAttribute('height');\n\n      return {\n        from: isValid(height)\n          ? {\n              y: y + height / 2,\n              y1: undefined,\n              height: 0\n            }\n          : {\n              y: (y + y1) / 2,\n              y1: (y + y1) / 2,\n              height: undefined\n            },\n        to: { y, y1, height }\n      };\n    }\n    case 'xy':\n    default: {\n      const x = element.getFinalAnimationAttribute('x');\n      const x1 = element.getFinalAnimationAttribute('x1');\n      const width = element.getFinalAnimationAttribute('width');\n      const y = element.getFinalAnimationAttribute('y');\n      const y1 = element.getFinalAnimationAttribute('y1');\n      const height = element.getFinalAnimationAttribute('height');\n      const from: any = {};\n\n      if (isValid(width)) {\n        from.x = x + width / 2;\n        from.width = 0;\n        from.x1 = undefined;\n      } else {\n        from.x = (x + x1) / 2;\n        from.x1 = (x + x1) / 2;\n        from.width = undefined;\n      }\n\n      if (isValid(height)) {\n        from.y = y + height / 2;\n        from.height = 0;\n        from.y1 = undefined;\n      } else {\n        from.y = (y + y1) / 2;\n        from.y1 = (y + y1) / 2;\n        from.height = undefined;\n      }\n\n      return {\n        from,\n        to: { x, y, x1, y1, width, height }\n      };\n    }\n  }\n};\n\nexport const growCenterOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  switch (options?.direction) {\n    case 'x': {\n      const x = element.getFinalAnimationAttribute('x');\n      const x1 = element.getFinalAnimationAttribute('x1');\n      const width = element.getFinalAnimationAttribute('width');\n\n      return {\n        to: isValid(width)\n          ? {\n              x: x + width / 2,\n              x1: undefined,\n              width: 0\n            }\n          : {\n              x: (x + x1) / 2,\n              x1: (x + x1) / 2,\n              width: undefined\n            }\n      };\n    }\n    case 'y': {\n      const y = element.getFinalAnimationAttribute('y');\n      const y1 = element.getFinalAnimationAttribute('y1');\n      const height = element.getFinalAnimationAttribute('height');\n\n      return {\n        to: isValid(height)\n          ? {\n              y: y + height / 2,\n              y1: undefined,\n              height: 0\n            }\n          : {\n              y: (y + y1) / 2,\n              y1: (y + y1) / 2,\n              height: undefined\n            }\n      };\n    }\n    case 'xy':\n    default: {\n      const x = element.getFinalAnimationAttribute('x');\n      const y = element.getFinalAnimationAttribute('y');\n      const x1 = element.getFinalAnimationAttribute('x1');\n      const y1 = element.getFinalAnimationAttribute('y1');\n      const width = element.getFinalAnimationAttribute('width');\n      const height = element.getFinalAnimationAttribute('height');\n      const to: any = {};\n\n      if (isValid(width)) {\n        to.x = x + width / 2;\n        to.width = 0;\n        to.x1 = undefined;\n      } else {\n        to.x = (x + x1) / 2;\n        to.x1 = (x + x1) / 2;\n        to.width = undefined;\n      }\n\n      if (isValid(height)) {\n        to.y = y + height / 2;\n        to.height = 0;\n        to.y1 = undefined;\n      } else {\n        to.y = (y + y1) / 2;\n        to.y1 = (y + y1) / 2;\n        to.height = undefined;\n      }\n\n      return {\n        to\n      };\n    }\n  }\n};\n\n// grow width\nfunction growWidthInIndividual(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const x = element.getFinalAnimationAttribute('x');\n  const x1 = element.getFinalAnimationAttribute('x1');\n  const width = element.getFinalAnimationAttribute('width');\n\n  if (options && options.orient === 'negative') {\n    const computedX1 = isValid(width) ? Math.max(x, x + width) : Math.max(x, x1);\n\n    return {\n      from: { x: computedX1, x1: isNil(x1) ? undefined : computedX1, width: isNil(width) ? undefined : 0 },\n      to: { x: x, x1: x1, width: width }\n    };\n  }\n\n  const computedX = isValid(width) ? Math.min(x, x + width) : Math.min(x, x1);\n  return {\n    from: { x: computedX, x1: isNil(x1) ? undefined : computedX, width: isNil(width) ? undefined : 0 },\n    to: { x: x, x1: x1, width: width }\n  };\n}\n\nfunction growWidthInOverall(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  // no need to handle the situation where x > x1\n  const x = element.getFinalAnimationAttribute('x');\n  const x1 = element.getFinalAnimationAttribute('x1');\n  const width = element.getFinalAnimationAttribute('width');\n  let overallValue: number;\n  if (options && options.orient === 'negative') {\n    if (isNumber(options.overall)) {\n      overallValue = options.overall;\n    } else if (animationParameters.group) {\n      overallValue = (animationParameters as any).groupWidth ?? animationParameters.group.getBounds().width();\n\n      (animationParameters as any).groupWidth = overallValue;\n    } else {\n      overallValue = animationParameters.width;\n    }\n  } else {\n    overallValue = isNumber(options?.overall) ? options?.overall : 0;\n  }\n  return {\n    from: { x: overallValue, x1: isNil(x1) ? undefined : overallValue, width: isNil(width) ? undefined : 0 },\n    to: { x: x, x1: x1, width: width }\n  };\n}\n\nexport const growWidthIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return (options?.overall ?? false) !== false\n    ? growWidthInOverall(element, options, animationParameters)\n    : growWidthInIndividual(element, options, animationParameters);\n};\n\nfunction growWidthOutIndividual(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const x = element.getFinalAnimationAttribute('x');\n  const x1 = element.getFinalAnimationAttribute('x1');\n  const width = element.getFinalAnimationAttribute('width');\n\n  if (options && options.orient === 'negative') {\n    const computedX1 = isValid(width) ? Math.max(x, x + width) : Math.max(x, x1);\n\n    return {\n      to: { x: computedX1, x1: isNil(x1) ? undefined : computedX1, width: isNil(width) ? undefined : 0 }\n    };\n  }\n\n  const computedX = isValid(width) ? Math.min(x, x + width) : Math.min(x, x1);\n  return {\n    to: { x: computedX, x1: isNil(x1) ? undefined : computedX, width: isNil(width) ? undefined : 0 }\n  };\n}\n\nfunction growWidthOutOverall(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const x1 = element.getFinalAnimationAttribute('x1');\n  const width = element.getFinalAnimationAttribute('width');\n\n  let overallValue: number;\n  if (options && options.orient === 'negative') {\n    if (isNumber(options.overall)) {\n      overallValue = options.overall;\n    } else if (animationParameters.group) {\n      overallValue = (animationParameters as any).groupWidth ?? animationParameters.group.getBounds().width();\n\n      (animationParameters as any).groupWidth = overallValue;\n    } else {\n      overallValue = animationParameters.width;\n    }\n  } else {\n    overallValue = isNumber(options?.overall) ? options.overall : 0;\n  }\n  return {\n    to: { x: overallValue, x1: isNil(x1) ? undefined : overallValue, width: isNil(width) ? undefined : 0 }\n  };\n}\n\nexport const growWidthOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return (options?.overall ?? false) !== false\n    ? growWidthOutOverall(element, options, animationParameters)\n    : growWidthOutIndividual(element, options, animationParameters);\n};\n\n// grow height\n\nfunction growHeightInIndividual(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const y = element.getFinalAnimationAttribute('y');\n  const y1 = element.getFinalAnimationAttribute('y1');\n  const height = element.getFinalAnimationAttribute('height');\n\n  if (options && options.orient === 'negative') {\n    const computedY1 = isValid(height) ? Math.max(y, y + height) : Math.max(y, y1);\n    return {\n      from: { y: computedY1, y1: isNil(y1) ? undefined : computedY1, height: isNil(height) ? undefined : 0 },\n      to: { y: y, y1: y1, height: height }\n    };\n  }\n\n  const computedY = isValid(height) ? Math.min(y, y + height) : Math.min(y, y1);\n  return {\n    from: { y: computedY, y1: isNil(y1) ? undefined : computedY, height: isNil(height) ? undefined : 0 },\n    to: { y: y, y1: y1, height: height }\n  };\n}\n\nfunction growHeightInOverall(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const y = element.getFinalAnimationAttribute('y');\n  const y1 = element.getFinalAnimationAttribute('y1');\n  const height = element.getFinalAnimationAttribute('height');\n\n  let overallValue: number;\n  if (options && options.orient === 'negative') {\n    if (isNumber(options.overall)) {\n      overallValue = options.overall;\n    } else if (animationParameters.group) {\n      overallValue = (animationParameters as any).groupHeight ?? animationParameters.group.getBounds().height();\n\n      (animationParameters as any).groupHeight = overallValue;\n    } else {\n      overallValue = animationParameters.height;\n    }\n  } else {\n    overallValue = isNumber(options?.overall) ? options.overall : 0;\n  }\n  return {\n    from: { y: overallValue, y1: isNil(y1) ? undefined : overallValue, height: isNil(height) ? undefined : 0 },\n    to: { y: y, y1: y1, height: height }\n  };\n}\n\nexport const growHeightIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return (options?.overall ?? false) !== false\n    ? growHeightInOverall(element, options, animationParameters)\n    : growHeightInIndividual(element, options, animationParameters);\n};\n\nfunction growHeightOutIndividual(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const y = element.getFinalAnimationAttribute('y');\n  const y1 = element.getFinalAnimationAttribute('y1');\n  const height = element.getFinalAnimationAttribute('height');\n\n  if (options && options.orient === 'negative') {\n    const computedY1 = isValid(height) ? Math.max(y, y + height) : Math.max(y, y1);\n\n    return {\n      to: { y: computedY1, y1: isNil(y1) ? undefined : computedY1, height: isNil(height) ? undefined : 0 }\n    };\n  }\n\n  const computedY = isValid(height) ? Math.min(y, y + height) : Math.min(y, y1);\n  return {\n    to: { y: computedY, y1: isNil(y1) ? undefined : computedY, height: isNil(height) ? undefined : 0 }\n  };\n}\n\nfunction growHeightOutOverall(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const y1 = element.getFinalAnimationAttribute('y1');\n  const height = element.getFinalAnimationAttribute('height');\n\n  let overallValue: number;\n  if (options && options.orient === 'negative') {\n    if (isNumber(options.overall)) {\n      overallValue = options.overall;\n    } else if (animationParameters.group) {\n      overallValue = (animationParameters as any).groupHeight ?? animationParameters.group.getBounds().height();\n\n      (animationParameters as any).groupHeight = overallValue;\n    } else {\n      overallValue = animationParameters.height;\n    }\n  } else {\n    overallValue = isNumber(options?.overall) ? options.overall : 0;\n  }\n  return {\n    to: { y: overallValue, y1: isNil(y1) ? undefined : overallValue, height: isNil(height) ? undefined : 0 }\n  };\n}\n\nexport const growHeightOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return (options?.overall ?? false) !== false\n    ? growHeightOutOverall(element, options, animationParameters)\n    : growHeightOutIndividual(element, options, animationParameters);\n};\n"]}