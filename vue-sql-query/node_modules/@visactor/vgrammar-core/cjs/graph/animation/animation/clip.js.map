{"version":3,"sources":["../src/graph/animation/animation/clip.ts"],"names":[],"mappings":";;;AAGO,MAAM,MAAM,GAA4B,CAC7C,OAAiB,EACjB,OAA8B,EAC9B,mBAAyC,EACzC,EAAE;;IACF,MAAM,aAAa,GAAG,OAAO,CAAC,mBAAmB,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;IACjF,MAAM,SAAS,GAAG,MAAA,OAAO,CAAC,mBAAmB,CAAC,WAAW,EAAE,KAAK,CAAC,mCAAI,CAAC,CAAC;IACvE,IAAI,OAAO,IAAI,OAAO,CAAC,aAAa,EAAE;QACpC,OAAO;YACL,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,oBAAoB,EAAE,OAAO,CAAC,aAAa,EAAE;YACnE,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,oBAAoB,EAAE,aAAa,EAAE;SAClE,CAAC;KACH;IACD,OAAO;QACL,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;QACtB,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;KAC7B,CAAC;AACJ,CAAC,CAAC;AAjBW,QAAA,MAAM,UAiBjB;AAEK,MAAM,OAAO,GAA4B,CAC9C,OAAiB,EACjB,OAA8B,EAC9B,mBAAyC,EACzC,EAAE;;IACF,MAAM,aAAa,GAAG,OAAO,CAAC,mBAAmB,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;IAChF,MAAM,SAAS,GAAG,MAAA,OAAO,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,mCAAI,CAAC,CAAC;IACtE,IAAI,OAAO,IAAI,OAAO,CAAC,aAAa,EAAE;QACpC,OAAO;YACL,IAAI,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,oBAAoB,EAAE,OAAO,CAAC,aAAa,EAAE;YAC3E,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,oBAAoB,EAAE,aAAa,EAAE;SAC1D,CAAC;KACH;IACD,OAAO;QACL,IAAI,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;QAC9B,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;KACrB,CAAC;AACJ,CAAC,CAAC;AAjBW,QAAA,OAAO,WAiBlB","file":"clip.js","sourcesContent":["import type { IElement } from '../../../types';\nimport type { IAnimationParameters, IClipAnimationOptions, TypeAnimation } from '../../../types/animate';\n\nexport const clipIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IClipAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const clipDimension = element.getGraphicAttribute('clipRangeByDimension', false);\n  const clipRange = element.getGraphicAttribute('clipRange', false) ?? 1;\n  if (options && options.clipDimension) {\n    return {\n      from: { clipRange: 0, clipRangeByDimension: options.clipDimension },\n      to: { clipRange: clipRange, clipRangeByDimension: clipDimension }\n    };\n  }\n  return {\n    from: { clipRange: 0 },\n    to: { clipRange: clipRange }\n  };\n};\n\nexport const clipOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IClipAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const clipDimension = element.getGraphicAttribute('clipRangeByDimension', true);\n  const clipRange = element.getGraphicAttribute('clipRange', true) ?? 1;\n  if (options && options.clipDimension) {\n    return {\n      from: { clipRange: clipRange, clipRangeByDimension: options.clipDimension },\n      to: { clipRange: 0, clipRangeByDimension: clipDimension }\n    };\n  }\n  return {\n    from: { clipRange: clipRange },\n    to: { clipRange: 0 }\n  };\n};\n"]}