{"version":3,"sources":["../src/graph/animation/animation/grow-interval.ts"],"names":[],"mappings":"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","file":"grow-interval.js","sourcesContent":["/**\n * this animtion is only used for interval mark\n */\nimport type { IGrowCartesianAnimationOptions, IAnimationParameters, IElement, TypeAnimation } from '../../../types';\nimport { isNumber } from '@visactor/vutils';\n\nfunction growIntervalInIndividual(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const attrs = element.getFinalAnimationAttributes();\n\n  if (options && options.direction === 'x') {\n    const x = attrs?.x;\n    const x1 = attrs?.x1;\n    if (options.orient === 'negative') {\n      return {\n        from: { x: x1, x1: x1 },\n        to: { x: x, x1: x1 }\n      };\n    }\n    return {\n      from: { x: x, x1: x },\n      to: { x: x, y1: x1 }\n    };\n  }\n  const y = attrs?.y;\n  const y1 = attrs?.y1;\n  if (options && options.orient === 'negative') {\n    return {\n      from: { y: y1, y1: y1 },\n      to: { y: y, y1: y1 }\n    };\n  }\n  return {\n    from: { y: y, y1: y },\n    to: { y: y, y1: y1 }\n  };\n}\n\nfunction growIntervalInOverall(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const attrs = element.getFinalAnimationAttributes();\n\n  if (options && options.direction === 'x') {\n    const x = attrs?.x;\n    const x1 = attrs?.x1;\n    let overallValue: number;\n    if (options.orient === 'negative') {\n      if (isNumber(options.overall)) {\n        overallValue = options.overall as number;\n      } else if (animationParameters.group) {\n        overallValue = (animationParameters as any).groupWidth ?? animationParameters.group.getBounds().width();\n\n        (animationParameters as any).groupWidth = overallValue;\n      } else {\n        overallValue = animationParameters.width;\n      }\n    } else {\n      overallValue = isNumber(options?.overall) ? (options.overall as number) : 0;\n    }\n    return {\n      from: { x: overallValue, x1: overallValue },\n      to: { x: x, y1: x1 }\n    };\n  }\n\n  const y = attrs?.y;\n  const y1 = attrs?.y1;\n  let overallValue: number;\n  if (options && options.orient === 'negative') {\n    if (isNumber(options.overall)) {\n      overallValue = options.overall as number;\n    } else if (animationParameters.group) {\n      overallValue = (animationParameters as any).groupHeight ?? animationParameters.group.getBounds().height();\n\n      (animationParameters as any).groupHeight = overallValue;\n    } else {\n      overallValue = animationParameters.height;\n    }\n  } else {\n    overallValue = isNumber(options?.overall) ? (options.overall as number) : 0;\n  }\n  return {\n    from: { y: overallValue, y1: overallValue },\n    to: { y: y, y1: y1 }\n  };\n}\n\nexport const growIntervalIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const coord = element.mark?.coord?.output();\n  const isTransposed = coord.isTransposed();\n  const isPolar = coord.type === 'polar';\n  const newOptions: IGrowCartesianAnimationOptions = {\n    orient: 'negative',\n    direction: isTransposed && !isPolar ? 'x' : 'y'\n  };\n\n  return options && options.overall !== true\n    ? growIntervalInIndividual(element, newOptions, animationParameters)\n    : growIntervalInOverall(element, newOptions, animationParameters);\n};\n\nfunction growIntervalOutIndividual(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  const attrs = element.getFinalAnimationAttributes();\n  if (options && options.direction === 'x') {\n    const x = attrs?.x;\n    const x1 = attrs?.x1;\n    const prevX = element.getGraphicAttribute('x', true);\n    const prevX1 = element.getGraphicAttribute('x1', true);\n    if (options.orient === 'negative') {\n      return {\n        from: { x: prevX, x1: prevX1 },\n        to: { x: x1, x1: x1 }\n      };\n    }\n    return {\n      from: { x: prevX, x1: prevX1 },\n      to: { x: x, x1: x }\n    };\n  }\n\n  const y = attrs?.y;\n  const y1 = attrs?.y1;\n  const prevY = element.getGraphicAttribute('y', true);\n  const prevY1 = element.getGraphicAttribute('y1', true);\n  if (options && options.orient === 'negative') {\n    return {\n      from: { y: prevY, y1: prevY1 },\n      to: { y: y1, y1: y1 }\n    };\n  }\n  return {\n    from: { y: prevY, y1: prevY1 },\n    to: { y: y, y1: y }\n  };\n}\n\nfunction growIntervalOutOverall(\n  element: IElement,\n  options: IGrowCartesianAnimationOptions,\n  animationParameters: IAnimationParameters\n) {\n  if (options && options.direction === 'x') {\n    const prevX = element.getGraphicAttribute('x', true);\n    const prevX1 = element.getGraphicAttribute('x1', true);\n    let overallValue: number;\n    if (options.orient === 'negative') {\n      if (isNumber(options.overall)) {\n        overallValue = options.overall as number;\n      } else if (animationParameters.group) {\n        overallValue = (animationParameters as any).groupWidth ?? animationParameters.group.getBounds().width();\n\n        (animationParameters as any).groupWidth = overallValue;\n      } else {\n        overallValue = animationParameters.width;\n      }\n    } else {\n      overallValue = isNumber(options?.overall) ? (options.overall as number) : 0;\n    }\n    return {\n      from: { x: prevX, x1: prevX1 },\n      to: { x: overallValue, x1: overallValue }\n    };\n  }\n\n  const prevY = element.getGraphicAttribute('y', true);\n  const prevY1 = element.getGraphicAttribute('y1', true);\n  let overallValue: number;\n  if (options && options.orient === 'negative') {\n    if (isNumber(options.overall)) {\n      overallValue = options.overall as number;\n    } else if (animationParameters.group) {\n      overallValue = (animationParameters as any).groupHeight ?? animationParameters.group.getBounds().height();\n\n      (animationParameters as any).groupHeight = overallValue;\n    } else {\n      overallValue = animationParameters.height;\n    }\n  } else {\n    overallValue = isNumber(options?.overall) ? (options.overall as number) : 0;\n  }\n  return {\n    from: { y: prevY, y1: prevY1 },\n    to: { y: overallValue, y1: overallValue }\n  };\n}\n\nexport const growIntervalOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: Pick<IGrowCartesianAnimationOptions, 'overall'>,\n  animationParameters: IAnimationParameters\n) => {\n  const coord = element.mark?.coord?.output();\n  const isTransposed = coord.isTransposed();\n  const isPolar = coord.type === 'polar';\n  const newOptions: IGrowCartesianAnimationOptions = {\n    orient: 'negative',\n    direction: isTransposed && !isPolar ? 'x' : 'y'\n  };\n\n  return options && options.overall !== true\n    ? growIntervalOutIndividual(element, newOptions, animationParameters)\n    : growIntervalOutOverall(element, newOptions, animationParameters);\n};\n"]}