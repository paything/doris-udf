{"version":3,"sources":["../src/graph/mark/large-symbols.ts"],"names":[],"mappings":";;;AACA,6CAAiD;AAEjD,yDAAqF;AAOrF,MAAa,YAAa,SAAQ,oBAAK;IACrC,YAAY,UAAiC;QAC3C,KAAK,CAAC,UAAU,CAAC,CAAC;QAClB,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC;QAE5B,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;YACnB,IAAI,CAAC,MAAM,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;;QACJ,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,EAAE,MAAM,CAAU,CAAC;QAC7E,MAAM,MAAM,GAAI,IAAI,CAAC,SAAmC,CAAC,MAAM,CAAC;QAChE,MAAM,IAAI,GAAG,MAAC,IAAI,CAAC,SAAmC,CAAC,IAAI,mCAAK,qCAAsB,CAAC,IAAe,CAAC;QACvG,MAAM,MAAM,GAAG,MAAC,QAAQ,CAAC,SAAS,CAAC,IAAsB,mCAAI,IAAI,2BAAY,EAAE,CAAC;QAChF,IAAI,CAAC,CAAC;QACN,IAAI,CAAC,CAAC;QAEN,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,MAAM,OAAO,GAAG,IAAA,iBAAQ,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAA,YAAG,EAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE;YACpD,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,SAAS,EAAE,CAAC;SACpB;QAED,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACnB,QAAkB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;CACF;AA/BD,oCA+BC","file":"large-symbols.js","sourcesContent":["import type { ICustomPath2D, IGroupGraphicAttribute, IPath } from '@visactor/vrender-core';\nimport { isNumber, max } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { CustomPath2D, Group, DefaultSymbolAttribute } from '@visactor/vrender-core';\n\ninterface LargeSymbolsAttribute extends IGroupGraphicAttribute {\n  size: number;\n  points: Float32Array | number[];\n}\n\nexport class LargeSymbols extends Group {\n  constructor(attributes: LargeSymbolsAttribute) {\n    super(attributes);\n    this.attribute = attributes;\n    // 这里调用渲染和事件绑定逻辑\n    this.onSetStage(() => {\n      this.render();\n    });\n  }\n\n  render() {\n    const pathNode = this.createOrUpdateChild('large-path', {}, 'path') as IPath;\n    const points = (this.attribute as LargeSymbolsAttribute).points;\n    const size = (this.attribute as LargeSymbolsAttribute).size ?? (DefaultSymbolAttribute.size as number);\n    const path2d = (pathNode.attribute.path as ICustomPath2D) ?? new CustomPath2D();\n    let x;\n    let y;\n\n    path2d.clear();\n    const maxSize = isNumber(size) ? size : max(size[0], size[1]);\n    for (let i = 0, len = points.length; i < len; i += 4) {\n      x = points[i];\n      y = points[i + 1];\n      path2d.arc(x, y, maxSize / 2, 0, Math.PI * 2);\n      path2d.closePath();\n    }\n\n    const pathAttrs = Object.assign({}, this.attribute, { path: path2d, points: null, size: null });\n    this.attribute = {};\n    (pathNode as IPath).setAttributes(pathAttrs);\n  }\n}\n"]}