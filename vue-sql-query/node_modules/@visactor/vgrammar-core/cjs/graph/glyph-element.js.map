{"version":3,"sources":["../src/graph/glyph-element.ts"],"names":[],"mappings":"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","file":"glyph-element.js","sourcesContent":["import { has, isNil, isBoolean, isFunction, isEqual } from '@visactor/vutils';\nimport type {\n  IGlyphElement,\n  IGlyphMark,\n  MarkElementItem,\n  MarkSpec,\n  IGlyphMeta,\n  MarkType,\n  StateProxyEncodeSpec\n} from '../types';\nimport { cloneTransformAttributes, transformAttributes } from './attributes/transform';\nimport { BridgeElementKey, CollectionMarkType } from './constants';\nimport { DiffState, HOOK_EVENT, GrammarMarkType } from './enums';\nimport { Element } from './element';\nimport { invokeEncoderToItems } from './mark/encode';\nimport type { IGraphicAttribute, IGlyph } from '@visactor/vrender-core';\n\nexport class GlyphElement extends Element implements IGlyphElement {\n  declare graphicItem: IGlyph;\n\n  declare mark: IGlyphMark;\n  protected glyphGraphicItems: { [markName: string]: any };\n\n  private glyphMeta: IGlyphMeta;\n\n  constructor(mark: IGlyphMark) {\n    super(mark);\n    this.glyphMeta = this.mark.getGlyphMeta();\n  }\n\n  getGlyphGraphicItems() {\n    return this.glyphGraphicItems;\n  }\n\n  initGraphicItem(attributes: any = {}) {\n    if (this.graphicItem) {\n      return;\n    }\n\n    this.graphicItem = this.mark.addGraphicItem(attributes, this.groupKey) as IGlyph;\n    this.graphicItem[BridgeElementKey] = this;\n    this.graphicItem.onBeforeAttributeUpdate = this._onGlyphAttributeUpdate(false);\n\n    const glyphMarks = this.glyphMeta.getMarks();\n    this.glyphGraphicItems = {};\n    this.graphicItem.getSubGraphic().forEach((graphic: any) => {\n      const markType = glyphMarks[graphic.name];\n      this.glyphGraphicItems[graphic.name] = graphic;\n      graphic.onBeforeAttributeUpdate = (attributes: any) => {\n        // mark might be released\n        if (!this.mark) {\n          return attributes;\n        }\n        const graphicAttributes = transformAttributes(markType, attributes, this, graphic.name);\n        return graphicAttributes;\n      };\n    });\n\n    this.clearGraphicAttributes();\n  }\n\n  useStates(states: string[], hasAnimation?: boolean) {\n    if (!this.graphicItem) {\n      return false;\n    }\n    this.mark.emit(HOOK_EVENT.BEFORE_ELEMENT_STATE, { states }, this);\n\n    this.states = states.slice();\n\n    const stateAnimationEnable = isBoolean(hasAnimation) ? hasAnimation : this.hasStateAnimation();\n\n    this.graphicItem.glyphStateProxy = this.getStateAttrs;\n    this.graphicItem.useStates(this.states, stateAnimationEnable);\n\n    this.mark.emit(HOOK_EVENT.AFTER_ELEMENT_STATE, { states }, this);\n\n    return true;\n  }\n\n  protected getStateAttrs = (stateName: string, nextStates: string[]) => {\n    const isRuntimeState = !isNil(this.runtimeStatesEncoder?.[stateName]);\n\n    const encoder = isRuntimeState\n      ? {\n          ...(this.mark.getSpec() as MarkSpec).encode?.[stateName],\n          ...this.runtimeStatesEncoder[stateName]\n        }\n      : (this.mark.getSpec() as MarkSpec).encode?.[stateName];\n\n    const glyphStateAttributes = {} as {\n      attributes: Partial<IGraphicAttribute>;\n      subAttributes: Partial<IGraphicAttribute>[];\n    };\n\n    if (!encoder) {\n      return glyphStateAttributes;\n    }\n\n    if (isFunction(encoder)) {\n      glyphStateAttributes.attributes = (encoder as StateProxyEncodeSpec)(this.getDatum(), this, stateName, nextStates);\n      return glyphStateAttributes;\n    }\n\n    if (!isRuntimeState && this.graphicItem.glyphStates?.[stateName]) {\n      return this.graphicItem.glyphStates[stateName];\n    }\n\n    if (encoder) {\n      const item = this.items[0];\n      const targetItems = [Object.assign({}, item, { nextAttrs: {} })];\n\n      invokeEncoderToItems(this, targetItems, encoder, (this.mark as any).parameters());\n      this.coordinateTransformEncode(targetItems);\n\n      glyphStateAttributes.attributes = targetItems[0].nextAttrs;\n\n      if (!this.graphicItem.glyphStates) {\n        this.graphicItem.glyphStates = { [stateName]: glyphStateAttributes };\n      } else if (!this.graphicItem.glyphStates[stateName]) {\n        this.graphicItem.glyphStates[stateName] = glyphStateAttributes;\n      }\n\n      return glyphStateAttributes;\n    }\n\n    return glyphStateAttributes;\n  };\n\n  encodeGraphic() {\n    this.coordinateTransformEncode(this.items);\n    const graphicAttributes = this.transformElementItems(this.items, this.mark.markType);\n\n    const isGraphicInit = !this.graphicItem;\n    if (!this.graphicItem) {\n      this.initGraphicItem();\n    } else {\n      this.graphicItem.clearStates();\n      // 更新数据流后，states计算不缓存\n      this.graphicItem.states = {};\n      this.graphicItem.stateProxy = null;\n    }\n\n    if (this.diffState === DiffState.enter || isGraphicInit) {\n      // apply default encoder when enter or graphic item is created\n      this.graphicItem.onBeforeAttributeUpdate = this._onGlyphAttributeUpdate(true);\n      this.applyGraphicAttributes(graphicAttributes);\n      this.graphicItem.onBeforeAttributeUpdate = this._onGlyphAttributeUpdate(false);\n    } else {\n      this.applyGraphicAttributes(graphicAttributes);\n    }\n\n    if ((this.diffState === DiffState.enter || this.diffState === DiffState.update) && this.states.length) {\n      Object.values(this.glyphGraphicItems).forEach(graphicItem => {\n        // 更新数据流后，states计算不缓存\n        graphicItem.states = {};\n      });\n      this.useStates(this.states);\n    }\n\n    // clear item attributes\n    this.items.map(item => {\n      item.nextAttrs = {};\n    });\n  }\n\n  encodeCustom(nextAttrs?: any): { [markName: string]: any } {\n    let customEncodeValues: { [markName: string]: any } = {};\n    const channelEncoder = this.glyphMeta.getChannelEncoder();\n    const functionEncoder = this.glyphMeta.getFunctionEncoder();\n\n    if (functionEncoder) {\n      customEncodeValues = functionEncoder.call(\n        null,\n        Object.assign({}, this.graphicItem?.attribute, nextAttrs),\n        this.getDatum(),\n        this,\n        this.mark.getGlyphConfig()\n      );\n    }\n    if (channelEncoder) {\n      // TODO: maybe delete origin encode value?\n      let allAttrs: any;\n      Object.keys(channelEncoder).forEach(channel => {\n        if (!isNil(nextAttrs[channel])) {\n          if (!allAttrs) {\n            allAttrs = Object.assign({}, this.graphicItem?.attribute, nextAttrs);\n          }\n          const encodeResult = channelEncoder[channel].call(\n            null,\n            channel,\n            nextAttrs[channel],\n            allAttrs,\n            this.getDatum(),\n            this,\n            this.mark.getGlyphConfig()\n          );\n          Object.keys(encodeResult ?? {}).forEach(markName => {\n            customEncodeValues[markName] = Object.assign(customEncodeValues[markName] ?? {}, encodeResult[markName]);\n          });\n        }\n      });\n    }\n    return customEncodeValues;\n  }\n\n  private encodeDefault() {\n    const defaultEncodeValues: { [markName: string]: any } = {};\n    // apply default encode\n    if (this.glyphMeta.getDefaultEncoder()) {\n      const defaultEncodeResult = this.glyphMeta\n        .getDefaultEncoder()\n        .call(null, this.getDatum(), this, this.mark.getGlyphConfig());\n      Object.assign(defaultEncodeValues, defaultEncodeResult);\n    }\n    return defaultEncodeValues;\n  }\n\n  private _onGlyphAttributeUpdate(first: boolean = false) {\n    return (attributes: any) => {\n      // mark might be released\n      if (!this.mark) {\n        return attributes;\n      }\n      const glyphMarks = this.glyphMeta.getMarks();\n\n      const graphicAttributes = transformAttributes(this.mark.getAttributeTransforms(), attributes, this);\n\n      // apply default encode\n      const defaultEncodeValues = first ? this.encodeDefault() : null;\n      // apply custom encode\n      const customEncodeValues = this.encodeCustom(attributes);\n\n      Object.keys(glyphMarks).forEach(markName => {\n        const markType = glyphMarks[markName];\n        const graphicItem = this.glyphGraphicItems[markName];\n        const customAttributes = customEncodeValues?.[markName];\n        const additionalAttributes = Object.assign({}, customAttributes);\n        if (first) {\n          // apply default attributes when visual channel is not set\n          const defaultAttributes = defaultEncodeValues?.[markName];\n          Object.keys(defaultAttributes ?? {}).forEach(key => {\n            if (!has(this.items[0].nextAttrs, key) && !has(additionalAttributes, key)) {\n              additionalAttributes[key] = defaultAttributes[key];\n            }\n          });\n        }\n        const glyphAttributes = Object.assign({}, cloneTransformAttributes(markType, attributes), additionalAttributes);\n        const glyphItems = this._generateGlyphItems(markType, this.items, glyphAttributes);\n        this.coordinateTransformEncode(glyphItems);\n        const graphicAttributes = this.transformElementItems(glyphItems, markType);\n\n        this.applyGlyphGraphicAttributes(graphicAttributes, markName, graphicItem);\n\n        if (markType === GrammarMarkType.shape) {\n          // FIXME: shape需要拿到原始数据进行编码，暂时把数据绑定到graphicItem上，看后续graphicItem是否需要支持数据绑定\n          graphicItem.datum = glyphItems[0].datum;\n        }\n      });\n\n      return graphicAttributes;\n    };\n  }\n\n  private _generateGlyphItems(markType: MarkType, items: MarkElementItem[], additionalAttributes: any) {\n    const glyphItems = items.map(item => Object.assign({}, item, { nextAttrs: additionalAttributes }));\n\n    if ((CollectionMarkType as string[]).includes(markType) && this.mark.getSpec().enableSegments) {\n      // segment mark require all items to apply additional attributes\n      glyphItems.forEach((glyphItem, index) => {\n        glyphItem.nextAttrs = Object.assign({}, items[index].nextAttrs, additionalAttributes);\n      });\n    }\n\n    return glyphItems;\n  }\n\n  getGraphicAttribute(channel: string, prev: boolean = false, markName?: any) {\n    if (!this.graphicItem) {\n      return undefined;\n    }\n    const prevGraphicAttributes = this.getPrevGraphicAttributes(markName);\n    if (prev && has(prevGraphicAttributes, channel)) {\n      return prevGraphicAttributes[channel];\n    }\n\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    return graphicItem.attribute[channel];\n  }\n\n  setGraphicAttribute(channel: string, value: any, final: boolean = true, markName?: any) {\n    if (!this.graphicItem) {\n      return;\n    }\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    const finalGraphicAttributes = this.getFinalGraphicAttributes(markName);\n    const prevGraphicAttributes = this.getPrevGraphicAttributes(markName);\n\n    if (final) {\n      finalGraphicAttributes[channel] = value;\n    }\n    if (!has(prevGraphicAttributes, channel)) {\n      prevGraphicAttributes[channel] = graphicItem.attribute[channel];\n    }\n\n    graphicItem.setAttribute(channel, value);\n  }\n\n  setGraphicAttributes(attributes: { [channel: string]: any }, final: boolean = true, markName?: any) {\n    if (!this.graphicItem) {\n      return;\n    }\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    const finalGraphicAttributes = this.getFinalGraphicAttributes(markName);\n    const prevGraphicAttributes = this.getPrevGraphicAttributes(markName);\n\n    Object.keys(attributes).forEach(key => {\n      if (final) {\n        finalGraphicAttributes[key] = attributes[key];\n      }\n      if (!has(prevGraphicAttributes, key)) {\n        prevGraphicAttributes[key] = graphicItem.attribute[key];\n      }\n    });\n\n    graphicItem.setAttributes(attributes);\n  }\n\n  protected diffAttributes(graphicAttributes: { [channel: string]: any }, markName?: string) {\n    const diffResult = {};\n    const finalGraphicAttributes = this.getFinalGraphicAttributes(markName);\n    for (const key in graphicAttributes) {\n      if (!has(finalGraphicAttributes, key) || !isEqual(finalGraphicAttributes[key], graphicAttributes[key])) {\n        diffResult[key] = graphicAttributes[key];\n      }\n    }\n    return diffResult;\n  }\n\n  protected applyGlyphGraphicAttributes(graphicAttributes: any, markName: string, graphicItem: any): void {\n    if (this.mark.needAnimate()) {\n      // If mark need animate, diff attributes.\n      const nextGraphicAttributes = this.diffAttributes(graphicAttributes, markName);\n      const prevGraphicAttributes = this.getPrevGraphicAttributes(markName) ?? {};\n      const finalGraphicAttributes = this.getFinalGraphicAttributes(markName) ?? {};\n      Object.keys(nextGraphicAttributes).forEach(channel => {\n        prevGraphicAttributes[channel] = graphicItem.attribute[channel];\n        finalGraphicAttributes[channel] = nextGraphicAttributes[channel];\n      });\n      this.setNextGraphicAttributes(nextGraphicAttributes, markName);\n      this.setPrevGraphicAttributes(prevGraphicAttributes, markName);\n      this.setFinalGraphicAttributes(finalGraphicAttributes, markName);\n\n      // Apply next attributes to current graphic item immediately.\n      // Scene graph tree should be handled like no animation exists in dataflow procedure.\n      graphicItem.setAttributes(nextGraphicAttributes);\n    } else {\n      graphicItem.setAttributes(graphicAttributes);\n    }\n  }\n\n  getFinalGraphicAttributes(markName?: string) {\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    return graphicItem.finalAttrs;\n  }\n\n  protected setFinalGraphicAttributes(attributes: { [channel: string]: any }, markName?: string) {\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    graphicItem.finalAttrs = attributes;\n  }\n\n  getPrevGraphicAttributes(markName?: string) {\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    return graphicItem.prevAttrs;\n  }\n\n  protected setPrevGraphicAttributes(attributes: { [channel: string]: any }, markName?: string) {\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    graphicItem.prevAttrs = attributes;\n  }\n\n  getNextGraphicAttributes(markName?: string) {\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    return graphicItem.nextAttrs;\n  }\n\n  protected setNextGraphicAttributes(attributes: { [channel: string]: any }, markName?: string) {\n    const graphicItem = markName ? this.glyphGraphicItems[markName] : this.graphicItem;\n    graphicItem.nextAttrs = attributes;\n  }\n\n  clearChangedGraphicAttributes() {\n    this.setPrevGraphicAttributes(null);\n    this.setNextGraphicAttributes(null);\n    Object.keys(this.glyphGraphicItems).forEach(markName => {\n      this.setPrevGraphicAttributes(null, markName);\n      this.setNextGraphicAttributes(null, markName);\n    });\n  }\n\n  clearGraphicAttributes() {\n    this.setPrevGraphicAttributes(null);\n    this.setNextGraphicAttributes(null);\n    this.setFinalGraphicAttributes(null);\n    Object.keys(this.glyphGraphicItems).forEach(markName => {\n      this.setPrevGraphicAttributes(null, markName);\n      this.setNextGraphicAttributes(null, markName);\n      this.setFinalGraphicAttributes(null, markName);\n    });\n  }\n\n  remove() {\n    this.glyphGraphicItems = null;\n    super.remove();\n  }\n\n  release() {\n    if (this.glyphGraphicItems) {\n      Object.values(this.glyphGraphicItems).forEach(graphicItem => {\n        graphicItem[BridgeElementKey] = null;\n      });\n      this.glyphGraphicItems = null;\n    }\n    super.release();\n  }\n}\n"]}