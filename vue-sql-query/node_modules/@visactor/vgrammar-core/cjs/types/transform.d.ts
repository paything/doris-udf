import type { FieldGetterFunction, LayoutViewBox } from '@visactor/vgrammar-util';
import type { SignalFunction, SignalReference } from './signal';
import type { IView } from './view';
import type { IData } from './grammar';
import type { SortConfigSpec } from './data';
export type TransformSpecValue = {
    signal?: string;
    scale?: string;
    data?: string;
    customized?: string;
} | any;
export type TransformFunctionCallback<T> = (parameters: any) => T;
export type TransformFunctionType<T> = T | SignalReference<T> | SignalFunction<TransformFunctionCallback<T>, T>;
export type ConvertTransformOptionToSpec<TransformOptionType> = {
    [Key in keyof TransformOptionType]?: TransformFunctionType<TransformOptionType[Key]>;
};
export interface BinTransformOption {
    field: string;
    extent: [number, number];
    step?: number;
    bins?: number;
    as?: [string, string];
}
export interface ContourTransformOption {
    field: string;
    row: number;
    column: number;
    thresholds?: number[];
    levels?: number;
    asThreshold?: string;
    asPoints?: string;
}
export interface FilterTransformOption {
    callback: (entry: any, params: any) => boolean;
}
export interface FunnelTransformOption {
    field: string;
    asTransformRatio?: string;
    asReachRatio?: string;
    asHeightRatio?: string;
    asValueRatio?: string;
    asLastValueRatio?: string;
    asNextValueRatio?: string;
    asCurrentValue?: string;
    asLastValue?: string;
    asNextValue?: string;
    isCone?: boolean;
    heightVisual?: boolean;
    range?: {
        min: number;
        max: number;
    };
}
export interface JoinTransformOption {
    from?: any[];
    key: string;
    fields: string[];
    values?: string[];
    as?: string[];
    default?: any;
}
export interface KDETransformOption {
    dimension?: '1d' | '2d';
    field: string | string[];
    bandwidth?: number;
    extent?: [number, number] | [{
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }];
    bins?: number | number[];
    as?: string[];
}
export interface MapTransformOption {
    callback: (entry: any, params?: any) => any;
    as?: string;
    all?: boolean;
}
export interface PickTransformOption {
    as?: string[];
    fields: string[] | FieldGetterFunction[];
}
export interface PieTransformOption {
    field: string;
    startAngle?: number;
    endAngle?: number;
    asStartAngle?: string;
    asEndAngle?: string;
    asMiddleAngle?: string;
    asRadian?: string;
    asRatio?: string;
    asQuadrant?: string;
    asK?: string;
}
export interface RangeTransformOptions {
    start: number;
    stop: number;
    step?: number;
    as?: string;
}
export interface SortTransformOptions {
    sort: SortConfigSpec | ((a: any, b: any) => number);
}
export interface FoldTransformOptions {
    fields: string[];
    asKey?: string;
    asValue?: string;
    retains?: string[];
}
export interface UnfoldTransformOptions {
    groupBy?: string[] | string;
    keyField: string;
    valueField: string;
    aggregateType?: 'sum' | 'min' | 'max' | 'count' | 'mean';
}
export interface StackTransformOptions {
    order?: 'positive' | 'negative';
    offset?: 'none' | 'diverging' | 'silhouette' | 'wiggle';
    stackField: string;
    dimensionField: string;
    asStack?: string;
    asPrevStack?: string;
    asPercent?: string;
    asPercentStack?: string;
    asPrevPercentStack?: string;
    asSum?: string;
}
export interface DodgeTransformOptions {
    innerGap?: number | string;
    maxWidth?: number;
    minWidth?: number;
    categoryGap?: number | string;
    dodgeBy?: string | string[];
    dodgeChannel?: 'x' | 'y';
}
export interface JitterTransformOptions {
    bandWidth?: number;
    bandHeight?: number;
    widthRatio?: number;
    heightRatio?: number;
    random?: (index?: number, total?: number) => number;
}
export interface JitterXTransformOptions {
    bandWidth?: number;
    widthRatio?: number;
    random?: (index?: number, total?: number) => number;
}
export interface JitterYTransformOptions {
    bandHeight?: number;
    heightRatio?: number;
    random?: (index?: number, total?: number) => number;
}
export type CircularRelationTransformOptions = LayoutViewBox & {
    field: string;
    radiusField?: string;
    radiusRange?: [number, number];
    center?: [string | number, string | number];
    startAngle?: number;
    endAngle?: number;
    innerRadius?: string | number;
    outerRadius?: string | number;
};
export interface CircularRelationItem {
    x: number;
    y: number;
    radius: number;
    datum: any;
}
export interface IdentifierTransformOptions {
    as: string;
}
export interface MarkOverlapTransformOptions {
    direction: number;
    delta?: number;
    deltaMul?: number;
    radius?: boolean;
    hideMode?: number;
    forceUpdate?: boolean;
    forceUpdateStamp?: number;
    groupBy?: string;
    sort?: boolean;
}
export interface SampleTransformOptions {
    size: number;
    factor?: number;
    skipfirst?: boolean;
    yfield?: string;
    groupBy?: string;
    mode?: 'lttb' | 'min' | 'max' | 'average' | 'sum';
}
export interface SymmetryTransformOptions {
    channel?: 'x' | 'y';
    align?: 'min' | 'max';
}
export interface BinTransformSpec extends BinTransformOption {
    type: 'bin';
}
export interface ContourTransformSpec extends ContourTransformOption {
    type: 'contour';
}
export interface FilterTransformSpec extends ConvertTransformOptionToSpec<FilterTransformOption> {
    type: 'filter';
}
export interface FunnelTransformSpec extends FunnelTransformOption {
    type: 'funnel';
}
export interface PieTransformSpec extends PieTransformOption {
    type: 'pie';
}
export interface JoinTransformSpec extends ConvertTransformOptionToSpec<Omit<JoinTransformOption, 'from'>> {
    type: 'join';
    from?: TransformFunctionType<JoinTransformOption['from']> | {
        data: string | IData;
    };
}
export interface KDETransformSpec extends KDETransformOption {
    type: 'kde';
}
export interface MapTransformSpec extends ConvertTransformOptionToSpec<Omit<MapTransformOption, 'callback'>> {
    type: 'map';
    callback: MapTransformOption['callback'];
}
export interface PickTransformSpec extends ConvertTransformOptionToSpec<PickTransformOption> {
    type: 'pick';
}
export interface RangeTransformSpec extends ConvertTransformOptionToSpec<RangeTransformOptions> {
    type: 'range';
}
export interface SortTransformSpec extends ConvertTransformOptionToSpec<SortTransformOptions> {
    type: 'sort';
}
export interface StackTransformSpec extends ConvertTransformOptionToSpec<StackTransformOptions> {
    type: 'stack';
}
export interface DodgeTransformSpec extends ConvertTransformOptionToSpec<DodgeTransformOptions> {
    type: 'dodge';
}
export interface IdentifierTransformSpec extends ConvertTransformOptionToSpec<IdentifierTransformOptions> {
    type: 'identifier';
}
export interface MarkOverlapTransformSpec extends ConvertTransformOptionToSpec<MarkOverlapTransformOptions> {
    type: 'markoverlap';
}
export interface SampleTransformSpec extends ConvertTransformOptionToSpec<SampleTransformOptions> {
    type: 'sampling';
}
export interface JitterTransformSpec extends ConvertTransformOptionToSpec<JitterTransformOptions> {
    type: 'jitter';
}
export interface JitterXTransformSpec extends ConvertTransformOptionToSpec<JitterXTransformOptions> {
    type: 'jitterX';
}
export interface JitterYTransformSpec extends ConvertTransformOptionToSpec<JitterYTransformOptions> {
    type: 'jitterY';
}
export type CircularRelationTransformSpec = ConvertTransformOptionToSpec<CircularRelationTransformOptions> & {
    type: 'circularRelation';
};
export interface FoldTransformSpec extends ConvertTransformOptionToSpec<FoldTransformOptions> {
    type: 'fold';
}
export interface UnfoldTransformSpec extends ConvertTransformOptionToSpec<UnfoldTransformOptions> {
    type: 'unfold';
}
export interface SymmetryTransformSpec extends ConvertTransformOptionToSpec<SymmetryTransformOptions> {
    type: 'symmetry';
}
export interface BaseTransformSpec {
    type: string;
    [key: string]: TransformSpecValue | TransformSpecValue[];
}
export type TransformSpec = FilterTransformSpec | FunnelTransformSpec | PieTransformSpec | JoinTransformSpec | MapTransformSpec | PickTransformSpec | RangeTransformSpec | SortTransformSpec | StackTransformSpec | DodgeTransformSpec | IdentifierTransformSpec | BaseTransformSpec | MarkOverlapTransformSpec | SampleTransformSpec | JitterTransformSpec | JitterXTransformSpec | JitterYTransformSpec | CircularRelationTransformSpec | FoldTransformSpec | UnfoldTransformSpec;
export interface IProgressiveTransformResult<Output = any> {
    unfinished: () => boolean;
    output: () => Output;
    progressiveOutput: () => Output;
    progressiveRun: () => void;
    release: () => void;
    canAnimate?: () => boolean;
}
export interface IProgressiveTransform<Output = any> {
    progressive: IProgressiveTransformResult<Output>;
}
export type IFunctionTransform<Options = any, Input = any, Output = any> = (options?: Options, data?: Input, params?: Record<string, any>, view?: IView) => Output | IProgressiveTransformResult<Output>;
export interface ITransform<Options = any, Input = any, Output = any> {
    type: string;
    markPhase?: 'beforeJoin' | 'afterEncode' | 'afterEncodeItems';
    canProgressive?: boolean;
    transform: IFunctionTransform<Options, Input, Output>;
    isBuiltIn?: boolean;
}
