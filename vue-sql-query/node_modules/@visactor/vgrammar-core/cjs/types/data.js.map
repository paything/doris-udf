{"version":3,"sources":["../src/types/data.ts"],"names":[],"mappings":"","file":"data.js","sourcesContent":["import type { GrammarSpec, IData } from './grammar';\nimport type { GenericFunctionType, ParameterFunctionType } from './signal';\nimport type { TransformSpec } from './transform';\n\nexport type Datum = any;\n\nexport type DataFunctionCallback<T> = (datum: any, parameters: any) => T;\n\nexport type DataFunctionType<T> = GenericFunctionType<DataFunctionCallback<T>, T>;\n\nexport type DataType = 'boolean' | 'number' | 'date' | 'string';\nexport type DataParseSpec =\n  | 'auto'\n  | {\n      [f: string]: DataType | string;\n    };\nexport interface FormatJSONSpec {\n  type: 'json';\n  parse?: DataParseSpec;\n  property?: string;\n  copy?: boolean;\n}\nexport interface FormatSVSpec {\n  type: 'csv' | 'tsv';\n  header?: string[];\n  parse?: DataParseSpec;\n}\nexport interface FormatDSVSpec {\n  type: 'dsv';\n  header?: string[];\n  parse?: DataParseSpec;\n  delimiter: string;\n}\nexport type FormatTopoJSONSpec = {\n  type: 'topojson';\n  property?: string;\n} & (\n  | {\n      feature: string;\n    }\n  | {\n      mesh: string;\n      filter: 'interior' | 'exterior' | null;\n    }\n);\nexport type DataFormatSpec = FormatJSONSpec | FormatSVSpec | FormatDSVSpec;\n// | FormatTopoJSONSpec\n// | { parse: DataParseSpec };\n\nexport interface IDataFilter {\n  source?: string;\n  rank?: number;\n  filter: (data: Datum[], parameters?: any) => Datum[];\n}\n\n/** 语法元素 Data 配置 */\nexport interface DataSpec extends GrammarSpec {\n  /** 数据的唯一标识符 */\n  name?: string;\n  /** 数据变换配置 */\n  transform?: TransformSpec[];\n  /**\n   * 原始数据配置，解析优先级最高\n   */\n  values?: Datum[];\n  /**\n   * 数据url配置，解析优先级第二\n   */\n  url?: ParameterFunctionType<string>;\n  /**\n   * 数据源配置，对应的其他Data元素的name\n   */\n  source?: string | string[] | IData | IData[];\n  /**\n   * 格式化方法\n   */\n  format?: ParameterFunctionType<DataFormatSpec>;\n}\n/**\n * the type of sort\n */\nexport type SortOrderType = 'desc' | 'asc';\n\n/**\n * config of sort\n */\nexport interface SortConfigSpec {\n  /** the field to be sort */\n  field: string | string[];\n  /**\n   * the order of each field\n   */\n  order?: SortOrderType | SortOrderType[];\n}\n"]}