{"version":3,"sources":["../src/types/base.ts"],"names":[],"mappings":"","file":"base.js","sourcesContent":["export type Nil = null | undefined;\n\nexport type DistributiveOmit<T, K extends keyof T> = T extends unknown ? Omit<T, K> : never;\nexport type DistributivePick<T, K extends keyof T> = T extends unknown ? Pick<T, K> : never;\nexport type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends Array<infer U> ? Array<Value<U>> : Value<T[P]>;\n};\ntype AllowedPrimitives =\n  | boolean\n  | string\n  | number\n  | Date /* add any types than should be considered as a value, say, DateTimeOffset */;\ntype Value<T> = T extends AllowedPrimitives ? T : RecursivePartial<T>;\n\nexport type Vector2<T> = [T, T];\nexport type Vector3<T> = [T, T, T];\nexport type Vector4<T> = [T, T, T, T];\nexport type Vector5<T> = [T, T, T, T, T];\nexport type Vector6<T> = [T, T, T, T, T, T];\nexport type Vector7<T> = [T, T, T, T, T, T, T];\nexport type Vector10<T> = [T, T, T, T, T, T, T, T, T, T];\nexport type Vector12<T> = [T, T, T, T, T, T, T, T, T, T, T, T];\n\nexport type CommonPaddingSpec =\n  | number\n  | {\n      top?: number;\n      bottom?: number;\n      left?: number;\n      right?: number;\n    };\n\nexport type DiffResult<Prev, Next> = {\n  enter: { next: Next }[];\n  update: { prev: Prev; next: Next }[];\n  exit: { prev: Prev }[];\n};\n\nexport type ValueOf<T, K extends keyof T = keyof T> = T[K];\n"]}