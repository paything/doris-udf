{"version":3,"sources":["../src/glyph/tree-path.ts"],"names":[],"mappings":"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","file":"tree-path.js","sourcesContent":["import type { IAnimationParameters, TypeAnimation, TreePathEncoderSpec } from '../types';\nimport type { IElement } from '../types/element';\nimport { Factory } from '../core/factory';\nimport { isNil } from '@visactor/vutils';\nimport { registerGlyphGraphic, registerPathGraphic } from '../graph/mark/graphic';\nimport { registerGlyphMark } from '../view/glyph';\n\nexport interface TreePathConfig {\n  direction?: 'horizontal' | 'vertical' | 'LR' | 'RL' | 'TB' | 'BL' | 'radial';\n}\n\nexport const getHorizontalPath = (options: TreePathEncoderSpec) => {\n  const curvature = options.curvature ?? 0.5;\n  let x0 = options.x0;\n  let x1 = options.x1;\n  let y0 = options.y0;\n  let y1 = options.y1;\n  let cpx0 = x0 + curvature * (x1 - x0);\n  let cpx1 = x1 + curvature * (x0 - x1);\n  let formatter = (v: number) => v;\n\n  if (options.round !== false) {\n    x0 = Math.round(x0);\n    x1 = Math.round(x1);\n    y0 = Math.round(y0);\n    y1 = Math.round(y1);\n    cpx0 = Math.round(cpx0);\n    cpx1 = Math.round(cpx1);\n    formatter = Math.round;\n  }\n  const mainPath =\n    options.pathType === 'line'\n      ? `M${x0},${y0}L${x1},${y1}`\n      : options.pathType === 'polyline'\n      ? `M${x0},${y0}L${cpx0},${y0}L${cpx0},${y1}L${x1},${y1}`\n      : `M${x0},${y0}C${cpx0},${y0},${cpx1},${y1},${x1},${y1}`;\n\n  if (options.startArrow || options.endArrow) {\n    const delta = x1 - x0;\n    const hasLength = Math.abs(delta) > 1e-6;\n\n    if (hasLength) {\n      const arrowSize = options.arrowSize ?? 3;\n      const sign = delta > 0 ? 1 : -1;\n\n      const endArrowPath = options.endArrow\n        ? `M${formatter(x1 - sign * arrowSize)},${formatter(y1 - arrowSize)}L${x1},${y1}L${formatter(\n            x1 - sign * arrowSize\n          )},${formatter(y1 + arrowSize)}`\n        : '';\n      const startArrowPath = options.startArrow\n        ? `M${formatter(x0 + sign * arrowSize)},${formatter(y0 - arrowSize)}L${x0},${y0}L${formatter(\n            x0 + sign * arrowSize\n          )},${formatter(y0 + arrowSize)}`\n        : '';\n\n      return [startArrowPath, mainPath, endArrowPath];\n    }\n  }\n\n  return ['', mainPath, ''];\n};\n\nexport const getVerticalPath = (options: TreePathEncoderSpec) => {\n  const curvature = options.curvature ?? 0.5;\n  let y0 = options.y0;\n  let y1 = options.y1;\n  let x0 = options.x0;\n  let x1 = options.x1;\n  let cpy0 = y0 + curvature * (y1 - y0);\n  let cpy1 = y1 + curvature * (y0 - y1);\n  let formatter = (v: number) => v;\n\n  if (options.round !== false) {\n    formatter = Math.round;\n    y0 = Math.round(y0);\n    y1 = Math.round(y1);\n    x0 = Math.round(x0);\n    x1 = Math.round(x1);\n    cpy0 = Math.round(cpy0);\n    cpy1 = Math.round(cpy1);\n  }\n  const mainPath =\n    options.pathType === 'line'\n      ? `M${x0},${y0}L${x1},${y1}`\n      : options.pathType === 'polyline'\n      ? `M${x0},${y0}L${x0},${cpy0}L${x1},${cpy0}L${x1},${y1}`\n      : `M${x0},${y0}C${x0},${cpy0},${x1},${cpy1},${x1},${y1}`;\n\n  if (options.startArrow || options.endArrow) {\n    const delta = y1 - y0;\n    const hasLength = Math.abs(delta) > 1e-6;\n\n    if (hasLength) {\n      const arrowSize = options.arrowSize ?? 3;\n      const sign = delta > 0 ? 1 : -1;\n\n      const endArrowPath = options.endArrow\n        ? `M${formatter(x1 - arrowSize)},${formatter(y1 - sign * arrowSize)}L${x1},${formatter(y1)}L${formatter(\n            x1 + arrowSize\n          )},${formatter(y1 - sign * arrowSize)}`\n        : '';\n      const startArrowPath = options.startArrow\n        ? `M${formatter(x0 + arrowSize)},${formatter(y0 + sign * arrowSize)}L${x0},${formatter(y0)}L${formatter(\n            x0 + arrowSize\n          )},${formatter(y0 + sign * arrowSize)}`\n        : '';\n\n      return [startArrowPath, mainPath, endArrowPath];\n    }\n  }\n\n  return ['', mainPath, ''];\n};\n\nconst encoder = (encodeValues: TreePathEncoderSpec, datum: any, element: IElement, config: TreePathConfig) => {\n  const direction = encodeValues.direction ?? config?.direction;\n  const parsePath = ['vertical', 'TB', 'BT'].includes(direction) ? getVerticalPath : getHorizontalPath;\n\n  const encodeChannels = Object.keys(encodeValues);\n  // parse path when all required channels are included\n  if (['x0', 'y0', 'x1', 'y1'].every(channel => encodeChannels.includes(channel))) {\n    const [startArrowPath, mainPath, endArrowPath] = parsePath(encodeValues);\n\n    return {\n      main: {\n        path: mainPath\n      },\n      startArrow: {\n        path: startArrowPath\n      },\n      endArrow: {\n        path: endArrowPath\n      }\n    };\n  }\n\n  return {};\n};\n\nconst treePathGrowIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: any,\n  animationParameters: IAnimationParameters\n) => {\n  const linkValues: TreePathEncoderSpec = {\n    x0: element.getGraphicAttribute('x0', false),\n    x1: element.getGraphicAttribute('x1', false),\n    y0: element.getGraphicAttribute('y0', false),\n    y1: element.getGraphicAttribute('y1', false),\n    round: element.getGraphicAttribute('round', false),\n    align: element.getGraphicAttribute('align', false),\n    pathType: element.getGraphicAttribute('pathType', false),\n    endArrow: element.getGraphicAttribute('endArrow', false),\n    startArrow: element.getGraphicAttribute('startArrow', false)\n  };\n  // FIXME: undefined channel animation will cause vRender warning\n  Object.keys(linkValues).forEach(key => {\n    if (isNil(linkValues[key])) {\n      delete linkValues[key];\n    }\n  });\n  return {\n    from: Object.assign({}, linkValues, { x1: linkValues.x0, y1: linkValues.y0 }),\n    to: linkValues\n  };\n};\n\nconst treePathGrowOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: any,\n  animationParameters: IAnimationParameters\n) => {\n  const linkValues: TreePathEncoderSpec = {\n    x0: element.getGraphicAttribute('x0', true),\n    x1: element.getGraphicAttribute('x1', true),\n    y0: element.getGraphicAttribute('y0', true),\n    y1: element.getGraphicAttribute('y1', true),\n    round: element.getGraphicAttribute('round', true),\n    align: element.getGraphicAttribute('align', true),\n    pathType: element.getGraphicAttribute('pathType', true),\n    endArrow: element.getGraphicAttribute('endArrow', true),\n    startArrow: element.getGraphicAttribute('startArrow', true)\n  };\n  // FIXME: undefined channel animation will cause vRender warning\n  Object.keys(linkValues).forEach(key => {\n    if (isNil(linkValues[key])) {\n      delete linkValues[key];\n    }\n  });\n  return {\n    from: linkValues,\n    to: Object.assign({}, linkValues, { x1: linkValues.x0, y1: linkValues.y0 })\n  };\n};\n\nconst treePathUpdate: TypeAnimation<IElement> = (\n  element: IElement,\n  options: any,\n  animationParameters: IAnimationParameters\n) => {\n  const bassLinkValues = {\n    thickness: element.getGraphicAttribute('thickness', false),\n    round: element.getGraphicAttribute('round', false),\n    align: element.getGraphicAttribute('align', false),\n    pathType: element.getGraphicAttribute('pathType', false),\n    endArrow: element.getGraphicAttribute('endArrow', false),\n    startArrow: element.getGraphicAttribute('startArrow', false)\n  };\n  // FIXME: undefined channel animation will cause vRender warning\n  Object.keys(bassLinkValues).forEach(key => {\n    if (isNil(bassLinkValues[key])) {\n      delete bassLinkValues[key];\n    }\n  });\n  const prevLinkValues: TreePathEncoderSpec = Object.assign(\n    {\n      x0: element.getGraphicAttribute('x0', true),\n      x1: element.getGraphicAttribute('x1', true),\n      y0: element.getGraphicAttribute('y0', true),\n      y1: element.getGraphicAttribute('y1', true),\n      ...bassLinkValues\n    },\n    bassLinkValues\n  );\n  const nextLinkValues: TreePathEncoderSpec = Object.assign(\n    {\n      x0: element.getGraphicAttribute('x0', false),\n      x1: element.getGraphicAttribute('x1', false),\n      y0: element.getGraphicAttribute('y0', false),\n      y1: element.getGraphicAttribute('y1', false)\n    },\n    bassLinkValues\n  );\n\n  return {\n    from: prevLinkValues,\n    to: nextLinkValues\n  };\n};\n\nexport const registerTreePathGlyph = () => {\n  Factory.registerGlyph<TreePathEncoderSpec, TreePathConfig>('treePath', {\n    main: 'path',\n    startArrow: 'path',\n    endArrow: 'path'\n  })\n    .registerFunctionEncoder(encoder)\n    .registerChannelEncoder('startArrowStyle', (channel, encodeValue) => {\n      return {\n        startArrow: encodeValue\n      };\n    })\n    .registerChannelEncoder('endArrowStyle', (channel, encodeValue) => {\n      return {\n        endArrow: encodeValue\n      };\n    })\n    .registerDefaultEncoder(() => {\n      return {\n        startArrow: { zIndex: 1 },\n        endArrow: { zIndex: 2 }\n      };\n    });\n  Factory.registerAnimationType('treePathGrowIn', treePathGrowIn);\n  Factory.registerAnimationType('treePathGrowOut', treePathGrowOut);\n  Factory.registerAnimationType('treePathUpdate', treePathUpdate);\n  registerGlyphMark();\n  registerGlyphGraphic();\n  registerPathGraphic();\n};\n"]}