{"version":3,"sources":["../src/glyph/wave.ts"],"names":[],"mappings":";;;AACA,6CAA0C;AAE1C,mDAAkF;AAClF,yCAAkD;AAE3C,MAAM,iBAAiB,GAAG,GAAG,EAAE;IACpC,iBAAO,CAAC,aAAa,CAAkB,MAAM,EAAE;QAC7C,KAAK,EAAE,MAAM;QACb,KAAK,EAAE,MAAM;QACb,KAAK,EAAE,MAAM;KACd,CAAC;SACC,sBAAsB,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;QACrF,MAAM,YAAY,GAAiB,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE;YACxE,MAAM,UAAU,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC,GAAG,UAAU,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;QAC5G,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,WAAW,GAAG,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;QACtE,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,WAAW,GAAG,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;QAC3E,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACvC,OAAO,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,WAAW,GAAG,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;QAC3E,CAAC,CAAC,CAAC;QACH,OAAO;YACL,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACtC,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;YACtC,KAAK,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;SACvC,CAAC;IACJ,CAAC,CAAC;SACD,sBAAsB,CAAC,GAAG,EAAE;QAC3B,OAAO;YACL,KAAK,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,EAAE;YACjD,KAAK,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE;YACpD,KAAK,EAAE,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE;SACrD,CAAC;IACJ,CAAC,CAAC,CAAC;IACL,IAAA,yBAAiB,GAAE,CAAC;IACpB,IAAA,8BAAoB,GAAE,CAAC;IACvB,IAAA,6BAAmB,GAAE,CAAC;AACxB,CAAC,CAAC;AApCW,QAAA,iBAAiB,qBAoC5B","file":"wave.js","sourcesContent":["import type { IPointLike } from '@visactor/vutils';\nimport { Factory } from '../core/factory';\nimport type { WaveEncoderSpec } from '../types';\nimport { registerAreaGraphic, registerGlyphGraphic } from '../graph/mark/graphic';\nimport { registerGlyphMark } from '../view/glyph';\n\nexport const registerWaveGlyph = () => {\n  Factory.registerGlyph<WaveEncoderSpec>('wave', {\n    wave0: 'area',\n    wave1: 'area',\n    wave2: 'area'\n  })\n    .registerChannelEncoder('wave', (channel, encodeValue, encodeValues, datum, element) => {\n      const originPoints: IPointLike[] = new Array(21).fill(0).map((v, index) => {\n        const waveHeight = index % 2 === 0 ? 20 : 0;\n        return { x: -500 + 50 * index, y: encodeValues.y + waveHeight, y1: encodeValues.y + encodeValues.height };\n      });\n      const points0 = originPoints.map(point => {\n        return { x: point.x + encodeValue * 100, y: point.y, y1: point.y1 };\n      });\n      const points1 = originPoints.map(point => {\n        return { x: point.x + encodeValue * 200 - 40, y: point.y, y1: point.y1 };\n      });\n      const points2 = originPoints.map(point => {\n        return { x: point.x + encodeValue * 300 - 20, y: point.y, y1: point.y1 };\n      });\n      return {\n        wave0: { points: points0, x: 0, y: 0 },\n        wave1: { points: points1, x: 0, y: 0 },\n        wave2: { points: points2, x: 0, y: 0 }\n      };\n    })\n    .registerDefaultEncoder(() => {\n      return {\n        wave0: { curveType: 'monotoneX', fillOpacity: 1 },\n        wave1: { curveType: 'monotoneX', fillOpacity: 0.66 },\n        wave2: { curveType: 'monotoneX', fillOpacity: 0.33 }\n      };\n    });\n  registerGlyphMark();\n  registerGlyphGraphic();\n  registerAreaGraphic();\n};\n"]}