{"version":3,"sources":["../src/view/signal.ts"],"names":[],"mappings":"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","file":"signal.js","sourcesContent":["import { isArray, isNil } from '@visactor/vutils';\nimport type { SignalFunctionType, SignalSpec } from '../types/signal';\nimport type { GrammarType, IGrammarBase, ISignal } from '../types/grammar';\nimport { GrammarBase } from './grammar-base';\nimport { invokeFunctionType } from '../parse/util';\nimport type { Nil } from '../types/base';\n\nexport class Signal<T> extends GrammarBase implements ISignal<T> {\n  readonly grammarType: GrammarType = 'signal';\n\n  protected spec: SignalSpec<T> = { value: null, update: null };\n\n  private _signal: T;\n\n  parse(spec: SignalSpec<T>) {\n    super.parse(spec);\n    this.value(spec.value);\n    this.update(spec.update);\n\n    this.commit();\n    return this;\n  }\n\n  evaluate(upstream: any, parameters: any) {\n    this._signal = this.spec.update ? invokeFunctionType(this.spec.update, parameters, this._signal) : this.spec.value;\n\n    this.spec.value = this._signal;\n    return this;\n  }\n\n  output() {\n    return this._signal;\n  }\n\n  getValue() {\n    return this.output();\n  }\n\n  set(value: T) {\n    if (isArray(value) && isArray(this.value) && value.length === this.value.length) {\n      for (let i = 0; i < value.length; i++) {\n        if (this.value[i] !== value[i]) {\n          this._signal = value;\n          this.spec.value = value;\n\n          return true;\n        }\n      }\n      return false;\n    }\n    if (this._signal !== value) {\n      this._signal = value;\n      this.spec.value = value;\n\n      return true;\n    }\n    return false;\n  }\n\n  update(update: SignalFunctionType<T> | Nil): this {\n    // clear value spec if update is valid\n    if (!isNil(update)) {\n      this.value(undefined);\n    }\n    return this.setFunctionSpec(update, 'update');\n  }\n\n  value(value: T | Nil): this {\n    // clear update spec if value is valid\n    if (!isNil(value)) {\n      this.update(undefined);\n    }\n    this.spec.value = value;\n    this.commit();\n    return this;\n  }\n\n  reuse(grammar: IGrammarBase) {\n    if (grammar.grammarType !== this.grammarType) {\n      return this;\n    }\n    this._signal = grammar.output();\n    return this;\n  }\n\n  clear() {\n    super.clear();\n    this._signal = null;\n  }\n}\n"]}