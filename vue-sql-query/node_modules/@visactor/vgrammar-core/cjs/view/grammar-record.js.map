{"version":3,"sources":["../src/view/grammar-record.ts"],"names":[],"mappings":"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","file":"grammar-record.js","sourcesContent":["import { isNil, isString } from '@visactor/vutils';\nimport type {\n  BuiltInGrammarType,\n  ICoordinate,\n  IData,\n  IGrammarBase,\n  IMark,\n  IScale,\n  ISignal,\n  IRecordedGrammars,\n  IGroupMark,\n  IMarkTreeNode,\n  IRecordedTreeGrammars\n} from '../types';\nimport { GrammarMarkType } from '../graph/enums';\n\nexport class RecordedGrammars implements IRecordedGrammars {\n  private _warning: (key: string, grammar: IGrammarBase) => void;\n  private _mapKey: (grammar: IGrammarBase) => string;\n  private _grammars: Record<BuiltInGrammarType | 'customized', IGrammarBase[]> = {\n    signal: [],\n    data: [],\n    scale: [],\n    coordinate: [],\n    mark: [],\n    customized: []\n  };\n  // map key might not be unique\n  private _grammarMap: Record<BuiltInGrammarType | 'customized', Record<string, IGrammarBase>> = {\n    signal: {},\n    data: {},\n    scale: {},\n    coordinate: {},\n    mark: {},\n    customized: {}\n  };\n  private _size: number = 0;\n\n  constructor(\n    mapKey: string | ((grammar: IGrammarBase) => string),\n    warningWhenDuplicated?: (key: string, grammar: IGrammarBase) => void\n  ) {\n    this._mapKey = isString(mapKey) ? grammar => grammar[mapKey] : mapKey;\n    this._warning = warningWhenDuplicated;\n  }\n\n  record(grammar: IGrammarBase) {\n    const grammarType = grammar.grammarType;\n    const key = this._mapKey(grammar);\n    if (this._grammarMap[grammarType]) {\n      this._grammars[grammarType].push(grammar);\n      if (!isNil(key)) {\n        // ignore grammar if key is duplicated\n        if (this._grammarMap[grammarType][key]) {\n          this._warning?.(key, grammar);\n        } else {\n          this._grammarMap[grammarType][key] = grammar;\n        }\n      }\n    } else {\n      this._grammars.customized.push(grammar);\n      if (!isNil(key)) {\n        // ignore grammar if key is duplicated\n        if (this._grammarMap.customized[key]) {\n          this._warning?.(key, grammar);\n        } else {\n          this._grammarMap.customized[key] = grammar;\n        }\n      }\n    }\n    this._size += 1;\n    return this;\n  }\n\n  unrecord(grammar: IGrammarBase) {\n    const grammarType = grammar.grammarType;\n    const key = this._mapKey(grammar);\n    if (this._grammarMap[grammarType]) {\n      this._grammars[grammarType] = this._grammars[grammarType].filter(\n        (storedGrammar: IGrammarBase) => storedGrammar !== grammar\n      );\n      if (!isNil(key) && this._grammarMap[grammarType][key] === grammar) {\n        delete this._grammarMap[grammarType][key];\n      }\n    } else {\n      this._grammars.customized = this._grammars.customized.filter(\n        (storedGrammar: IGrammarBase) => storedGrammar !== grammar\n      );\n      if (!isNil(key) && this._grammarMap.customized[key] === grammar) {\n        delete this._grammarMap.customized[key];\n      }\n    }\n    this._size -= 1;\n    return this;\n  }\n\n  size() {\n    return this._size;\n  }\n\n  getSignal<T>(key: string): ISignal<T> | null {\n    return (this._grammarMap.signal[key] as ISignal<T>) ?? null;\n  }\n  getData(key: string): IData | null {\n    return (this._grammarMap.data[key] as IData) ?? null;\n  }\n  getScale(key: string): IScale | null {\n    return (this._grammarMap.scale[key] as IScale) ?? null;\n  }\n  getCoordinate(key: string): ICoordinate | null {\n    return (this._grammarMap.coordinate[key] as ICoordinate) ?? null;\n  }\n  getMark(key: string): IMark | null {\n    return (this._grammarMap.mark[key] as IMark) ?? null;\n  }\n  getCustomized(key: string): IGrammarBase | null {\n    return this._grammarMap.customized[key] ?? null;\n  }\n  getGrammar(key: string): IGrammarBase | null {\n    if (this._grammarMap.data[key]) {\n      return this._grammarMap.data[key];\n    } else if (this._grammarMap.signal[key]) {\n      return this._grammarMap.signal[key];\n    } else if (this._grammarMap.scale[key]) {\n      return this._grammarMap.scale[key];\n    } else if (this._grammarMap.coordinate[key]) {\n      return this._grammarMap.coordinate[key];\n    } else if (this._grammarMap.mark[key]) {\n      return this._grammarMap.mark[key];\n    } else if (this._grammarMap.customized[key]) {\n      return this._grammarMap.customized[key];\n    }\n    return null;\n  }\n\n  getAllSignals(): ISignal<any>[] {\n    return this._grammars.signal as ISignal<any>[];\n  }\n  getAllData(): IData[] {\n    return this._grammars.data as IData[];\n  }\n  getAllScales(): IScale[] {\n    return this._grammars.scale as IScale[];\n  }\n  getAllCoordinates(): ICoordinate[] {\n    return this._grammars.coordinate as ICoordinate[];\n  }\n  getAllMarks(): IMark[] {\n    return this._grammars.mark as IMark[];\n  }\n  getAllCustomized(): IGrammarBase[] {\n    return this._grammars.customized;\n  }\n\n  traverse(func: (grammar: IGrammarBase) => boolean | void) {\n    Object.values(this._grammars ?? {}).forEach(grammars =>\n      (grammars ?? []).forEach(grammar => {\n        // stop traversing when func returns true\n        if (func.call(null, grammar)) {\n          return;\n        }\n      })\n    );\n  }\n\n  find(func: (grammar: IGrammarBase) => boolean) {\n    let targetGrammar: IGrammarBase = null;\n    this.traverse(grammar => {\n      if (func.call(null, grammar) === true) {\n        targetGrammar = grammar;\n        return true;\n      }\n      return false;\n    });\n    return targetGrammar;\n  }\n\n  filter(func: (grammar: IGrammarBase) => boolean) {\n    const targetGrammars: IGrammarBase[] = [];\n    this.traverse(grammar => {\n      if (func.call(null, grammar) === true) {\n        targetGrammars.push(grammar);\n      }\n    });\n    return targetGrammars;\n  }\n\n  clear() {\n    this._size = 0;\n    this._grammars = { signal: [], data: [], scale: [], coordinate: [], mark: [], customized: [] };\n    this._grammarMap = { signal: {}, data: {}, scale: {}, coordinate: {}, mark: {}, customized: {} };\n  }\n\n  release() {\n    this._size = 0;\n    this._grammars = null;\n    this._grammarMap = null;\n  }\n}\n\nexport class RecordedTreeGrammars extends RecordedGrammars implements IRecordedTreeGrammars {\n  private _markNodes: IMarkTreeNode[] = [];\n\n  record(grammar: IGrammarBase) {\n    super.record(grammar);\n    if (grammar.grammarType === 'mark') {\n      const mark = grammar as IMark;\n      const currentNode: IMarkTreeNode = {\n        mark: mark,\n        parent: null,\n        children: []\n      };\n      this._markNodes.forEach(node => {\n        const targetMark = node.mark;\n        if (targetMark.markType === GrammarMarkType.group && (targetMark as IGroupMark).includesChild(mark, false)) {\n          node.children.push(currentNode);\n          currentNode.parent = node;\n        } else if (mark.markType === GrammarMarkType.group && (mark as IGroupMark).includesChild(targetMark, false)) {\n          currentNode.children.push(node);\n          node.parent = currentNode;\n        }\n      });\n      this._markNodes.push(currentNode);\n    }\n    return this;\n  }\n\n  unrecord(grammar: IGrammarBase) {\n    super.unrecord(grammar);\n    if (grammar.grammarType === 'mark') {\n      const mark = grammar as IMark;\n      const currentNode = this._markNodes.find(node => node.mark === mark);\n      this._markNodes.forEach(node => {\n        const targetMark = node.mark;\n        if (targetMark.markType === GrammarMarkType.group && node.children.includes(currentNode)) {\n          node.children = node.children.filter(n => n !== currentNode);\n          currentNode.parent = null;\n        } else if (mark.markType === GrammarMarkType.group && currentNode.children.includes(node)) {\n          currentNode.children = currentNode.children.filter(n => n !== node);\n          node.parent = null;\n        }\n      });\n      this._markNodes = this._markNodes.filter(n => n !== currentNode);\n    }\n    return this;\n  }\n\n  getAllMarkNodes() {\n    return this._markNodes;\n  }\n\n  clear() {\n    super.clear();\n    this._markNodes = [];\n  }\n\n  release() {\n    super.release();\n    this._markNodes = null;\n  }\n}\n\nexport const releaseUpMarkNode = (node: IMarkTreeNode) => {\n  // if (node.mark.get)\n};\n"]}