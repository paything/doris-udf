{"version":3,"sources":["../src/view/dataflow.ts"],"names":[],"mappings":"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","file":"dataflow.js","sourcesContent":["import type { ILogger } from '@visactor/vutils';\nimport type { IDataflow } from '../types/dataflow';\nimport { isNil, Logger } from '@visactor/vutils';\nimport { Heap } from '../util/grammar-heap';\nimport { UniqueList } from '../util/unique-list';\nimport type { IDataflowCallback, IGrammarBase } from '../types';\n\n/**\n * A dataflow to run all the grammar elements\n */\nexport default class Dataflow implements IDataflow {\n  logger: ILogger;\n  private grammars: IGrammarBase[] = [];\n  /** 当前排序 */\n  private _curRank: number;\n  /** 发生了变更的元素 */\n  private _committed?: UniqueList<IGrammarBase>;\n  private _heap?: Heap;\n  private _beforeRunner?: IDataflowCallback;\n  private _afterRunner?: IDataflowCallback;\n  private _updateCounter: number;\n  /** 是否完成初次渲染 */\n  private _finishFirstRender?: boolean;\n\n  constructor() {\n    this.logger = Logger.getInstance();\n\n    this._curRank = 0;\n\n    this._committed = new UniqueList(grammar => grammar.uid);\n\n    this._heap = new Heap((a, b) => a?.qrank - b?.qrank);\n    this._beforeRunner = null;\n    this._afterRunner = null;\n    this._updateCounter = 0;\n    this._finishFirstRender = false;\n  }\n\n  add(grammar: IGrammarBase) {\n    if (!grammar) {\n      return;\n    }\n    this._setRankOfGrammar(grammar);\n    this.commit(grammar);\n    if (!this.grammars.includes(grammar)) {\n      this.grammars.push(grammar);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  remove(grammar: IGrammarBase) {\n    if (grammar) {\n      this._committed.remove(grammar);\n      this._heap.remove(grammar);\n      this.grammars = this.grammars.filter(storedGrammar => storedGrammar !== grammar);\n    }\n  }\n\n  private _setRankOfGrammar(grammar?: IGrammarBase) {\n    if (!grammar) {\n      return;\n    }\n    grammar.rank = ++this._curRank;\n  }\n\n  private _reRank(grammar?: IGrammarBase) {\n    const queue = [grammar];\n\n    while (queue.length) {\n      const cur = queue.pop();\n      this._setRankOfGrammar(cur);\n      const list = cur.targets;\n\n      if (list) {\n        list.forEach((entry: IGrammarBase) => {\n          queue.push(entry);\n          if (entry === grammar) {\n            this.logger.error('Cycle detected in dataflow graph.');\n          }\n        });\n      }\n    }\n  }\n\n  private _enqueue(grammar: IGrammarBase) {\n    if (!grammar) {\n      return;\n    }\n\n    (grammar as any).qrank = grammar.rank;\n    // push and reRank in the heap\n    this._heap.push(grammar);\n  }\n\n  private _logGrammarRunInfo(grammar: IGrammarBase) {\n    if (this.logger.canLogError()) {\n      const debugInfos = [\n        { key: 'id', value: grammar.id() },\n        { key: 'name', value: grammar.name() }\n      ];\n      const debugStr = debugInfos.reduce((str, entry, index) => {\n        if (!isNil(entry.value)) {\n          return `${str}${index ? ' , ' : ''}${entry.key}: ${entry.value}`;\n        }\n\n        return str;\n      }, '');\n\n      this.logger.debug('Run Operator: ', grammar, debugStr);\n    }\n  }\n\n  hasCommitted() {\n    return !!this._committed.length;\n  }\n\n  // OPERATOR UPDATES\n  commit(grammar: IGrammarBase) {\n    // otherwise, queue for next propagation\n    this._committed.add(grammar);\n\n    return this;\n  }\n\n  private _beforeEvaluate() {\n    // reRank grammar element which has higher rank than its targets\n    this.grammars.forEach(grammar => {\n      if (grammar.targets.some(target => target?.rank < grammar?.rank)) {\n        this._reRank(grammar);\n      }\n    });\n    // initialize priority queue, reset committed grammars\n    this._committed.forEach(grammar => this._enqueue(grammar));\n    this._committed = new UniqueList(grammar => grammar.uid);\n  }\n\n  private _enqueueTargets(grammar: IGrammarBase) {\n    if (grammar.targets && grammar.targets.length && this._finishFirstRender) {\n      grammar.targets.forEach((target: IGrammarBase) => this._enqueue(target));\n    }\n  }\n\n  evaluate() {\n    // invoke prerun function, if provided\n    if (this._beforeRunner) {\n      this._beforeRunner(this);\n    }\n\n    // exit early if there are no updates\n    if (!this._committed.length) {\n      this.logger.info('Dataflow invoked, but nothing to do.');\n      return false;\n    }\n\n    this._updateCounter += 1;\n    let count = 0;\n    let grammar;\n    let dt;\n    let error;\n\n    if (this.logger.canLogInfo()) {\n      dt = Date.now();\n      this.logger.debug(`-- START PROPAGATION (${this._updateCounter}) -----`);\n    }\n\n    this._beforeEvaluate();\n\n    while (this._heap.size() > 0) {\n      // dequeue grammar with highest priority\n      grammar = this._heap.pop();\n\n      if (!grammar) {\n        continue;\n      }\n\n      // re-queue if rank changed\n      if (grammar.rank !== grammar.qrank) {\n        this._enqueue(grammar);\n        continue;\n      }\n\n      grammar.run();\n\n      this._logGrammarRunInfo(grammar);\n      this._enqueueTargets(grammar);\n      count += 1;\n    }\n\n    if (this.logger.canLogInfo()) {\n      dt = Date.now() - dt;\n      this.logger.info(`> ${count} grammars updated; ${dt} ms`);\n    }\n\n    if (error) {\n      this.logger.error(error);\n    } else if (this._afterRunner) {\n      this._afterRunner(this);\n    }\n\n    this._finishFirstRender = true;\n\n    return true;\n  }\n\n  runBefore(callback?: IDataflowCallback) {\n    this._beforeRunner = callback;\n  }\n\n  runAfter(callback?: IDataflowCallback) {\n    this._afterRunner = callback;\n  }\n\n  release() {\n    if (this._heap) {\n      this._heap.clear();\n      this._heap = null;\n    }\n\n    this.logger = null;\n    this._committed = null;\n  }\n}\n"]}