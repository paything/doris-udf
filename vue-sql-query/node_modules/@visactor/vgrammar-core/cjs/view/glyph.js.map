{"version":3,"sources":["../src/view/glyph.ts"],"names":[],"mappings":";;;AAAA,0CAAiD;AAEjD,mDAA+D;AAC/D,iCAA8B;AAC9B,6CAA0C;AAC1C,0DAAsD;AAEtD,MAAa,SAAU,SAAQ,WAAI;IAQjC,YAAY,IAAW,EAAE,SAAiB,EAAE,KAAkB;QAC5D,KAAK,CAAC,IAAI,EAAE,uBAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,iBAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc,CAAC,MAAW;QACxB,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,OAAO,IAAI,CAAC;IACd,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;IAC/B,CAAC;IAED,cAAc,CAAC,KAAU,EAAE,QAAiB;QAC1C,MAAM,WAAW,GAAG,IAAA,gCAAsB,EAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACxE,OAAO,KAAK,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC5D,CAAC;IAED,aAAa;QACX,OAAO,IAAI,4BAAY,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;;AAnCH,8BAoCC;AAnCQ,kBAAQ,GAAG,uBAAe,CAAC,KAAK,CAAC;AAoCnC,MAAM,iBAAiB,GAAG,GAAG,EAAE;IACpC,iBAAO,CAAC,YAAY,CAAC,uBAAe,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AACzD,CAAC,CAAC;AAFW,QAAA,iBAAiB,qBAE5B","file":"glyph.js","sourcesContent":["import { GrammarMarkType } from '../graph/enums';\nimport type { IGlyphMark, IGroupMark, IView, GlyphMarkSpec, IGlyphMeta } from '../types';\nimport { createGlyphGraphicItem } from '../graph/util/graphic';\nimport { Mark } from './mark';\nimport { Factory } from '../core/factory';\nimport { GlyphElement } from '../graph/glyph-element';\n\nexport class GlyphMark extends Mark implements IGlyphMark {\n  static markType = GrammarMarkType.glyph;\n  protected declare spec: GlyphMarkSpec;\n  declare markType: GrammarMarkType.glyph;\n  readonly glyphType: string;\n\n  private glyphMeta: IGlyphMeta;\n\n  constructor(view: IView, glyphType: string, group?: IGroupMark) {\n    super(view, GrammarMarkType.glyph, group);\n    this.glyphType = glyphType;\n    this.glyphMeta = Factory.getGlyph(glyphType);\n  }\n\n  configureGlyph(config: any) {\n    this.spec.glyphConfig = config;\n    this.commit();\n    return this;\n  }\n\n  getGlyphMeta() {\n    return this.glyphMeta;\n  }\n\n  getGlyphConfig() {\n    return this.spec.glyphConfig;\n  }\n\n  addGraphicItem(attrs: any, groupKey?: string) {\n    const graphicItem = createGlyphGraphicItem(this, this.glyphMeta, attrs);\n    return super.addGraphicItem(attrs, groupKey, graphicItem);\n  }\n\n  createElement() {\n    return new GlyphElement(this);\n  }\n}\nexport const registerGlyphMark = () => {\n  Factory.registerMark(GrammarMarkType.glyph, GlyphMark);\n};\n"]}