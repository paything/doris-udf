{"version":3,"sources":["../src/view/coordinate.ts"],"names":[],"mappings":"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","file":"coordinate.js","sourcesContent":["import type { IBaseCoordinate, CoordinateType } from '@visactor/vgrammar-coordinate';\nimport type { Nil } from '../types/base';\nimport type { GrammarType, ICoordinate, IGrammarBase, IGrammarBaseConstructor, IView } from '../types';\nimport type { CoordinateFunctionType, CoordinateSpec } from '../types/coordinate';\nimport { GrammarBase } from './grammar-base';\nimport { configureCoordinate, createCoordinate } from '../parse/coordinate';\nimport { Factory } from '../core/factory';\n\nexport class Coordinate extends GrammarBase implements ICoordinate {\n  readonly grammarType: GrammarType = 'coordinate';\n\n  protected spec: CoordinateSpec = {\n    type: 'cartesian'\n  };\n\n  private coordinate: IBaseCoordinate;\n\n  constructor(view: IView, coordinateType: CoordinateType) {\n    super(view);\n    this.spec.type = coordinateType;\n    this.coordinate = createCoordinate(coordinateType);\n  }\n\n  parse(spec: CoordinateSpec) {\n    super.parse(spec);\n    this.start(spec.start);\n    this.end(spec.end);\n    this.origin(spec.origin);\n\n    this.translate(spec.translate);\n    this.rotate(spec.rotate);\n    this.scale(spec.scale);\n    this.transpose(spec.transpose);\n\n    this.commit();\n    return this;\n  }\n\n  evaluate(upstream: any, parameters: any) {\n    if (!this.coordinate || this.coordinate.type !== this.spec.type) {\n      this.coordinate = createCoordinate(this.spec.type);\n    }\n    configureCoordinate(this.spec as CoordinateSpec, this.coordinate, parameters);\n    return this;\n  }\n\n  output() {\n    return this.coordinate;\n  }\n\n  // coordinate attributes\n\n  start(start: CoordinateFunctionType<[number, number]> | Nil) {\n    return this.setFunctionSpec(start, 'start');\n  }\n\n  end(end: CoordinateFunctionType<[number, number]> | Nil) {\n    return this.setFunctionSpec(end, 'end');\n  }\n\n  origin(origin: CoordinateFunctionType<[number, number]> | Nil) {\n    return this.setFunctionSpec(origin, 'origin');\n  }\n\n  // coordinate transforms\n\n  translate(offset: CoordinateFunctionType<[number, number]> | Nil) {\n    return this.setFunctionSpec(offset, 'translate');\n  }\n\n  rotate(angle: CoordinateFunctionType<number> | Nil) {\n    return this.setFunctionSpec(angle, 'rotate');\n  }\n\n  scale(ratio: CoordinateFunctionType<[number, number]> | Nil) {\n    return this.setFunctionSpec(ratio, 'scale');\n  }\n\n  transpose(isTransposed: CoordinateFunctionType<boolean> | Nil) {\n    return this.setFunctionSpec(isTransposed, 'transpose');\n  }\n\n  reuse(grammar: IGrammarBase) {\n    if (grammar.grammarType !== this.grammarType) {\n      return this;\n    }\n    this.coordinate = grammar.output();\n    return this;\n  }\n\n  clear() {\n    super.clear();\n    this.coordinate = null;\n  }\n}\n\nexport const registerCoordinate = () => {\n  Factory.registerGrammar('coordinate', Coordinate as IGrammarBaseConstructor<CoordinateType>, 'coordinates');\n};\n"]}