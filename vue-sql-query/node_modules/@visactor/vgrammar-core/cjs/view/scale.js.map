{"version":3,"sources":["../src/view/scale.ts"],"names":[],"mappings":"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","file":"scale.js","sourcesContent":["import { isNil } from '@visactor/vutils';\nimport type { IBandLikeScale, IRangeFactor, IBaseScale, TickData, ScaleFishEyeOptions } from '@visactor/vscale';\nimport { supportRangeFactor } from '@visactor/vscale';\nimport type { IGrammarBase, IGrammarBaseConstructor, IView } from '../types';\nimport type { Nil } from '../types/base';\nimport type { GrammarType, IScale } from '../types/grammar';\nimport type {\n  ScaleConfigureSpec,\n  ScaleCoordinate,\n  ScaleData,\n  ScaleFunctionType,\n  ScaleSpec,\n  GrammarScaleType,\n  MultiScaleData\n} from '../types/scale';\nimport { GrammarBase } from './grammar-base';\nimport { configureScale, createScale, parseScaleConfig, parseScaleDomainRange } from '../parse/scale';\nimport { HOOK_EVENT } from '../graph/enums';\nimport { Factory } from '../core/factory';\n\nexport class Scale extends GrammarBase implements IScale {\n  readonly grammarType: GrammarType = 'scale';\n\n  protected declare spec: ScaleSpec;\n\n  private scale: IBaseScale;\n  private _rangeFactor?: [number, number];\n  private _fishEyeOptions?: ScaleFishEyeOptions;\n\n  constructor(view: IView, scaleType: GrammarScaleType) {\n    super(view);\n    this.spec.type = scaleType;\n    this.scale = createScale(scaleType);\n  }\n\n  parse(spec: ScaleSpec) {\n    super.parse(spec);\n    this.domain(spec.domain);\n    this.range(spec.range);\n    this.configure(spec);\n\n    this.commit();\n    return this;\n  }\n\n  evaluate(upstream: any, parameters: any) {\n    this.view.emit(HOOK_EVENT.BEFORE_EVALUATE_SCALE);\n    if (!this.spec.type) {\n      this.spec.type = 'linear';\n    }\n    if (!this.scale || this.scale.type !== this.spec.type) {\n      this.scale = createScale(this.spec.type);\n    }\n    configureScale(this.spec as ScaleSpec, this.scale, parameters);\n\n    if (this.scale && supportRangeFactor(this.scale.type)) {\n      if (this._rangeFactor) {\n        (this.scale as unknown as IRangeFactor).rangeFactor(this._rangeFactor);\n      } else if ((this.scale as unknown as IRangeFactor).rangeFactor()) {\n        // clear rangeFactor\n        (this.scale as unknown as IRangeFactor).rangeFactor(null, false, true);\n      }\n\n      if (this._fishEyeOptions) {\n        (this.scale as IBandLikeScale).fishEye(this._fishEyeOptions);\n      } else if ((this.scale as IBandLikeScale).fishEye()) {\n        // clera fisheye\n        (this.scale as IBandLikeScale).fishEye(null, false, true);\n      }\n    }\n\n    this.view.emit(HOOK_EVENT.BEFORE_EVALUATE_SCALE);\n    return this;\n  }\n\n  output() {\n    return this.scale;\n  }\n\n  getScaleType() {\n    return this.spec.type;\n  }\n\n  getScale() {\n    return this.scale;\n  }\n\n  ticks(count?: number): TickData[] {\n    return this.scale?.tickData?.(count) ?? [];\n  }\n\n  domain(domain: ScaleFunctionType<any[]> | ScaleData | MultiScaleData | Nil) {\n    if (!isNil(this.spec.domain)) {\n      this.detach(parseScaleDomainRange(this.spec.domain, this.view));\n    }\n    this.spec.domain = domain;\n    this.attach(parseScaleDomainRange(domain, this.view));\n    this.commit();\n    return this;\n  }\n\n  range(range: ScaleFunctionType<any[]> | ScaleData | MultiScaleData | ScaleCoordinate | Nil) {\n    if (!isNil(this.spec.range)) {\n      this.detach(parseScaleDomainRange(this.spec.range, this.view));\n    }\n    this.spec.range = range;\n    this.attach(parseScaleDomainRange(range, this.view));\n    this.commit();\n    return this;\n  }\n\n  tickCount(tickCount: ScaleFunctionType<number> | Nil) {\n    return this.setFunctionSpec(tickCount, 'tickCount');\n  }\n\n  setRangeFactor(range?: [number, number]) {\n    this._rangeFactor = range;\n    return this;\n  }\n\n  getRangeFactor() {\n    return this._rangeFactor;\n  }\n\n  setFishEye(fishEyeOptions?: ScaleFishEyeOptions) {\n    this._fishEyeOptions = fishEyeOptions;\n\n    return this;\n  }\n\n  getFishEye() {\n    return this._fishEyeOptions;\n  }\n\n  getCoordinateAxisPosition() {\n    const rangeSpec = this.spec.range as ScaleCoordinate;\n    const coord = rangeSpec?.coordinate;\n    if (!isNil(coord)) {\n      const dim = rangeSpec.dimension;\n      const isSub = rangeSpec.isSubshaft;\n      const reversed = rangeSpec.reversed;\n      const coordinate = this.parameters()[coord];\n\n      return coordinate?.getVisualPositionByDimension(dim, isSub, reversed);\n    }\n\n    return null;\n  }\n\n  getCoordinateAxisPoints(baseValue?: number) {\n    const rangeSpec = this.spec.range as ScaleCoordinate;\n    const coord = rangeSpec?.coordinate;\n    if (!isNil(coord)) {\n      const dim = rangeSpec.dimension;\n      const isSub = rangeSpec.isSubshaft;\n      const reversed = rangeSpec.reversed;\n      const coordinate = this.parameters()[coord];\n      return coordinate?.getAxisPointsByDimension(dim, isSub, reversed, baseValue);\n    }\n\n    return null;\n  }\n\n  getCoordinate() {\n    const rangeSpec = this.spec.range as ScaleCoordinate;\n    const coord = rangeSpec?.coordinate;\n    if (!isNil(coord)) {\n      return this.parameters()[coord];\n    }\n\n    return null;\n  }\n\n  configure(config: ScaleConfigureSpec | Nil) {\n    this.detach(parseScaleConfig(this.spec.type, config, this.view));\n    if (isNil(config)) {\n      this.spec = { type: this.spec.type, domain: this.spec.domain, range: this.spec.range } as ScaleSpec;\n    } else {\n      Object.assign(this.spec, config);\n      this.attach(parseScaleConfig(this.spec.type, config, this.view));\n    }\n    this.commit();\n    return this;\n  }\n\n  reuse(grammar: IGrammarBase) {\n    if (grammar.grammarType !== this.grammarType) {\n      return this;\n    }\n    this.scale = grammar.output();\n    return this;\n  }\n\n  clear() {\n    super.clear();\n    this.scale = null;\n  }\n}\n\nexport const registerScale = () => {\n  Factory.registerGrammar('scale', Scale as IGrammarBaseConstructor<GrammarScaleType>, 'scales');\n};\n"]}