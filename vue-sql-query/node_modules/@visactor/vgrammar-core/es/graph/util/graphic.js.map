{"version":3,"sources":["../src/graph/util/graphic.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAC3C,OAAO,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAChD,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAC7C,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;IACzC,OAAO,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF,MAAM,UAAU,iBAAiB,CAAC,IAAW,EAAE,QAAgB,EAAE,QAAa,EAAE;;IAC9E,MAAM,WAAW,GAAa,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC;QAC5D,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC;QACxC,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,QAAQ,EAAE,KAAK,EAAE;YAC9C,WAAW,EAAE,MAAC,IAAY,aAAZ,IAAI,uBAAJ,IAAI,CAAU,IAAI,0CAAE,SAAS;SAC5C,CAAC,CAAC;IAEP,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QACpC,MAAM,CAAC,KAAK,CAAC,UAAU,QAAQ,kBAAkB,CAAC,CAAC;KACpD;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,IAAW,EAAE,SAAqB,EAAE,QAAa,EAAE;IACxF,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE;QAClD,OAAO;KACR;IACD,MAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxE,MAAM,UAAU,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IACxC,MAAM,WAAW,GAAe,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACjE,IAAI,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;YAC5C,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YACxD,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;gBACpB,OAAO,OAAO,CAAC;aAChB;SACF;IACH,CAAC,CAAC,CAAC;IACH,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;IACvC,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,WAAqB,EAAE,EAAE;IACzD,IAAI,WAAW,EAAE;QACf,WAAW,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC;QACrC,WAAW,CAAC,OAAO,EAAE,CAAC;QACtB,IAAI,WAAW,CAAC,MAAM,EAAE;YACtB,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;SAC7C;KACF;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,QAAgB,EAAE,EAAE;IACrD,IAAI,QAAQ,KAAK,eAAe,CAAC,IAAI,EAAE;QACrC,OAAO,eAAe,CAAC,UAAU,CAAC;KACnC;IAED,IAAI,QAAQ,KAAK,eAAe,CAAC,MAAM,EAAE;QACvC,OAAO,eAAe,CAAC,YAAY,CAAC;KACrC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","file":"graphic.js","sourcesContent":["import type { IGlyphMeta, IMark } from '../../types';\nimport type { IGraphic } from '@visactor/vrender-core';\n// eslint-disable-next-line no-duplicate-imports\n\nimport { GrammarMarkType } from '../enums';\nimport { BridgeElementKey } from '../constants';\nimport { Factory } from '../../core/factory';\nimport { Logger } from '@visactor/vutils';\n\nexport const isMarkType = (type: string) => {\n  return !!GrammarMarkType[type];\n};\n\nexport function createGraphicItem(mark: IMark, markType: string, attrs: any = {}) {\n  const graphicItem: IGraphic = Factory.getGraphicType(markType)\n    ? Factory.createGraphic(markType, attrs)\n    : Factory.createGraphicComponent(markType, attrs, {\n        skipDefault: (mark as any)?.spec?.skipTheme\n      });\n\n  if (!graphicItem) {\n    const logger = Logger.getInstance();\n    logger.error(`create ${markType} graphic failed!`);\n  }\n\n  return graphicItem;\n}\n\nexport function createGlyphGraphicItem(mark: IMark, glyphMeta: IGlyphMeta, attrs: any = {}) {\n  if (!Factory.getGraphicType(GrammarMarkType.glyph)) {\n    return;\n  }\n  const graphicItem = Factory.createGraphic(GrammarMarkType.glyph, attrs);\n  const glyphMarks = glyphMeta.getMarks();\n  const subGraphics: IGraphic[] = Object.keys(glyphMarks).map(name => {\n    if (Factory.getGraphicType(glyphMarks[name])) {\n      const graphic = Factory.createGraphic(glyphMarks[name]);\n      if (graphic) {\n        graphic.name = name;\n        return graphic;\n      }\n    }\n  });\n  graphicItem.setSubGraphic(subGraphics);\n  return graphicItem;\n}\n\nexport const removeGraphicItem = (graphicItem: IGraphic) => {\n  if (graphicItem) {\n    graphicItem[BridgeElementKey] = null;\n    graphicItem.release();\n    if (graphicItem.parent) {\n      graphicItem.parent.removeChild(graphicItem);\n    }\n  }\n};\n\nexport const getMarkTypeOfLarge = (markType: string) => {\n  if (markType === GrammarMarkType.rect) {\n    return GrammarMarkType.largeRects;\n  }\n\n  if (markType === GrammarMarkType.symbol) {\n    return GrammarMarkType.largeSymbols;\n  }\n\n  return markType;\n};\n"]}