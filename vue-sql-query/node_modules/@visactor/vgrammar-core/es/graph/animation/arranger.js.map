{"version":3,"sources":["../src/graph/animation/arranger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAGzC,MAAM,OAAO,QAAQ;IASnB,YAAY,SAAsB;QAPlC,sBAAiB,GAAuB,CAAC,IAAI,CAAC,CAAC;QAG/C,cAAS,GAAW,CAAC,CAAC;QACtB,cAAS,GAAW,CAAC,CAAC;QACtB,YAAO,GAAW,CAAC,CAAC;QAGlB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;YACxD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAC1D,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAED,QAAQ,CAAC,QAA0B;QACjC,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QACzG,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACnC,QAAQ,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QACjD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,QAA0B;QAC9B,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,WAAW;QACT,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;YACpE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC5C,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACnB,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;;YACjE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,MAAA,MAAA,QAAQ,CAAC,aAAa,0CAAE,OAAO,mCAAI,CAAC,CAAC,CAAC;QAC9D,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACxC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;YAC/B,QAAQ,CAAC,OAAO,GAAG,SAAS,GAAG,YAAY,CAAC;YAC5C,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACpC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CACF","file":"arranger.js","sourcesContent":["import { isNil } from '@visactor/vutils';\nimport type { IAnimateArranger, IAnimator } from '../../types/animate';\n\nexport class Arranger implements IAnimateArranger {\n  afterArranger: IAnimateArranger;\n  parallelArrangers: IAnimateArranger[] = [this];\n\n  animators: IAnimator[];\n  totalTime: number = 0;\n  startTime: number = 0;\n  endTime: number = 0;\n\n  constructor(animators: IAnimator[]) {\n    this.animators = animators.filter(animator => !isNil(animator));\n    this.totalTime = this.animators.reduce((time, animator) => {\n      return Math.max(time, animator.getTotalAnimationTime());\n    }, 0);\n  }\n\n  parallel(arranger: IAnimateArranger) {\n    const parallelArrangers = Array.from(new Set(this.parallelArrangers.concat(arranger.parallelArrangers)));\n    parallelArrangers.forEach(arranger => {\n      arranger.parallelArrangers = parallelArrangers;\n    });\n    this.arrangeTime();\n    return this;\n  }\n\n  after(arranger: IAnimateArranger) {\n    this.afterArranger = arranger;\n    this.arrangeTime();\n    return this;\n  }\n\n  arrangeTime() {\n    const parallelTime = this.parallelArrangers.reduce((time, arranger) => {\n      return Math.max(time, arranger.totalTime);\n    }, this.totalTime);\n    const startTime = this.parallelArrangers.reduce((time, arranger) => {\n      return Math.max(time, arranger.afterArranger?.endTime ?? 0);\n    }, 0);\n\n    this.parallelArrangers.forEach(arranger => {\n      arranger.startTime = startTime;\n      arranger.endTime = startTime + parallelTime;\n      arranger.animators.forEach(animator => {\n        animator.startAt(startTime);\n      });\n    });\n  }\n}\n"]}