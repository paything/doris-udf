{"version":3,"sources":["../src/graph/animation/animation/rotate.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAGhE,MAAM,CAAC,MAAM,QAAQ,GAA4B,CAC/C,OAAiB,EACjB,OAAgC,EAChC,mBAAyC,EACzC,EAAE;;IACF,MAAM,cAAc,GAAG,MAAA,OAAO,CAAC,0BAA0B,CAAC,OAAO,CAAC,mCAAI,CAAC,CAAC;IAExE,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,aAAa,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACpD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KAClE;SAAM,IAAI,aAAa,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,EAAE;QACxC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;KACvB;SAAM,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,MAAK,eAAe,EAAE;QAC9C,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KACjE;SAAM;QACL,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KAClE;IACD,OAAO;QACL,IAAI,EAAE,EAAE,KAAK,EAAE;QACf,EAAE,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE;KAC9B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAA4B,CAChD,OAAiB,EACjB,OAAgC,EAChC,mBAAyC,EACzC,EAAE;;IACF,MAAM,UAAU,GAAG,MAAA,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,mCAAI,CAAC,CAAC;IACnE,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,IAAI,aAAa,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QAChD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KAC9D;SAAM,IAAI,aAAa,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,EAAE;QACxC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;KACvB;SAAM,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,MAAK,eAAe,EAAE;QAC9C,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KAC7D;SAAM;QACL,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;KAC9D;IACD,OAAO;QACL,IAAI,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE;QAC3B,EAAE,EAAE,EAAE,KAAK,EAAE;KACd,CAAC;AACJ,CAAC,CAAC","file":"rotate.js","sourcesContent":["import { isNumberClose, isValidNumber } from '@visactor/vutils';\nimport type { IAnimationParameters, IRotateAnimationOptions, TypeAnimation, IElement } from '../../../types';\n\nexport const rotateIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IRotateAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const attributeAngle = element.getFinalAnimationAttribute('angle') ?? 0;\n\n  let angle = 0;\n  if (isNumberClose(attributeAngle / (Math.PI * 2), 0)) {\n    angle = Math.round(attributeAngle / (Math.PI * 2)) * Math.PI * 2;\n  } else if (isValidNumber(options?.angle)) {\n    angle = options.angle;\n  } else if (options?.orient === 'anticlockwise') {\n    angle = Math.ceil(attributeAngle / (Math.PI * 2)) * Math.PI * 2;\n  } else {\n    angle = Math.floor(attributeAngle / (Math.PI * 2)) * Math.PI * 2;\n  }\n  return {\n    from: { angle },\n    to: { angle: attributeAngle }\n  };\n};\n\nexport const rotateOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IRotateAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const finalAngle = element.getGraphicAttribute('angle', true) ?? 0;\n  let angle = 0;\n  if (isNumberClose(finalAngle / (Math.PI * 2), 0)) {\n    angle = Math.round(finalAngle / (Math.PI * 2)) * Math.PI * 2;\n  } else if (isValidNumber(options?.angle)) {\n    angle = options.angle;\n  } else if (options?.orient === 'anticlockwise') {\n    angle = Math.ceil(finalAngle / (Math.PI * 2)) * Math.PI * 2;\n  } else {\n    angle = Math.floor(finalAngle / (Math.PI * 2)) * Math.PI * 2;\n  }\n  return {\n    from: { angle: finalAngle },\n    to: { angle }\n  };\n};\n"]}