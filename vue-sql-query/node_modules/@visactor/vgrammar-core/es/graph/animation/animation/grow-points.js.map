{"version":3,"sources":["../src/graph/animation/animation/grow-points.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AASjD,MAAM,eAAe,GAAG,CACtB,OAAiB,EACjB,OAA2C,EAC3C,mBAAyC,EACzC,EAAE;IACF,MAAM,MAAM,GAAiB,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC1E,MAAM,MAAM,GAAe,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC1C,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACrB,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC;IAC1B,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC;IAE1B,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,EAAE;QAC7B,IAAI,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACnC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SAC7B;QACD,IAAI,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACnC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;SAC7B;KACF;IAED,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,KAAK,MAAM,EAAE;QACpC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;QACrB,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KACtB;IAED,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAA4B,CACnD,OAAiB,EACjB,OAA2C,EAC3C,mBAAyC,EACzC,EAAE;IACF,OAAO;QACL,IAAI,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,EAAE;QACxE,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;KAC7D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAA4B,CACpD,OAAiB,EACjB,OAA2C,EAC3C,mBAAyC,EACzC,EAAE;IACF,OAAO;QACL,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE;QAC7D,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,EAAE;KACvE,CAAC;AACJ,CAAC,CAAC;AAIF,MAAM,aAAa,GAAG,CACpB,OAAiB,EACjB,OAAoC,EACpC,mBAAyC,EACzC,EAAE;IACF,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5D,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAiB,EAAE,EAAE;;QACtC,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,UAAU,EAAE;YAC5C,IAAI,UAAU,GAAG,mBAAmB,CAAC,KAAK,CAAC;YAE3C,IAAI,mBAAmB,CAAC,KAAK,EAAE;gBAC7B,UAAU,GAAG,MAAC,mBAA2B,CAAC,UAAU,mCAAI,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,CAAC;gBAErG,mBAA2B,CAAC,UAAU,GAAG,UAAU,CAAC;aACtD;YAED,OAAO,gCACF,KAAK,KACR,CAAC,EAAE,UAAU,EACb,CAAC,EAAE,KAAK,CAAC,CAAC,EACV,EAAE,EAAE,UAAU,EACd,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,OAAO,EAAE,KAAK,CAAC,OAAO,KAAK,KAAK,GACnB,CAAC;SACjB;QACD,OAAO,gCACF,KAAK,KACR,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,KAAK,CAAC,CAAC,EACV,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,OAAO,EAAE,KAAK,CAAC,OAAO,KAAK,KAAK,GACnB,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAA4B,CACpD,OAAiB,EACjB,OAAoC,EACpC,mBAAyC,EACzC,EAAE;IACF,OAAO;QACL,IAAI,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,EAAE;QACtE,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;KAC7D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAA4B,CACrD,OAAiB,EACjB,OAAoC,EACpC,mBAAyC,EACzC,EAAE;IACF,OAAO;QACL,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE;QAC7D,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,EAAE;KACrE,CAAC;AACJ,CAAC,CAAC;AAIF,MAAM,aAAa,GAAG,CACpB,OAAiB,EACjB,OAAoC,EACpC,mBAAyC,EACzC,EAAE;IACF,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5D,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAiB,EAAE,EAAE;;QACtC,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,KAAK,UAAU,EAAE;YAC5C,IAAI,WAAW,GAAG,mBAAmB,CAAC,MAAM,CAAC;YAE7C,IAAI,mBAAmB,CAAC,KAAK,EAAE;gBAC7B,WAAW,GAAG,MAAC,mBAA2B,CAAC,WAAW,mCAAI,mBAAmB,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,CAAC;gBAExG,mBAA2B,CAAC,WAAW,GAAG,WAAW,CAAC;aACxD;YAED,OAAO,gCACF,KAAK,KACR,CAAC,EAAE,KAAK,CAAC,CAAC,EACV,CAAC,EAAE,WAAW,EACd,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,EAAE,EAAE,WAAW,EACf,OAAO,EAAE,KAAK,CAAC,OAAO,KAAK,KAAK,GACnB,CAAC;SACjB;QACD,OAAO,gCACF,KAAK,KACR,CAAC,EAAE,KAAK,CAAC,CAAC,EACV,CAAC,EAAE,CAAC,EACJ,EAAE,EAAE,KAAK,CAAC,EAAE,EACZ,EAAE,EAAE,CAAC,EACL,OAAO,EAAE,KAAK,CAAC,OAAO,KAAK,KAAK,GACnB,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAA4B,CACpD,OAAiB,EACjB,OAAoC,EACpC,mBAAyC,EACzC,EAAE;IACF,OAAO;QACL,IAAI,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,EAAE;QACtE,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;KAC7D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAA4B,CACrD,OAAiB,EACjB,OAAoC,EACpC,mBAAyC,EACzC,EAAE;IACF,OAAO;QACL,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE;QAC7D,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,mBAAmB,CAAC,EAAE;KACrE,CAAC;AACJ,CAAC,CAAC","file":"grow-points.js","sourcesContent":["import type { IPointLike } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { isValidNumber } from '@visactor/vutils';\nimport type {\n  IElement,\n  IGrowPointsOverallAnimationOptions,\n  IAnimationParameters,\n  IGrowPointsAnimationOptions,\n  TypeAnimation\n} from '../../../types';\n\nconst getCenterPoints = (\n  element: IElement,\n  options: IGrowPointsOverallAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const points: IPointLike[] = element.getGraphicAttribute('points', false);\n  const center: IPointLike = { x: 0, y: 0 };\n  points.forEach(point => {\n    center.x += point.x;\n    center.y += point.y;\n  });\n  center.x /= points.length;\n  center.y /= points.length;\n\n  if (options && options.center) {\n    if (isValidNumber(options.center.x)) {\n      center.x = options.center.x;\n    }\n    if (isValidNumber(options.center.y)) {\n      center.y = options.center.y;\n    }\n  }\n\n  if (element.mark.markType === 'area') {\n    center.x1 = center.x;\n    center.y1 = center.y;\n  }\n\n  return points.map(point => Object.assign({}, point, center));\n};\n\nexport const growPointsIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowPointsOverallAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return {\n    from: { points: getCenterPoints(element, options, animationParameters) },\n    to: { points: element.getGraphicAttribute('points', false) }\n  };\n};\n\nexport const growPointsOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowPointsOverallAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return {\n    from: { points: element.getGraphicAttribute('points', true) },\n    to: { points: getCenterPoints(element, options, animationParameters) }\n  };\n};\n\n// grow points x\n\nconst changePointsX = (\n  element: IElement,\n  options: IGrowPointsAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const points = element.getGraphicAttribute('points', false);\n  return points.map((point: IPointLike) => {\n    if (options && options.orient === 'negative') {\n      let groupRight = animationParameters.width;\n\n      if (animationParameters.group) {\n        groupRight = (animationParameters as any).groupWidth ?? animationParameters.group.getBounds().width();\n\n        (animationParameters as any).groupWidth = groupRight;\n      }\n\n      return {\n        ...point,\n        x: groupRight,\n        y: point.y,\n        x1: groupRight,\n        y1: point.y1,\n        defined: point.defined !== false\n      } as IPointLike;\n    }\n    return {\n      ...point,\n      x: 0,\n      y: point.y,\n      x1: 0,\n      y1: point.y1,\n      defined: point.defined !== false\n    } as IPointLike;\n  });\n};\n\nexport const growPointsXIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowPointsAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return {\n    from: { points: changePointsX(element, options, animationParameters) },\n    to: { points: element.getGraphicAttribute('points', false) }\n  };\n};\n\nexport const growPointsXOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowPointsAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return {\n    from: { points: element.getGraphicAttribute('points', true) },\n    to: { points: changePointsX(element, options, animationParameters) }\n  };\n};\n\n// grow points y\n\nconst changePointsY = (\n  element: IElement,\n  options: IGrowPointsAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  const points = element.getGraphicAttribute('points', false);\n  return points.map((point: IPointLike) => {\n    if (options && options.orient === 'negative') {\n      let groupBottom = animationParameters.height;\n\n      if (animationParameters.group) {\n        groupBottom = (animationParameters as any).groupHeight ?? animationParameters.group.getBounds().height();\n\n        (animationParameters as any).groupHeight = groupBottom;\n      }\n\n      return {\n        ...point,\n        x: point.x,\n        y: groupBottom,\n        x1: point.x1,\n        y1: groupBottom,\n        defined: point.defined !== false\n      } as IPointLike;\n    }\n    return {\n      ...point,\n      x: point.x,\n      y: 0,\n      x1: point.x1,\n      y1: 0,\n      defined: point.defined !== false\n    } as IPointLike;\n  });\n};\n\nexport const growPointsYIn: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowPointsAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return {\n    from: { points: changePointsY(element, options, animationParameters) },\n    to: { points: element.getGraphicAttribute('points', false) }\n  };\n};\n\nexport const growPointsYOut: TypeAnimation<IElement> = (\n  element: IElement,\n  options: IGrowPointsAnimationOptions,\n  animationParameters: IAnimationParameters\n) => {\n  return {\n    from: { points: element.getGraphicAttribute('points', true) },\n    to: { points: changePointsY(element, options, animationParameters) }\n  };\n};\n"]}