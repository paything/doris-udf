{"version":3,"sources":["../src/graph/layout/layout.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,wBAAwB,CAAC;AAE/F,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAG3C,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AACtC,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAE7C,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,WAAoB,EAAE,OAAuB,EAAE,IAAW,EAAE,EAAE;IAC5F,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC,IAAI,CAAC,EAAE;;QAC1B,IAAI,IAAI,CAAC,QAAQ,KAAK,eAAe,CAAC,KAAK,EAAE;YAC3C,OAAO;SACR;QAED,MAAM,cAAc,GAAI,IAAmB,CAAC,cAAc,CAAC;QAO3D,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC;QACzC,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,YAAY,mCAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QAErD,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QAED,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;YAC1B,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,IAAkB,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SAC5E;aAAM,IAAI,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC1C,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAkB,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACrF;aAAM,IAAK,UAAwC,CAAC,OAAO,KAAK,UAAU,EAAE;YAC3E,IAAI,UAAU,CAAC,iBAAiB,EAAE;gBAChC,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;gBAErC,IAAI,UAAU,EAAE;oBACd,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;iBAC9B;gBAED,MAAM,UAAU,GAAG,gBAAgB,CAAC,IAAkB,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;gBACzF,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrC,MAAM,UAAU,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC;gBACvC,MAAM,OAAO,GAAG;oBACd,GAAG,EAAE,UAAU,CAAC,EAAE;oBAClB,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,UAAU,CAAC,EAAE;oBACnC,IAAI,EAAE,UAAU,CAAC,EAAE;oBACnB,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC,EAAE;iBACtC,CAAC;gBACD,IAAY,CAAC,YAAY,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;gBACxD,IAAY,CAAC,YAAY,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;gBAC1D,IAAY,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;aACrD;iBAAM;gBACL,gBAAgB,CAAC,IAAkB,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aACvE;SACF;aAAM,IAAK,UAAoC,CAAC,OAAO,KAAK,MAAM,EAAE;YACnE,YAAY,CAAC,IAAkB,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACnE;QAED,eAAe,CAAC,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;AACjD,CAAC,CAAC","file":"layout.js","sourcesContent":["import { isFunction } from '@visactor/vutils';\nimport { SIGNAL_VIEW_HEIGHT, SIGNAL_PADDING, SIGNAL_VIEW_WIDTH } from './../../view/constants';\nimport type { MarkRelativeContainerSpec, MarkGridContainerSpec } from './../../types/mark';\nimport { GrammarMarkType } from '../enums';\nimport type { IMark, IGroupMark } from '../../types/grammar';\nimport type { ILayoutOptions, IView } from '../../types/view';\nimport { doGridLayout } from './grid';\nimport { doRelativeLayout } from './relative';\nimport { Factory } from '../../core/factory';\n\nexport const defaultDoLayout = (layoutMarks: IMark[], options: ILayoutOptions, view: IView) => {\n  layoutMarks?.forEach(mark => {\n    if (mark.markType !== GrammarMarkType.group) {\n      return;\n    }\n\n    const layoutChildren = (mark as IGroupMark).layoutChildren;\n\n    // FIXME buildLayoutTree的时候过滤一下空的group\n    // if (!layoutChildren?.length) {\n    //   return;\n    // }\n\n    const layoutSpec = mark.getSpec().layout;\n    const bounds = mark.layoutBounds ?? mark.getBounds();\n\n    if (!bounds) {\n      return;\n    }\n\n    if (isFunction(layoutSpec)) {\n      layoutSpec.call(null, mark as IGroupMark, layoutChildren, bounds, options);\n    } else if (isFunction(layoutSpec.callback)) {\n      layoutSpec.callback.call(null, mark as IGroupMark, layoutChildren, bounds, options);\n    } else if ((layoutSpec as MarkRelativeContainerSpec).display === 'relative') {\n      if (layoutSpec.updateViewSignals) {\n        const oldViewBox = view.getViewBox();\n\n        if (oldViewBox) {\n          bounds.intersect(oldViewBox);\n        }\n\n        const viewBounds = doRelativeLayout(mark as IGroupMark, layoutChildren, bounds, options);\n        const viewWidth = viewBounds.width();\n        const viewHeight = viewBounds.height();\n        const padding = {\n          top: viewBounds.y1,\n          right: view.width() - viewBounds.x2,\n          left: viewBounds.x1,\n          bottom: view.height() - viewBounds.y2\n        };\n        (view as any).updateSignal(SIGNAL_VIEW_WIDTH, viewWidth);\n        (view as any).updateSignal(SIGNAL_VIEW_HEIGHT, viewHeight);\n        (view as any).updateSignal(SIGNAL_PADDING, padding);\n      } else {\n        doRelativeLayout(mark as IGroupMark, layoutChildren, bounds, options);\n      }\n    } else if ((layoutSpec as MarkGridContainerSpec).display === 'grid') {\n      doGridLayout(mark as IGroupMark, layoutChildren, bounds, options);\n    }\n\n    defaultDoLayout(layoutChildren, options, view);\n  });\n};\n\nexport const registerDefaultLayout = () => {\n  Factory.registerDefaultLayout(defaultDoLayout);\n};\n"]}