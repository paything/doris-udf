export declare enum BuiltInEncodeNames {
    enter = "enter",
    update = "update",
    exit = "exit",
    group = "group",
    connectNulls = "connectNulls"
}
export declare enum DiffState {
    enter = "enter",
    update = "update",
    exit = "exit",
    unChange = "unChange"
}
export declare enum GrammarMarkType {
    arc = "arc",
    arc3d = "arc3d",
    area = "area",
    image = "image",
    line = "line",
    path = "path",
    rect = "rect",
    rect3d = "rect3d",
    rule = "rule",
    shape = "shape",
    symbol = "symbol",
    text = "text",
    richtext = "richtext",
    polygon = "polygon",
    pyramid3d = "pyramid3d",
    circle = "circle",
    cell = "cell",
    interval = "interval",
    group = "group",
    glyph = "glyph",
    component = "component",
    largeRects = "largeRects",
    largeSymbols = "largeSymbols"
}
export declare enum ComponentEnum {
    axis = "axis",
    grid = "grid",
    legend = "legend",
    slider = "slider",
    label = "label",
    datazoom = "datazoom",
    player = "player",
    title = "title",
    scrollbar = "scrollbar"
}
export declare enum DataFilterRank {
    player = 1,
    rollUp = 2,
    drillDown = 3,
    slider = 4,
    datazoom = 5,
    legend = 6,
    scrollbar = 7,
    brush = 8,
    normal = 9
}
export declare enum AxisEnum {
    lineAxis = "lineAxis",
    circleAxis = "circleAxis"
}
export declare enum GridEnum {
    lineAxisGrid = "lineAxisGrid",
    circleAxisGrid = "circleAxisGrid"
}
export declare enum LegendEnum {
    discreteLegend = "discreteLegend",
    colorLegend = "colorLegend",
    sizeLegend = "sizeLegend"
}
export declare enum CrosshairEnum {
    lineCrosshair = "lineCrosshair",
    rectCrosshair = "rectCrosshair",
    sectorCrosshair = "sectorCrosshair",
    circleCrosshair = "circleCrosshair",
    polygonCrosshair = "polygonCrosshair",
    ringCrosshair = "ringCrosshair"
}
export declare enum LabelEnum {
    symbolLabel = "symbolLabel",
    rectLabel = "rectLabel",
    lineLabel = "lineLabel",
    dataLabel = "dataLabel"
}
export declare enum PlayerEnum {
    continuousPlayer = "continuousPlayer",
    discretePlayer = "discretePlayer"
}
export declare enum LayoutState {
    before = "before",
    layouting = "layouting",
    reevaluate = "reevaluate",
    after = "after"
}
export declare enum HOOK_EVENT {
    BEFORE_EVALUATE_DATA = "beforeEvaluateData",
    AFTER_EVALUATE_DATA = "afterEvaluateData",
    BEFORE_EVALUATE_SCALE = "beforeEvaluateScale",
    AFTER_EVALUATE_SCALE = "afterEvaluateScale",
    BEFORE_PARSE_VIEW = "beforeParseView",
    AFTER_PARSE_VIEW = "afterParseView",
    BEFORE_TRANSFORM = "beforeTransform",
    AFTER_TRANSFORM = "afterTransform",
    BEFORE_CREATE_VRENDER_STAGE = "beforeCreateVRenderStage",
    AFTER_CREATE_VRENDER_STAGE = "afterCreateVRenderStage",
    BEFORE_CREATE_VRENDER_LAYER = "beforeCreateVRenderLayer",
    AFTER_CREATE_VRENDER_LAYER = "afterCreateVRenderLayer",
    BEFORE_STAGE_RESIZE = "beforeStageResize",
    AFTER_STAGE_RESIZE = "afterStageResize",
    BEFORE_VRENDER_DRAW = "beforeVRenderDraw",
    AFTER_VRENDER_DRAW = "afterVRenderDraw",
    BEFORE_MARK_JOIN = "beforeMarkJoin",
    AFTER_MARK_JOIN = "afterMarkJoin",
    BEFORE_MARK_UPDATE = "beforeMarkUpdate",
    AFTER_MARK_UPDATE = "afterMarkUpdate",
    BEFORE_MARK_STATE = "beforeMarkState",
    AFTER_MARK_STATE = "afterMarkState",
    BEFORE_MARK_ENCODE = "beforeMarkEncode",
    AFTER_MARK_ENCODE = "afterMarkEncode",
    BEFORE_DO_LAYOUT = "beforeDoLayout",
    AFTER_DO_LAYOUT = "afterDoLayout",
    BEFORE_MARK_LAYOUT_END = "beforeMarkLayoutEnd",
    AFTER_MARK_LAYOUT_END = "afterMarkLayoutEnd",
    BEFORE_DO_RENDER = "beforeDoRender",
    AFTER_DO_RENDER = "afterDoRender",
    BEFORE_MARK_RENDER_END = "beforeMarkRenderEnd",
    AFTER_MARK_RENDER_END = "afterMarkRenderEnd",
    BEFORE_CREATE_VRENDER_MARK = "beforeCreateVRenderMark",
    AFTER_CREATE_VRENDER_MARK = "afterCreateVRenderMark",
    BEFORE_ADD_VRENDER_MARK = "beforeAddVRenderMark",
    AFTER_ADD_VRENDER_MARK = "afterAddVRenderMark",
    AFTER_VRENDER_NEXT_RENDER = "afterVRenderNextRender",
    BEFORE_ELEMENT_UPDATE_DATA = "beforeElementUpdateData",
    AFTER_ELEMENT_UPDATE_DATA = "afterElementUpdateData",
    BEFORE_ELEMENT_STATE = "beforeElementState",
    AFTER_ELEMENT_STATE = "afterElementState",
    BEFORE_ELEMENT_ENCODE = "beforeElementEncode",
    AFTER_ELEMENT_ENCODE = "afterElementEncode",
    ANIMATION_START = "animationStart",
    ANIMATION_END = "animationEnd",
    ELEMENT_ANIMATION_START = "elementAnimationStart",
    ELEMENT_ANIMATION_END = "elementAnimationEnd",
    ALL_ANIMATION_START = "allAnimationStart",
    ALL_ANIMATION_END = "allAnimationEnd"
}
export declare enum GrammarTypeEnum {
    signal = "signal",
    data = "data",
    scale = "scale",
    coordinate = "coordinate",
    mark = "mark"
}
export declare enum InteractionStateEnum {
    active = "active",
    selected = "selected",
    highlight = "highlight",
    blur = "blur"
}
