{"version":3,"sources":["../src/glyph/ripple.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AACpF,OAAO,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AAElD,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,OAAO,CAAC,aAAa,CAAyB,aAAa,EAAE;QAC3D,MAAM,EAAE,QAAQ;QAChB,OAAO,EAAE,QAAQ;QACjB,OAAO,EAAE,QAAQ;QACjB,OAAO,EAAE,QAAQ;KAClB,CAAC;SACC,uBAAuB,CAAC,CAAC,YAAoC,EAAE,KAAU,EAAE,OAAiB,EAAE,MAAW,EAAE,EAAE;;QAE5G,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,MAAA,YAAY,CAAC,IAAI,mCAAI,OAAO,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACtE,MAAM,UAAU,GAAG,IAAI,GAAG,GAAG,CAAC;QAC9B,OAAO;YACL,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,GAAG,UAAU,GAAG,MAAM,EAAE,WAAW,EAAE,IAAI,GAAG,MAAM,GAAG,IAAI,EAAE;YAChF,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,GAAG,GAAG,MAAM,GAAG,IAAI,EAAE;YACrF,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,WAAW,EAAE,IAAI,GAAG,MAAM,GAAG,IAAI,EAAE;SACvF,CAAC;IACJ,CAAC,CAAC;SACD,sBAAsB,CAAC,GAAG,EAAE;QAC3B,OAAO;YACL,OAAO,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;YAC9B,OAAO,EAAE,EAAE,WAAW,EAAE,GAAG,EAAE;YAC7B,OAAO,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE;SAC/B,CAAC;IACJ,CAAC,CAAC,CAAC;IACL,iBAAiB,EAAE,CAAC;IACpB,oBAAoB,EAAE,CAAC;IACvB,qBAAqB,EAAE,CAAC;AAC1B,CAAC,CAAC","file":"ripple.js","sourcesContent":["import type { IElement, RipplePointEncoderSpec } from '../types';\nimport { Factory } from '../core/factory';\nimport { registerGlyphGraphic, registerSymbolGraphic } from '../graph/mark/graphic';\nimport { registerGlyphMark } from '../view/glyph';\n\nexport const registerRippleGlyph = () => {\n  Factory.registerGlyph<RipplePointEncoderSpec>('ripplePoint', {\n    symbol: 'symbol',\n    ripple0: 'symbol',\n    ripple1: 'symbol',\n    ripple2: 'symbol'\n  })\n    .registerFunctionEncoder((encodeValues: RipplePointEncoderSpec, datum: any, element: IElement, config: any) => {\n      // ripple value should be between 0 and 1\n      const ripple = Math.max(0, Math.min(encodeValues.ripple, 1));\n      const size = encodeValues.size ?? element.getGraphicAttribute('size');\n      const rippleSize = size * 0.5;\n      return {\n        ripple0: { size: size + rippleSize * ripple, fillOpacity: 0.75 - ripple * 0.25 },\n        ripple1: { size: size + rippleSize * (1 + ripple), fillOpacity: 0.5 - ripple * 0.25 },\n        ripple2: { size: size + rippleSize * (2 + ripple), fillOpacity: 0.25 - ripple * 0.25 }\n      };\n    })\n    .registerDefaultEncoder(() => {\n      return {\n        ripple0: { fillOpacity: 0.75 },\n        ripple1: { fillOpacity: 0.5 },\n        ripple2: { fillOpacity: 0.25 }\n      };\n    });\n  registerGlyphMark();\n  registerGlyphGraphic();\n  registerSymbolGraphic();\n};\n"]}