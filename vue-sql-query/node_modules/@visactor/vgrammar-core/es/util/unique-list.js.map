{"version":3,"sources":["../src/util/unique-list.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AAEnD,MAAM,OAAO,UAAU;IAOrB,YAAY,MAA0B;QAJ9B,SAAI,GAAQ,EAAE,CAAC;QAEf,QAAG,GAA2B,EAAE,CAAC;QAGvC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,QAAQ,CAAC;IACnC,CAAC;IAED,GAAG,CAAC,OAAU;QACZ,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEhC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACjB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACzB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,OAAU;QACf,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEhC,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAChB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC;SAC1D;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CAAC,QAAuD,EAAE,OAAiB;QAChF,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC/C;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC7B;IACH,CAAC;IAED,MAAM,CAAC,QAA0D;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAC1B,CAAC;IAED,iBAAiB,CAAC,KAAa;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;CACF","file":"unique-list.js","sourcesContent":["import { identity } from '@visactor/vgrammar-util';\n\nexport class UniqueList<T> {\n  private idFunc: (val: T) => number;\n\n  private list: T[] = [];\n\n  private ids: Record<string, number> = {};\n\n  constructor(idFunc: (val: T) => number) {\n    this.idFunc = idFunc || identity;\n  }\n\n  add(element: T) {\n    const id = this.idFunc(element);\n\n    if (!this.ids[id]) {\n      this.ids[id] = 1;\n      this.list.push(element);\n    }\n    return this;\n  }\n\n  remove(element: T) {\n    const id = this.idFunc(element);\n\n    if (this.ids[id]) {\n      this.ids[id] = 0;\n      this.list = this.list.filter(entry => entry !== element);\n    }\n    return this;\n  }\n\n  forEach(callback: (entry: T, index?: number, arr?: T[]) => void, reverse?: boolean) {\n    if (reverse) {\n      this.list.slice().reverse().forEach(callback);\n    } else {\n      this.list.forEach(callback);\n    }\n  }\n\n  filter(callback: (entry: T, index?: number, arr?: T[]) => boolean) {\n    return this.list.filter(callback);\n  }\n\n  public get length() {\n    return this.list.length;\n  }\n\n  getElementByIndex(index: number) {\n    return this.list[index];\n  }\n}\n"]}