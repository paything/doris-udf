{"version":3,"sources":["../src/core/factory.ts"],"names":[],"mappings":"AAsBA,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAG/C,MAAM,OAAO,OAAO;IAclB,MAAM,CAAC,iBAAiB,CAAC,GAAW,EAAE,IAA0B;QAC9D,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,IAAY,EAAE,EAAW;QAC7C,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,eAAe,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACjD,OAAO,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,GAAW,EAAE,IAAsB;QACrD,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAY,EAAE,IAAW,EAAE,KAAkB;QAC7D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7C,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAY;QACzB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,GAAW,EAAE,SAAgC;QACpE,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,aAAqB,EAAE,IAAW,EAAE,KAAkB,EAAE,IAAkB;QAC/F,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,aAAqB;QACvC,OAAO,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,wBAAwB,CAAC,GAAW,EAAE,OAA6D;QACxG,OAAO,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,sBAAsB,CAAC,aAAqB,EAAE,KAAU,EAAE,OAA0B;QACzF,MAAM,WAAW,GAAG,OAAO,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QAE9D,IAAI,CAAC,WAAW,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QAED,OAAO,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAY,EAAE,SAAmC,EAAE,SAAmB;QAC7F,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IACzF,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,IAAY;QAC9B,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,2BAA2B;QAChC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC9C,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE;gBACrE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;aAClC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,IAAY,EAAE,YAAqC,EAAE,OAAgB;QAC1F,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG;YACxB,YAAY,EAAE,YAAY;YAC1B,OAAO,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,IAAI;SACzB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,IAAY,EAAE,IAAW,EAAE,WAAmB;;QACjE,MAAM,IAAI,GAAG,MAAA,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,0CAAE,YAAY,CAAC;QAEnD,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,WAAW;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAkBD,MAAM,CAAC,QAAQ,CAAC,SAAiB;QAC/B,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IAiBD,MAAM,CAAC,iBAAiB,CAAC,eAAuB,EAAE,IAAW,EAAE,OAAa;QAC1E,MAAM,IAAI,GAAG,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,eAAuB;QAC3C,OAAO,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;IAClD,CAAC;;AA/Jc,kBAAU,GAAyC,EAAE,CAAC;AACtD,cAAM,GAAqC,EAAE,CAAC;AAC9C,mBAAW,GAA0C,EAAE,CAAC;AACxD,0BAAkB,GAAyE,EAAE,CAAC;AAC9F,mBAAW,GAA+B,EAAE,CAAC;AAC7C,iBAAS,GAA+E,EAAE,CAAC;AAC3F,eAAO,GAAyC,EAAE,CAAC;AACnD,mBAAW,GAA2E,EAAE,CAAC;AACzF,qBAAa,GAA4C,EAAE,CAAC;AAC5D,iBAAS,GAAgE,EAAE,CAAC;AAE5E,0BAAkB,GAA2C,EAAE,CAAC;AAsGxE,qBAAa,GAAG,CACrB,SAAiB,EACjB,KAAuC,EACvC,QAA8F,EAC9F,cAAoC,EACpC,mBAAuC,EACQ,EAAE;IACjD,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,SAAS,CACxC,KAAK,EACL,QAAQ,EACR,cAAc,EACd,mBAAmB,CACpB,CAAC;IACF,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACpC,CAAC,CAAC;AAMK,6BAAqB,GAAG,CAC7B,aAAqB,EACrB,SAAiE,EAC3D,EAAE;IACR,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC;AACjD,CAAC,CAAC;AAEK,wBAAgB,GAAG,CAAC,aAAqB,EAAE,EAAE;IAClD,OAAO,OAAO,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;AAC5C,CAAC,CAAC;AAEK,2BAAmB,GAAG,CAAC,eAAuB,EAAE,WAAoC,EAAE,EAAE;IAC7F,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,GAAG,WAAW,CAAC;AACvD,CAAC,CAAC;AAeK,uBAAe,GAAG,CAAC,WAAmB,EAAE,OAAoD,EAAE,EAAE;IACrG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;AAC3C,CAAC,CAAC;AAEK,sBAAc,GAAG,CAAC,WAAmB,EAAE,EAAE;IAC9C,OAAO,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AACxC,CAAC,CAAC;AAEK,qBAAa,GAAG,CAAC,WAAmB,EAAE,UAA8B,EAAE,EAAE;IAC7E,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/C,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,IAAI,CAAC;KACb;IACD,OAAO,OAAO,CAAC,UAAU,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEK,6BAAqB,GAAG,CAAC,MAAsE,EAAE,EAAE;IACxG,OAAO,CAAC,aAAa,GAAG,MAAM,CAAC;AACjC,CAAC,CAAC;AAEK,wBAAgB,GAAG,GAAG,EAAE;IAC7B,OAAO,OAAO,CAAC,aAAa,CAAC;AAC/B,CAAC,CAAC;AAEK,gCAAwB,GAAG,CAAC,IAAY,EAAE,MAA8B,EAAE,EAAE;IACjF,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;AAC5C,CAAC,CAAC;AAEK,2BAAmB,GAAG,CAAC,IAAY,EAAE,EAAE;IAC5C,OAAO,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC,CAAC","file":"factory.js","sourcesContent":["import type { IGraphic, IGraphicAttribute } from '@visactor/vrender-core';\nimport type {\n  GlyphChannelEncoder,\n  GlyphDefaultEncoder,\n  IComponentConstructor,\n  IElement,\n  IGlyphElement,\n  IGlyphMeta,\n  IGrammarBaseConstructor,\n  IGroupMark,\n  IInteractionConstructor,\n  ILayoutOptions,\n  IMark,\n  IMarkConstructor,\n  IPlotMarkConstructor,\n  ISemanticMark,\n  IStageEventPlugin,\n  ITransform,\n  IView,\n  MarkType,\n  TypeAnimation\n} from '../types';\nimport { GlyphMeta } from '../view/glyph-meta';\nimport type { ComponentOptions } from '@visactor/vrender-components';\n\nexport class Factory {\n  private static _plotMarks: Record<string, IPlotMarkConstructor> = {};\n  private static _marks: Record<string, IMarkConstructor> = {};\n  private static _components: Record<string, IComponentConstructor> = {};\n  private static _graphicComponents: Record<string, (attrs: any, options?: ComponentOptions) => IGraphic> = {};\n  private static _transforms: Record<string, ITransform> = {};\n  private static _grammars: Record<string, { grammarClass: IGrammarBaseConstructor; specKey: string }> = {};\n  private static _glyphs: Record<string, IGlyphMeta<any, any>> = {};\n  private static _animations: Record<string, TypeAnimation<IGlyphElement> | TypeAnimation<IElement>> = {};\n  private static _interactions: Record<string, IInteractionConstructor> = {};\n  private static _graphics: Record<string, (attributes: IGraphicAttribute) => IGraphic> = {};\n  private static defaultLayout: (marks: IMark[], options: ILayoutOptions, view: IView) => void;\n  private static _stageEventPlugins: Record<string, IStageEventPlugin<any>> = {};\n\n  static registerPlotMarks(key: string, mark: IPlotMarkConstructor) {\n    Factory._plotMarks[key] = mark;\n  }\n\n  static createPlotMark(type: string, id?: string): ISemanticMark<any, any> | null {\n    if (!Factory._plotMarks[type]) {\n      return null;\n    }\n    const MarkConstructor = Factory._plotMarks[type];\n    return new MarkConstructor(id);\n  }\n\n  static registerMark(key: string, mark: IMarkConstructor) {\n    Factory._marks[key] = mark;\n  }\n\n  static createMark(type: string, view: IView, group?: IGroupMark): IMark | null {\n    if (!Factory._marks[type]) {\n      return null;\n    }\n    const MarkConstructor = Factory._marks[type];\n    return new MarkConstructor(view, type, group);\n  }\n\n  static hasMark(type: string) {\n    return !!Factory._marks[type];\n  }\n\n  static getMark(type: string) {\n    return Factory._marks[type];\n  }\n\n  static registerComponent(key: string, component: IComponentConstructor) {\n    Factory._components[key] = component;\n  }\n\n  static createComponent(componentType: string, view: IView, group?: IGroupMark, mode?: '2d' | '3d') {\n    const Ctor = Factory._components[componentType];\n    if (!Ctor) {\n      return null;\n    }\n\n    return new Ctor(view, group, mode);\n  }\n\n  static hasComponent(componentType: string) {\n    return !!Factory._components[componentType];\n  }\n\n  static registerGraphicComponent(key: string, creator: (attrs: any, options?: ComponentOptions) => IGraphic) {\n    Factory._graphicComponents[key] = creator;\n  }\n\n  static createGraphicComponent(componentType: string, attrs: any, options?: ComponentOptions) {\n    const compCreator = Factory._graphicComponents[componentType];\n\n    if (!compCreator) {\n      return null;\n    }\n\n    return compCreator(attrs, options);\n  }\n\n  static registerTransform(type: string, transform: Omit<ITransform, 'type'>, isBuiltIn?: boolean) {\n    Factory._transforms[type] = Object.assign(transform, { type, isBuiltIn: !!isBuiltIn });\n  }\n\n  static getTransform(type: string) {\n    return Factory._transforms[type];\n  }\n\n  static unregisterRuntimeTransforms() {\n    Object.keys(Factory._transforms).forEach(type => {\n      if (Factory._transforms[type] && !Factory._transforms[type].isBuiltIn) {\n        Factory._transforms[type] = null;\n      }\n    });\n  }\n\n  static registerGrammar(type: string, grammarClass: IGrammarBaseConstructor, specKey?: string) {\n    Factory._grammars[type] = {\n      grammarClass: grammarClass,\n      specKey: specKey ?? type\n    };\n  }\n\n  static createGrammar(type: string, view: IView, grammarType: string) {\n    const Ctor = Factory._grammars[type]?.grammarClass;\n\n    if (!Ctor) {\n      return null;\n    }\n\n    return new Ctor(view, grammarType);\n  }\n\n  static getGrammars() {\n    return this._grammars;\n  }\n\n  static registerGlyph = <EncodeValuesType = any, GlyphConfigType = any>(\n    glyphType: string,\n    marks: { [markName: string]: MarkType },\n    encoders?: { [markName: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType> },\n    defaultEncoder?: GlyphDefaultEncoder,\n    progressiveChannels?: string | string[]\n  ): IGlyphMeta<EncodeValuesType, GlyphConfigType> => {\n    Factory._glyphs[glyphType] = new GlyphMeta<EncodeValuesType, GlyphConfigType>(\n      marks,\n      encoders,\n      defaultEncoder,\n      progressiveChannels\n    );\n    return Factory._glyphs[glyphType];\n  };\n\n  static getGlyph(glyphType: string): IGlyphMeta {\n    return Factory._glyphs[glyphType];\n  }\n\n  static registerAnimationType = (\n    animationType: string,\n    animation: TypeAnimation<IGlyphElement> | TypeAnimation<IElement>\n  ): void => {\n    Factory._animations[animationType] = animation;\n  };\n\n  static getAnimationType = (animationType: string) => {\n    return Factory._animations[animationType];\n  };\n\n  static registerInteraction = (interactionType: string, interaction: IInteractionConstructor) => {\n    Factory._interactions[interactionType] = interaction;\n  };\n\n  static createInteraction(interactionType: string, view: IView, options?: any) {\n    const Ctor = Factory._interactions[interactionType];\n    if (!Ctor) {\n      return null;\n    }\n\n    return new Ctor(view, options);\n  }\n\n  static hasInteraction(interactionType: string) {\n    return !!Factory._interactions[interactionType];\n  }\n\n  static registerGraphic = (graphicType: string, creator: (attributes: IGraphicAttribute) => IGraphic) => {\n    Factory._graphics[graphicType] = creator;\n  };\n\n  static getGraphicType = (graphicType: string) => {\n    return Factory._graphics[graphicType];\n  };\n\n  static createGraphic = (graphicType: string, attributes?: IGraphicAttribute) => {\n    const creator = Factory._graphics[graphicType];\n    if (!creator) {\n      return null;\n    }\n    return creator(attributes);\n  };\n\n  static registerDefaultLayout = (layout: (marks: IMark[], options: ILayoutOptions, view: IView) => void) => {\n    Factory.defaultLayout = layout;\n  };\n\n  static getDefaultLayout = () => {\n    return Factory.defaultLayout;\n  };\n\n  static registerStageEventPlugin = (type: string, Plugin: IStageEventPlugin<any>) => {\n    Factory._stageEventPlugins[type] = Plugin;\n  };\n\n  static getStageEventPlugin = (type: string) => {\n    return Factory._stageEventPlugins[type];\n  };\n}\n"]}