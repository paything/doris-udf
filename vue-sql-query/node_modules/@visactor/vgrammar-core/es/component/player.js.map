{"version":3,"sources":["../src/component/player.ts"],"names":[],"mappings":"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","file":"player.js","sourcesContent":["import { isArray, isString, merge, mixin } from '@visactor/vutils';\nimport type { IGraphic } from '@visactor/vrender-core';\nimport type { ContinuousPlayerAttributes, DiscretePlayerAttributes } from '@visactor/vrender-components';\n// eslint-disable-next-line no-duplicate-imports\n// eslint-disable-next-line no-duplicate-imports\nimport { ContinuousPlayer, DiscretePlayer } from '@visactor/vrender-components';\nimport type {\n  BaseSingleEncodeSpec,\n  IData,\n  IElement,\n  IGroupMark,\n  ITheme,\n  IView,\n  Nil,\n  RecursivePartial,\n  StateEncodeSpec\n} from '../types';\nimport { ComponentEnum, PlayerEnum } from '../graph';\nimport type { IPlayer, PlayerFilterValue, PlayerSpec, PlayerType } from '../types/component';\nimport { Component } from '../view/component';\nimport { invokeEncoder } from '../graph/mark/encode';\nimport { Factory } from '../core/factory';\nimport { PlayerFilter } from '../interactions/player-filter';\nimport { Filter, FilterMixin } from '../interactions/filter';\n\nexport const generateContinuousPlayerAttributes = (\n  data: any[],\n  theme?: ITheme,\n  addition?: RecursivePartial<ContinuousPlayerAttributes>\n): ContinuousPlayerAttributes => {\n  const playerTheme = theme?.components?.continuousPlayer;\n  return merge({}, playerTheme, { data, dataIndex: 0 }, addition ?? {});\n};\n\nexport const generateDiscretePlayerAttributes = (\n  data: any[],\n  theme?: ITheme,\n  addition?: RecursivePartial<DiscretePlayerAttributes>\n): DiscretePlayerAttributes => {\n  const playerTheme = theme?.components?.discretePlayer;\n  return merge({}, playerTheme, { data, dataIndex: 0 }, addition ?? {});\n};\n\nexport class Player extends Component implements IPlayer {\n  static readonly componentType: string = ComponentEnum.player;\n  protected declare spec: PlayerSpec;\n  protected declare _filterValue: PlayerFilterValue;\n\n  private _playerComponentType: keyof typeof PlayerEnum;\n\n  constructor(view: IView, group?: IGroupMark) {\n    super(view, ComponentEnum.player, group);\n    this.spec.componentType = ComponentEnum.player;\n    this.spec.playerType = 'auto';\n  }\n\n  protected parseAddition(spec: PlayerSpec) {\n    super.parseAddition(spec);\n    this.playerType(spec.playerType);\n    this.source(spec.source);\n    return this;\n  }\n\n  playerType(playerType: PlayerType) {\n    this.spec.playerType = playerType;\n    // clear legend type when spec is changed\n    this._playerComponentType = null;\n    this._prepareRejoin();\n    this.commit();\n    return this;\n  }\n\n  source(source: IData | string | any[] | Nil) {\n    if (this.spec.source) {\n      const lastSource = this.spec?.source;\n      const lastSourceDataGrammar = isArray(lastSource)\n        ? null\n        : isString(lastSource)\n        ? this.view.getDataById(lastSource)\n        : lastSource;\n      this.detach(lastSourceDataGrammar);\n    }\n    this.spec.source = source;\n    const sourceDataGrammar = isArray(source) ? null : isString(source) ? this.view.getDataById(source) : source;\n    this.attach(sourceDataGrammar);\n    this.commit();\n    return this;\n  }\n\n  play() {\n    // FIXME: unite IDiscretePlayer and IContinuousPlayer interface in vis-component\n    const player = this.getGroupGraphicItem() as unknown as DiscretePlayer;\n    player.play();\n    return this;\n  }\n\n  pause() {\n    // FIXME: unite IDiscretePlayer and IContinuousPlayer interface in vis-component\n    const player = this.getGroupGraphicItem() as unknown as DiscretePlayer;\n    player.pause();\n    return this;\n  }\n\n  backward() {\n    // FIXME: unite IDiscretePlayer and IContinuousPlayer interface in vis-component\n    const player = this.getGroupGraphicItem() as unknown as DiscretePlayer;\n    player.backward();\n    return this;\n  }\n\n  forward() {\n    // FIXME: unite IDiscretePlayer and IContinuousPlayer interface in vis-component\n    const player = this.getGroupGraphicItem() as unknown as DiscretePlayer;\n    player.forward();\n    return this;\n  }\n\n  addGraphicItem(attrs: any, groupKey?: string, newGraphicItem?: any) {\n    // FIXME: vis-component should handle the situation when handlerStyle is not set\n    const defaultAttributes = { slider: { handlerStyle: { size: 16 } } };\n    const initialAttributes = merge(defaultAttributes, attrs);\n    const graphicItem =\n      newGraphicItem ??\n      Factory.createGraphicComponent(this._getPlayerComponentType(), initialAttributes, {\n        skipDefault: this.spec.skipTheme\n      });\n    return super.addGraphicItem(initialAttributes, groupKey, graphicItem);\n  }\n\n  protected _updateComponentEncoders() {\n    const encoders = Object.assign({ update: {} }, this.spec.encode);\n    const componentEncoders: StateEncodeSpec = Object.keys(encoders).reduce((res, state) => {\n      const encoder = encoders[state];\n      if (encoder) {\n        res[state] = {\n          callback: (datum: any, element: IElement, parameters: any) => {\n            const theme = this.spec.skipTheme ? null : this.view.getCurrentTheme();\n            const addition = invokeEncoder(encoder as BaseSingleEncodeSpec, datum, element, parameters);\n            const source = this.spec.source;\n            const sourceDataGrammar = isArray(source)\n              ? null\n              : isString(source)\n              ? this.view.getDataById(source)\n              : source;\n            const sourceData = isArray(source) ? source : sourceDataGrammar?.getValue() ?? [];\n            switch (this._getPlayerComponentType()) {\n              case 'continuousPlayer':\n                return generateContinuousPlayerAttributes(sourceData, theme, addition);\n              case 'discretePlayer':\n                return generateDiscretePlayerAttributes(sourceData, theme, addition);\n            }\n          }\n        };\n      }\n      return res;\n    }, {});\n    this._encoders = componentEncoders;\n  }\n\n  private _getPlayerComponentType() {\n    if (this._playerComponentType) {\n      return this._playerComponentType;\n    }\n\n    // compute legend component type when needed\n    if (!this.spec.playerType || this.spec.playerType === 'auto') {\n      // const scaleGrammar = isString(this.spec.scale) ? this.view.getScaleById(this.spec.scale) : this.spec.scale;\n      // const scaleType = scaleGrammar?.getScaleType?.();\n      // if (scaleType && isContinuous(scaleType)) {\n      //   const range: any[] = scaleGrammar.getScale().range();\n      //   if (parseColor(range?.[0])) {\n      //     this._legendComponentType = LegendEnum.colorLegend;\n      //   } else {\n      //     this._legendComponentType = LegendEnum.sizeLegend;\n      //   }\n      // } else {\n      //   this._legendComponentType = LegendEnum.discreteLegend;\n      // }\n      this._playerComponentType = 'discretePlayer';\n    } else {\n      this._playerComponentType =\n        this.spec.playerType === 'discrete'\n          ? 'discretePlayer'\n          : this.spec.playerType === 'continuous'\n          ? 'continuousPlayer'\n          : 'discretePlayer';\n    }\n    return this._playerComponentType;\n  }\n}\n\nexport const registerPlayer = () => {\n  Factory.registerGraphicComponent(\n    PlayerEnum.continuousPlayer,\n    (attrs: ContinuousPlayerAttributes) => new ContinuousPlayer(attrs) as unknown as IGraphic\n  );\n  Factory.registerGraphicComponent(\n    PlayerEnum.discretePlayer,\n    (attrs: DiscretePlayerAttributes) => new DiscretePlayer(attrs) as unknown as IGraphic\n  );\n\n  Factory.registerComponent(ComponentEnum.player, Player);\n\n  mixin(Filter, FilterMixin);\n  Factory.registerInteraction(PlayerFilter.type, PlayerFilter);\n};\n"]}