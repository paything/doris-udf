{"version":3,"sources":["../src/component/grid.ts"],"names":[],"mappings":"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","file":"grid.js","sourcesContent":["import { isString, merge } from '@visactor/vutils';\nimport type { IGraphic } from '@visactor/vrender-core';\nimport type { CircleAxisGridAttributes, ComponentOptions, LineAxisGridAttributes } from '@visactor/vrender-components';\n// eslint-disable-next-line no-duplicate-imports\nimport { CircleAxisGrid, LineAxisGrid } from '@visactor/vrender-components';\nimport type { IBaseScale } from '@visactor/vscale';\nimport type {\n  BaseSingleEncodeSpec,\n  IElement,\n  IGroupMark,\n  IScale,\n  ITheme,\n  IView,\n  MarkFunctionType,\n  MarkRelativeItemSpec,\n  Nil,\n  RecursivePartial,\n  SimpleSignalType,\n  StateEncodeSpec\n} from '../types';\nimport { AxisEnum, ComponentEnum, GridEnum } from '../graph/enums';\nimport type { GridShape, GridSpec, AxisType, IAxis, IGrid } from '../types/component';\nimport { ScaleComponent } from './scale';\nimport { invokeEncoder } from '../graph/mark/encode';\nimport { invokeFunctionType } from '../parse/util';\nimport { generateCoordinateAxisAttribute } from './axis';\nimport { Factory } from '../core/factory';\n\nexport const generateLineAxisGridAttributes = (\n  scale: IBaseScale,\n  theme?: ITheme,\n  addition?: RecursivePartial<LineAxisGridAttributes>,\n  tickCount?: number\n): LineAxisGridAttributes => {\n  const gridTheme = theme?.components?.grid ?? {};\n  if (!scale) {\n    return merge({}, gridTheme, addition ?? {});\n  }\n  const tickData = scale.tickData?.(tickCount) ?? [];\n  const items = tickData.map(tick => ({\n    id: tick.index,\n    label: tick.tick,\n    value: tick.value,\n    rawValue: tick.tick\n  }));\n  return merge({}, gridTheme, { items }, addition ?? {});\n};\n\nexport const generateCircleAxisGridAttributes = (\n  scale: IBaseScale,\n  theme?: ITheme,\n  addition?: RecursivePartial<CircleAxisGridAttributes>,\n  tickCount?: number\n): CircleAxisGridAttributes => {\n  const gridTheme = theme?.components?.circleGrid ?? {};\n  if (!scale) {\n    return merge({}, gridTheme, addition ?? {});\n  }\n  const tickData = scale.tickData?.(tickCount) ?? [];\n  const items = tickData.map(tick => ({\n    id: tick.index,\n    label: tick.tick,\n    value: tick.value,\n    rawValue: tick.tick\n  }));\n  return merge({}, gridTheme, { items }, addition ?? {});\n};\n\nexport class Grid extends ScaleComponent implements IGrid {\n  static readonly componentType: string = ComponentEnum.grid;\n  protected declare spec: GridSpec;\n\n  protected mode?: '2d' | '3d';\n\n  private _gridComponentType: keyof typeof GridEnum;\n  private _targetAxis: IAxis;\n\n  constructor(view: IView, group?: IGroupMark, mode?: '2d' | '3d') {\n    super(view, ComponentEnum.grid, group);\n    this.spec.componentType = ComponentEnum.grid;\n    this.mode = mode;\n  }\n\n  protected parseAddition(spec: GridSpec) {\n    super.parseAddition(spec);\n    this.target(spec.target);\n    this.gridType(spec.gridType);\n    this.gridShape(spec.gridShape);\n    return this;\n  }\n\n  scale(scale?: IScale | string | Nil) {\n    super.scale(scale);\n    this._gridComponentType = null;\n    return this;\n  }\n\n  gridType(gridType: AxisType | Nil) {\n    this.spec.gridType = gridType;\n    this._gridComponentType = null;\n    this._prepareRejoin();\n    this.commit();\n    return this;\n  }\n\n  gridShape(gridShape: GridShape | Nil) {\n    this.spec.gridShape = gridShape;\n    // no need to rejoin when gridShape is updated\n    // this._gridComponentType = null;\n    // this._prepareRejoin();\n    this.commit();\n    return this;\n  }\n\n  target(axis: IAxis | string | Nil) {\n    if (this.spec.target) {\n      const prevAxis = isString(this.spec.target)\n        ? (this.view.getMarkById(this.spec.target) as IAxis)\n        : this.spec.target;\n      this.detach(prevAxis);\n    }\n    this.spec.target = axis;\n    const nextAxis = isString(axis) ? (this.view.getMarkById(axis) as IAxis) : axis;\n    this.attach(nextAxis);\n    this._targetAxis = nextAxis;\n\n    // clear grid type when target is updated\n    this._gridComponentType = null;\n    this._updateComponentEncoders();\n\n    this.commit();\n    return this;\n  }\n\n  tickCount(tickCount: SimpleSignalType<number> | Nil) {\n    const scaleGrammar = isString(this.spec.scale) ? this.view.getScaleById(this.spec.scale) : this.spec.scale;\n\n    if (scaleGrammar) {\n      scaleGrammar.tickCount(tickCount);\n    }\n\n    return this.setFunctionSpec(tickCount, 'tickCount');\n  }\n\n  inside(inside: MarkFunctionType<boolean> | Nil) {\n    return this.setFunctionSpec(inside, 'inside');\n  }\n\n  baseValue(baseValue: MarkFunctionType<number> | Nil) {\n    return this.setFunctionSpec(baseValue, 'baseValue');\n  }\n\n  addGraphicItem(attrs: any, groupKey?: string) {\n    const defaultAttributes = { x: 0, y: 0, start: { x: 0, y: 0 }, end: { x: 0, y: 0 } };\n    const initialAttributes = merge(defaultAttributes, attrs);\n    const graphicItem = Factory.createGraphicComponent(this._getGridComponentType(), initialAttributes, {\n      mode: this.mode,\n      skipDefault: this.spec.skipTheme\n    });\n    return super.addGraphicItem(initialAttributes, groupKey, graphicItem);\n  }\n\n  protected _updateComponentEncoders() {\n    const encoders = Object.assign({ update: {} }, this.spec.encode);\n    const componentEncoders: StateEncodeSpec = Object.keys(encoders).reduce((res, state) => {\n      const encoder = encoders[state];\n      if (encoder) {\n        res[state] = {\n          callback: (datum: any, element: IElement, parameters: any) => {\n            const theme = this.spec.skipTheme ? null : this.view.getCurrentTheme();\n            let addition = invokeEncoder(encoder as BaseSingleEncodeSpec, datum, element, parameters);\n            let scaleGrammar: IScale;\n            const baseValue = invokeFunctionType(this.spec.baseValue, parameters, datum, element);\n\n            // get attributes from target axis\n            if (this._targetAxis) {\n              const targetScale = this._targetAxis.getSpec()?.scale as IScale | string | Nil;\n              scaleGrammar = isString(targetScale) ? this.view.getScaleById(targetScale) : targetScale;\n\n              const targetElement = this._targetAxis.elements[0];\n              if (targetElement) {\n                switch (this._getGridComponentType()) {\n                  case GridEnum.lineAxisGrid:\n                    addition = Object.assign(\n                      {\n                        x: targetElement.getGraphicAttribute('x'),\n                        y: targetElement.getGraphicAttribute('y'),\n                        start: targetElement.getGraphicAttribute('start'),\n                        end: targetElement.getGraphicAttribute('end'),\n                        verticalFactor: targetElement.getGraphicAttribute('verticalFactor') ?? 1\n                      },\n                      addition\n                    );\n                    break;\n                  case GridEnum.circleAxisGrid:\n                    addition = Object.assign(\n                      {\n                        x: targetElement.getGraphicAttribute('x'),\n                        y: targetElement.getGraphicAttribute('y'),\n                        center: targetElement.getGraphicAttribute('center'),\n                        radius: targetElement.getGraphicAttribute('radius'),\n                        innerRadius: targetElement.getGraphicAttribute('innerRadius'),\n                        inside: targetElement.getGraphicAttribute('inside'),\n                        startAngle: targetElement.getGraphicAttribute('startAngle'),\n                        endAngle: targetElement.getGraphicAttribute('endAngle')\n                      },\n                      addition\n                    );\n                    break;\n                }\n              }\n            }\n            // compute attribute by spec\n            else {\n              scaleGrammar = isString(this.spec.scale) ? this.view.getScaleById(this.spec.scale) : this.spec.scale;\n              const inside = invokeFunctionType(this.spec.inside, parameters, datum, element);\n\n              const coordinate = scaleGrammar?.getCoordinate?.();\n              if (coordinate) {\n                addition = Object.assign(\n                  generateCoordinateAxisAttribute(\n                    scaleGrammar,\n                    coordinate,\n                    inside,\n                    baseValue,\n                    this.spec.layout as MarkRelativeItemSpec,\n                    true\n                  ),\n                  addition\n                );\n              }\n            }\n\n            // compute addition shape attributes for line grid\n            if (this._getGridComponentType() === GridEnum.lineAxisGrid) {\n              if (this.spec.gridShape === 'line' || !this.spec.gridShape) {\n                // set axis type\n                addition = Object.assign({}, addition, { type: 'line' });\n              } else {\n                // set addition length & axis type\n                addition = Object.assign(\n                  {\n                    center: addition.start,\n                    closed: true\n                  },\n                  addition,\n                  { type: this.spec.gridShape }\n                );\n              }\n            }\n\n            const scale = scaleGrammar?.getScale?.();\n            const tickCount = invokeFunctionType(this.spec.tickCount, parameters, datum, element);\n            switch (this._getGridComponentType()) {\n              case GridEnum.lineAxisGrid:\n                return generateLineAxisGridAttributes(scale, theme, addition, tickCount);\n              case GridEnum.circleAxisGrid:\n                return generateCircleAxisGridAttributes(scale, theme, addition, tickCount);\n            }\n            return addition;\n          }\n        };\n      }\n      return res;\n    }, {});\n    this._encoders = componentEncoders;\n  }\n\n  private _getGridComponentType() {\n    if (this._gridComponentType) {\n      return this._gridComponentType;\n    }\n\n    if (this.spec.gridType) {\n      switch (this.spec.gridType) {\n        case 'circle':\n          this._gridComponentType = GridEnum.circleAxisGrid;\n          break;\n        case 'line':\n        default:\n          this._gridComponentType = GridEnum.lineAxisGrid;\n      }\n    } else if (this._targetAxis) {\n      const axisComponentType = this._targetAxis.getAxisComponentType();\n      switch (axisComponentType) {\n        case AxisEnum.circleAxis:\n          this._gridComponentType = GridEnum.circleAxisGrid;\n          break;\n        case AxisEnum.lineAxis:\n        default:\n          this._gridComponentType = GridEnum.lineAxisGrid;\n      }\n    } else if (this.spec.scale) {\n      const scaleGrammar = isString(this.spec.scale) ? this.view.getScaleById(this.spec.scale) : this.spec.scale;\n      this._gridComponentType = scaleGrammar?.getCoordinate?.()\n        ? scaleGrammar.getCoordinateAxisPoints()\n          ? GridEnum.lineAxisGrid\n          : GridEnum.circleAxisGrid\n        : GridEnum.lineAxisGrid;\n    } else {\n      this._gridComponentType = GridEnum.lineAxisGrid;\n    }\n\n    return this._gridComponentType;\n  }\n}\n\nexport const registerGrid = () => {\n  Factory.registerGraphicComponent(\n    GridEnum.lineAxisGrid,\n    (attrs: LineAxisGridAttributes, options?: ComponentOptions) =>\n      new LineAxisGrid(attrs, options) as unknown as IGraphic\n  );\n\n  Factory.registerGraphicComponent(\n    GridEnum.circleAxisGrid,\n    (attrs: CircleAxisGridAttributes, options?: ComponentOptions) =>\n      new CircleAxisGrid(attrs, options) as unknown as IGraphic\n  );\n\n  Factory.registerComponent(ComponentEnum.grid, Grid);\n};\n\nexport const registerLineGrid = () => {\n  Factory.registerGraphicComponent(\n    GridEnum.lineAxisGrid,\n    (attrs: LineAxisGridAttributes, options?: ComponentOptions) =>\n      new LineAxisGrid(attrs, options) as unknown as IGraphic\n  );\n\n  Factory.registerComponent(ComponentEnum.grid, Grid);\n};\n\nexport const registerCircleGrid = () => {\n  Factory.registerGraphicComponent(\n    GridEnum.circleAxisGrid,\n    (attrs: CircleAxisGridAttributes, options?: ComponentOptions) =>\n      new CircleAxisGrid(attrs, options) as unknown as IGraphic\n  );\n\n  Factory.registerComponent(ComponentEnum.grid, Grid);\n};\n"]}