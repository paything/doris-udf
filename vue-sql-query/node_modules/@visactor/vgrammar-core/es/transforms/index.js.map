{"version":3,"sources":["../src/transforms/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,IAAI,YAAY,EAAE,MAAM,YAAY,CAAC;AACvD,OAAO,EAAE,SAAS,IAAI,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;AAC/D,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAE,SAAS,IAAI,YAAY,EAAE,MAAM,YAAY,CAAC;AACvD,OAAO,EAAE,SAAS,IAAI,YAAY,EAAE,MAAM,YAAY,CAAC;AACvD,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAE,SAAS,IAAI,aAAa,EAAE,MAAM,aAAa,CAAC;AACzD,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,MAAM,eAAe,CAAC;AAE7D,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAE,SAAS,IAAI,YAAY,EAAE,MAAM,YAAY,CAAC;AACvD,OAAO,EAAE,SAAS,IAAI,yBAAyB,EAAE,MAAM,0BAA0B,CAAC;AAElF,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAC/D,OAAO,EAAE,SAAS,IAAI,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAExE,OAAO,EAAE,SAAS,IAAI,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAErE,OAAO,EAAE,SAAS,IAAI,cAAc,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,EAAE,SAAS,IAAI,eAAe,EAAE,OAAO,IAAI,gBAAgB,EAAE,OAAO,IAAI,gBAAgB,EAAE,MAAM,eAAe,CAAC;AACvH,OAAO,EAAE,QAAQ,IAAI,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAChE,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAG1C,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,OAAO,CAAC,iBAAiB,CACvB,KAAK,EACL,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAA8B,EAChF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,OAAO,CAAC,iBAAiB,CACvB,SAAS,EACT,EAAE,SAAS,EAAE,gBAAgB,EAAE,SAAS,EAAE,YAAY,EAA8B,EACpF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,CAAC,iBAAiB,CACvB,MAAM,EACN,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,YAAY,EAA8B,EACjF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,OAAO,CAAC,iBAAiB,CACvB,QAAQ,EACR,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAA8B,EACnF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,CAAC,iBAAiB,CACvB,MAAM,EACN,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,YAAY,EAA8B,EACjF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,OAAO,CAAC,iBAAiB,CACvB,KAAK,EACL,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAA8B,EAChF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,OAAO,CAAC,iBAAiB,CACvB,KAAK,EACL,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAA8B,EAChF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,CAAC,iBAAiB,CACvB,MAAM,EACN,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,YAAY,EAA8B,EACjF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,OAAO,CAAC,iBAAiB,CACvB,OAAO,EACP,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,YAAY,EAA8B,EAClF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,OAAO,CAAC,iBAAiB,CACvB,OAAO,EACP,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,YAAY,EAA8B,EAClF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,OAAO,CAAC,iBAAiB,CACvB,QAAQ,EACR,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAA8B,EACnF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,GAAG,EAAE;IACvC,OAAO,CAAC,iBAAiB,CACvB,KAAK,EACL,EAAE,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAA8B,EAChF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iCAAiC,GAAG,GAAG,EAAE;IACpD,OAAO,CAAC,iBAAiB,CACvB,kBAAkB,EAClB,EAAE,SAAS,EAAE,yBAAyB,EAAE,SAAS,EAAE,YAAY,EAA8B,EAC7F,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,CAAC,iBAAiB,CACvB,MAAM,EACN,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,YAAY,EAA8B,EACjF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,OAAO,CAAC,iBAAiB,CACvB,QAAQ,EACR,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAA8B,EACnF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,GAAG,EAAE;IAC9C,OAAO,CAAC,iBAAiB,CACvB,YAAY,EACZ,EAAE,SAAS,EAAE,mBAAmB,EAAE,SAAS,EAAE,YAAY,EAA8B,EACvF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,OAAO,CAAC,iBAAiB,CACvB,UAAU,EACV,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,aAAa,EAA8B,EACpF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG,GAAG,EAAE;IAC/C,OAAO,CAAC,iBAAiB,CACvB,aAAa,EACb,EAAE,SAAS,EAAE,oBAAoB,EAAE,SAAS,EAAE,aAAa,EAA8B,EACzF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACzC,OAAO,CAAC,iBAAiB,CACvB,OAAO,EACP,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,kBAAkB,EAA8B,EACxF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,GAAG,EAAE;IAC1C,OAAO,CAAC,iBAAiB,CACvB,QAAQ,EACR,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,kBAAkB,EAA8B,EACzF,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,OAAO,CAAC,iBAAiB,CACvB,SAAS,EACT,EAAE,SAAS,EAAE,gBAAgB,EAAE,SAAS,EAAE,kBAAkB,EAA8B,EAC1F,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE;IAC3C,OAAO,CAAC,iBAAiB,CACvB,SAAS,EACT,EAAE,SAAS,EAAE,gBAAgB,EAAE,SAAS,EAAE,kBAAkB,EAA8B,EAC1F,IAAI,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,GAAG,EAAE;IAC5C,OAAO,CAAC,iBAAiB,CACvB,UAAU,EACV,EAAE,SAAS,EAAE,iBAAiB,EAAE,SAAS,EAAE,kBAAkB,EAA8B,EAC3F,IAAI,CACL,CAAC;AACJ,CAAC,CAAC","file":"index.js","sourcesContent":["import { transform as binTransform } from './data/bin';\nimport { transform as contourTransform } from './data/contour';\nimport { transform as sortTransform } from './data/sort';\nimport { transform as filterTransform } from './data/filter';\nimport { transform as mapTransform } from './data/map';\nimport { transform as kdeTransform } from './data/kde';\nimport { transform as joinTransform } from './data/join';\nimport { transform as pickTransform } from './data/pick';\nimport { transform as rangeTransform } from './data/range';\nimport { transform as stackTransform } from './data/stack';\nimport { transform as foldTransform } from './data/fold';\nimport { transform as unfoldTransform } from './data/unfold';\n\nimport { transform as funnelTransform } from './data/funnel';\nimport { transform as pieTransform } from './data/pie';\nimport { transform as circularRelationTransform } from './data/circular-relation';\n\nimport { transform as sampleTransform } from './data/sampling';\nimport { transform as markoverlapTransform } from './mark/mark-overlap';\n\nimport { transform as identifierTransform } from './view/identifier';\n\nimport { transform as dodgeTransform } from './mark/dodge';\nimport { transform as jitterTransform, jitterX as jitterXTransform, jitterY as jitterYTransform } from './mark/jitter';\nimport { symmetry as symmetryTransform } from './mark/symmetry';\nimport { Factory } from '../core/factory';\nimport type { ITransform } from '../types';\n\nexport const registerBinTransform = () => {\n  Factory.registerTransform(\n    'bin',\n    { transform: binTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerContourTransform = () => {\n  Factory.registerTransform(\n    'contour',\n    { transform: contourTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerSortTransform = () => {\n  Factory.registerTransform(\n    'sort',\n    { transform: sortTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerFilterTransform = () => {\n  Factory.registerTransform(\n    'filter',\n    { transform: filterTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerJoinTransform = () => {\n  Factory.registerTransform(\n    'join',\n    { transform: joinTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerKdeTransform = () => {\n  Factory.registerTransform(\n    'kde',\n    { transform: kdeTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerMapTransform = () => {\n  Factory.registerTransform(\n    'map',\n    { transform: mapTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerPickTransform = () => {\n  Factory.registerTransform(\n    'pick',\n    { transform: pickTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerRangeTransform = () => {\n  Factory.registerTransform(\n    'range',\n    { transform: rangeTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerStackTransform = () => {\n  Factory.registerTransform(\n    'stack',\n    { transform: stackTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerFunnelTransform = () => {\n  Factory.registerTransform(\n    'funnel',\n    { transform: funnelTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerPieTransform = () => {\n  Factory.registerTransform(\n    'pie',\n    { transform: pieTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerCircularRelationTransform = () => {\n  Factory.registerTransform(\n    'circularRelation',\n    { transform: circularRelationTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerFoldTransform = () => {\n  Factory.registerTransform(\n    'fold',\n    { transform: foldTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerUnfoldTransform = () => {\n  Factory.registerTransform(\n    'unfold',\n    { transform: unfoldTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerIdentifierTransform = () => {\n  Factory.registerTransform(\n    'identifier',\n    { transform: identifierTransform, markPhase: 'beforeJoin' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerSampleTransform = () => {\n  Factory.registerTransform(\n    'sampling',\n    { transform: sampleTransform, markPhase: 'afterEncode' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerMarkOverlapTransform = () => {\n  Factory.registerTransform(\n    'markoverlap',\n    { transform: markoverlapTransform, markPhase: 'afterEncode' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerDodgeTransform = () => {\n  Factory.registerTransform(\n    'dodge',\n    { transform: dodgeTransform, markPhase: 'afterEncodeItems' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerJitterTransform = () => {\n  Factory.registerTransform(\n    'jitter',\n    { transform: jitterTransform, markPhase: 'afterEncodeItems' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerJitterXTransform = () => {\n  Factory.registerTransform(\n    'jitterX',\n    { transform: jitterXTransform, markPhase: 'afterEncodeItems' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerJitterYTransform = () => {\n  Factory.registerTransform(\n    'jitterY',\n    { transform: jitterYTransform, markPhase: 'afterEncodeItems' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n\nexport const registerSymmetryTransform = () => {\n  Factory.registerTransform(\n    'symmetry',\n    { transform: symmetryTransform, markPhase: 'afterEncodeItems' } as Omit<ITransform, 'type'>,\n    true\n  );\n};\n"]}