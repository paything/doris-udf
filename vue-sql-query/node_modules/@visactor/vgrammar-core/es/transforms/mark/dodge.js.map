{"version":3,"sources":["../src/transforms/mark/dodge.ts"],"names":[],"mappings":"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","file":"dodge.js","sourcesContent":["import type { DodgeTransformOptions, IElement } from '../../types';\nimport { array, isNil } from '@visactor/vutils';\nimport { getter, toPercent } from '@visactor/vgrammar-util';\nimport { getBandWidthOfScale, isBandLikeScale } from '../../util/scale';\n\n/**\n * 针对mark的dodge变换，支持x、y方向\n */\nexport const transform = (options: DodgeTransformOptions, upstreamData: IElement[]) => {\n  if (!upstreamData || upstreamData.length === 0 || !upstreamData[0]?.mark) {\n    return upstreamData;\n  }\n  const mark = upstreamData[0].mark;\n  const markScales = mark.getScales();\n  const bandScale = Object.values(markScales).find(isBandLikeScale);\n\n  if (!bandScale) {\n    return upstreamData;\n  }\n\n  const scales = mark.getScalesByChannel();\n  const bandWidth = getBandWidthOfScale(bandScale);\n  const dodgeChannel = isNil(options.dodgeChannel)\n    ? scales.y === bandScale ||\n      scales.y1 === bandScale ||\n      (scales.x && !isBandLikeScale(scales.x)) ||\n      (scales.x1 && !isBandLikeScale(scales.x1))\n      ? 'y'\n      : 'x'\n    : options.dodgeChannel;\n\n  if (bandWidth > 0) {\n    const innerGap = options.innerGap ?? 0;\n    const categoryGap = options.categoryGap ?? '20%';\n    let getDodgeBy = (element: IElement) => element.groupKey;\n\n    if (!isNil(options.dodgeBy)) {\n      const getDodgeValue = getter(array(options.dodgeBy));\n\n      getDodgeBy = (element: IElement) => getDodgeValue(element.getDatum());\n    }\n\n    const groupValues: any[] = [];\n\n    upstreamData.forEach(element => {\n      const groupValue = getDodgeBy(element);\n      if (!groupValues.includes(groupValue)) {\n        groupValues.push(groupValue);\n      }\n    });\n\n    const groupCount = groupValues.length;\n\n    if (groupCount < 1) {\n      return upstreamData;\n    }\n\n    const catGap = toPercent(categoryGap, bandWidth);\n    let innerSize = catGap >= bandWidth ? bandWidth : bandWidth - catGap;\n    const innerGapSize = toPercent(innerGap, innerSize);\n    let size = (innerSize - Math.max(groupCount - 1, 0) * innerGapSize) / groupCount;\n\n    if (size > options.maxWidth) {\n      innerSize -= (size - options.maxWidth) * groupCount;\n      size = options.maxWidth;\n    } else if (size < options.minWidth && options.minWidth <= bandWidth / groupCount) {\n      innerSize += (options.minWidth - size) * groupCount;\n      size = options.minWidth;\n    }\n\n    const offsetByGroup = {};\n\n    groupValues.forEach((entry, index) => {\n      offsetByGroup[entry] = -innerSize / 2 + index * (size + innerGapSize);\n    });\n\n    const markType = mark.markType;\n\n    if (markType === 'rect' || markType === 'interval' || markType === 'arc') {\n      upstreamData.forEach(element => {\n        const groupValue = getDodgeBy(element);\n        const offset = offsetByGroup[groupValue];\n        const attrs = element.getItemAttribute();\n\n        if (dodgeChannel === 'x') {\n          const x = isNil(attrs.width) && !isNil(attrs.x1) ? Math.min(attrs.x, attrs.x1) : attrs.x;\n          const width = !isNil(attrs.width) ? attrs.width : isNil(attrs.x1) ? bandWidth : Math.abs(attrs.x1 - attrs.x);\n          const newAttrs: any = { x: x + width / 2 + offset };\n\n          if (!isNil(attrs.width)) {\n            newAttrs.width = size;\n          } else {\n            newAttrs.x1 = newAttrs.x + size;\n          }\n\n          element.setItemAttributes(newAttrs);\n        } else if (dodgeChannel === 'y') {\n          const y = isNil(attrs.height) && !isNil(attrs.y1) ? Math.min(attrs.y, attrs.y1) : attrs.y;\n          const height = !isNil(attrs.height)\n            ? attrs.height\n            : isNil(attrs.y1)\n            ? bandWidth\n            : Math.abs(attrs.y1 - attrs.y);\n\n          const newAttrs: any = { y: y + height / 2 + offset };\n\n          if (!isNil(attrs.height)) {\n            newAttrs.height = size;\n          } else {\n            newAttrs.y1 = newAttrs.y + size;\n          }\n\n          element.setItemAttributes(newAttrs);\n        }\n      });\n    } else {\n      upstreamData.forEach(element => {\n        const groupValue = getDodgeBy(element);\n        const offset = offsetByGroup[groupValue];\n\n        if (dodgeChannel === 'x') {\n          const x = element.getItemAttribute('x') + bandWidth / 2 + offset + size / 2;\n\n          element.setItemAttributes({ x });\n\n          if (markType === 'rule') {\n            element.setItemAttributes({ x1: x });\n          }\n        } else if (dodgeChannel === 'y') {\n          const y = element.getItemAttribute('y') + bandWidth / 2 + offset + size / 2;\n\n          element.setItemAttributes({ y });\n\n          if (markType === 'rule') {\n            element.setItemAttributes({ y1: y });\n          }\n        }\n      });\n    }\n  }\n\n  return upstreamData;\n};\n"]}