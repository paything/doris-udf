{"version":3,"sources":["../src/transforms/data/kde.ts"],"names":[],"mappings":"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","file":"kde.js","sourcesContent":["import type { IPointLike } from '@visactor/vutils';\n// eslint-disable-next-line no-duplicate-imports\nimport { PointService, array, isNumber, quantileSorted } from '@visactor/vutils';\nimport type { KDETransformOption } from '../../types';\n\nconst defaultBins = 256;\nconst defaultAs = ['x', 'kde'];\nconst defaultAs2d = ['x', 'y', 'kde'];\nconst SQRT2PI = Math.sqrt(Math.PI * 2);\nconst SQRT2PI2 = Math.sqrt((Math.PI * 2) ** 2);\n\n// Only use gauss kernel for now\nconst gaussKernel = (x: number, dimension: number = 1) => {\n  const sp = dimension === 1 ? SQRT2PI : dimension === 2 ? SQRT2PI2 : Math.sqrt((Math.PI * 2) ** dimension);\n  return Math.exp(-(x ** 2) / 2) / sp;\n};\n\n// A rule-of-thumb bandwidth estimator, referring to: https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator\nconst ruleOfThumbBandwidth = (data: IPointLike[], dimension: number = 1) => {\n  const n = data.length;\n  const sum = data.reduce((sum, datum) => sum + datum.x, 0);\n  const mean = sum / n;\n  const sd = Math.sqrt(data.reduce((v, datum) => v + (datum.x - mean) ** 2, 0) / n);\n  const sortedData = data.sort((a, b) => a.x - b.x).map(datum => datum.x);\n  const q1 = quantileSorted(sortedData, 0.25);\n  const q3 = quantileSorted(sortedData, 0.75);\n  const iqr = q3 - q1;\n  return 0.9 * Math.min(sd, iqr / 1.34) * n ** -0.2;\n  // OR:\n  // return 1.06 * sd * n ** -0.2;\n};\n\n// Adaptive bandwidth, referring to: https://www.osti.gov/biblio/1372602\nconst scottBandwidth = (data: IPointLike[], dimension: number = 1) => {\n  const n = data.length;\n  return n ** (-1 / (dimension + 4));\n};\n\n// referring to: https://en.wikipedia.org/wiki/Kernel_density_estimation#Definition\nconst kde1d = (targetDatum: IPointLike, data: IPointLike[], bandwidth: number) => {\n  const n = data.length;\n  const kSum = data.reduce((v, datum) => {\n    const distance = Math.abs(targetDatum.x - datum.x);\n    return v + gaussKernel(distance / bandwidth, 1);\n  }, 0);\n  return kSum / (n * bandwidth);\n};\n\n// referring to: https://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation#Definition\nconst kde2d = (targetDatum: IPointLike, data: IPointLike[], bandwidth: number) => {\n  const n = data.length;\n  // Notice here is h^2 which is different from kde1d\n  const khSum = data.reduce((v, datum) => {\n    const distance = PointService.distancePP(targetDatum, datum);\n    return v + gaussKernel(distance / bandwidth ** 2, 1);\n  }, 0);\n  return khSum / (n * bandwidth ** 2);\n};\n\nexport const transform = (options: KDETransformOption, upstreamData: any[]) => {\n  if (!upstreamData || upstreamData.length === 0) {\n    return upstreamData;\n  }\n  const dimension = options.dimension ?? '1d';\n  const field = array(options.field);\n  const bins = array(options.bins ?? defaultBins);\n  const as = array(options.as);\n\n  if (dimension === '1d') {\n    const data = upstreamData.map(datum => ({ x: datum[field[0]] } as IPointLike));\n    const bandwidth = options.bandwidth ?? ruleOfThumbBandwidth(data);\n    const min = data.reduce((min, datum) => Math.min(min, datum.x), data[0].x);\n    const max = data.reduce((max, datum) => Math.max(max, datum.x), data[0].x);\n\n    const extentMin = options.extent?.[0] ?? min;\n    const extentMax = options.extent?.[1] ?? max;\n    const extent = [\n      isNumber(extentMin) ? extentMin : extentMin.x ?? min,\n      isNumber(extentMax) ? extentMax : extentMax.x ?? max\n    ];\n    const step = (extent[1] - extent[0]) / bins[0];\n    const kdeResult = new Array(bins[0]).fill(0).map((v, index) => {\n      const value = Math.min(extent[0] + step * (index + 0.5), extent[1]);\n      return {\n        [as[0] ?? defaultAs[0]]: value,\n        [as[1] ?? defaultAs[0]]: kde1d({ x: value } as IPointLike, data, bandwidth)\n      };\n    });\n\n    return kdeResult;\n  } else if (dimension === '2d') {\n    const data = upstreamData.map(datum => ({ x: datum[field[0]], y: datum[field[1]] } as IPointLike));\n    const bandwidth = options.bandwidth || scottBandwidth(data, 2);\n\n    const min = data.reduce((min, datum) => ({ x: Math.min(min.x, datum.x), y: Math.min(min.y, datum.y) }), data[0]);\n    const max = data.reduce((max, datum) => ({ x: Math.max(max.x, datum.x), y: Math.max(max.y, datum.y) }), data[0]);\n\n    const extentMin = options.extent?.[0] ?? min;\n    const extentMax = options.extent?.[1] ?? max;\n    const extent = [\n      isNumber(extentMin) ? { x: extentMin, y: extentMin } : { x: extentMin.x ?? min.x, y: extentMin.y ?? min.y },\n      isNumber(extentMax) ? { x: extentMax, y: extentMax } : { x: extentMax.x ?? max.x, y: extentMax.y ?? max.y }\n    ];\n    const binsX = bins[0];\n    const binsY = bins[1] ?? bins[0];\n    const stepX = (extent[1].x - extent[0].x) / binsX;\n    const stepY = (extent[1].y - extent[0].y) / binsY;\n    const kdeResult: any[] = [];\n    for (let yIndex = 0; yIndex < binsY; yIndex++) {\n      for (let xIndex = 0; xIndex < binsX; xIndex++) {\n        const x = Math.min(extent[0].x + stepX * (xIndex + 0.5), extent[1].x);\n        const y = Math.min(extent[0].y + stepY * (yIndex + 0.5), extent[1].y);\n        kdeResult.push({\n          [as[0] ?? defaultAs2d[0]]: x,\n          [as[1] ?? defaultAs2d[1]]: y,\n          [as[2] ?? defaultAs2d[2]]: kde2d({ x, y }, data, bandwidth)\n        });\n      }\n    }\n    return kdeResult;\n  }\n\n  return [];\n};\n"]}