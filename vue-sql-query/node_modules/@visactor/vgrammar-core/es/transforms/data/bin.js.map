{"version":3,"sources":["../src/transforms/data/bin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAG3C,MAAM,WAAW,GAAG,EAAE,CAAC;AAEvB,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,OAA2B,EAAE,YAAmB,EAAE,EAAE;IAC5E,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9C,OAAO,YAAY,CAAC;KACrB;IAED,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;IACjC,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;IAC7E,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACpC,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;IAEpD,OAAO,YAAY,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;;QACtC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;QACzE,KAAK,CAAC,MAAA,MAAA,OAAO,CAAC,EAAE,0CAAG,CAAC,CAAC,mCAAI,UAAU,CAAC,GAAG,QAAQ,CAAC;QAChD,KAAK,CAAC,MAAA,MAAA,OAAO,CAAC,EAAE,0CAAG,CAAC,CAAC,mCAAI,QAAQ,CAAC,GAAG,MAAM,CAAC;QAC5C,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","file":"bin.js","sourcesContent":["import { isValid } from '@visactor/vutils';\nimport type { BinTransformOption } from '../../types';\n\nconst defaultBins = 10;\n\nexport const transform = (options: BinTransformOption, upstreamData: any[]) => {\n  if (!upstreamData || upstreamData.length === 0) {\n    return upstreamData;\n  }\n\n  const { extent, step } = options;\n  const bins = isValid(options.bins) ? Math.max(options.bins, 1) : defaultBins;\n  const range = extent[1] - extent[0];\n  const binStep = isValid(step) ? step : range / bins;\n\n  return upstreamData.map(upstreamDatum => {\n    const datum = Object.assign({}, upstreamDatum);\n    const value = upstreamDatum[options.field];\n    const binIndex = Math.floor((value - extent[0]) / binStep);\n    const binStart = extent[0] + binIndex * binStep;\n    const binEnd = Math.min(extent[1], extent[0] + (binIndex + 1) * binStep);\n    datum[options.as?.[0] ?? 'binStart'] = binStart;\n    datum[options.as?.[1] ?? 'binEnd'] = binEnd;\n    return datum;\n  });\n};\n"]}