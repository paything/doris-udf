{"version":3,"sources":["../src/transforms/data/sort.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAG9C,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,OAA6B,EAAE,YAAmB,EAAE,EAAE;IAC9E,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAE1B,IAAI,IAAI,IAAI,YAAY,EAAE;QACxB,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAEzE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,CAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KACrD;IAED,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","file":"sort.js","sourcesContent":["import { compare } from '@visactor/vgrammar-util';\nimport { isFunction } from '@visactor/vutils';\nimport type { SortTransformOptions } from '../../types';\n\nexport const transform = (options: SortTransformOptions, upstreamData: any[]) => {\n  const sort = options.sort;\n\n  if (sort && upstreamData) {\n    const sortFn = isFunction(sort) ? sort : compare(sort.field, sort.order);\n\n    upstreamData.sort((a: any, b: any) => sortFn(a, b));\n  }\n\n  return upstreamData;\n};\n"]}