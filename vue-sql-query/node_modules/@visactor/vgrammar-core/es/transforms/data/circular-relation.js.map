{"version":3,"sources":["../src/transforms/data/circular-relation.ts"],"names":[],"mappings":"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","file":"circular-relation.js","sourcesContent":["import { isNil, isNumber } from '@visactor/vutils';\nimport type { CircularRelationTransformOptions, CircularRelationItem } from '../../types';\nimport { field as getFieldAccessor, extent, parseViewBox, toPercent } from '@visactor/vgrammar-util';\n\nexport const transform = (options: CircularRelationTransformOptions, upstreamData: any[]): CircularRelationItem[] => {\n  if (!upstreamData || upstreamData.length === 0) {\n    return [];\n  }\n  const viewBox = parseViewBox(options);\n  const startAngle = options.startAngle ?? 0;\n  const endAngle = options.endAngle ?? Math.PI * 2;\n  const maxRadius = Math.max(viewBox.width / 2, viewBox.height / 2);\n  const innerRadius = toPercent(options.innerRadius ?? 0, maxRadius);\n  const outerRadius = toPercent(options.outerRadius, maxRadius);\n  const center = [\n    isNumber(options.center?.[0])\n      ? options.center[0]\n      : viewBox.x0 + toPercent(options.center?.[0] ?? '50%', viewBox.width),\n    isNumber(options.center?.[1])\n      ? options.center[1]\n      : viewBox.y0 + toPercent(options.center?.[1] ?? '50%', viewBox.height)\n  ] as [number, number];\n  const fieldAccessor = getFieldAccessor(options.field);\n  const values = upstreamData.map(fieldAccessor);\n  const [min, max] = extent(values);\n  const radiusScale =\n    min === max\n      ? (val: number) => (innerRadius + outerRadius) / 2\n      : (val: number) => innerRadius + ((outerRadius - innerRadius) * (val - min)) / (max - min);\n\n  const sizeAccessor = !isNil(options.radiusField) ? getFieldAccessor(options.radiusField) : fieldAccessor;\n  const defaultSize = options?.radiusRange?.[1] ?? 5;\n  let sizeScale = (datum: any) => defaultSize;\n\n  if (sizeAccessor) {\n    const [minSize, maxSize] = sizeAccessor !== fieldAccessor ? extent(upstreamData.map(sizeAccessor)) : [min, max];\n    const minR = options.radiusRange?.[0] ?? 5;\n    const maxR = options.radiusRange?.[1] ?? 5;\n\n    if (minSize !== maxSize) {\n      sizeScale = (datum: any) => minR + ((maxR - minR) * (sizeAccessor(datum) - minSize)) / (maxSize - minSize);\n    }\n  }\n\n  const minAngle = Math.min(startAngle, endAngle);\n  const maxAngle = Math.max(startAngle, endAngle);\n  const angles = getPartialAngles(minAngle, maxAngle, upstreamData.length);\n\n  const res: CircularRelationItem[] = [];\n  const searchStep = 60;\n  const searchAngle = (maxAngle - minAngle) / searchStep;\n\n  upstreamData.forEach((datum, index) => {\n    const radius = radiusScale(values[index] as number);\n    const size = sizeScale(datum);\n    let x: number;\n    let y: number;\n    let angle = angles[index];\n\n    for (let i = 0; i < searchStep; i++) {\n      x = center[0] + radius * Math.cos(angle);\n      y = center[1] + radius * Math.sin(angle);\n\n      if (\n        hasOverlap({ x, y, radius: size }, res) ||\n        x - size < viewBox.x0 ||\n        x + size > viewBox.x1 ||\n        y - size < viewBox.y0 ||\n        y + size > viewBox.y1\n      ) {\n        if (i < searchStep - 1) {\n          angle += searchAngle;\n\n          if (angle > maxAngle) {\n            angle = minAngle;\n          } else if (angle < minAngle) {\n            angle = maxAngle;\n          }\n        }\n        continue;\n      } else {\n        break;\n      }\n    }\n\n    res.push({ x, y, radius: size, datum });\n  });\n\n  return res;\n};\n\nconst getPartialAngles = (minAngle: number, maxAngle: number, count: number) => {\n  let offsetAngle = 0;\n  let stepCount = Math.max(Math.ceil((2 * (maxAngle - minAngle)) / Math.PI), 2);\n  let stepAngle = (maxAngle - minAngle) / stepCount;\n  let stepIndex = 0;\n  let stepSign = 1;\n  let i = 0;\n  let j = 0;\n  const res: number[] = [];\n  let startAngle = minAngle;\n\n  while (i < count) {\n    if (j < stepCount) {\n      res.push(startAngle + (j % 2 ? Math.floor(j / 2) + Math.floor(stepCount / 2) : j / 2) * stepAngle * stepSign);\n      j++;\n    }\n\n    i++;\n\n    if (j === stepCount) {\n      j = 0;\n      stepIndex += 1;\n      stepSign *= -1;\n\n      if (offsetAngle === 0) {\n        offsetAngle = stepAngle / 2;\n      } else {\n        offsetAngle /= 2;\n      }\n      startAngle = stepSign === -1 ? maxAngle - offsetAngle : minAngle + offsetAngle;\n\n      if (stepIndex >= 2) {\n        stepAngle /= 2;\n        stepCount *= 2;\n      }\n    }\n  }\n\n  return res;\n};\n\nconst hasOverlap = (item: Omit<CircularRelationItem, 'datum'>, arr: CircularRelationItem[]) => {\n  if (!arr || !arr.length) {\n    return false;\n  }\n\n  return arr.some(entry => {\n    return Math.pow(item.x - entry.x, 2) + Math.pow(item.y - entry.y, 2) < Math.pow(item.radius + entry.radius, 2);\n  });\n};\n"]}