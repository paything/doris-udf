{"version":3,"sources":["../src/types/interaction.ts"],"names":[],"mappings":"","file":"interaction.js","sourcesContent":["import type { IView } from './view';\nimport type { EventType, InteractionEvent, ViewEventType } from './event';\nimport type {\n  BaseCrosshairAttrs,\n  BrushAttributes,\n  TooltipAttributes,\n  TooltipRowAttrs\n} from '@visactor/vrender-components';\nimport type { IPolygon, ISymbolGraphicAttribute, ITextGraphicAttribute } from '@visactor/vrender-core';\nimport type { IElement, IGlyphElement } from './element';\nimport type { IData, IGrammarBase, IMark, IScale } from './grammar';\nimport type { IPointLike } from '@visactor/vutils';\nimport type { IBaseScale } from '@visactor/vscale';\nimport type { IDatazoom, IScrollbar } from './component';\nimport type { FieldEncodeType, MarkFunctionType } from './mark';\nimport type { GraphicEventType } from '@visactor/vrender-core';\n\nexport interface FilterDataTarget {\n  data: string | IData;\n  filter: string | ((datum: any, filterValues: any[]) => boolean);\n  transform?: (data: any[], filterValues: any[]) => any[];\n}\n\nexport interface IBaseInteractionOptions {\n  id?: string;\n\n  dependency?: string | string[] | IGrammarBase | IGrammarBase[];\n\n  shouldStart?: (e: any) => boolean;\n\n  shouldUpdate?: (e: any) => boolean;\n\n  shouldEnd?: (e: any) => boolean;\n\n  shouldReset?: (e: any) => boolean;\n\n  onStart?: (e: any) => boolean;\n\n  onUpdate?: (e: any) => boolean;\n\n  onEnd?: (e: any) => boolean;\n\n  onReset?: (e: any) => boolean;\n}\n\nexport interface IInteraction<T = any> {\n  readonly options: T;\n  readonly type: string;\n  depend: (grammar: IGrammarBase[] | IGrammarBase | string[] | string) => void;\n  bind: () => void;\n  unbind: () => void;\n  start: (element: IElement | IGlyphElement | string | any) => void;\n  reset: (element?: IElement | IGlyphElement) => void;\n  getStartState: () => string;\n}\n\nexport interface IInteractionConstructor<T = any> {\n  readonly type: string;\n\n  new (view: IView, options?: T): IInteraction<T>;\n}\n\n/**\n * the interaction to set the active state of specified marks\n */\nexport interface ElementActiveOptions extends IBaseInteractionOptions {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType | EventType[];\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | EventType[] | 'none';\n  /**\n   * the active state name\n   */\n  state?: string;\n}\n\nexport type ElementSelectTriggerOff = EventType | ViewEventType | 'empty' | 'none' | number;\n\n/**\n * the interaction to set the seleted state of specified marks\n */\nexport interface ElementSelectOptions extends IBaseInteractionOptions {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType | EventType[];\n  /**\n   * the selected state name\n   */\n  state?: string;\n  /**\n   * the non-selected state name\n   */\n  reverseState?: string;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: ElementSelectTriggerOff | ElementSelectTriggerOff[];\n  /**\n   * whether or not support multiple selected\n   */\n  isMultiple?: boolean;\n}\n\n/**\n * the interaction to set the highlight state of specified marks\n */\nexport interface ElementHighlightOptions extends IBaseInteractionOptions {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | 'none';\n  /**\n   * the highlight state name\n   */\n  highlightState?: string;\n  /**\n   * the blur state name\n   */\n  blurState?: string;\n}\n\nexport interface ElementFilterOptions {\n  /**\n   * the filter type of element\n   */\n  filterType?: 'key' | 'groupKey';\n  /**\n   * the field to be filtered\n   */\n  filterField?: string;\n}\n\n/**\n * the interaction to set the active state of specified marks trigger by legend\n */\nexport interface ElementActiveByLegendOptions extends IBaseInteractionOptions, ElementFilterOptions {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n  /**\n   * the active state name\n   */\n  state?: string;\n}\n\n/**\n * the interaction to set the active state of specified marks trigger by legend\n */\nexport interface ElementHighlightByLegendOptions extends IBaseInteractionOptions, ElementFilterOptions {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n  /**\n   * the highlight state name\n   */\n  highlightState?: string;\n  /**\n   * the blur state name\n   */\n  blurState?: string;\n}\n\nexport interface ElementHighlightByNameOptions extends ElementHighlightByLegendOptions {\n  graphicName?: string | string[];\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | 'none';\n\n  parseData?: (e: InteractionEvent) => any;\n}\n\nexport type ElementHighlightByGraphicNameOptions = ElementHighlightOptions;\n\nexport interface BrushEventParams {\n  operateType: string;\n  operateMask: IPolygon;\n  activeElements?: (IElement | IGlyphElement)[];\n}\n\nexport interface BrushOptions extends IBaseInteractionOptions, BrushAttributes {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n\n  onStart?: (params: BrushEventParams) => boolean;\n\n  onUpdate?: (params: BrushEventParams) => boolean;\n\n  onEnd?: (params: BrushEventParams) => boolean;\n\n  onReset?: (params: BrushEventParams) => boolean;\n}\n\nexport interface BrushHighlightOptions extends BrushOptions {\n  /**\n   * the highlight state name\n   */\n  highlightState?: string;\n  /**\n   * the blur state name\n   */\n  blurState?: string;\n}\n\nexport interface BrushActiveOptions extends BrushOptions {\n  /**\n   * the active state name\n   */\n  state?: string;\n}\n\nexport interface BrushFilterOptions extends BrushOptions {\n  target: {\n    data: IData | string;\n    transform?: (data: any[], filterValue: any) => any[];\n  };\n}\n\nexport interface DataFilterOptions extends IBaseInteractionOptions {\n  /**\n   * the selector of marks\n   */\n  source?: string | string[] | IMark | IMark[];\n\n  /**\n   * data target\n   */\n  target: {\n    data: IData | string;\n    filter?: string | ((datum: any, filterValue: any) => boolean);\n    transform?: (data: any[], filterValue: any) => any[];\n  };\n}\n\nexport interface DrillDownOptions extends Omit<BrushOptions, 'trigger'> {\n  /**\n   * the trigger event name\n   */\n  trigger?: GraphicEventType;\n  /**\n   * enable brush\n   */\n  brush?: boolean;\n  // trigger attribute is included in brush attributes\n  target: {\n    data: IData | string;\n    transform?: (data: any[], filterValue: any) => any[];\n  };\n}\n\nexport interface RollUpOptions extends DataFilterOptions {\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | ViewEventType | 'empty';\n}\n\nexport type CustomTooltipCallback = (\n  datum: any,\n  element: IElement,\n  parameters: any\n) => TooltipRowAttrs | TooltipRowAttrs[];\n\nexport interface ITooltipRow {\n  visible?: boolean;\n  key?: MarkFunctionType<string | Partial<ITextGraphicAttribute>> | FieldEncodeType;\n  value?: MarkFunctionType<string | Partial<ITextGraphicAttribute>> | FieldEncodeType;\n  symbol?: MarkFunctionType<string | Partial<ISymbolGraphicAttribute>> | FieldEncodeType;\n}\n\nexport type TooltipType = 'x' | 'y' | 'angle' | 'radius';\n\nexport interface TooltipOptions extends IBaseInteractionOptions {\n  /**\n   * the selector of marks\n   */\n  selector?: string | string[] | IMark | IMark[];\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | 'none';\n\n  title?: ITooltipRow | string | CustomTooltipCallback;\n  content?: ITooltipRow | ITooltipRow[] | CustomTooltipCallback;\n  attributes?: MarkFunctionType<TooltipAttributes>;\n}\n\nexport interface DimensionTooltipOptions extends TooltipOptions {\n  scale?: IScale | string;\n  tooltipType?: TooltipType;\n  target?: {\n    data: IData | string;\n    filter: string | ((datum: any, tooltipValue: any) => boolean);\n  };\n  avoidMark?: string | string[];\n  container?: string | IMark;\n  center?: IPointLike;\n}\n\nexport type CrosshairType = 'x' | 'y' | 'angle' | 'radius' | 'radius-polygon';\n\nexport type CrosshairShape = 'line' | 'rect';\n\nexport interface CrosshairOptions extends IBaseInteractionOptions {\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | 'none';\n  scale?: IScale | string;\n  crosshairType?: CrosshairType;\n  crosshairShape?: CrosshairShape;\n  container?: string | IMark;\n  radius?: number;\n  center?: IPointLike;\n  attributes?: MarkFunctionType<BaseCrosshairAttrs>;\n}\nexport interface ViewNavigationBaseOptions {\n  enableX?: boolean;\n  enableY?: boolean;\n  scaleX?: string | IScale;\n  scaleY?: string | IScale;\n  dataTargetX?: FilterDataTarget;\n  dataTargetY?: FilterDataTarget;\n  throttle?: number;\n  linkedComponentX?: string | IDatazoom | IScrollbar;\n  linkedComponentY?: string | IDatazoom | IScrollbar;\n  rangeX?: [number, number] | (() => [number, number]);\n  rangeY?: [number, number] | (() => [number, number]);\n}\n\nexport interface ViewZoomSimpleOptions {\n  realtime?: boolean;\n  rate?: number;\n  focus?: boolean;\n  trigger?: EventType;\n  endTrigger?: EventType;\n  triggerOff?: EventType | 'none';\n}\n\nexport type ViewZoomOptions = ViewZoomSimpleOptions & IBaseInteractionOptions & ViewNavigationBaseOptions;\n\nexport interface ViewScrollSimpleOptions {\n  realtime?: boolean;\n  reversed?: boolean;\n  trigger?: EventType;\n  endTrigger?: EventType;\n}\nexport type ViewScrollOptions = ViewScrollSimpleOptions & IBaseInteractionOptions & ViewNavigationBaseOptions;\n\nexport interface ViewDragSimpleOptions {\n  realtime?: boolean;\n  reversed?: boolean;\n  trigger?: EventType;\n  endTrigger?: EventType;\n  updateTrigger?: EventType;\n}\n\nexport type ViewDragOptions = ViewDragSimpleOptions & IBaseInteractionOptions & ViewNavigationBaseOptions;\n\nexport interface ViewRoamOptions extends IBaseInteractionOptions, ViewNavigationBaseOptions {\n  zoom?: ViewZoomSimpleOptions & { enable?: boolean };\n  scroll?: ViewScrollSimpleOptions & { enable?: boolean };\n  drag?: ViewDragSimpleOptions & { enable?: boolean };\n}\n\n/**\n * the interaction to set the highlight state of specified marks\n */\nexport interface SankeyHighlightOptions extends IBaseInteractionOptions {\n  /**\n   * the selector of node mark\n   */\n  nodeSelector?: string | IMark;\n  /**\n   * the selector of link mark\n   */\n  linkSelector?: string | IMark;\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the reset trigger event name\n   */\n  triggerOff?: EventType | 'none';\n  /**\n   * the highlight state name\n   */\n  highlightState?: string;\n  /**\n   * the blur state name\n   */\n  blurState?: string;\n  /** set highlight state to different type of nodes */\n  effect?: 'adjacency' | 'related';\n}\n\nexport interface FishEyeOptions extends IBaseInteractionOptions {\n  selector?: string | string[] | IMark | IMark[];\n  /** the radius of x-direction */\n  radiusX?: number;\n  /** the radius of y-direction */\n  radiusY?: number;\n  /** the radiusRatio of x-direction */\n  radiusRatioX?: number;\n  /** the radiusRatio of y-direction */\n  radiusRatioY?: number;\n  /** x方向的扰动 */\n  distortionX?: number;\n  /** y方向的扰动 */\n  distortionY?: number;\n  /** 禁用 x方向的变形 */\n  enableX?: boolean;\n  /** 禁用y方向的变形 */\n  enableY?: boolean;\n  /** x方向的scale */\n  scaleX?: string | IScale;\n  /** y方向的scale */\n  scaleY?: string | IScale;\n  /** 节流的时长，单位为ms */\n  throttle?: number;\n  /**\n   * the trigger event name\n   */\n  trigger?: EventType;\n  /**\n   * the trigger event of end\n   */\n  endTrigger?: EventType;\n  /**\n   * the trigger event of updating\n   */\n  updateTrigger?: EventType;\n  /**\n   * the trigger event of reset\n   */\n  triggerOff?: string | 'none';\n}\n\nexport interface ElementActiveSpec extends ElementActiveOptions {\n  /**\n   * 设置交互的类型为 'element-active'\n   */\n  type: 'element-active';\n}\nexport interface ElementSelectSpec extends ElementSelectOptions {\n  /**\n   * 设置交互的类型为 'element-select'\n   */\n  type: 'element-select';\n}\nexport interface ElementHighlightSpec extends ElementHighlightOptions {\n  /**\n   * 设置交互的类型为 'element-highlight'\n   */\n  type: 'element-highlight';\n}\nexport interface ElementHighlightByKeySpec extends ElementHighlightOptions {\n  /**\n   * 设置交互的类型为 'element-highlight-by-key'\n   */\n  type: 'element-highlight-by-key';\n}\nexport interface ElementHighlightByGroupSpec extends ElementHighlightOptions {\n  /**\n   * 设置交互的类型为 'element-highlight-by-group'\n   */\n  type: 'element-highlight-by-group';\n}\nexport interface ElementActiveByLegendSpec extends ElementActiveByLegendOptions {\n  /**\n   * 设置交互的类型为 'element-active-by-legend'\n   */\n  type: 'element-active-by-legend';\n}\n\nexport interface ElementHighlightByLegendSpec extends ElementHighlightByLegendOptions {\n  /**\n   * 设置交互的类型为'element-highlight-by-legend'\n   */\n  type: 'element-highlight-by-legend';\n}\n\nexport interface ElementHighlightByNameSpec extends ElementHighlightByNameOptions {\n  /**\n   * 设置交互的类型为'element-highlight-by-name'\n   */\n  type: 'element-highlight-by-name';\n}\n\nexport interface BrushHighlightSpec extends BrushHighlightOptions {\n  /**\n   * 设置交互类型为'brush-highlight'\n   */\n  type: 'brush-highlight';\n}\n\nexport interface BrushActiveSpec extends BrushActiveOptions {\n  /**\n   * 设置交互类型为 'brush-active'\n   */\n  type: 'brush-active';\n}\n\nexport interface BrushFilterSpec extends BrushFilterOptions {\n  /**\n   * 设置交互类型为'brush-filter'\n   */\n  type: 'brush-filter';\n}\n\nexport interface LegendFilterSpec extends DataFilterOptions {\n  type: 'legend-filter';\n}\n\nexport interface DatazoomFilterSpec extends DataFilterOptions {\n  type: 'datazoom-filter';\n}\n\nexport interface SliderFilterSpec extends DataFilterOptions {\n  type: 'slider-filter';\n}\n\nexport interface PlayerFilterSpec extends DataFilterOptions {\n  type: 'player-filter';\n}\n\nexport interface ScrollbarFilterSpec extends DataFilterOptions {\n  type: 'scrollbar-filter';\n}\n\nexport interface DrillDownSpec extends DrillDownOptions {\n  type: 'drill-down';\n}\n\nexport interface RollUpSpec extends RollUpOptions {\n  type: 'roll-up';\n}\n\nexport interface TooltipSpec extends TooltipOptions {\n  type: 'tooltip';\n}\n\nexport interface DimensionTooltipSpec extends DimensionTooltipOptions {\n  type: 'dimension-tooltip';\n}\n\nexport interface CrosshairSpec extends CrosshairOptions {\n  type: 'crosshair';\n}\nexport interface ViewRoamSpec extends ViewRoamOptions {\n  type: 'view-roam';\n}\n\nexport interface ViewZoomSpec extends ViewZoomOptions {\n  type: 'view-zoom';\n}\n\nexport interface ViewScrollSpec extends ViewScrollOptions {\n  type: 'view-scroll';\n}\n\nexport interface ViewDragSpec extends ViewDragOptions {\n  type: 'view-drag';\n}\n\nexport interface SankeyHighlightSpec extends SankeyHighlightOptions {\n  type: 'sankey-highlight';\n}\n\nexport interface FishEyeSpec extends FishEyeOptions {\n  type: 'fish-eye';\n}\n\nexport interface CustomizedInteractionSpec extends IBaseInteractionOptions {\n  type: string;\n}\n\nexport type InteractionSpec =\n  | ElementActiveSpec\n  | ElementSelectSpec\n  | ElementHighlightSpec\n  | ElementHighlightByKeySpec\n  | ElementHighlightByGroupSpec\n  | ElementActiveByLegendSpec\n  | ElementHighlightByLegendSpec\n  | ElementHighlightByNameSpec\n  | BrushHighlightSpec\n  | BrushActiveSpec\n  | BrushFilterSpec\n  | LegendFilterSpec\n  | DatazoomFilterSpec\n  | SliderFilterSpec\n  | PlayerFilterSpec\n  | ScrollbarFilterSpec\n  | DrillDownSpec\n  | RollUpSpec\n  | TooltipSpec\n  | DimensionTooltipSpec\n  | CrosshairSpec\n  | ViewRoamSpec\n  | ViewZoomSpec\n  | ViewScrollSpec\n  | ViewDragSpec\n  | SankeyHighlightSpec\n  | FishEyeSpec\n  | CustomizedInteractionSpec;\n\nexport interface ViewNavigationRange {\n  needUpdate?: boolean;\n  x?: [number, number];\n  y?: [number, number];\n}\n\nexport interface IViewZoomMixin {\n  updateZoomRange: (\n    rangeFactor: [number, number],\n    range: [number, number],\n    zoomEvent: { zoomDelta: number; zoomX: number; zoomY: number },\n    zoomOptions?: ViewZoomSimpleOptions\n  ) => [number, number];\n  formatZoomEvent: (e: InteractionEvent) => InteractionEvent & { zoomDelta?: number; zoomX?: number; zoomY?: number };\n  handleZoomStart: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    zoomOptions?: ViewZoomSimpleOptions\n  ) => ViewNavigationRange;\n  handleZoomEnd: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    zoomOptions?: ViewZoomSimpleOptions\n  ) => ViewNavigationRange;\n  handleZoomReset: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    zoomOptions?: ViewZoomSimpleOptions\n  ) => ViewNavigationRange;\n}\n\nexport interface IViewScrollMixin {\n  formatScrollEvent: (e: InteractionEvent) => InteractionEvent & { scrollX?: number; scrollY?: number };\n  handleScrollStart: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    scrollOptions?: ViewScrollSimpleOptions\n  ) => ViewNavigationRange;\n  handleScrollEnd: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    scrollOptions?: ViewScrollSimpleOptions\n  ) => ViewNavigationRange;\n}\n\nexport interface IViewDragMixin {\n  handleDragStart: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    dragOptions?: ViewDragSimpleOptions\n  ) => ViewNavigationRange;\n  handleDragUpdate: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    dragOptions?: ViewDragSimpleOptions\n  ) => ViewNavigationRange;\n  handleDragEnd: (\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    dragOptions?: ViewDragSimpleOptions\n  ) => ViewNavigationRange;\n}\n\nexport interface IToggleStateMixin {\n  updateStates: (\n    newStatedElements: (IElement | IGlyphElement)[],\n    prevStatedElements?: (IElement | IGlyphElement)[],\n    state?: string,\n    reverseState?: string\n  ) => (IElement | IGlyphElement)[];\n  clearAllStates: (state?: string, reverseState?: string) => void;\n}\n\nexport interface ViewStateByDim {\n  scale?: IScale;\n  data?: IData;\n  linkedComponent?: IDatazoom | IScrollbar;\n  filterValue?: any[];\n  wholeScale?: IBaseScale;\n  initRangeFactor?: [number, number];\n  getCurrentRange?: () => [number, number];\n  rangeFactor?: [number, number];\n}\n"]}