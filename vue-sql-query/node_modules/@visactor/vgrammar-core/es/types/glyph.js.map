{"version":3,"sources":["../src/types/glyph.ts"],"names":[],"mappings":"","file":"glyph.js","sourcesContent":["import type { Nil } from './base';\nimport type { IGlyphElement } from './element';\nimport type { MarkType } from './mark';\nexport interface IGlyphMeta<EncodeValuesType = any, GlyphConfigType = any> {\n  getMarks: () => { [markName: string]: MarkType };\n\n  getChannelEncoder: () => { [channel: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType> };\n  getDefaultEncoder: () => GlyphDefaultEncoder<GlyphConfigType>;\n  getFunctionEncoder: () => GlyphFunctionEncoder<GlyphConfigType>;\n  getProgressiveChannels: () => string[];\n\n  registerChannelEncoder: ((encoders: {\n    [markName: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType>;\n  }) => this) &\n    ((channel: string, encoder: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType>) => this);\n  registerDefaultEncoder: (encoder: GlyphDefaultEncoder<GlyphConfigType>) => this;\n  registerFunctionEncoder: (encoder: GlyphFunctionEncoder<GlyphConfigType>) => this;\n  registerProgressiveChannels: (channels: string | string[]) => this;\n}\n\nexport type GlyphChannelEncoder<EncodeValueType = any, EncodeValuesType = any, GlyphConfigType = any> = (\n  channel: string,\n  encodeValue: EncodeValueType,\n  encodeValues: EncodeValuesType,\n  datum: any,\n  element: IGlyphElement,\n  glyphConfig: GlyphConfigType\n) => { [markName: string]: any } | Nil;\n\nexport type GlyphDefaultEncoder<GlyphConfigType = any> = (\n  datum: any,\n  element: IGlyphElement,\n  glyphConfig: GlyphConfigType\n) => { [markName: string]: any };\n\nexport type GlyphFunctionEncoder<GlyphConfigType = any> = (\n  encodeValues: any,\n  datum: any,\n  element: IGlyphElement,\n  glyphConfig: GlyphConfigType\n) => { [markName: string]: any } | Nil;\n"]}