{"version":3,"sources":["../src/types/event.ts"],"names":[],"mappings":"","file":"event.js","sourcesContent":["import type { CustomEvent, FederatedEvent } from '@visactor/vrender-core';\nimport type { IAnimationConfig, IElement, IGlyphElement, IMark } from '.';\nimport type { MarkType } from './mark';\nimport type { SignalDependency } from './signal';\n\nexport type AnimationEvent = {\n  mark: IMark;\n  animationState: string;\n  animationConfig: IAnimationConfig;\n};\n\nexport type InteractionEvent = (FederatedEvent | CustomEvent) & { element?: IElement | IGlyphElement };\nexport type GrammarEvent = InteractionEvent | AnimationEvent;\n\nexport type EventHandler<T> = (event?: GrammarEvent, value?: T) => void;\nexport type BaseEventHandler = AnimationEventHandler | InteractionEventHandler;\nexport type AnimationEventHandler = (event?: AnimationEvent) => void;\nexport type InteractionEventHandler = (event?: InteractionEvent, element?: IElement | IGlyphElement) => void;\nexport type ResizeHandler = EventHandler<{ width?: number; height?: number }>;\n\nexport type AnimationEventType = 'animationStart' | 'animationEnd' | 'elementAnimationStart' | 'elementAnimationEnd';\n\nexport type AnimationListenerHandler = (event?: AnimationEvent, el?: IElement) => void;\n\nexport type ViewEventType =\n  | 'view:pointerdown'\n  | 'view:pointerup'\n  | 'view:pointerupoutside'\n  | 'view:pointertap'\n  | 'view:pointerover'\n  | 'view:pointerenter'\n  | 'view:pointerleave'\n  | 'view:pointerout'\n  | 'view:mousedown'\n  | 'view:mouseup'\n  | 'view:mouseupoutside'\n  // 右键操作\n  | 'view:rightdown'\n  | 'view:rightup'\n  | 'view:rightupoutside'\n  | 'view:click'\n  // 双击\n  | 'view:dblclick'\n  | 'view:mousemove'\n  | 'view:mouseover'\n  | 'view:mouseout'\n  // 不会冒泡\n  | 'view:mouseenter'\n  // 不会冒泡\n  | 'view:mouseleave'\n  | 'view:wheel'\n  | 'view:tap'\n  | 'view:touchstart'\n  | 'view:touchend'\n  | 'view:touchendoutside'\n  | 'view:touchmove'\n  | 'view:touchcancel'\n  // dragNdrop\n  | 'view:dragstart'\n  | 'view:drag'\n  | 'view:dragenter'\n  | 'view:dragleave'\n  | 'view:dragover'\n  | 'view:dragend'\n  | 'view:drop'\n  // gesture\n  | 'view:pan'\n  | 'view:panstart'\n  | 'view:panend'\n  | 'view:press'\n  | 'view:pressup'\n  | 'view:pressend'\n  | 'view:pinch'\n  | 'view:pinchstart'\n  | 'view:pinchend'\n  | 'view:swipe';\n\nexport type EventType =\n  | 'pointerdown'\n  | 'pointerup'\n  | 'pointermove'\n  // 指针抬起与按下的图形不同时触发\n  | 'pointerupoutside'\n  | 'pointertap'\n  | 'pointerover'\n  | 'pointermove'\n  | 'pointerenter'\n  | 'pointerleave'\n  | 'pointerout'\n  | 'mousedown'\n  | 'mouseup'\n  | 'mouseupoutside'\n  // 右键操作\n  | 'rightdown'\n  | 'rightup'\n  | 'rightupoutside'\n  | 'click'\n  // 双击\n  | 'dblclick'\n  | 'mousemove'\n  | 'mouseover'\n  | 'mouseout'\n  // 不会冒泡\n  | 'mouseenter'\n  // 不会冒泡\n  | 'mouseleave'\n  | 'wheel'\n  | 'tap'\n  | 'touchstart'\n  | 'touchend'\n  | 'touchendoutside'\n  | 'touchmove'\n  | 'touchcancel'\n  // dragNdrop\n  | 'dragstart'\n  | 'drag'\n  | 'dragenter'\n  | 'dragleave'\n  | 'dragover'\n  | 'dragend'\n  | 'drop'\n  // gesture\n  | 'pan'\n  | 'panstart'\n  | 'panend'\n  | 'press'\n  | 'pressup'\n  | 'pressend'\n  | 'pinch'\n  | 'pinchstart'\n  | 'pinchend'\n  | 'swipe'\n  // resize\n  | 'resize';\n\nexport type WindowEventType = string;\n\nexport interface EventCallbackContext extends Event {\n  element?: any;\n  datum?: any;\n}\n\nexport type EventCallback = (context: EventCallbackContext, params?: any) => any;\nexport interface BaseEventSpec {\n  type: string;\n  filter?: (context: EventCallbackContext) => boolean;\n  throttle?: number;\n  debounce?: number;\n  /** 阻止事件的执行和传播 */\n  consume?: boolean;\n  callback?: EventCallback;\n  dependency?: SignalDependency | SignalDependency[];\n  target?:\n    | string\n    | Array<{\n        target: string;\n        callback: EventCallback;\n      }>;\n}\n\nexport type MergeEventSpec = Omit<BaseEventSpec, 'type'> & { merge: string[] | BaseEventSpec[] };\n\nexport interface ParsedViewEventSpec extends BaseEventSpec {\n  source?: 'view';\n  type: EventType;\n  markId?: string;\n  markName?: string;\n  markType?: string;\n}\n\nexport interface ParsedWindowEventSpec extends BaseEventSpec {\n  source: 'window';\n  type: WindowEventType;\n  markId?: string;\n  markName?: string;\n  markType?: MarkType;\n}\n\nexport type EventSpec =\n  | BaseEventSpec\n  | ({\n      between: [BaseEventSpec, BaseEventSpec];\n    } & BaseEventSpec)\n  | MergeEventSpec;\n\nexport type EventSourceType = 'window' | 'view';\n"]}