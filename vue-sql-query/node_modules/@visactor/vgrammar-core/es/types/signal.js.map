{"version":3,"sources":["../src/types/signal.ts"],"names":[],"mappings":"","file":"signal.js","sourcesContent":["import type { GrammarSpec, IScale, ISignal } from './grammar';\n\nexport type FunctionCallback<T> = (...args: any[]) => T;\n\nexport type SignalDependency = string | ISignal<any> | IScale;\n\nexport interface SignalFunction<Callback extends FunctionCallback<T>, T> {\n  callback: Callback;\n  dependency?: SignalDependency | SignalDependency[];\n}\n\nexport interface SignalReference<T = any> {\n  signal: string | ISignal<T>;\n}\n\nexport type GenericFunctionType<Callback extends FunctionCallback<T>, T> =\n  | T\n  | Callback\n  | SignalReference<T>\n  | SignalFunction<Callback, T>;\n\nexport type SimpleSignalType<T> = T | SignalReference<T>;\n\nexport type ParameterCallback<T> = (parameters: any) => T;\nexport type ParameterFunctionType<T> = GenericFunctionType<ParameterCallback<T>, T>;\n\nexport type SignalFunctionCallback<T> = (signal: T, parameters: any) => T;\nexport type SignalFunctionType<T> = GenericFunctionType<SignalFunctionCallback<T>, T>;\n\nexport interface SignalSpec<T> extends GrammarSpec {\n  name?: string;\n  value?: T;\n  update?: SignalFunctionType<T>;\n}\n"]}