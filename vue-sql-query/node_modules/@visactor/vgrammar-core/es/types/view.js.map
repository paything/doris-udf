{"version":3,"sources":["../src/types/view.ts"],"names":[],"mappings":"","file":"view.js","sourcesContent":["import type { EventEmitter, IBounds, ILogger } from '@visactor/vutils';\nimport type { EnvType, IStage, IColor, IOption3D, ILayer, IStageParams } from '@visactor/vrender-core';\nimport type { CoordinateType } from '@visactor/vgrammar-coordinate';\nimport type { DataSpec } from './data';\nimport type { SignalFunctionType, SignalSpec } from './signal';\nimport type {\n  IData,\n  ISignal,\n  IScale,\n  IMark,\n  IGrammarBase,\n  ICoordinate,\n  IGlyphMark,\n  IGroupMark,\n  IComponent\n} from './grammar';\nimport type { ScaleSpec, GrammarScaleType } from './scale';\nimport type { MarkSpec, MarkType } from './mark';\nimport type { Hooks } from './hooks';\nimport type { ProjectionSpec } from './projection';\nimport type { BaseEventHandler, EventSpec } from './event';\nimport type { CommonPaddingSpec } from './base';\nimport type { IMorphAnimationConfig } from './morph';\nimport type { IBaseAnimate } from './animate';\nimport type { IRenderer } from './renderer';\nimport type { IAxis, IDatazoom, IGrid, ILabel, ILegend, IPlayer, IScrollbar, ISlider, ITitle } from './component';\nimport type { CoordinateSpec } from './coordinate';\nimport type { ITheme } from './theme';\nimport type { IInteraction, InteractionSpec } from './interaction';\nimport type { GestureConfig } from '@visactor/vrender-kits';\n\nexport interface IViewThemeConfig {\n  labelMonospace?: boolean;\n}\n\n/**\n * 获取state相关配置\n */\nexport interface IViewStateOptions {\n  signals?: (name?: string, operator?: any) => boolean;\n  data?: (name?: string, object?: any) => boolean;\n  recurse?: boolean;\n}\n\nexport interface IEnvironmentOptions {\n  /** 环境参数 */\n  mode?: EnvType;\n  /**\n   * 环境带的配置\n   */\n  modeParams?: any;\n}\n\nexport interface IRendererOptions extends Partial<IStageParams> {\n  /** 非浏览器环境下，如小程序，需要传入经过包装的伪 canvas 实例 */\n  renderCanvas?: string | HTMLCanvasElement;\n  /** vRender stage */\n  stage?: IStage;\n  rendererTitle?: string;\n  /** vRender layer */\n  layer?: ILayer;\n}\n\nexport interface ILayoutOptions {\n  parseMarkBounds?: (bounds: IBounds, mark: IMark) => IBounds;\n  doLayout?: (marks: IMark[], options: ILayoutOptions, view: IView) => void;\n}\n\n/** 事件配置 */\nexport interface IViewEventConfig {\n  /**\n   * preventDefaults相关配置\n   */\n  defaults?: {\n    prevent?: boolean | Record<string, boolean>;\n    allow?: boolean | Record<string, boolean>;\n  };\n  /**\n   * whether permit events of view\n   */\n  view?: boolean | Record<string, boolean>;\n  /** disable all the events */\n  disable?: boolean;\n  /** use gesture events or not  */\n  gesture?: boolean | GestureConfig;\n  /** use drag events or not */\n  drag?: boolean;\n  /**\n   * @since 0.15.2\n   * @default 200\n   * VRender 参数 ，单位 ms\n   * 多次点击之间的最大时间，默认为 200 ms，用于判断点击次数\n   */\n  clickInterval?: number;\n  /**\n   * @since 0.15.2\n   * @default false\n   * VRender 参数 是否自动阻止事件\n   */\n  autoPreventDefault?: boolean;\n}\n\nexport interface srIOption3DType extends IOption3D {\n  enable?: boolean;\n  /* 是否支持3d视角变换 */\n  enableView3dTranform?: boolean;\n}\nexport interface IViewOptions extends IEnvironmentOptions, IRendererOptions, ILayoutOptions {\n  width?: number;\n  height?: number;\n  padding?: CommonPaddingSpec;\n  autoFit?: boolean;\n\n  options3d?: srIOption3DType;\n  /** 外部传入的logger方法 */\n  logger?: ILogger;\n  /**\n   * 0 - None\n   * 1 - Error\n   * 2 - Warn\n   * 3 - Info\n   * 4 - Debug\n   */\n  logLevel?: number;\n\n  /** 生命周期等事件钩子 */\n  hooks?: Hooks;\n\n  /**\n   * 事件相关配置\n   * {\n   *    defaults: {\n   *      prevent: ['mousemove', 'mouseenter']\n   *    }\n   * }\n   */\n  eventConfig?: IViewEventConfig;\n  background?: IColor;\n  disableTheme?: boolean;\n}\n\nexport interface IRunningConfig {\n  /** whether enable reusing of grammar */\n  reuse?: boolean;\n  /** whether enable morph */\n  morph?: boolean;\n  /** force all marks to participate in morphing */\n  morphAll?: boolean;\n  /** morphing animation config */\n  animation?: IMorphAnimationConfig;\n  /** whether apply exit animations for released marks */\n  enableExitAnimation?: boolean;\n}\n\nexport interface IView {\n  readonly renderer: IRenderer;\n  readonly rootMark: IGroupMark;\n  readonly animate: IBaseAnimate;\n  readonly grammars: IRecordedGrammars;\n  readonly logger: ILogger;\n\n  // --- Grammar API ---\n  signal: <T>(value?: T, update?: SignalFunctionType<T>) => ISignal<T>;\n  data: (values?: any[]) => IData;\n  scale: (type: GrammarScaleType) => IScale;\n  coordinate: (type: CoordinateType) => ICoordinate;\n  mark: (\n    type: MarkType,\n    group: IGroupMark | string,\n    markOptions?: { glyphType?: string; componentType?: string; mode?: '2d' | '3d' }\n  ) => IMark;\n  group: (group: IGroupMark | string) => IGroupMark;\n  glyph: (glyphType: string, group: IGroupMark | string) => IGlyphMark;\n  component: (componentType: string, group: IGroupMark | string, mode?: '2d' | '3d') => IComponent;\n  axis: (group: IGroupMark | string, mode?: '2d' | '3d') => IAxis;\n  grid: (group: IGroupMark | string, mode?: '2d' | '3d') => IGrid;\n  legend: (group: IGroupMark | string) => ILegend;\n  slider: (group: IGroupMark | string) => ISlider;\n  label: (group: IGroupMark | string) => ILabel;\n  datazoom: (group: IGroupMark | string) => IDatazoom;\n  player: (group: IGroupMark | string) => IPlayer;\n  title: (group: IGroupMark | string) => ITitle;\n  scrollbar: (group: IGroupMark | string) => IScrollbar;\n\n  interaction: (type: string, spec: Partial<InteractionSpec>) => IInteraction;\n  removeInteraction: (type: string) => this;\n  removeAllInteractions: () => this;\n\n  addGrammar: (grammar: IGrammarBase) => this;\n  removeGrammar: (grammar: string | IGrammarBase) => this;\n  removeAllGrammars: () => this;\n  removeAllGraphicItems: () => this;\n\n  getGrammarById: (id: string) => IGrammarBase | null;\n  getCustomizedById: (id: string) => IGrammarBase | null;\n  getSignalById: <T>(id: string) => ISignal<T> | null;\n  getDataById: (id: string) => IData | null;\n  getScaleById: (id: string) => IScale | null;\n  getCoordinateById: (id: string) => ICoordinate | null;\n  getMarkById: (id: string) => IMark | null;\n  getGrammarsByName: (name: string) => IGrammarBase[];\n  getGrammarsByType: (grammarType: string) => IGrammarBase[];\n  getMarksByType: (markType: string) => IMark[];\n  getMarksByName: (name: string) => IMark[] | null;\n  getMarksBySelector: (selector: string | string[] | IMark | IMark[]) => IMark[] | null;\n\n  commit: (grammar: IGrammarBase) => this;\n\n  // --- Spec API ---\n  parseSpec: (spec: ViewSpec) => this;\n  updateSpec: (spec: ViewSpec) => this;\n\n  // --- Evaluate API ---\n  run: (runningConfig?: IRunningConfig) => this;\n  runBefore: (callback: (view: IView) => void) => this;\n  runAfter: (callback: (view: IView) => void) => this;\n\n  // --- Theme API ---\n  theme: (theme: ITheme | string) => this;\n  getCurrentTheme: () => ITheme;\n  setCurrentTheme: (theme: ITheme | string, render?: boolean) => this;\n\n  // --- Global Config API ---\n  background: (value?: IColor) => IColor;\n  width: (value?: number) => number;\n  height: (value?: number) => number;\n  viewWidth: (value?: number) => number;\n  viewHeight: (value?: number) => number;\n  padding: (p?: number | { left?: number; right?: number; top?: number; bottom?: number }) => {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n  getViewBox: () => IBounds;\n\n  // --- Event API ---\n  addEventListener: (type: string, handler: BaseEventHandler, options?: any) => this;\n  removeEventListener: (type: string, handler: BaseEventHandler) => this;\n\n  // --- Other API ---\n  emit: <T extends EventEmitter.EventNames<string | symbol>>(\n    event: T,\n    ...args: EventEmitter.EventArgs<string | symbol, T>\n  ) => boolean;\n\n  resize: (width: number, height: number, render?: boolean) => this;\n  traverseMarkTree: (apply: (mark: IMark) => any, filter?: (mark: IMark) => boolean, leafFirst?: boolean) => this;\n\n  getLayoutState: () => string;\n  updateLayoutTag: () => this;\n\n  pauseProgressive: () => boolean;\n  resumeProgressive: () => boolean;\n  restartProgressive: () => boolean;\n\n  release: () => void;\n  getImageBuffer: () => Buffer;\n}\n\nexport interface IViewConstructor {\n  new (options?: IViewOptions, config?: IViewThemeConfig): IView;\n}\n\nexport interface ViewSpec {\n  /** 梳理详细配置 */\n  theme?: string;\n  background?: IColor;\n  width?: number;\n  height?: number;\n  padding?: number | { left?: number; right?: number; top?: number; bottom?: number };\n  signals?: SignalSpec<any>[];\n  projections?: ProjectionSpec[];\n  data?: DataSpec[];\n  scales?: ScaleSpec[];\n  coordinates?: CoordinateSpec[];\n  marks?: MarkSpec[];\n  events?: EventSpec[];\n  interactions?: InteractionSpec[];\n  animation?: boolean;\n}\n\nexport interface IRecordedGrammars {\n  record: (grammar: IGrammarBase) => this;\n  unrecord: (grammar: IGrammarBase) => this;\n\n  size: () => number;\n\n  getSignal: <T>(key: string) => ISignal<T> | null;\n  getData: (key: string) => IData | null;\n  getScale: (key: string) => IScale | null;\n  getCoordinate: (key: string) => ICoordinate | null;\n  getMark: (key: string) => IMark | null;\n  getCustomized: (key: string) => IGrammarBase | null;\n  getGrammar: (key: string) => IGrammarBase | null;\n\n  getAllSignals: () => ISignal<any>[];\n  getAllData: () => IData[];\n  getAllScales: () => IScale[];\n  getAllCoordinates: () => ICoordinate[];\n  getAllMarks: () => IMark[];\n  getAllCustomized: () => IGrammarBase[];\n\n  clear: () => void;\n\n  traverse: (func: (grammar: IGrammarBase) => boolean | void) => void;\n  find: (func: (grammar: IGrammarBase) => boolean) => IGrammarBase | null;\n  filter: (func: (grammar: IGrammarBase) => boolean) => IGrammarBase[];\n\n  release: () => void;\n}\n\nexport interface IMarkTreeNode {\n  mark: IMark;\n  parent: IMarkTreeNode;\n  children: IMarkTreeNode[];\n}\n\nexport interface IRecordedTreeGrammars extends IRecordedGrammars {\n  getAllMarkNodes: () => IMarkTreeNode[];\n}\n"]}