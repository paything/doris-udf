{"version":3,"sources":["../src/view/glyph-meta.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAEnD,MAAM,OAAO,SAAS;IAUpB,YACE,KAAuC,EACvC,QAA8F,EAC9F,cAAqD,EACrD,mBAAuC;QATjC,mBAAc,GAAuF,EAAE,CAAC;QAW9G,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;SACvC;QACD,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;SAC7C;QACD,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,CAAC;SACvD;IACH,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAMD,sBAAsB,CACpB,OAAqG,EACrG,OAAqE;QAErE,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YACrB,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;SACxC;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;SAC7C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,uBAAuB,CAAC,OAA8C;QACpE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,sBAAsB,CAAC,OAA6C;QAClE,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;QAC9B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,2BAA2B,CAAC,QAA2B;QACrD,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IACD,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,iBAAiB;QACf,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,sBAAsB;QACpB,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAClC,CAAC;CACF","file":"glyph-meta.js","sourcesContent":["import { array, isString } from '@visactor/vutils';\nimport type { GlyphDefaultEncoder, IGlyphMeta, GlyphChannelEncoder, MarkType, GlyphFunctionEncoder } from '../types';\nexport class GlyphMeta<EncodeValuesType = any, GlyphConfigType = any>\n  implements IGlyphMeta<EncodeValuesType, GlyphConfigType>\n{\n  private marks: { [markName: string]: MarkType };\n\n  private channelEncoder: { [channel: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType> } = {};\n  private defaultEncoder: GlyphDefaultEncoder<GlyphConfigType>;\n  private functionEncoder: GlyphFunctionEncoder<GlyphConfigType>;\n  private progressiveChannels: string[];\n\n  constructor(\n    marks: { [markName: string]: MarkType },\n    encoders?: { [markName: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType> },\n    defaultEncoder?: GlyphDefaultEncoder<GlyphConfigType>,\n    progressiveChannels?: string | string[]\n  ) {\n    this.marks = marks;\n    if (encoders) {\n      this.registerChannelEncoder(encoders);\n    }\n    if (defaultEncoder) {\n      this.registerDefaultEncoder(defaultEncoder);\n    }\n    if (this.progressiveChannels) {\n      this.registerProgressiveChannels(progressiveChannels);\n    }\n  }\n\n  getMarks() {\n    return this.marks;\n  }\n\n  registerChannelEncoder(encoders: {\n    [markName: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType>;\n  }): this;\n  registerChannelEncoder(channel: string, encoder: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType>): this;\n  registerChannelEncoder(\n    channel: string | { [markName: string]: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType> },\n    encoder?: GlyphChannelEncoder<any, EncodeValuesType, GlyphConfigType>\n  ) {\n    if (isString(channel)) {\n      this.channelEncoder[channel] = encoder;\n    } else {\n      Object.assign(this.channelEncoder, channel);\n    }\n    return this;\n  }\n  registerFunctionEncoder(encoder: GlyphFunctionEncoder<GlyphConfigType>) {\n    this.functionEncoder = encoder;\n    return this;\n  }\n\n  registerDefaultEncoder(encoder: GlyphDefaultEncoder<GlyphConfigType>) {\n    this.defaultEncoder = encoder;\n    return this;\n  }\n\n  registerProgressiveChannels(channels: string | string[]) {\n    this.progressiveChannels = array(channels);\n    return this;\n  }\n\n  getChannelEncoder() {\n    return this.channelEncoder;\n  }\n  getFunctionEncoder() {\n    return this.functionEncoder;\n  }\n\n  getDefaultEncoder() {\n    return this.defaultEncoder;\n  }\n\n  getProgressiveChannels() {\n    return this.progressiveChannels;\n  }\n}\n"]}