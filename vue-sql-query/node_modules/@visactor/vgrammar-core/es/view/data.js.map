{"version":3,"sources":["../src/view/data.ts"],"names":[],"mappings":"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","file":"data.js","sourcesContent":["import { array, isNil } from '@visactor/vutils';\nimport type {\n  IGrammarBase,\n  DataSpec,\n  IData,\n  GrammarType,\n  DataFormatSpec,\n  IView,\n  IGrammarTask,\n  TransformSpec,\n  ParameterFunctionType,\n  IDataFilter\n} from '../types';\nimport { GrammarBase } from './grammar-base';\nimport { invokeParameterFunctionType, isGrammar, parseFunctionType } from '../parse/util';\nimport { parseTransformSpec } from '../parse/transform';\nimport type { Nil } from '../types/base';\nimport { HOOK_EVENT } from '../graph/enums';\nimport { parseFormat } from '../util/data';\n\nexport class Data extends GrammarBase implements IData {\n  readonly grammarType: GrammarType = 'data';\n\n  protected spec: DataSpec = {};\n\n  private _dataIDKey = `VGRAMMAR_DATA_ID_KEY_${this.uid}`;\n\n  /** 原始输入数据 */\n  private _input: any[];\n\n  /** 计算后的数据 */\n  private _values: any[];\n\n  private _isLoaded?: boolean;\n  private _loadTasks: IGrammarTask[] = [];\n  private _postFilters: IDataFilter[] = [];\n\n  constructor(view: IView, values?: any, format?: DataFormatSpec) {\n    super(view);\n    this._loadTasks = [];\n\n    if (!isNil(values)) {\n      this.values(values, format);\n      // this.ingest({ values });\n    }\n  }\n\n  parse(spec: DataSpec) {\n    super.parse(spec);\n    this._isLoaded = false;\n\n    this.source(spec.source, spec.format, false);\n    this.url(spec.url, spec.format, false);\n    this.values(spec.values, spec.format, false);\n    this.transform(spec.transform);\n\n    this.parseLoad(spec);\n\n    this.commit();\n    return this;\n  }\n\n  private parseDataSource(spec: DataSpec) {\n    const refs: IGrammarBase[] = [];\n    const transforms: IGrammarTask[] = [];\n\n    const formatRef = spec.format ? parseFunctionType(spec.format, this.view)[0] : null;\n    if (formatRef) {\n      refs.push(formatRef);\n    }\n\n    if (spec.values) {\n      const valuesRef = parseFunctionType(spec.values, this.view)[0];\n\n      if (valuesRef) {\n        refs.push(valuesRef);\n      }\n\n      transforms.push({\n        type: 'ingest',\n        transform: this.ingest,\n        isRawOptions: true,\n        options: {\n          values: spec.values,\n          format: spec.format\n        }\n      });\n    } else if (spec.url) {\n      const urlRef = parseFunctionType(spec.url, this.view)[0];\n      if (urlRef) {\n        refs.push(urlRef);\n      }\n\n      transforms.push({\n        type: 'load',\n        transform: this.load,\n        options: {\n          url: urlRef ?? spec.url,\n          format: formatRef ?? spec.format\n        }\n      });\n    } else if (spec.source) {\n      const upstreamData: IData[] = [];\n\n      array(spec.source).forEach(sourceId => {\n        const sourceData = isGrammar(sourceId) ? sourceId : this.view.getDataById(sourceId);\n\n        if (sourceData) {\n          refs.push(sourceData);\n          upstreamData.push(sourceData as IData);\n        }\n      });\n\n      if (upstreamData.length) {\n        transforms.push({\n          type: 'relay',\n          transform: this.relay,\n          options: upstreamData\n        });\n        this.grammarSource = upstreamData[0];\n      }\n    }\n    return { transforms, refs };\n  }\n\n  private ingest = (options: { values?: any; format?: ParameterFunctionType<DataFormatSpec> }) => {\n    const format = invokeParameterFunctionType(options.format, this.parameters());\n    this._input = parseFormat(options.values, format);\n    return this._input;\n  };\n\n  private load = (options: { values: any; format?: ParameterFunctionType<DataFormatSpec> }) => {\n    if ((options as { values: any; format?: ParameterFunctionType<DataFormatSpec> }).values) {\n      return this.ingest(options as { values: any; format?: ParameterFunctionType<DataFormatSpec> });\n    }\n  };\n\n  private relay = (options: any[]) => {\n    return options[0];\n  };\n\n  evaluate(upstream: any, parameters: any) {\n    this.view.emit(HOOK_EVENT.BEFORE_EVALUATE_DATA);\n    const tasks = this._isLoaded ? this.transforms : this._loadTasks.concat(this.transforms);\n    if (this.grammarSource) {\n      this._input = upstream;\n    }\n\n    const values = this.evaluateTransform(tasks, this._input, parameters);\n    const filteredValues = this._evaluateFilter(values, parameters);\n    this.setValues(filteredValues);\n\n    this._isLoaded = true;\n    this.view.emit(HOOK_EVENT.AFTER_EVALUATE_DATA);\n\n    return this;\n  }\n\n  output() {\n    return this._values;\n  }\n\n  getDataIDKey() {\n    return this._dataIDKey;\n  }\n\n  values(values: any | Nil, format?: ParameterFunctionType<DataFormatSpec>, load: boolean = true) {\n    const spec = Object.assign({}, this.spec, { values, format });\n    if (!isNil(values)) {\n      spec.url = undefined;\n      spec.source = undefined;\n    }\n    return load ? this.parseLoad(spec) : this;\n  }\n\n  url(url: ParameterFunctionType<string> | Nil, format?: ParameterFunctionType<DataFormatSpec>, load: boolean = true) {\n    const spec = Object.assign({}, this.spec, { url, format });\n    if (!isNil(url)) {\n      spec.values = undefined;\n      spec.source = undefined;\n    }\n    return load ? this.parseLoad(spec) : this;\n  }\n\n  source(\n    source: string | string[] | IData | IData[] | Nil,\n    format?: ParameterFunctionType<DataFormatSpec>,\n    load: boolean = true\n  ) {\n    const spec = Object.assign({}, this.spec, { source, format });\n    if (!isNil(source)) {\n      spec.values = undefined;\n      spec.url = undefined;\n    }\n    return load ? this.parseLoad(spec) : this;\n  }\n\n  private parseLoad(spec: DataSpec) {\n    this.detach(this.parseDataSource(this.spec).refs);\n\n    this.spec = spec;\n\n    const dataSourceResult = this.parseDataSource(this.spec);\n    this.attach(dataSourceResult.refs);\n    this._loadTasks = dataSourceResult.transforms;\n    this._isLoaded = false;\n\n    this.commit();\n    return this;\n  }\n\n  private setValues(data: any[]) {\n    this._values = array(data).map((entry, index) => {\n      const datum = entry === Object(entry) ? entry : { data: entry };\n      datum[this._dataIDKey] = index;\n      return datum;\n    });\n  }\n\n  field(field: string): any[] {\n    return this._values.map((value: any) => value[field]);\n  }\n\n  transform(transforms: TransformSpec[] | Nil): this {\n    const prevTransforms = parseTransformSpec(this.spec.transform, this.view);\n    if (prevTransforms) {\n      this.detach(prevTransforms.refs);\n      this.transforms = [];\n    }\n\n    this.spec.transform = transforms;\n\n    const nextTransforms = parseTransformSpec(this.spec.transform, this.view);\n    if (nextTransforms) {\n      this.attach(nextTransforms.refs);\n      this.transforms = nextTransforms.transforms;\n    }\n\n    this.commit();\n    return this;\n  }\n\n  getValue() {\n    return this._values;\n  }\n\n  getInput() {\n    return this._input;\n  }\n\n  addDataFilter(filter: IDataFilter | IDataFilter[]) {\n    this._postFilters = this._postFilters.concat(array(filter));\n    this._postFilters.sort((filterA, filterB) => (filterA.rank ?? 0) - (filterB.rank ?? 0));\n    return this;\n  }\n\n  removeDataFilter(filter: IDataFilter | IDataFilter[]) {\n    const filters = array(filter);\n    this._postFilters = this._postFilters.filter(filter => !filters.includes(filter));\n    return this;\n  }\n\n  private _evaluateFilter(value: any, parameters: any) {\n    return this._postFilters.reduce((result, filter) => {\n      return filter.filter(result, parameters);\n    }, value);\n  }\n\n  reuse(grammar: IGrammarBase) {\n    if (grammar.grammarType !== this.grammarType) {\n      return this;\n    }\n\n    this._isLoaded = false;\n    this._values = grammar.output();\n    return this;\n  }\n\n  clear() {\n    super.clear();\n    this._input = null;\n    this._values = null;\n  }\n}\n"]}