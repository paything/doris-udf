import type { ViewZoomOptions, IView, InteractionEvent, IScale, IData, IViewZoomMixin } from '../types';
import { ViewNavigationBase } from './view-navigation-base';
export interface ViewZoom extends Pick<IViewZoomMixin, 'formatZoomEvent' | 'handleZoomStart' | 'handleZoomEnd' | 'handleZoomReset' | 'updateZoomRange'>, ViewNavigationBase<ViewZoomOptions> {
}
export declare class ViewZoom extends ViewNavigationBase<ViewZoomOptions> {
    static type: string;
    type: string;
    static defaultOptions: ViewZoomOptions;
    protected _inited?: boolean;
    protected _lastScale: number;
    protected _scaleX: IScale;
    protected _scaleY: IScale;
    protected _data: IData;
    protected handleStart: (e: InteractionEvent) => void;
    protected _isStarted?: boolean;
    constructor(view: IView, option?: ViewZoomOptions);
    protected getEvents(): {
        type: "none" | import("../types").EventType;
        handler: (e: InteractionEvent) => void;
    }[];
    handleStartInner: (e: InteractionEvent) => void;
    handleEnd: (e: InteractionEvent) => void;
    handleReset: (e: InteractionEvent) => void;
}
