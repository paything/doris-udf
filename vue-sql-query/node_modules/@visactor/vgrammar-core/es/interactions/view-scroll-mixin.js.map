{"version":3,"sources":["../src/interactions/view-scroll-mixin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAQzC,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAE/C,MAAM,OAAO,eAAe;IAIhB,eAAe,CAAC,CAAmB;QAC3C,OAAO,CAAC,CAAC;IACX,CAAC;IAES,iBAAiB,CAAC,CAAmB;QAM7C,IAAI,CAAE,CAAS,CAAC,OAAO,IAAI,CAAE,CAAS,CAAC,MAAM,KAAK,CAAC,IAAK,CAAS,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;YAC9E,CAAS,CAAC,OAAO,GAAI,CAAS,CAAC,MAAM,CAAC;YACtC,CAAS,CAAC,OAAO,GAAI,CAAS,CAAC,MAAM,CAAC;YACvC,OAAO,CAAC,CAAC;SACV;QAED,OAAO,CAAC,CAAC;IACX,CAAC;IAED,iBAAiB,CAAC,CAAmB;QACnC,IAAI,CAAC,CAAC,EAAE;YACN,OAAO,CAAC,CAAC;SACV;QAED,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE;YACpB,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SAChC;QAED,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;YACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;SAClC;QAED,OAAO,CAAC,CAAC;IACX,CAAC;IAED,iBAAiB,CACf,CAAmB,EACnB,QAAoD,EACpD,aAAuC;QAEvC,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC,cAAc,EAAE,CAAC;QAEnB,IAAI,KAAK,CAAE,CAAS,CAAC,OAAO,CAAC,IAAI,KAAK,CAAE,CAAS,CAAC,OAAO,CAAC,EAAE;YAC1D,OAAO;SACR;QAED,IAAI,aAAa,IAAI,aAAa,CAAC,QAAQ,EAAE;YAC3C,OAAO,eAAe,CAAC,EAAE,CAAC,EAAG,CAAS,CAAC,OAAO,EAAE,CAAC,EAAG,CAAS,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;SACnG;QAED,IAAI,CAAC,KAAK,CAAE,CAAS,CAAC,OAAO,CAAC,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAS,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAI,CAAS,CAAC,OAAO,CAAC;SAChG;QAED,IAAI,CAAC,KAAK,CAAE,CAAS,CAAC,OAAO,CAAC,EAAE;YAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAE,CAAS,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAI,CAAS,CAAC,OAAO,CAAC;SAChG;IACH,CAAC;IAED,eAAe,CACb,CAAmB,EACnB,QAAoD,EACpD,aAAuC;QAIvC,IAAI,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,MAAK,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE;YACvF,MAAM,GAAG,GAAG,eAAe,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;YAC7F,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YAErB,OAAO,GAAG,CAAC;SACZ;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF","file":"view-scroll-mixin.js","sourcesContent":["import { isNil } from '@visactor/vutils';\nimport type {\n  InteractionEvent,\n  IViewScrollMixin,\n  ViewNavigationRange,\n  ViewScrollSimpleOptions,\n  ViewStateByDim\n} from '../types';\nimport { handleScrolling } from './view-utils';\n\nexport class ViewScrollMixin implements IViewScrollMixin {\n  protected _scrollX: number;\n  protected _scrollY: number;\n\n  protected formatPanScroll(e: InteractionEvent) {\n    return e;\n  }\n\n  protected formatWheelScroll(e: InteractionEvent) {\n    /**\n     * @see https://vega.github.io/vega/examples/zoomable-world-map/\n     * After testing, the ctrlKey field will only be true when the directions of the two fingers are inconsistent.\n     * Based on this, determine whether to trigger the scroll event.\n     */\n    if (!(e as any).ctrlKey && ((e as any).deltaY !== 0 || (e as any).deltaX !== 0)) {\n      (e as any).scrollX = (e as any).deltaX;\n      (e as any).scrollY = (e as any).deltaY;\n      return e;\n    }\n\n    return e;\n  }\n\n  formatScrollEvent(e: InteractionEvent) {\n    if (!e) {\n      return e;\n    }\n\n    if (e.type === 'pan') {\n      return this.formatPanScroll(e);\n    }\n\n    if (e.type === 'wheel') {\n      return this.formatWheelScroll(e);\n    }\n\n    return e;\n  }\n\n  handleScrollStart(\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    scrollOptions?: ViewScrollSimpleOptions\n  ): ViewNavigationRange {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (isNil((e as any).scrollX) && isNil((e as any).scrollY)) {\n      return;\n    }\n\n    if (scrollOptions && scrollOptions.realtime) {\n      return handleScrolling({ x: (e as any).scrollX, y: (e as any).scrollY }, navState, scrollOptions);\n    }\n\n    if (!isNil((e as any).scrollX)) {\n      this._scrollX = isNil(this._scrollX) ? (e as any).scrollX : this._scrollX + (e as any).scrollX;\n    }\n\n    if (!isNil((e as any).scrollY)) {\n      this._scrollY = isNil(this._scrollY) ? (e as any).scrollY : this._scrollY + (e as any).scrollY;\n    }\n  }\n\n  handleScrollEnd(\n    e: InteractionEvent,\n    navState: Partial<Record<'x' | 'y', ViewStateByDim>>,\n    scrollOptions?: ViewScrollSimpleOptions\n  ): ViewNavigationRange {\n    // do nothing now\n\n    if (scrollOptions?.realtime === false && (isNil(this._scrollX) || isNil(this._scrollY))) {\n      const res = handleScrolling({ x: this._scrollX, y: this._scrollY }, navState, scrollOptions);\n      this._scrollX = null;\n      this._scrollY = null;\n\n      return res;\n    }\n\n    return null;\n  }\n}\n"]}