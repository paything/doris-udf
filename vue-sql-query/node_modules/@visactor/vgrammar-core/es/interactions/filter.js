import { BaseInteraction } from "./base";

import { isString } from "@visactor/vutils";

export class FilterMixin {
    _filterData(data, source, filterRank, getFilterValue, filter, transform) {
        const dataGrammar = isString(data) ? this.view.getDataById(data) : data;
        return dataGrammar && (this.handleFilter = event => {
            const element = null == event ? void 0 : event.element;
            dataGrammar && (!source || element && element.mark === source) && (getFilterValue && (this._filterValue = getFilterValue(event)), 
            dataGrammar.commit(), this.view.run());
        }, this._dataFilter = {
            source: source ? `${source.uid}` : null,
            rank: filterRank,
            filter: data => {
                if (!this._filterValue) return data;
                const filteredData = filter ? data.filter((datum => filter(datum, this._filterValue))) : data;
                return transform ? transform(filteredData, this._filterValue) : filteredData;
            }
        }, dataGrammar.addDataFilter(this._dataFilter)), this;
    }
}

export class Filter extends BaseInteraction {
    constructor(view, options) {
        super(view, options), options.target && (this._data = isString(options.target.data) ? view.getDataById(options.target.data) : options.target.data);
    }
}

Filter.defaultOptions = {};
//# sourceMappingURL=filter.js.map