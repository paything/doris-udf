import { throttle } from "@visactor/vutils";

import { ViewNavigationBase } from "./view-navigation-base";

export class ViewDrag extends ViewNavigationBase {
    constructor(view, option) {
        super(view, Object.assign({}, ViewDrag.defaultOptions, option)), this.type = ViewDrag.type, 
        this.handleStart = e => {
            !e || this.options.shouldStart && !this.options.shouldStart(e) || (this._isStarted = !0, 
            this._inited || this._initGrammars(), this.updateView("start", this.handleDragStart(e, this._state, {
                reversed: this.options.reversed
            }), "drag", e));
        }, this.handleUpdateInner = e => {
            this._isStarted && e && (!this.options.shouldUpdate || this.options.shouldUpdate(e)) && this.updateView("update", this.handleDragUpdate(e, this._state, {
                reversed: this.options.reversed
            }), "drag", e);
        }, this.handleEnd = e => {
            this._isStarted && e && (!this.options.shouldEnd || this.options.shouldEnd(e)) && (this.updateView("end", this.handleDragEnd(e, this._state, {
                reversed: this.options.reversed
            }), "drag", e), this._isStarted = !1);
        }, this.handleUpdate = throttle(this.handleUpdateInner, this.options.throttle);
    }
    getEvents() {
        return [ {
            type: this.options.trigger,
            handler: this.handleStart
        }, {
            type: this.options.endTrigger,
            handler: this.handleEnd
        }, {
            type: this.options.updateTrigger,
            handler: this.handleUpdate
        } ];
    }
}

ViewDrag.type = "view-drag", ViewDrag.defaultOptions = {
    realtime: !0,
    reversed: !1,
    trigger: "pointerdown",
    updateTrigger: "pointermove",
    endTrigger: "pointerup",
    throttle: 100
};
//# sourceMappingURL=view-drag.js.map
