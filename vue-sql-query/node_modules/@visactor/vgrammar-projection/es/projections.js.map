{"version":3,"sources":["../src/projections.ts"],"names":[],"mappings":"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","file":"projections.js","sourcesContent":["/* Adapted from vega by University of Washington Interactive Data Lab\n * https://vega.github.io/vega/\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/vega/vega/blob/main/packages/vega-projection/src/projection.js\n * License: https://github.com/vega/vega/blob/main/LICENSE\n * @license\n */\n\nimport {\n  geoAlbers,\n  geoAlbersUsa,\n  geoAzimuthalEqualArea,\n  geoAzimuthalEquidistant,\n  geoConicConformal,\n  geoConicEqualArea,\n  geoConicEquidistant,\n  geoEqualEarth,\n  geoEquirectangular,\n  geoGnomonic,\n  geoIdentity,\n  geoMercator,\n  geoNaturalEarth1,\n  geoOrthographic,\n  geoStereographic,\n  geoTransverseMercator,\n  geoPath\n} from 'd3-geo';\nimport { error } from '@visactor/vgrammar-util';\nimport { isString } from '@visactor/vutils';\n\nconst defaultPath = geoPath();\n\nexport function getProjectionPath(proj: any) {\n  return (proj && proj.path) || defaultPath;\n}\n\nconst projections = {\n  // base d3-geo projection types\n};\n\nexport const projectionProperties = [\n  // standard properties in d3-geo\n  'clipAngle',\n  'clipExtent',\n  'scale',\n  'translate',\n  'center',\n  'rotate',\n  'precision',\n  'reflectX',\n  'reflectY',\n\n  // extended properties in d3-geo-projections\n  'parallels',\n  'coefficient',\n  'distance',\n  'fraction',\n  'lobes',\n  'parallel',\n  'radius',\n  'ratio',\n  'spacing',\n  'tilt'\n];\n\n/**\n * Augment projections with their type and a copy method.\n */\nfunction create(type: string, constructor: any) {\n  return function projectionGenerator() {\n    const p = constructor();\n\n    p.type = type;\n\n    p.path = geoPath().projection(p);\n\n    p.copy =\n      p.copy ||\n      function () {\n        const c = projectionGenerator();\n        projectionProperties.forEach(prop => {\n          if (p[prop]) {\n            c[prop](p[prop]());\n          }\n        });\n        c.path.pointRadius(p.path.pointRadius());\n        return c;\n      };\n\n    return p;\n  };\n}\n\nexport function projection(type: string, proj?: () => any) {\n  if (!type || !isString(type)) {\n    error('Projection type must be a name string.');\n  }\n  const projectionType = type.toLowerCase();\n  if (arguments.length > 1) {\n    projections[projectionType] = create(projectionType, proj);\n  }\n  return projections[projectionType] || null;\n}\n\nconst builtInProjections = {\n  albers: geoAlbers,\n  albersusa: geoAlbersUsa,\n  azimuthalequalarea: geoAzimuthalEqualArea,\n  azimuthalequidistant: geoAzimuthalEquidistant,\n  conicconformal: geoConicConformal,\n  conicequalarea: geoConicEqualArea,\n  conicequidistant: geoConicEquidistant,\n  equalEarth: geoEqualEarth,\n  equirectangular: geoEquirectangular,\n  gnomonic: geoGnomonic,\n  identity: geoIdentity,\n  mercator: geoMercator,\n  naturalEarth1: geoNaturalEarth1,\n  orthographic: geoOrthographic,\n  stereographic: geoStereographic,\n  transversemercator: geoTransverseMercator\n};\n\nObject.keys(builtInProjections).forEach((projectionType: string) => {\n  projection(projectionType, builtInProjections[projectionType]);\n});\n"]}