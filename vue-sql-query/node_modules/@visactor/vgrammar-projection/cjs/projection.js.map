{"version":3,"sources":["../src/projection.ts"],"names":[],"mappings":"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","file":"projection.js","sourcesContent":["/* Adapted from vega by University of Washington Interactive Data Lab\n * https://vega.github.io/vega/\n * Licensed under the BSD-3-Clause\n\n * url: https://github.com/vega/vega/blob/main/packages/vega-geo/src/Projection.js\n * License: https://github.com/vega/vega/blob/main/LICENSE\n * @license\n */\n\nimport { array, isFunction, isNil } from '@visactor/vutils';\nimport { error } from '@visactor/vgrammar-util';\nimport { projection, projectionProperties } from './projections';\nimport type {\n  IView,\n  IGrammarBase,\n  Nil,\n  FeatureCollectionData,\n  FeatureData,\n  IProjection,\n  ProjectionSpec\n} from '@visactor/vgrammar-core';\n// eslint-disable-next-line no-duplicate-imports\nimport { GrammarBase, parseFunctionType, invokeFunctionType } from '@visactor/vgrammar-core';\n\nconst Feature = 'Feature';\nconst FeatureCollection = 'FeatureCollection';\n\nfunction featurize(f: FeatureCollectionData | FeatureData) {\n  return f.type === FeatureCollection\n    ? f.features\n    : array(f)\n        .filter(d => !isNil(d))\n        .map(d => (d.type === Feature ? d : { type: Feature, geometry: d }));\n}\n\nexport function collectGeoJSON(data: any) {\n  const arrayData = array(data);\n  return arrayData.length === 1\n    ? arrayData[0]\n    : {\n        type: FeatureCollection,\n        features: arrayData.reduce((a, f) => a.concat(featurize(f)), [])\n      };\n}\n\nfunction create(type: string) {\n  const constructor = projection((type || 'mercator').toLowerCase());\n  if (!constructor) {\n    error('Unrecognized projection type: ' + type);\n  }\n  return constructor();\n}\n\nfunction set(proj: any, key: string, value: any) {\n  if (isFunction(proj[key])) {\n    proj[key](value);\n  }\n}\n\nconst projectionOptions = projectionProperties.concat(['pointRadius', 'fit', 'extent', 'size']);\n\nexport function parseProjection(spec: ProjectionSpec, view: IView) {\n  let refs: IGrammarBase[] = [];\n\n  if (!spec) {\n    return refs;\n  }\n\n  Object.keys(spec).forEach(key => {\n    if (projectionOptions.includes(key)) {\n      refs = refs.concat(parseFunctionType(spec[key], view));\n    }\n  });\n\n  return refs;\n}\n\nexport class Projection extends GrammarBase implements IProjection {\n  readonly grammarType = 'projection';\n\n  private projection: any;\n\n  constructor(view: IView) {\n    super(view);\n  }\n\n  parse(spec: ProjectionSpec) {\n    super.parse(spec);\n    this.pointRadius(spec.pointRadius);\n    this.size(spec.size);\n    this.extent(spec.extent);\n    this.fit(spec.fit);\n    this.configure(spec);\n\n    this.commit();\n\n    return this;\n  }\n\n  pointRadius(pointRadius: ProjectionSpec['pointRadius']) {\n    if (!isNil(this.spec.pointRadius)) {\n      this.detach(parseFunctionType(this.spec.pointRadius, this.view));\n    }\n    this.spec.pointRadius = pointRadius;\n    this.attach(parseFunctionType(pointRadius, this.view));\n    this.commit();\n    return this;\n  }\n\n  size(data: ProjectionSpec['size']) {\n    if (!isNil(this.spec.size)) {\n      this.detach(parseFunctionType(this.spec.size, this.view));\n    }\n    this.spec.size = data;\n    this.attach(parseFunctionType(data, this.view));\n    this.commit();\n    return this;\n  }\n\n  extent(data: ProjectionSpec['extent']) {\n    if (!isNil(this.spec.extent)) {\n      this.detach(parseFunctionType(this.spec.extent, this.view));\n    }\n    this.spec.extent = data;\n    this.attach(parseFunctionType(data, this.view));\n    this.commit();\n    return this;\n  }\n\n  fit(data: ProjectionSpec['fit']) {\n    if (!isNil(this.spec.fit)) {\n      this.detach(parseFunctionType(this.spec.fit, this.view));\n    }\n    this.spec.fit = data;\n    this.attach(parseFunctionType(data, this.view));\n    this.commit();\n    return this;\n  }\n\n  configure(config: Omit<ProjectionSpec, 'fit' | 'extent' | 'size' | 'pointRadius'> | Nil) {\n    this.detach(parseProjection(this.spec, this.view));\n\n    if (isNil(config)) {\n      this.spec = {\n        type: this.spec.type,\n        fit: this.spec.fit,\n        extent: this.spec.extent,\n        size: this.spec.size,\n        pointRadius: this.spec.pointRadius\n      };\n    } else {\n      Object.assign(this.spec, config);\n      this.attach(parseProjection(this.spec, this.view));\n    }\n    this.commit();\n    return this;\n  }\n\n  evaluate(upstream: any, parameters: any) {\n    if (!this.projection || this.projection.type !== this.spec.type) {\n      this.projection = create(this.spec.type);\n      this.projection.type = this.spec.type;\n    }\n    projectionProperties.forEach(prop => {\n      if (!isNil(this.spec[prop])) {\n        set(this.projection, prop, invokeFunctionType(this.spec[prop], parameters, projection));\n      }\n    });\n\n    if (!isNil(this.spec.pointRadius)) {\n      this.projection.path.pointRadius(invokeFunctionType(this.spec.pointRadius, parameters, projection));\n    }\n    if (!isNil(this.spec.fit) && (!isNil(this.spec.extent) || !isNil(this.spec.size))) {\n      const fit = invokeFunctionType(this.spec.fit, parameters, projection);\n      const data = collectGeoJSON(fit);\n\n      if (this.spec.extent) {\n        this.projection.fitExtent(invokeFunctionType(this.spec.extent, parameters, projection), data);\n      } else if (this.spec.size) {\n        this.projection.fitSize(invokeFunctionType(this.spec.size, parameters, projection), data);\n      }\n    }\n\n    return this.projection;\n  }\n\n  output() {\n    return this.projection;\n  }\n}\n"]}