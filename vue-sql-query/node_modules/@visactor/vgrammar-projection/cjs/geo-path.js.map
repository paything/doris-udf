{"version":3,"sources":["../src/geo-path.ts"],"names":[],"mappings":";;;AAAA,2DAA8E;AAC9E,6CAAyC;AACzC,+CAAkD;AAGlD,SAAS,QAAQ,CAAC,IAAa,EAAE,WAAmB;IAClD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAChC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACnB,IAAI,CAAC,IAAA,cAAK,EAAC,WAAW,CAAC,EAAE;QACvB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;KAC/B;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,MAAM,SAAS,GAAG,CACvB,OAKC,EACD,YAAmB,EACnB,EAAE;IACF,MAAM,KAAK,GAAG,IAAA,cAAK,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,wBAAQ,CAAC,CAAC,CAAC,IAAA,qBAAgB,EAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChF,MAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,MAAM,IAAI,GAAG,IAAA,+BAAiB,EAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAEnD,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;IACjD,IAAI,MAAM,GAAG,YAAY,CAAC;IAE1B,IAAI,IAAA,cAAK,EAAC,EAAE,CAAC,EAAE;QACb,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC3B,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;KACJ;IAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAEvB,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AA7BW,QAAA,SAAS,aA6BpB","file":"geo-path.js","sourcesContent":["import { identity, field as getFieldAccessor } from '@visactor/vgrammar-util';\nimport { isNil } from '@visactor/vutils';\nimport { getProjectionPath } from './projections';\nimport type { GeoPath, GeoProjection } from 'd3-geo';\n\nfunction initPath(path: GeoPath, pointRadius: number) {\n  const prev = path.pointRadius();\n  path.context(null);\n  if (!isNil(pointRadius)) {\n    path.pointRadius(pointRadius);\n  }\n  return prev;\n}\n\nexport const transform = (\n  options: {\n    field?: string;\n    as?: string;\n    projection?: GeoProjection;\n    pointRadius?: number;\n  },\n  upstreamData: any[]\n) => {\n  const field = isNil(options.field) ? identity : getFieldAccessor(options.field);\n  const as = options.as;\n  const path = getProjectionPath(options.projection);\n\n  const prev = initPath(path, options.pointRadius);\n  let output = upstreamData;\n\n  if (isNil(as)) {\n    output = upstreamData.map(entry => {\n      return path(field(entry));\n    });\n  } else {\n    upstreamData.forEach(entry => {\n      entry[as] = path(field(entry));\n    });\n  }\n\n  path.pointRadius(prev);\n\n  return output;\n};\n"]}